                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Fri Apr 03 09:46:29 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module lab3_3compass
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _PCA_ISR
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _vsprintf
                                     20 	.globl _printf
                                     21 	.globl _BUS_SCL
                                     22 	.globl _BUS_TOE
                                     23 	.globl _BUS_FTE
                                     24 	.globl _BUS_AA
                                     25 	.globl _BUS_INT
                                     26 	.globl _BUS_STOP
                                     27 	.globl _BUS_START
                                     28 	.globl _BUS_EN
                                     29 	.globl _BUS_BUSY
                                     30 	.globl _SPIF
                                     31 	.globl _WCOL
                                     32 	.globl _MODF
                                     33 	.globl _RXOVRN
                                     34 	.globl _TXBSY
                                     35 	.globl _SLVSEL
                                     36 	.globl _MSTEN
                                     37 	.globl _SPIEN
                                     38 	.globl _AD0EN
                                     39 	.globl _ADCEN
                                     40 	.globl _AD0TM
                                     41 	.globl _ADCTM
                                     42 	.globl _AD0INT
                                     43 	.globl _ADCINT
                                     44 	.globl _AD0BUSY
                                     45 	.globl _ADBUSY
                                     46 	.globl _AD0CM1
                                     47 	.globl _ADSTM1
                                     48 	.globl _AD0CM0
                                     49 	.globl _ADSTM0
                                     50 	.globl _AD0WINT
                                     51 	.globl _ADWINT
                                     52 	.globl _AD0LJST
                                     53 	.globl _ADLJST
                                     54 	.globl _CF
                                     55 	.globl _CR
                                     56 	.globl _CCF4
                                     57 	.globl _CCF3
                                     58 	.globl _CCF2
                                     59 	.globl _CCF1
                                     60 	.globl _CCF0
                                     61 	.globl _CY
                                     62 	.globl _AC
                                     63 	.globl _F0
                                     64 	.globl _RS1
                                     65 	.globl _RS0
                                     66 	.globl _OV
                                     67 	.globl _F1
                                     68 	.globl _P
                                     69 	.globl _TF2
                                     70 	.globl _EXF2
                                     71 	.globl _RCLK
                                     72 	.globl _TCLK
                                     73 	.globl _EXEN2
                                     74 	.globl _TR2
                                     75 	.globl _CT2
                                     76 	.globl _CPRL2
                                     77 	.globl _BUSY
                                     78 	.globl _ENSMB
                                     79 	.globl _STA
                                     80 	.globl _STO
                                     81 	.globl _SI
                                     82 	.globl _AA
                                     83 	.globl _SMBFTE
                                     84 	.globl _SMBTOE
                                     85 	.globl _PT2
                                     86 	.globl _PS
                                     87 	.globl _PS0
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _P3_7
                                     93 	.globl _P3_6
                                     94 	.globl _P3_5
                                     95 	.globl _P3_4
                                     96 	.globl _P3_3
                                     97 	.globl _P3_2
                                     98 	.globl _P3_1
                                     99 	.globl _P3_0
                                    100 	.globl _EA
                                    101 	.globl _ET2
                                    102 	.globl _ES
                                    103 	.globl _ES0
                                    104 	.globl _ET1
                                    105 	.globl _EX1
                                    106 	.globl _ET0
                                    107 	.globl _EX0
                                    108 	.globl _P2_7
                                    109 	.globl _P2_6
                                    110 	.globl _P2_5
                                    111 	.globl _P2_4
                                    112 	.globl _P2_3
                                    113 	.globl _P2_2
                                    114 	.globl _P2_1
                                    115 	.globl _P2_0
                                    116 	.globl _S0MODE
                                    117 	.globl _SM00
                                    118 	.globl _SM0
                                    119 	.globl _SM10
                                    120 	.globl _SM1
                                    121 	.globl _MCE0
                                    122 	.globl _SM20
                                    123 	.globl _SM2
                                    124 	.globl _REN0
                                    125 	.globl _REN
                                    126 	.globl _TB80
                                    127 	.globl _TB8
                                    128 	.globl _RB80
                                    129 	.globl _RB8
                                    130 	.globl _TI0
                                    131 	.globl _TI
                                    132 	.globl _RI0
                                    133 	.globl _RI
                                    134 	.globl _P1_7
                                    135 	.globl _P1_6
                                    136 	.globl _P1_5
                                    137 	.globl _P1_4
                                    138 	.globl _P1_3
                                    139 	.globl _P1_2
                                    140 	.globl _P1_1
                                    141 	.globl _P1_0
                                    142 	.globl _TF1
                                    143 	.globl _TR1
                                    144 	.globl _TF0
                                    145 	.globl _TR0
                                    146 	.globl _IE1
                                    147 	.globl _IT1
                                    148 	.globl _IE0
                                    149 	.globl _IT0
                                    150 	.globl _P0_7
                                    151 	.globl _P0_6
                                    152 	.globl _P0_5
                                    153 	.globl _P0_4
                                    154 	.globl _P0_3
                                    155 	.globl _P0_2
                                    156 	.globl _P0_1
                                    157 	.globl _P0_0
                                    158 	.globl _PCA0CP4
                                    159 	.globl _PCA0CP3
                                    160 	.globl _PCA0CP2
                                    161 	.globl _PCA0CP1
                                    162 	.globl _PCA0CP0
                                    163 	.globl _PCA0
                                    164 	.globl _DAC1
                                    165 	.globl _DAC0
                                    166 	.globl _ADC0LT
                                    167 	.globl _ADC0GT
                                    168 	.globl _ADC0
                                    169 	.globl _RCAP4
                                    170 	.globl _TMR4
                                    171 	.globl _TMR3RL
                                    172 	.globl _TMR3
                                    173 	.globl _RCAP2
                                    174 	.globl _TMR2
                                    175 	.globl _TMR1
                                    176 	.globl _TMR0
                                    177 	.globl _WDTCN
                                    178 	.globl _PCA0CPH4
                                    179 	.globl _PCA0CPH3
                                    180 	.globl _PCA0CPH2
                                    181 	.globl _PCA0CPH1
                                    182 	.globl _PCA0CPH0
                                    183 	.globl _PCA0H
                                    184 	.globl _SPI0CN
                                    185 	.globl _EIP2
                                    186 	.globl _EIP1
                                    187 	.globl _TH4
                                    188 	.globl _TL4
                                    189 	.globl _SADDR1
                                    190 	.globl _SBUF1
                                    191 	.globl _SCON1
                                    192 	.globl _B
                                    193 	.globl _RSTSRC
                                    194 	.globl _PCA0CPL4
                                    195 	.globl _PCA0CPL3
                                    196 	.globl _PCA0CPL2
                                    197 	.globl _PCA0CPL1
                                    198 	.globl _PCA0CPL0
                                    199 	.globl _PCA0L
                                    200 	.globl _ADC0CN
                                    201 	.globl _EIE2
                                    202 	.globl _EIE1
                                    203 	.globl _RCAP4H
                                    204 	.globl _RCAP4L
                                    205 	.globl _XBR2
                                    206 	.globl _XBR1
                                    207 	.globl _XBR0
                                    208 	.globl _ACC
                                    209 	.globl _PCA0CPM4
                                    210 	.globl _PCA0CPM3
                                    211 	.globl _PCA0CPM2
                                    212 	.globl _PCA0CPM1
                                    213 	.globl _PCA0CPM0
                                    214 	.globl _PCA0MD
                                    215 	.globl _PCA0CN
                                    216 	.globl _DAC1CN
                                    217 	.globl _DAC1H
                                    218 	.globl _DAC1L
                                    219 	.globl _DAC0CN
                                    220 	.globl _DAC0H
                                    221 	.globl _DAC0L
                                    222 	.globl _REF0CN
                                    223 	.globl _PSW
                                    224 	.globl _SMB0CR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T4CON
                                    230 	.globl _T2CON
                                    231 	.globl _ADC0LTH
                                    232 	.globl _ADC0LTL
                                    233 	.globl _ADC0GTH
                                    234 	.globl _ADC0GTL
                                    235 	.globl _SMB0ADR
                                    236 	.globl _SMB0DAT
                                    237 	.globl _SMB0STA
                                    238 	.globl _SMB0CN
                                    239 	.globl _ADC0H
                                    240 	.globl _ADC0L
                                    241 	.globl _P1MDIN
                                    242 	.globl _ADC0CF
                                    243 	.globl _AMX0SL
                                    244 	.globl _AMX0CF
                                    245 	.globl _SADEN0
                                    246 	.globl _IP
                                    247 	.globl _FLACL
                                    248 	.globl _FLSCL
                                    249 	.globl _P74OUT
                                    250 	.globl _OSCICN
                                    251 	.globl _OSCXCN
                                    252 	.globl _P3
                                    253 	.globl __XPAGE
                                    254 	.globl _EMI0CN
                                    255 	.globl _SADEN1
                                    256 	.globl _P3IF
                                    257 	.globl _AMX1SL
                                    258 	.globl _ADC1CF
                                    259 	.globl _ADC1CN
                                    260 	.globl _SADDR0
                                    261 	.globl _IE
                                    262 	.globl _P3MDOUT
                                    263 	.globl _PRT3CF
                                    264 	.globl _P2MDOUT
                                    265 	.globl _PRT2CF
                                    266 	.globl _P1MDOUT
                                    267 	.globl _PRT1CF
                                    268 	.globl _P0MDOUT
                                    269 	.globl _PRT0CF
                                    270 	.globl _EMI0CF
                                    271 	.globl _EMI0TC
                                    272 	.globl _P2
                                    273 	.globl _CPT1CN
                                    274 	.globl _CPT0CN
                                    275 	.globl _SPI0CKR
                                    276 	.globl _ADC1
                                    277 	.globl _SPI0DAT
                                    278 	.globl _SPI0CFG
                                    279 	.globl _SBUF0
                                    280 	.globl _SBUF
                                    281 	.globl _SCON0
                                    282 	.globl _SCON
                                    283 	.globl _P7
                                    284 	.globl _TMR3H
                                    285 	.globl _TMR3L
                                    286 	.globl _TMR3RLH
                                    287 	.globl _TMR3RLL
                                    288 	.globl _TMR3CN
                                    289 	.globl _P1
                                    290 	.globl _PSCTL
                                    291 	.globl _CKCON
                                    292 	.globl _TH1
                                    293 	.globl _TH0
                                    294 	.globl _TL1
                                    295 	.globl _TL0
                                    296 	.globl _TMOD
                                    297 	.globl _TCON
                                    298 	.globl _PCON
                                    299 	.globl _P6
                                    300 	.globl _P5
                                    301 	.globl _P4
                                    302 	.globl _DPH
                                    303 	.globl _DPL
                                    304 	.globl _SP
                                    305 	.globl _P0
                                    306 	.globl _offset
                                    307 	.globl _error
                                    308 	.globl _desired_heading
                                    309 	.globl _actual_heading
                                    310 	.globl _input
                                    311 	.globl _count
                                    312 	.globl _STR_PW
                                    313 	.globl _tmp0_lo_to_hi
                                    314 	.globl _i2c_read_data_PARM_4
                                    315 	.globl _i2c_read_data_PARM_3
                                    316 	.globl _i2c_read_data_PARM_2
                                    317 	.globl _i2c_write_data_PARM_4
                                    318 	.globl _i2c_write_data_PARM_3
                                    319 	.globl _i2c_write_data_PARM_2
                                    320 	.globl _putchar
                                    321 	.globl _getchar
                                    322 	.globl _lcd_print
                                    323 	.globl _lcd_clear
                                    324 	.globl _kpd_input
                                    325 	.globl _delay_time
                                    326 	.globl _i2c_start
                                    327 	.globl _i2c_write
                                    328 	.globl _i2c_write_and_stop
                                    329 	.globl _i2c_read
                                    330 	.globl _i2c_read_and_stop
                                    331 	.globl _i2c_write_data
                                    332 	.globl _i2c_read_data
                                    333 	.globl _Accel_Init
                                    334 	.globl _Port_Init
                                    335 	.globl _ReadCompass
                                    336 	.globl _XBR0_Init
                                    337 	.globl _SMB_Init
                                    338 	.globl _PCA_Init
                                    339 	.globl _Steering_Servo
                                    340 ;--------------------------------------------------------
                                    341 ; special function registers
                                    342 ;--------------------------------------------------------
                                    343 	.area RSEG    (ABS,DATA)
      000000                        344 	.org 0x0000
                           000080   345 G$P0$0$0 == 0x0080
                           000080   346 _P0	=	0x0080
                           000081   347 G$SP$0$0 == 0x0081
                           000081   348 _SP	=	0x0081
                           000082   349 G$DPL$0$0 == 0x0082
                           000082   350 _DPL	=	0x0082
                           000083   351 G$DPH$0$0 == 0x0083
                           000083   352 _DPH	=	0x0083
                           000084   353 G$P4$0$0 == 0x0084
                           000084   354 _P4	=	0x0084
                           000085   355 G$P5$0$0 == 0x0085
                           000085   356 _P5	=	0x0085
                           000086   357 G$P6$0$0 == 0x0086
                           000086   358 _P6	=	0x0086
                           000087   359 G$PCON$0$0 == 0x0087
                           000087   360 _PCON	=	0x0087
                           000088   361 G$TCON$0$0 == 0x0088
                           000088   362 _TCON	=	0x0088
                           000089   363 G$TMOD$0$0 == 0x0089
                           000089   364 _TMOD	=	0x0089
                           00008A   365 G$TL0$0$0 == 0x008a
                           00008A   366 _TL0	=	0x008a
                           00008B   367 G$TL1$0$0 == 0x008b
                           00008B   368 _TL1	=	0x008b
                           00008C   369 G$TH0$0$0 == 0x008c
                           00008C   370 _TH0	=	0x008c
                           00008D   371 G$TH1$0$0 == 0x008d
                           00008D   372 _TH1	=	0x008d
                           00008E   373 G$CKCON$0$0 == 0x008e
                           00008E   374 _CKCON	=	0x008e
                           00008F   375 G$PSCTL$0$0 == 0x008f
                           00008F   376 _PSCTL	=	0x008f
                           000090   377 G$P1$0$0 == 0x0090
                           000090   378 _P1	=	0x0090
                           000091   379 G$TMR3CN$0$0 == 0x0091
                           000091   380 _TMR3CN	=	0x0091
                           000092   381 G$TMR3RLL$0$0 == 0x0092
                           000092   382 _TMR3RLL	=	0x0092
                           000093   383 G$TMR3RLH$0$0 == 0x0093
                           000093   384 _TMR3RLH	=	0x0093
                           000094   385 G$TMR3L$0$0 == 0x0094
                           000094   386 _TMR3L	=	0x0094
                           000095   387 G$TMR3H$0$0 == 0x0095
                           000095   388 _TMR3H	=	0x0095
                           000096   389 G$P7$0$0 == 0x0096
                           000096   390 _P7	=	0x0096
                           000098   391 G$SCON$0$0 == 0x0098
                           000098   392 _SCON	=	0x0098
                           000098   393 G$SCON0$0$0 == 0x0098
                           000098   394 _SCON0	=	0x0098
                           000099   395 G$SBUF$0$0 == 0x0099
                           000099   396 _SBUF	=	0x0099
                           000099   397 G$SBUF0$0$0 == 0x0099
                           000099   398 _SBUF0	=	0x0099
                           00009A   399 G$SPI0CFG$0$0 == 0x009a
                           00009A   400 _SPI0CFG	=	0x009a
                           00009B   401 G$SPI0DAT$0$0 == 0x009b
                           00009B   402 _SPI0DAT	=	0x009b
                           00009C   403 G$ADC1$0$0 == 0x009c
                           00009C   404 _ADC1	=	0x009c
                           00009D   405 G$SPI0CKR$0$0 == 0x009d
                           00009D   406 _SPI0CKR	=	0x009d
                           00009E   407 G$CPT0CN$0$0 == 0x009e
                           00009E   408 _CPT0CN	=	0x009e
                           00009F   409 G$CPT1CN$0$0 == 0x009f
                           00009F   410 _CPT1CN	=	0x009f
                           0000A0   411 G$P2$0$0 == 0x00a0
                           0000A0   412 _P2	=	0x00a0
                           0000A1   413 G$EMI0TC$0$0 == 0x00a1
                           0000A1   414 _EMI0TC	=	0x00a1
                           0000A3   415 G$EMI0CF$0$0 == 0x00a3
                           0000A3   416 _EMI0CF	=	0x00a3
                           0000A4   417 G$PRT0CF$0$0 == 0x00a4
                           0000A4   418 _PRT0CF	=	0x00a4
                           0000A4   419 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   420 _P0MDOUT	=	0x00a4
                           0000A5   421 G$PRT1CF$0$0 == 0x00a5
                           0000A5   422 _PRT1CF	=	0x00a5
                           0000A5   423 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   424 _P1MDOUT	=	0x00a5
                           0000A6   425 G$PRT2CF$0$0 == 0x00a6
                           0000A6   426 _PRT2CF	=	0x00a6
                           0000A6   427 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   428 _P2MDOUT	=	0x00a6
                           0000A7   429 G$PRT3CF$0$0 == 0x00a7
                           0000A7   430 _PRT3CF	=	0x00a7
                           0000A7   431 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   432 _P3MDOUT	=	0x00a7
                           0000A8   433 G$IE$0$0 == 0x00a8
                           0000A8   434 _IE	=	0x00a8
                           0000A9   435 G$SADDR0$0$0 == 0x00a9
                           0000A9   436 _SADDR0	=	0x00a9
                           0000AA   437 G$ADC1CN$0$0 == 0x00aa
                           0000AA   438 _ADC1CN	=	0x00aa
                           0000AB   439 G$ADC1CF$0$0 == 0x00ab
                           0000AB   440 _ADC1CF	=	0x00ab
                           0000AC   441 G$AMX1SL$0$0 == 0x00ac
                           0000AC   442 _AMX1SL	=	0x00ac
                           0000AD   443 G$P3IF$0$0 == 0x00ad
                           0000AD   444 _P3IF	=	0x00ad
                           0000AE   445 G$SADEN1$0$0 == 0x00ae
                           0000AE   446 _SADEN1	=	0x00ae
                           0000AF   447 G$EMI0CN$0$0 == 0x00af
                           0000AF   448 _EMI0CN	=	0x00af
                           0000AF   449 G$_XPAGE$0$0 == 0x00af
                           0000AF   450 __XPAGE	=	0x00af
                           0000B0   451 G$P3$0$0 == 0x00b0
                           0000B0   452 _P3	=	0x00b0
                           0000B1   453 G$OSCXCN$0$0 == 0x00b1
                           0000B1   454 _OSCXCN	=	0x00b1
                           0000B2   455 G$OSCICN$0$0 == 0x00b2
                           0000B2   456 _OSCICN	=	0x00b2
                           0000B5   457 G$P74OUT$0$0 == 0x00b5
                           0000B5   458 _P74OUT	=	0x00b5
                           0000B6   459 G$FLSCL$0$0 == 0x00b6
                           0000B6   460 _FLSCL	=	0x00b6
                           0000B7   461 G$FLACL$0$0 == 0x00b7
                           0000B7   462 _FLACL	=	0x00b7
                           0000B8   463 G$IP$0$0 == 0x00b8
                           0000B8   464 _IP	=	0x00b8
                           0000B9   465 G$SADEN0$0$0 == 0x00b9
                           0000B9   466 _SADEN0	=	0x00b9
                           0000BA   467 G$AMX0CF$0$0 == 0x00ba
                           0000BA   468 _AMX0CF	=	0x00ba
                           0000BB   469 G$AMX0SL$0$0 == 0x00bb
                           0000BB   470 _AMX0SL	=	0x00bb
                           0000BC   471 G$ADC0CF$0$0 == 0x00bc
                           0000BC   472 _ADC0CF	=	0x00bc
                           0000BD   473 G$P1MDIN$0$0 == 0x00bd
                           0000BD   474 _P1MDIN	=	0x00bd
                           0000BE   475 G$ADC0L$0$0 == 0x00be
                           0000BE   476 _ADC0L	=	0x00be
                           0000BF   477 G$ADC0H$0$0 == 0x00bf
                           0000BF   478 _ADC0H	=	0x00bf
                           0000C0   479 G$SMB0CN$0$0 == 0x00c0
                           0000C0   480 _SMB0CN	=	0x00c0
                           0000C1   481 G$SMB0STA$0$0 == 0x00c1
                           0000C1   482 _SMB0STA	=	0x00c1
                           0000C2   483 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   484 _SMB0DAT	=	0x00c2
                           0000C3   485 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   486 _SMB0ADR	=	0x00c3
                           0000C4   487 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   488 _ADC0GTL	=	0x00c4
                           0000C5   489 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   490 _ADC0GTH	=	0x00c5
                           0000C6   491 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   492 _ADC0LTL	=	0x00c6
                           0000C7   493 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   494 _ADC0LTH	=	0x00c7
                           0000C8   495 G$T2CON$0$0 == 0x00c8
                           0000C8   496 _T2CON	=	0x00c8
                           0000C9   497 G$T4CON$0$0 == 0x00c9
                           0000C9   498 _T4CON	=	0x00c9
                           0000CA   499 G$RCAP2L$0$0 == 0x00ca
                           0000CA   500 _RCAP2L	=	0x00ca
                           0000CB   501 G$RCAP2H$0$0 == 0x00cb
                           0000CB   502 _RCAP2H	=	0x00cb
                           0000CC   503 G$TL2$0$0 == 0x00cc
                           0000CC   504 _TL2	=	0x00cc
                           0000CD   505 G$TH2$0$0 == 0x00cd
                           0000CD   506 _TH2	=	0x00cd
                           0000CF   507 G$SMB0CR$0$0 == 0x00cf
                           0000CF   508 _SMB0CR	=	0x00cf
                           0000D0   509 G$PSW$0$0 == 0x00d0
                           0000D0   510 _PSW	=	0x00d0
                           0000D1   511 G$REF0CN$0$0 == 0x00d1
                           0000D1   512 _REF0CN	=	0x00d1
                           0000D2   513 G$DAC0L$0$0 == 0x00d2
                           0000D2   514 _DAC0L	=	0x00d2
                           0000D3   515 G$DAC0H$0$0 == 0x00d3
                           0000D3   516 _DAC0H	=	0x00d3
                           0000D4   517 G$DAC0CN$0$0 == 0x00d4
                           0000D4   518 _DAC0CN	=	0x00d4
                           0000D5   519 G$DAC1L$0$0 == 0x00d5
                           0000D5   520 _DAC1L	=	0x00d5
                           0000D6   521 G$DAC1H$0$0 == 0x00d6
                           0000D6   522 _DAC1H	=	0x00d6
                           0000D7   523 G$DAC1CN$0$0 == 0x00d7
                           0000D7   524 _DAC1CN	=	0x00d7
                           0000D8   525 G$PCA0CN$0$0 == 0x00d8
                           0000D8   526 _PCA0CN	=	0x00d8
                           0000D9   527 G$PCA0MD$0$0 == 0x00d9
                           0000D9   528 _PCA0MD	=	0x00d9
                           0000DA   529 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   530 _PCA0CPM0	=	0x00da
                           0000DB   531 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   532 _PCA0CPM1	=	0x00db
                           0000DC   533 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   534 _PCA0CPM2	=	0x00dc
                           0000DD   535 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   536 _PCA0CPM3	=	0x00dd
                           0000DE   537 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   538 _PCA0CPM4	=	0x00de
                           0000E0   539 G$ACC$0$0 == 0x00e0
                           0000E0   540 _ACC	=	0x00e0
                           0000E1   541 G$XBR0$0$0 == 0x00e1
                           0000E1   542 _XBR0	=	0x00e1
                           0000E2   543 G$XBR1$0$0 == 0x00e2
                           0000E2   544 _XBR1	=	0x00e2
                           0000E3   545 G$XBR2$0$0 == 0x00e3
                           0000E3   546 _XBR2	=	0x00e3
                           0000E4   547 G$RCAP4L$0$0 == 0x00e4
                           0000E4   548 _RCAP4L	=	0x00e4
                           0000E5   549 G$RCAP4H$0$0 == 0x00e5
                           0000E5   550 _RCAP4H	=	0x00e5
                           0000E6   551 G$EIE1$0$0 == 0x00e6
                           0000E6   552 _EIE1	=	0x00e6
                           0000E7   553 G$EIE2$0$0 == 0x00e7
                           0000E7   554 _EIE2	=	0x00e7
                           0000E8   555 G$ADC0CN$0$0 == 0x00e8
                           0000E8   556 _ADC0CN	=	0x00e8
                           0000E9   557 G$PCA0L$0$0 == 0x00e9
                           0000E9   558 _PCA0L	=	0x00e9
                           0000EA   559 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   560 _PCA0CPL0	=	0x00ea
                           0000EB   561 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   562 _PCA0CPL1	=	0x00eb
                           0000EC   563 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   564 _PCA0CPL2	=	0x00ec
                           0000ED   565 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   566 _PCA0CPL3	=	0x00ed
                           0000EE   567 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   568 _PCA0CPL4	=	0x00ee
                           0000EF   569 G$RSTSRC$0$0 == 0x00ef
                           0000EF   570 _RSTSRC	=	0x00ef
                           0000F0   571 G$B$0$0 == 0x00f0
                           0000F0   572 _B	=	0x00f0
                           0000F1   573 G$SCON1$0$0 == 0x00f1
                           0000F1   574 _SCON1	=	0x00f1
                           0000F2   575 G$SBUF1$0$0 == 0x00f2
                           0000F2   576 _SBUF1	=	0x00f2
                           0000F3   577 G$SADDR1$0$0 == 0x00f3
                           0000F3   578 _SADDR1	=	0x00f3
                           0000F4   579 G$TL4$0$0 == 0x00f4
                           0000F4   580 _TL4	=	0x00f4
                           0000F5   581 G$TH4$0$0 == 0x00f5
                           0000F5   582 _TH4	=	0x00f5
                           0000F6   583 G$EIP1$0$0 == 0x00f6
                           0000F6   584 _EIP1	=	0x00f6
                           0000F7   585 G$EIP2$0$0 == 0x00f7
                           0000F7   586 _EIP2	=	0x00f7
                           0000F8   587 G$SPI0CN$0$0 == 0x00f8
                           0000F8   588 _SPI0CN	=	0x00f8
                           0000F9   589 G$PCA0H$0$0 == 0x00f9
                           0000F9   590 _PCA0H	=	0x00f9
                           0000FA   591 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   592 _PCA0CPH0	=	0x00fa
                           0000FB   593 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   594 _PCA0CPH1	=	0x00fb
                           0000FC   595 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   596 _PCA0CPH2	=	0x00fc
                           0000FD   597 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   598 _PCA0CPH3	=	0x00fd
                           0000FE   599 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   600 _PCA0CPH4	=	0x00fe
                           0000FF   601 G$WDTCN$0$0 == 0x00ff
                           0000FF   602 _WDTCN	=	0x00ff
                           008C8A   603 G$TMR0$0$0 == 0x8c8a
                           008C8A   604 _TMR0	=	0x8c8a
                           008D8B   605 G$TMR1$0$0 == 0x8d8b
                           008D8B   606 _TMR1	=	0x8d8b
                           00CDCC   607 G$TMR2$0$0 == 0xcdcc
                           00CDCC   608 _TMR2	=	0xcdcc
                           00CBCA   609 G$RCAP2$0$0 == 0xcbca
                           00CBCA   610 _RCAP2	=	0xcbca
                           009594   611 G$TMR3$0$0 == 0x9594
                           009594   612 _TMR3	=	0x9594
                           009392   613 G$TMR3RL$0$0 == 0x9392
                           009392   614 _TMR3RL	=	0x9392
                           00F5F4   615 G$TMR4$0$0 == 0xf5f4
                           00F5F4   616 _TMR4	=	0xf5f4
                           00E5E4   617 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   618 _RCAP4	=	0xe5e4
                           00BFBE   619 G$ADC0$0$0 == 0xbfbe
                           00BFBE   620 _ADC0	=	0xbfbe
                           00C5C4   621 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   622 _ADC0GT	=	0xc5c4
                           00C7C6   623 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   624 _ADC0LT	=	0xc7c6
                           00D3D2   625 G$DAC0$0$0 == 0xd3d2
                           00D3D2   626 _DAC0	=	0xd3d2
                           00D6D5   627 G$DAC1$0$0 == 0xd6d5
                           00D6D5   628 _DAC1	=	0xd6d5
                           00F9E9   629 G$PCA0$0$0 == 0xf9e9
                           00F9E9   630 _PCA0	=	0xf9e9
                           00FAEA   631 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   632 _PCA0CP0	=	0xfaea
                           00FBEB   633 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   634 _PCA0CP1	=	0xfbeb
                           00FCEC   635 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   636 _PCA0CP2	=	0xfcec
                           00FDED   637 G$PCA0CP3$0$0 == 0xfded
                           00FDED   638 _PCA0CP3	=	0xfded
                           00FEEE   639 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   640 _PCA0CP4	=	0xfeee
                                    641 ;--------------------------------------------------------
                                    642 ; special function bits
                                    643 ;--------------------------------------------------------
                                    644 	.area RSEG    (ABS,DATA)
      000000                        645 	.org 0x0000
                           000080   646 G$P0_0$0$0 == 0x0080
                           000080   647 _P0_0	=	0x0080
                           000081   648 G$P0_1$0$0 == 0x0081
                           000081   649 _P0_1	=	0x0081
                           000082   650 G$P0_2$0$0 == 0x0082
                           000082   651 _P0_2	=	0x0082
                           000083   652 G$P0_3$0$0 == 0x0083
                           000083   653 _P0_3	=	0x0083
                           000084   654 G$P0_4$0$0 == 0x0084
                           000084   655 _P0_4	=	0x0084
                           000085   656 G$P0_5$0$0 == 0x0085
                           000085   657 _P0_5	=	0x0085
                           000086   658 G$P0_6$0$0 == 0x0086
                           000086   659 _P0_6	=	0x0086
                           000087   660 G$P0_7$0$0 == 0x0087
                           000087   661 _P0_7	=	0x0087
                           000088   662 G$IT0$0$0 == 0x0088
                           000088   663 _IT0	=	0x0088
                           000089   664 G$IE0$0$0 == 0x0089
                           000089   665 _IE0	=	0x0089
                           00008A   666 G$IT1$0$0 == 0x008a
                           00008A   667 _IT1	=	0x008a
                           00008B   668 G$IE1$0$0 == 0x008b
                           00008B   669 _IE1	=	0x008b
                           00008C   670 G$TR0$0$0 == 0x008c
                           00008C   671 _TR0	=	0x008c
                           00008D   672 G$TF0$0$0 == 0x008d
                           00008D   673 _TF0	=	0x008d
                           00008E   674 G$TR1$0$0 == 0x008e
                           00008E   675 _TR1	=	0x008e
                           00008F   676 G$TF1$0$0 == 0x008f
                           00008F   677 _TF1	=	0x008f
                           000090   678 G$P1_0$0$0 == 0x0090
                           000090   679 _P1_0	=	0x0090
                           000091   680 G$P1_1$0$0 == 0x0091
                           000091   681 _P1_1	=	0x0091
                           000092   682 G$P1_2$0$0 == 0x0092
                           000092   683 _P1_2	=	0x0092
                           000093   684 G$P1_3$0$0 == 0x0093
                           000093   685 _P1_3	=	0x0093
                           000094   686 G$P1_4$0$0 == 0x0094
                           000094   687 _P1_4	=	0x0094
                           000095   688 G$P1_5$0$0 == 0x0095
                           000095   689 _P1_5	=	0x0095
                           000096   690 G$P1_6$0$0 == 0x0096
                           000096   691 _P1_6	=	0x0096
                           000097   692 G$P1_7$0$0 == 0x0097
                           000097   693 _P1_7	=	0x0097
                           000098   694 G$RI$0$0 == 0x0098
                           000098   695 _RI	=	0x0098
                           000098   696 G$RI0$0$0 == 0x0098
                           000098   697 _RI0	=	0x0098
                           000099   698 G$TI$0$0 == 0x0099
                           000099   699 _TI	=	0x0099
                           000099   700 G$TI0$0$0 == 0x0099
                           000099   701 _TI0	=	0x0099
                           00009A   702 G$RB8$0$0 == 0x009a
                           00009A   703 _RB8	=	0x009a
                           00009A   704 G$RB80$0$0 == 0x009a
                           00009A   705 _RB80	=	0x009a
                           00009B   706 G$TB8$0$0 == 0x009b
                           00009B   707 _TB8	=	0x009b
                           00009B   708 G$TB80$0$0 == 0x009b
                           00009B   709 _TB80	=	0x009b
                           00009C   710 G$REN$0$0 == 0x009c
                           00009C   711 _REN	=	0x009c
                           00009C   712 G$REN0$0$0 == 0x009c
                           00009C   713 _REN0	=	0x009c
                           00009D   714 G$SM2$0$0 == 0x009d
                           00009D   715 _SM2	=	0x009d
                           00009D   716 G$SM20$0$0 == 0x009d
                           00009D   717 _SM20	=	0x009d
                           00009D   718 G$MCE0$0$0 == 0x009d
                           00009D   719 _MCE0	=	0x009d
                           00009E   720 G$SM1$0$0 == 0x009e
                           00009E   721 _SM1	=	0x009e
                           00009E   722 G$SM10$0$0 == 0x009e
                           00009E   723 _SM10	=	0x009e
                           00009F   724 G$SM0$0$0 == 0x009f
                           00009F   725 _SM0	=	0x009f
                           00009F   726 G$SM00$0$0 == 0x009f
                           00009F   727 _SM00	=	0x009f
                           00009F   728 G$S0MODE$0$0 == 0x009f
                           00009F   729 _S0MODE	=	0x009f
                           0000A0   730 G$P2_0$0$0 == 0x00a0
                           0000A0   731 _P2_0	=	0x00a0
                           0000A1   732 G$P2_1$0$0 == 0x00a1
                           0000A1   733 _P2_1	=	0x00a1
                           0000A2   734 G$P2_2$0$0 == 0x00a2
                           0000A2   735 _P2_2	=	0x00a2
                           0000A3   736 G$P2_3$0$0 == 0x00a3
                           0000A3   737 _P2_3	=	0x00a3
                           0000A4   738 G$P2_4$0$0 == 0x00a4
                           0000A4   739 _P2_4	=	0x00a4
                           0000A5   740 G$P2_5$0$0 == 0x00a5
                           0000A5   741 _P2_5	=	0x00a5
                           0000A6   742 G$P2_6$0$0 == 0x00a6
                           0000A6   743 _P2_6	=	0x00a6
                           0000A7   744 G$P2_7$0$0 == 0x00a7
                           0000A7   745 _P2_7	=	0x00a7
                           0000A8   746 G$EX0$0$0 == 0x00a8
                           0000A8   747 _EX0	=	0x00a8
                           0000A9   748 G$ET0$0$0 == 0x00a9
                           0000A9   749 _ET0	=	0x00a9
                           0000AA   750 G$EX1$0$0 == 0x00aa
                           0000AA   751 _EX1	=	0x00aa
                           0000AB   752 G$ET1$0$0 == 0x00ab
                           0000AB   753 _ET1	=	0x00ab
                           0000AC   754 G$ES0$0$0 == 0x00ac
                           0000AC   755 _ES0	=	0x00ac
                           0000AC   756 G$ES$0$0 == 0x00ac
                           0000AC   757 _ES	=	0x00ac
                           0000AD   758 G$ET2$0$0 == 0x00ad
                           0000AD   759 _ET2	=	0x00ad
                           0000AF   760 G$EA$0$0 == 0x00af
                           0000AF   761 _EA	=	0x00af
                           0000B0   762 G$P3_0$0$0 == 0x00b0
                           0000B0   763 _P3_0	=	0x00b0
                           0000B1   764 G$P3_1$0$0 == 0x00b1
                           0000B1   765 _P3_1	=	0x00b1
                           0000B2   766 G$P3_2$0$0 == 0x00b2
                           0000B2   767 _P3_2	=	0x00b2
                           0000B3   768 G$P3_3$0$0 == 0x00b3
                           0000B3   769 _P3_3	=	0x00b3
                           0000B4   770 G$P3_4$0$0 == 0x00b4
                           0000B4   771 _P3_4	=	0x00b4
                           0000B5   772 G$P3_5$0$0 == 0x00b5
                           0000B5   773 _P3_5	=	0x00b5
                           0000B6   774 G$P3_6$0$0 == 0x00b6
                           0000B6   775 _P3_6	=	0x00b6
                           0000B7   776 G$P3_7$0$0 == 0x00b7
                           0000B7   777 _P3_7	=	0x00b7
                           0000B8   778 G$PX0$0$0 == 0x00b8
                           0000B8   779 _PX0	=	0x00b8
                           0000B9   780 G$PT0$0$0 == 0x00b9
                           0000B9   781 _PT0	=	0x00b9
                           0000BA   782 G$PX1$0$0 == 0x00ba
                           0000BA   783 _PX1	=	0x00ba
                           0000BB   784 G$PT1$0$0 == 0x00bb
                           0000BB   785 _PT1	=	0x00bb
                           0000BC   786 G$PS0$0$0 == 0x00bc
                           0000BC   787 _PS0	=	0x00bc
                           0000BC   788 G$PS$0$0 == 0x00bc
                           0000BC   789 _PS	=	0x00bc
                           0000BD   790 G$PT2$0$0 == 0x00bd
                           0000BD   791 _PT2	=	0x00bd
                           0000C0   792 G$SMBTOE$0$0 == 0x00c0
                           0000C0   793 _SMBTOE	=	0x00c0
                           0000C1   794 G$SMBFTE$0$0 == 0x00c1
                           0000C1   795 _SMBFTE	=	0x00c1
                           0000C2   796 G$AA$0$0 == 0x00c2
                           0000C2   797 _AA	=	0x00c2
                           0000C3   798 G$SI$0$0 == 0x00c3
                           0000C3   799 _SI	=	0x00c3
                           0000C4   800 G$STO$0$0 == 0x00c4
                           0000C4   801 _STO	=	0x00c4
                           0000C5   802 G$STA$0$0 == 0x00c5
                           0000C5   803 _STA	=	0x00c5
                           0000C6   804 G$ENSMB$0$0 == 0x00c6
                           0000C6   805 _ENSMB	=	0x00c6
                           0000C7   806 G$BUSY$0$0 == 0x00c7
                           0000C7   807 _BUSY	=	0x00c7
                           0000C8   808 G$CPRL2$0$0 == 0x00c8
                           0000C8   809 _CPRL2	=	0x00c8
                           0000C9   810 G$CT2$0$0 == 0x00c9
                           0000C9   811 _CT2	=	0x00c9
                           0000CA   812 G$TR2$0$0 == 0x00ca
                           0000CA   813 _TR2	=	0x00ca
                           0000CB   814 G$EXEN2$0$0 == 0x00cb
                           0000CB   815 _EXEN2	=	0x00cb
                           0000CC   816 G$TCLK$0$0 == 0x00cc
                           0000CC   817 _TCLK	=	0x00cc
                           0000CD   818 G$RCLK$0$0 == 0x00cd
                           0000CD   819 _RCLK	=	0x00cd
                           0000CE   820 G$EXF2$0$0 == 0x00ce
                           0000CE   821 _EXF2	=	0x00ce
                           0000CF   822 G$TF2$0$0 == 0x00cf
                           0000CF   823 _TF2	=	0x00cf
                           0000D0   824 G$P$0$0 == 0x00d0
                           0000D0   825 _P	=	0x00d0
                           0000D1   826 G$F1$0$0 == 0x00d1
                           0000D1   827 _F1	=	0x00d1
                           0000D2   828 G$OV$0$0 == 0x00d2
                           0000D2   829 _OV	=	0x00d2
                           0000D3   830 G$RS0$0$0 == 0x00d3
                           0000D3   831 _RS0	=	0x00d3
                           0000D4   832 G$RS1$0$0 == 0x00d4
                           0000D4   833 _RS1	=	0x00d4
                           0000D5   834 G$F0$0$0 == 0x00d5
                           0000D5   835 _F0	=	0x00d5
                           0000D6   836 G$AC$0$0 == 0x00d6
                           0000D6   837 _AC	=	0x00d6
                           0000D7   838 G$CY$0$0 == 0x00d7
                           0000D7   839 _CY	=	0x00d7
                           0000D8   840 G$CCF0$0$0 == 0x00d8
                           0000D8   841 _CCF0	=	0x00d8
                           0000D9   842 G$CCF1$0$0 == 0x00d9
                           0000D9   843 _CCF1	=	0x00d9
                           0000DA   844 G$CCF2$0$0 == 0x00da
                           0000DA   845 _CCF2	=	0x00da
                           0000DB   846 G$CCF3$0$0 == 0x00db
                           0000DB   847 _CCF3	=	0x00db
                           0000DC   848 G$CCF4$0$0 == 0x00dc
                           0000DC   849 _CCF4	=	0x00dc
                           0000DE   850 G$CR$0$0 == 0x00de
                           0000DE   851 _CR	=	0x00de
                           0000DF   852 G$CF$0$0 == 0x00df
                           0000DF   853 _CF	=	0x00df
                           0000E8   854 G$ADLJST$0$0 == 0x00e8
                           0000E8   855 _ADLJST	=	0x00e8
                           0000E8   856 G$AD0LJST$0$0 == 0x00e8
                           0000E8   857 _AD0LJST	=	0x00e8
                           0000E9   858 G$ADWINT$0$0 == 0x00e9
                           0000E9   859 _ADWINT	=	0x00e9
                           0000E9   860 G$AD0WINT$0$0 == 0x00e9
                           0000E9   861 _AD0WINT	=	0x00e9
                           0000EA   862 G$ADSTM0$0$0 == 0x00ea
                           0000EA   863 _ADSTM0	=	0x00ea
                           0000EA   864 G$AD0CM0$0$0 == 0x00ea
                           0000EA   865 _AD0CM0	=	0x00ea
                           0000EB   866 G$ADSTM1$0$0 == 0x00eb
                           0000EB   867 _ADSTM1	=	0x00eb
                           0000EB   868 G$AD0CM1$0$0 == 0x00eb
                           0000EB   869 _AD0CM1	=	0x00eb
                           0000EC   870 G$ADBUSY$0$0 == 0x00ec
                           0000EC   871 _ADBUSY	=	0x00ec
                           0000EC   872 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   873 _AD0BUSY	=	0x00ec
                           0000ED   874 G$ADCINT$0$0 == 0x00ed
                           0000ED   875 _ADCINT	=	0x00ed
                           0000ED   876 G$AD0INT$0$0 == 0x00ed
                           0000ED   877 _AD0INT	=	0x00ed
                           0000EE   878 G$ADCTM$0$0 == 0x00ee
                           0000EE   879 _ADCTM	=	0x00ee
                           0000EE   880 G$AD0TM$0$0 == 0x00ee
                           0000EE   881 _AD0TM	=	0x00ee
                           0000EF   882 G$ADCEN$0$0 == 0x00ef
                           0000EF   883 _ADCEN	=	0x00ef
                           0000EF   884 G$AD0EN$0$0 == 0x00ef
                           0000EF   885 _AD0EN	=	0x00ef
                           0000F8   886 G$SPIEN$0$0 == 0x00f8
                           0000F8   887 _SPIEN	=	0x00f8
                           0000F9   888 G$MSTEN$0$0 == 0x00f9
                           0000F9   889 _MSTEN	=	0x00f9
                           0000FA   890 G$SLVSEL$0$0 == 0x00fa
                           0000FA   891 _SLVSEL	=	0x00fa
                           0000FB   892 G$TXBSY$0$0 == 0x00fb
                           0000FB   893 _TXBSY	=	0x00fb
                           0000FC   894 G$RXOVRN$0$0 == 0x00fc
                           0000FC   895 _RXOVRN	=	0x00fc
                           0000FD   896 G$MODF$0$0 == 0x00fd
                           0000FD   897 _MODF	=	0x00fd
                           0000FE   898 G$WCOL$0$0 == 0x00fe
                           0000FE   899 _WCOL	=	0x00fe
                           0000FF   900 G$SPIF$0$0 == 0x00ff
                           0000FF   901 _SPIF	=	0x00ff
                           0000C7   902 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   903 _BUS_BUSY	=	0x00c7
                           0000C6   904 G$BUS_EN$0$0 == 0x00c6
                           0000C6   905 _BUS_EN	=	0x00c6
                           0000C5   906 G$BUS_START$0$0 == 0x00c5
                           0000C5   907 _BUS_START	=	0x00c5
                           0000C4   908 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   909 _BUS_STOP	=	0x00c4
                           0000C3   910 G$BUS_INT$0$0 == 0x00c3
                           0000C3   911 _BUS_INT	=	0x00c3
                           0000C2   912 G$BUS_AA$0$0 == 0x00c2
                           0000C2   913 _BUS_AA	=	0x00c2
                           0000C1   914 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   915 _BUS_FTE	=	0x00c1
                           0000C0   916 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   917 _BUS_TOE	=	0x00c0
                           000083   918 G$BUS_SCL$0$0 == 0x0083
                           000083   919 _BUS_SCL	=	0x0083
                                    920 ;--------------------------------------------------------
                                    921 ; overlayable register banks
                                    922 ;--------------------------------------------------------
                                    923 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        924 	.ds 8
                                    925 ;--------------------------------------------------------
                                    926 ; internal ram data
                                    927 ;--------------------------------------------------------
                                    928 	.area DSEG    (DATA)
                           000000   929 Llab3_3compass.lcd_clear$NumBytes$1$77==.
      000000                        930 _lcd_clear_NumBytes_1_77:
      000000                        931 	.ds 1
                           000001   932 Llab3_3compass.lcd_clear$Cmd$1$77==.
      000001                        933 _lcd_clear_Cmd_1_77:
      000001                        934 	.ds 2
                           000003   935 Llab3_3compass.read_keypad$Data$1$78==.
      000003                        936 _read_keypad_Data_1_78:
      000003                        937 	.ds 2
                           000005   938 Llab3_3compass.i2c_write_data$start_reg$1$97==.
      000005                        939 _i2c_write_data_PARM_2:
      000005                        940 	.ds 1
                           000006   941 Llab3_3compass.i2c_write_data$buffer$1$97==.
      000006                        942 _i2c_write_data_PARM_3:
      000006                        943 	.ds 3
                           000009   944 Llab3_3compass.i2c_write_data$num_bytes$1$97==.
      000009                        945 _i2c_write_data_PARM_4:
      000009                        946 	.ds 1
                           00000A   947 Llab3_3compass.i2c_read_data$start_reg$1$99==.
      00000A                        948 _i2c_read_data_PARM_2:
      00000A                        949 	.ds 1
                           00000B   950 Llab3_3compass.i2c_read_data$buffer$1$99==.
      00000B                        951 _i2c_read_data_PARM_3:
      00000B                        952 	.ds 3
                           00000E   953 Llab3_3compass.i2c_read_data$num_bytes$1$99==.
      00000E                        954 _i2c_read_data_PARM_4:
      00000E                        955 	.ds 1
                           00000F   956 Llab3_3compass.Accel_Init$Data2$1$103==.
      00000F                        957 _Accel_Init_Data2_1_103:
      00000F                        958 	.ds 1
                           000010   959 G$tmp0_lo_to_hi$0$0==.
      000010                        960 _tmp0_lo_to_hi::
      000010                        961 	.ds 2
                           000012   962 G$STR_PW$0$0==.
      000012                        963 _STR_PW::
      000012                        964 	.ds 2
                           000014   965 G$count$0$0==.
      000014                        966 _count::
      000014                        967 	.ds 2
                           000016   968 G$input$0$0==.
      000016                        969 _input::
      000016                        970 	.ds 1
                           000017   971 G$actual_heading$0$0==.
      000017                        972 _actual_heading::
      000017                        973 	.ds 2
                           000019   974 G$desired_heading$0$0==.
      000019                        975 _desired_heading::
      000019                        976 	.ds 2
                           00001B   977 G$error$0$0==.
      00001B                        978 _error::
      00001B                        979 	.ds 2
                           00001D   980 G$offset$0$0==.
      00001D                        981 _offset::
      00001D                        982 	.ds 2
                           00001F   983 Llab3_3compass.ReadCompass$Data$1$115==.
      00001F                        984 _ReadCompass_Data_1_115:
      00001F                        985 	.ds 2
                           000021   986 Llab3_3compass.Steering_Servo$direction$1$124==.
      000021                        987 _Steering_Servo_direction_1_124:
      000021                        988 	.ds 2
                                    989 ;--------------------------------------------------------
                                    990 ; overlayable items in internal ram 
                                    991 ;--------------------------------------------------------
                                    992 	.area	OSEG    (OVR,DATA)
                                    993 	.area	OSEG    (OVR,DATA)
                                    994 	.area	OSEG    (OVR,DATA)
                                    995 	.area	OSEG    (OVR,DATA)
                                    996 	.area	OSEG    (OVR,DATA)
                                    997 	.area	OSEG    (OVR,DATA)
                                    998 	.area	OSEG    (OVR,DATA)
                                    999 ;--------------------------------------------------------
                                   1000 ; Stack segment in internal ram 
                                   1001 ;--------------------------------------------------------
                                   1002 	.area	SSEG
      000000                       1003 __start__stack:
      000000                       1004 	.ds	1
                                   1005 
                                   1006 ;--------------------------------------------------------
                                   1007 ; indirectly addressable internal ram data
                                   1008 ;--------------------------------------------------------
                                   1009 	.area ISEG    (DATA)
                                   1010 ;--------------------------------------------------------
                                   1011 ; absolute internal ram data
                                   1012 ;--------------------------------------------------------
                                   1013 	.area IABS    (ABS,DATA)
                                   1014 	.area IABS    (ABS,DATA)
                                   1015 ;--------------------------------------------------------
                                   1016 ; bit data
                                   1017 ;--------------------------------------------------------
                                   1018 	.area BSEG    (BIT)
                                   1019 ;--------------------------------------------------------
                                   1020 ; paged external ram data
                                   1021 ;--------------------------------------------------------
                                   1022 	.area PSEG    (PAG,XDATA)
                                   1023 ;--------------------------------------------------------
                                   1024 ; external ram data
                                   1025 ;--------------------------------------------------------
                                   1026 	.area XSEG    (XDATA)
                           000000  1027 Llab3_3compass.lcd_print$text$1$73==.
      000000                       1028 _lcd_print_text_1_73:
      000000                       1029 	.ds 80
                                   1030 ;--------------------------------------------------------
                                   1031 ; absolute external ram data
                                   1032 ;--------------------------------------------------------
                                   1033 	.area XABS    (ABS,XDATA)
                                   1034 ;--------------------------------------------------------
                                   1035 ; external initialized ram data
                                   1036 ;--------------------------------------------------------
                                   1037 	.area XISEG   (XDATA)
                                   1038 	.area HOME    (CODE)
                                   1039 	.area GSINIT0 (CODE)
                                   1040 	.area GSINIT1 (CODE)
                                   1041 	.area GSINIT2 (CODE)
                                   1042 	.area GSINIT3 (CODE)
                                   1043 	.area GSINIT4 (CODE)
                                   1044 	.area GSINIT5 (CODE)
                                   1045 	.area GSINIT  (CODE)
                                   1046 	.area GSFINAL (CODE)
                                   1047 	.area CSEG    (CODE)
                                   1048 ;--------------------------------------------------------
                                   1049 ; interrupt vector 
                                   1050 ;--------------------------------------------------------
                                   1051 	.area HOME    (CODE)
      000000                       1052 __interrupt_vect:
      000000 02r00r00         [24] 1053 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1054 	reti
      000004                       1055 	.ds	7
      00000B 32               [24] 1056 	reti
      00000C                       1057 	.ds	7
      000013 32               [24] 1058 	reti
      000014                       1059 	.ds	7
      00001B 32               [24] 1060 	reti
      00001C                       1061 	.ds	7
      000023 32               [24] 1062 	reti
      000024                       1063 	.ds	7
      00002B 32               [24] 1064 	reti
      00002C                       1065 	.ds	7
      000033 32               [24] 1066 	reti
      000034                       1067 	.ds	7
      00003B 32               [24] 1068 	reti
      00003C                       1069 	.ds	7
      000043 32               [24] 1070 	reti
      000044                       1071 	.ds	7
      00004B 02r05rD4         [24] 1072 	ljmp	_PCA_ISR
                                   1073 ;--------------------------------------------------------
                                   1074 ; global & static initialisations
                                   1075 ;--------------------------------------------------------
                                   1076 	.area HOME    (CODE)
                                   1077 	.area GSINIT  (CODE)
                                   1078 	.area GSFINAL (CODE)
                                   1079 	.area GSINIT  (CODE)
                                   1080 	.globl __sdcc_gsinit_startup
                                   1081 	.globl __sdcc_program_startup
                                   1082 	.globl __start__stack
                                   1083 	.globl __mcs51_genXINIT
                                   1084 	.globl __mcs51_genXRAMCLEAR
                                   1085 	.globl __mcs51_genRAMCLEAR
                           000000  1086 	C$lab3_3compass.c$26$1$125 ==.
                                   1087 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:26: unsigned int STR_PW   = 0;
      000000 E4               [12] 1088 	clr	a
      000001 F5*12            [12] 1089 	mov	_STR_PW,a
      000003 F5*13            [12] 1090 	mov	(_STR_PW + 1),a
                           000005  1091 	C$lab3_3compass.c$27$1$125 ==.
                                   1092 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:27: unsigned int count = 0;
      000005 F5*14            [12] 1093 	mov	_count,a
      000007 F5*15            [12] 1094 	mov	(_count + 1),a
                           000009  1095 	C$lab3_3compass.c$30$1$125 ==.
                                   1096 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:30: int desired_heading = 900; //East
      000009 75*19 84         [24] 1097 	mov	_desired_heading,#0x84
      00000C 75*1A 03         [24] 1098 	mov	(_desired_heading + 1),#0x03
                                   1099 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1100 	ljmp	__sdcc_program_startup
                                   1101 ;--------------------------------------------------------
                                   1102 ; Home
                                   1103 ;--------------------------------------------------------
                                   1104 	.area HOME    (CODE)
                                   1105 	.area HOME    (CODE)
      00004E                       1106 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1107 	ljmp	_main
                                   1108 ;	return from main will return to caller
                                   1109 ;--------------------------------------------------------
                                   1110 ; code
                                   1111 ;--------------------------------------------------------
                                   1112 	.area CSEG    (CODE)
                                   1113 ;------------------------------------------------------------
                                   1114 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1115 ;------------------------------------------------------------
                                   1116 ;i                         Allocated to registers 
                                   1117 ;------------------------------------------------------------
                           000000  1118 	G$SYSCLK_Init$0$0 ==.
                           000000  1119 	C$c8051_SDCC.h$42$0$0 ==.
                                   1120 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1121 ;	-----------------------------------------
                                   1122 ;	 function SYSCLK_Init
                                   1123 ;	-----------------------------------------
      000000                       1124 _SYSCLK_Init:
                           000007  1125 	ar7 = 0x07
                           000006  1126 	ar6 = 0x06
                           000005  1127 	ar5 = 0x05
                           000004  1128 	ar4 = 0x04
                           000003  1129 	ar3 = 0x03
                           000002  1130 	ar2 = 0x02
                           000001  1131 	ar1 = 0x01
                           000000  1132 	ar0 = 0x00
                           000000  1133 	C$c8051_SDCC.h$46$1$16 ==.
                                   1134 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1135 	mov	_OSCXCN,#0x67
                           000003  1136 	C$c8051_SDCC.h$49$1$16 ==.
                                   1137 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1138 	mov	r6,#0x00
      000005 7F 01            [12] 1139 	mov	r7,#0x01
      000007                       1140 00107$:
      000007 1E               [12] 1141 	dec	r6
      000008 BE FF 01         [24] 1142 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1143 	dec	r7
      00000C                       1144 00121$:
      00000C EE               [12] 1145 	mov	a,r6
      00000D 4F               [12] 1146 	orl	a,r7
      00000E 70 F7            [24] 1147 	jnz	00107$
                           000010  1148 	C$c8051_SDCC.h$51$1$16 ==.
                                   1149 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1150 00102$:
      000010 E5 B1            [12] 1151 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1152 	jnb	acc.7,00102$
                           000015  1153 	C$c8051_SDCC.h$53$1$16 ==.
                                   1154 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1155 	mov	_OSCICN,#0x88
                           000018  1156 	C$c8051_SDCC.h$56$1$16 ==.
                           000018  1157 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1158 	ret
                                   1159 ;------------------------------------------------------------
                                   1160 ;Allocation info for local variables in function 'UART0_Init'
                                   1161 ;------------------------------------------------------------
                           000019  1162 	G$UART0_Init$0$0 ==.
                           000019  1163 	C$c8051_SDCC.h$64$1$16 ==.
                                   1164 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1165 ;	-----------------------------------------
                                   1166 ;	 function UART0_Init
                                   1167 ;	-----------------------------------------
      000019                       1168 _UART0_Init:
                           000019  1169 	C$c8051_SDCC.h$66$1$18 ==.
                                   1170 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1171 	mov	_SCON0,#0x50
                           00001C  1172 	C$c8051_SDCC.h$67$1$18 ==.
                                   1173 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1174 	mov	_TMOD,#0x20
                           00001F  1175 	C$c8051_SDCC.h$68$1$18 ==.
                                   1176 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1177 	mov	_TH1,#0xDC
                           000022  1178 	C$c8051_SDCC.h$69$1$18 ==.
                                   1179 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1180 	setb	_TR1
                           000024  1181 	C$c8051_SDCC.h$70$1$18 ==.
                                   1182 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1183 	orl	_CKCON,#0x10
                           000027  1184 	C$c8051_SDCC.h$71$1$18 ==.
                                   1185 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1186 	orl	_PCON,#0x80
                           00002A  1187 	C$c8051_SDCC.h$73$1$18 ==.
                                   1188 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1189 	setb	_TI0
                           00002C  1190 	C$c8051_SDCC.h$74$1$18 ==.
                                   1191 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1192 	orl	_P0MDOUT,#0x01
                           00002F  1193 	C$c8051_SDCC.h$75$1$18 ==.
                           00002F  1194 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1195 	ret
                                   1196 ;------------------------------------------------------------
                                   1197 ;Allocation info for local variables in function 'Sys_Init'
                                   1198 ;------------------------------------------------------------
                           000030  1199 	G$Sys_Init$0$0 ==.
                           000030  1200 	C$c8051_SDCC.h$83$1$18 ==.
                                   1201 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1202 ;	-----------------------------------------
                                   1203 ;	 function Sys_Init
                                   1204 ;	-----------------------------------------
      000030                       1205 _Sys_Init:
                           000030  1206 	C$c8051_SDCC.h$85$1$20 ==.
                                   1207 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1208 	mov	_WDTCN,#0xDE
                           000033  1209 	C$c8051_SDCC.h$86$1$20 ==.
                                   1210 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1211 	mov	_WDTCN,#0xAD
                           000036  1212 	C$c8051_SDCC.h$88$1$20 ==.
                                   1213 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1214 	lcall	_SYSCLK_Init
                           000039  1215 	C$c8051_SDCC.h$89$1$20 ==.
                                   1216 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1217 	lcall	_UART0_Init
                           00003C  1218 	C$c8051_SDCC.h$91$1$20 ==.
                                   1219 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1220 	orl	_XBR0,#0x04
                           00003F  1221 	C$c8051_SDCC.h$92$1$20 ==.
                                   1222 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1223 	orl	_XBR2,#0x40
                           000042  1224 	C$c8051_SDCC.h$93$1$20 ==.
                           000042  1225 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1226 	ret
                                   1227 ;------------------------------------------------------------
                                   1228 ;Allocation info for local variables in function 'putchar'
                                   1229 ;------------------------------------------------------------
                                   1230 ;c                         Allocated to registers r7 
                                   1231 ;------------------------------------------------------------
                           000043  1232 	G$putchar$0$0 ==.
                           000043  1233 	C$c8051_SDCC.h$98$1$20 ==.
                                   1234 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1235 ;	-----------------------------------------
                                   1236 ;	 function putchar
                                   1237 ;	-----------------------------------------
      000043                       1238 _putchar:
      000043 AF 82            [24] 1239 	mov	r7,dpl
                           000045  1240 	C$c8051_SDCC.h$100$1$22 ==.
                                   1241 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1242 00101$:
                           000045  1243 	C$c8051_SDCC.h$101$1$22 ==.
                                   1244 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1245 	jbc	_TI0,00112$
      000048 80 FB            [24] 1246 	sjmp	00101$
      00004A                       1247 00112$:
                           00004A  1248 	C$c8051_SDCC.h$102$1$22 ==.
                                   1249 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1250 	mov	_SBUF0,r7
                           00004C  1251 	C$c8051_SDCC.h$103$1$22 ==.
                           00004C  1252 	XG$putchar$0$0 ==.
      00004C 22               [24] 1253 	ret
                                   1254 ;------------------------------------------------------------
                                   1255 ;Allocation info for local variables in function 'getchar'
                                   1256 ;------------------------------------------------------------
                                   1257 ;c                         Allocated to registers 
                                   1258 ;------------------------------------------------------------
                           00004D  1259 	G$getchar$0$0 ==.
                           00004D  1260 	C$c8051_SDCC.h$108$1$22 ==.
                                   1261 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1262 ;	-----------------------------------------
                                   1263 ;	 function getchar
                                   1264 ;	-----------------------------------------
      00004D                       1265 _getchar:
                           00004D  1266 	C$c8051_SDCC.h$111$1$24 ==.
                                   1267 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1268 00101$:
                           00004D  1269 	C$c8051_SDCC.h$112$1$24 ==.
                                   1270 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1271 	jbc	_RI0,00112$
      000050 80 FB            [24] 1272 	sjmp	00101$
      000052                       1273 00112$:
                           000052  1274 	C$c8051_SDCC.h$113$1$24 ==.
                                   1275 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1276 	mov	dpl,_SBUF0
                           000055  1277 	C$c8051_SDCC.h$114$1$24 ==.
                                   1278 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1279 	lcall	_putchar
                           000058  1280 	C$c8051_SDCC.h$115$1$24 ==.
                                   1281 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1282 	mov	dpl,_SBUF0
                           00005B  1283 	C$c8051_SDCC.h$116$1$24 ==.
                           00005B  1284 	XG$getchar$0$0 ==.
      00005B 22               [24] 1285 	ret
                                   1286 ;------------------------------------------------------------
                                   1287 ;Allocation info for local variables in function 'lcd_print'
                                   1288 ;------------------------------------------------------------
                                   1289 ;fmt                       Allocated to stack - _bp -5
                                   1290 ;len                       Allocated to registers r6 
                                   1291 ;i                         Allocated to registers 
                                   1292 ;ap                        Allocated to registers 
                                   1293 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1294 ;------------------------------------------------------------
                           00005C  1295 	G$lcd_print$0$0 ==.
                           00005C  1296 	C$i2c.h$81$1$24 ==.
                                   1297 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1298 ;	-----------------------------------------
                                   1299 ;	 function lcd_print
                                   1300 ;	-----------------------------------------
      00005C                       1301 _lcd_print:
      00005C C0*00            [24] 1302 	push	_bp
      00005E 85 81*00         [24] 1303 	mov	_bp,sp
                           000061  1304 	C$i2c.h$87$1$73 ==.
                                   1305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1306 	mov	a,_bp
      000063 24 FB            [12] 1307 	add	a,#0xfb
      000065 F8               [12] 1308 	mov	r0,a
      000066 86 82            [24] 1309 	mov	dpl,@r0
      000068 08               [12] 1310 	inc	r0
      000069 86 83            [24] 1311 	mov	dph,@r0
      00006B 08               [12] 1312 	inc	r0
      00006C 86 F0            [24] 1313 	mov	b,@r0
      00006E 12r00r00         [24] 1314 	lcall	_strlen
      000071 E5 82            [12] 1315 	mov	a,dpl
      000073 85 83 F0         [24] 1316 	mov	b,dph
      000076 45 F0            [12] 1317 	orl	a,b
      000078 70 02            [24] 1318 	jnz	00102$
      00007A 80 62            [24] 1319 	sjmp	00109$
      00007C                       1320 00102$:
                           00007C  1321 	C$i2c.h$89$2$74 ==.
                                   1322 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1323 	mov	a,_bp
      00007E 24 FB            [12] 1324 	add	a,#0xFB
      000080 FF               [12] 1325 	mov	r7,a
      000081 8F*00            [24] 1326 	mov	_vsprintf_PARM_3,r7
                           000083  1327 	C$i2c.h$90$1$73 ==.
                                   1328 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1329 	mov	a,_bp
      000085 24 FB            [12] 1330 	add	a,#0xfb
      000087 F8               [12] 1331 	mov	r0,a
      000088 86*00            [24] 1332 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1333 	inc	r0
      00008B 86*01            [24] 1334 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1335 	inc	r0
      00008E 86*02            [24] 1336 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1337 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1338 	mov	b,#0x00
      000096 12r00r00         [24] 1339 	lcall	_vsprintf
                           000099  1340 	C$i2c.h$93$1$73 ==.
                                   1341 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1342 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1343 	mov	b,#0x00
      00009F 12r00r00         [24] 1344 	lcall	_strlen
      0000A2 AE 82            [24] 1345 	mov	r6,dpl
                           0000A4  1346 	C$i2c.h$94$1$73 ==.
                                   1347 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1348 	mov	r7,#0x00
      0000A6                       1349 00107$:
      0000A6 C3               [12] 1350 	clr	c
      0000A7 EF               [12] 1351 	mov	a,r7
      0000A8 9E               [12] 1352 	subb	a,r6
      0000A9 50 1F            [24] 1353 	jnc	00105$
                           0000AB  1354 	C$i2c.h$96$2$76 ==.
                                   1355 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1356 	mov	a,r7
      0000AC 24r00            [12] 1357 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1358 	mov	dpl,a
      0000B0 E4               [12] 1359 	clr	a
      0000B1 34s00            [12] 1360 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1361 	mov	dph,a
      0000B5 E0               [24] 1362 	movx	a,@dptr
      0000B6 FD               [12] 1363 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1364 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1365 	mov	a,r7
      0000BB 24r00            [12] 1366 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1367 	mov	dpl,a
      0000BF E4               [12] 1368 	clr	a
      0000C0 34s00            [12] 1369 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1370 	mov	dph,a
      0000C4 74 0D            [12] 1371 	mov	a,#0x0D
      0000C6 F0               [24] 1372 	movx	@dptr,a
      0000C7                       1373 00108$:
                           0000C7  1374 	C$i2c.h$94$1$73 ==.
                                   1375 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1376 	inc	r7
      0000C8 80 DC            [24] 1377 	sjmp	00107$
      0000CA                       1378 00105$:
                           0000CA  1379 	C$i2c.h$99$1$73 ==.
                                   1380 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1381 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1382 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1383 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1384 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1385 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1386 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1387 	lcall	_i2c_write_data
      0000DE                       1388 00109$:
      0000DE D0*00            [24] 1389 	pop	_bp
                           0000E0  1390 	C$i2c.h$100$1$73 ==.
                           0000E0  1391 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1392 	ret
                                   1393 ;------------------------------------------------------------
                                   1394 ;Allocation info for local variables in function 'lcd_clear'
                                   1395 ;------------------------------------------------------------
                                   1396 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1397 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1398 ;------------------------------------------------------------
                           0000E1  1399 	G$lcd_clear$0$0 ==.
                           0000E1  1400 	C$i2c.h$103$1$73 ==.
                                   1401 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1402 ;	-----------------------------------------
                                   1403 ;	 function lcd_clear
                                   1404 ;	-----------------------------------------
      0000E1                       1405 _lcd_clear:
                           0000E1  1406 	C$i2c.h$105$1$73 ==.
                                   1407 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1408 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1409 	C$i2c.h$107$1$77 ==.
                                   1410 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1411 00101$:
      0000E4 74 C0            [12] 1412 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1413 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1414 	jc	00103$
      0000EA 75*0Br00         [24] 1415 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1416 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1417 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1418 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1419 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1420 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1421 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1422 	sjmp	00101$
      000101                       1423 00103$:
                           000101  1424 	C$i2c.h$109$1$77 ==.
                                   1425 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1426 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1427 	C$i2c.h$110$1$77 ==.
                                   1428 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1429 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1430 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1431 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1432 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1433 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1434 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1435 	lcall	_i2c_write_data
                           000119  1436 	C$i2c.h$111$1$77 ==.
                           000119  1437 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1438 	ret
                                   1439 ;------------------------------------------------------------
                                   1440 ;Allocation info for local variables in function 'read_keypad'
                                   1441 ;------------------------------------------------------------
                                   1442 ;i                         Allocated to registers r7 
                                   1443 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1444 ;------------------------------------------------------------
                           00011A  1445 	G$read_keypad$0$0 ==.
                           00011A  1446 	C$i2c.h$114$1$77 ==.
                                   1447 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1448 ;	-----------------------------------------
                                   1449 ;	 function read_keypad
                                   1450 ;	-----------------------------------------
      00011A                       1451 _read_keypad:
                           00011A  1452 	C$i2c.h$118$1$78 ==.
                                   1453 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1454 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1455 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1456 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1457 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1458 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1459 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1460 	lcall	_i2c_read_data
                           00012F  1461 	C$i2c.h$119$1$78 ==.
                                   1462 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1463 	mov	a,#0xFF
      000131 B5*03 05         [24] 1464 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1465 	mov	dpl,#0x00
      000137 80 5F            [24] 1466 	sjmp	00116$
      000139                       1467 00102$:
                           000139  1468 	C$i2c.h$121$1$78 ==.
                                   1469 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1470 	mov	r7,#0x00
      00013B 8F 06            [24] 1471 	mov	ar6,r7
      00013D                       1472 00114$:
                           00013D  1473 	C$i2c.h$123$2$79 ==.
                                   1474 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1475 	mov	b,r6
      00013F 05 F0            [12] 1476 	inc	b
      000141 7C 01            [12] 1477 	mov	r4,#0x01
      000143 7D 00            [12] 1478 	mov	r5,#0x00
      000145 80 06            [24] 1479 	sjmp	00145$
      000147                       1480 00144$:
      000147 EC               [12] 1481 	mov	a,r4
      000148 2C               [12] 1482 	add	a,r4
      000149 FC               [12] 1483 	mov	r4,a
      00014A ED               [12] 1484 	mov	a,r5
      00014B 33               [12] 1485 	rlc	a
      00014C FD               [12] 1486 	mov	r5,a
      00014D                       1487 00145$:
      00014D D5 F0 F7         [24] 1488 	djnz	b,00144$
      000150 AA*03            [24] 1489 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1490 	mov	r3,#0x00
      000154 EA               [12] 1491 	mov	a,r2
      000155 52 04            [12] 1492 	anl	ar4,a
      000157 EB               [12] 1493 	mov	a,r3
      000158 52 05            [12] 1494 	anl	ar5,a
      00015A EC               [12] 1495 	mov	a,r4
      00015B 4D               [12] 1496 	orl	a,r5
      00015C 60 07            [24] 1497 	jz	00115$
                           00015E  1498 	C$i2c.h$124$2$79 ==.
                                   1499 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1500 	mov	a,#0x31
      000160 2F               [12] 1501 	add	a,r7
      000161 F5 82            [12] 1502 	mov	dpl,a
      000163 80 33            [24] 1503 	sjmp	00116$
      000165                       1504 00115$:
                           000165  1505 	C$i2c.h$121$1$78 ==.
                                   1506 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1507 	inc	r6
      000166 8E 07            [24] 1508 	mov	ar7,r6
      000168 BE 08 00         [24] 1509 	cjne	r6,#0x08,00147$
      00016B                       1510 00147$:
      00016B 40 D0            [24] 1511 	jc	00114$
                           00016D  1512 	C$i2c.h$127$1$78 ==.
                                   1513 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1514 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1515 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1516 	mov	dpl,#0x39
      000175 80 21            [24] 1517 	sjmp	00116$
      000177                       1518 00107$:
                           000177  1519 	C$i2c.h$129$1$78 ==.
                                   1520 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1521 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1522 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1523 	mov	dpl,#0x2A
      00017F 80 17            [24] 1524 	sjmp	00116$
      000181                       1525 00109$:
                           000181  1526 	C$i2c.h$131$1$78 ==.
                                   1527 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1528 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1529 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1530 	mov	dpl,#0x30
      000189 80 0D            [24] 1531 	sjmp	00116$
      00018B                       1532 00111$:
                           00018B  1533 	C$i2c.h$133$1$78 ==.
                                   1534 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1535 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1536 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1537 	mov	dpl,#0x23
      000193 80 03            [24] 1538 	sjmp	00116$
      000195                       1539 00113$:
                           000195  1540 	C$i2c.h$135$1$78 ==.
                                   1541 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1542 	mov	dpl,#0xFF
      000198                       1543 00116$:
                           000198  1544 	C$i2c.h$136$1$78 ==.
                           000198  1545 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1546 	ret
                                   1547 ;------------------------------------------------------------
                                   1548 ;Allocation info for local variables in function 'kpd_input'
                                   1549 ;------------------------------------------------------------
                                   1550 ;mode                      Allocated to registers r7 
                                   1551 ;sum                       Allocated to registers r5 r6 
                                   1552 ;key                       Allocated to registers r3 
                                   1553 ;i                         Allocated to registers 
                                   1554 ;------------------------------------------------------------
                           000199  1555 	G$kpd_input$0$0 ==.
                           000199  1556 	C$i2c.h$148$1$78 ==.
                                   1557 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1558 ;	-----------------------------------------
                                   1559 ;	 function kpd_input
                                   1560 ;	-----------------------------------------
      000199                       1561 _kpd_input:
      000199 AF 82            [24] 1562 	mov	r7,dpl
                           00019B  1563 	C$i2c.h$153$1$81 ==.
                                   1564 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1565 	C$i2c.h$156$1$81 ==.
                                   1566 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1567 	clr	a
      00019C FD               [12] 1568 	mov	r5,a
      00019D FE               [12] 1569 	mov	r6,a
      00019E EF               [12] 1570 	mov	a,r7
      00019F 70 1D            [24] 1571 	jnz	00102$
      0001A1 C0 06            [24] 1572 	push	ar6
      0001A3 C0 05            [24] 1573 	push	ar5
      0001A5 74r00            [12] 1574 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1575 	push	acc
      0001A9 74s00            [12] 1576 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1577 	push	acc
      0001AD 74 80            [12] 1578 	mov	a,#0x80
      0001AF C0 E0            [24] 1579 	push	acc
      0001B1 12r00r5C         [24] 1580 	lcall	_lcd_print
      0001B4 15 81            [12] 1581 	dec	sp
      0001B6 15 81            [12] 1582 	dec	sp
      0001B8 15 81            [12] 1583 	dec	sp
      0001BA D0 05            [24] 1584 	pop	ar5
      0001BC D0 06            [24] 1585 	pop	ar6
      0001BE                       1586 00102$:
                           0001BE  1587 	C$i2c.h$158$1$81 ==.
                                   1588 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1589 	push	ar6
      0001C0 C0 05            [24] 1590 	push	ar5
      0001C2 74 08            [12] 1591 	mov	a,#0x08
      0001C4 C0 E0            [24] 1592 	push	acc
      0001C6 E4               [12] 1593 	clr	a
      0001C7 C0 E0            [24] 1594 	push	acc
      0001C9 74 08            [12] 1595 	mov	a,#0x08
      0001CB C0 E0            [24] 1596 	push	acc
      0001CD E4               [12] 1597 	clr	a
      0001CE C0 E0            [24] 1598 	push	acc
      0001D0 74 08            [12] 1599 	mov	a,#0x08
      0001D2 C0 E0            [24] 1600 	push	acc
      0001D4 E4               [12] 1601 	clr	a
      0001D5 C0 E0            [24] 1602 	push	acc
      0001D7 74 08            [12] 1603 	mov	a,#0x08
      0001D9 C0 E0            [24] 1604 	push	acc
      0001DB E4               [12] 1605 	clr	a
      0001DC C0 E0            [24] 1606 	push	acc
      0001DE 74 08            [12] 1607 	mov	a,#0x08
      0001E0 C0 E0            [24] 1608 	push	acc
      0001E2 E4               [12] 1609 	clr	a
      0001E3 C0 E0            [24] 1610 	push	acc
      0001E5 74r16            [12] 1611 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1612 	push	acc
      0001E9 74s00            [12] 1613 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1614 	push	acc
      0001ED 74 80            [12] 1615 	mov	a,#0x80
      0001EF C0 E0            [24] 1616 	push	acc
      0001F1 12r00r5C         [24] 1617 	lcall	_lcd_print
      0001F4 E5 81            [12] 1618 	mov	a,sp
      0001F6 24 F3            [12] 1619 	add	a,#0xf3
      0001F8 F5 81            [12] 1620 	mov	sp,a
                           0001FA  1621 	C$i2c.h$160$1$81 ==.
                                   1622 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1623 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1624 	mov	b,#0x07
      000200 E4               [12] 1625 	clr	a
      000201 12r03r0D         [24] 1626 	lcall	_delay_time
      000204 D0 05            [24] 1627 	pop	ar5
      000206 D0 06            [24] 1628 	pop	ar6
                           000208  1629 	C$i2c.h$164$1$81 ==.
                                   1630 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1631 	mov	r7,#0x00
                           00020A  1632 	C$i2c.h$166$3$84 ==.
                                   1633 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1634 00104$:
      00020A C0 07            [24] 1635 	push	ar7
      00020C C0 06            [24] 1636 	push	ar6
      00020E C0 05            [24] 1637 	push	ar5
      000210 12r01r1A         [24] 1638 	lcall	_read_keypad
      000213 AC 82            [24] 1639 	mov	r4,dpl
      000215 D0 05            [24] 1640 	pop	ar5
      000217 D0 06            [24] 1641 	pop	ar6
      000219 D0 07            [24] 1642 	pop	ar7
      00021B 8C 03            [24] 1643 	mov	ar3,r4
      00021D BC FF 02         [24] 1644 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1645 	sjmp	00105$
      000222                       1646 00146$:
      000222 BB 2A 17         [24] 1647 	cjne	r3,#0x2A,00106$
      000225                       1648 00105$:
      000225 90 27 10         [24] 1649 	mov	dptr,#0x2710
      000228 E4               [12] 1650 	clr	a
      000229 F5 F0            [12] 1651 	mov	b,a
      00022B C0 07            [24] 1652 	push	ar7
      00022D C0 06            [24] 1653 	push	ar6
      00022F C0 05            [24] 1654 	push	ar5
      000231 12r03r0D         [24] 1655 	lcall	_delay_time
      000234 D0 05            [24] 1656 	pop	ar5
      000236 D0 06            [24] 1657 	pop	ar6
      000238 D0 07            [24] 1658 	pop	ar7
      00023A 80 CE            [24] 1659 	sjmp	00104$
      00023C                       1660 00106$:
                           00023C  1661 	C$i2c.h$167$2$82 ==.
                                   1662 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1663 	cjne	r3,#0x23,00114$
                           00023F  1664 	C$i2c.h$169$3$83 ==.
                                   1665 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1666 00107$:
      00023F C0 06            [24] 1667 	push	ar6
      000241 C0 05            [24] 1668 	push	ar5
      000243 12r01r1A         [24] 1669 	lcall	_read_keypad
      000246 AC 82            [24] 1670 	mov	r4,dpl
      000248 D0 05            [24] 1671 	pop	ar5
      00024A D0 06            [24] 1672 	pop	ar6
      00024C BC 23 13         [24] 1673 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1674 	mov	dptr,#0x2710
      000252 E4               [12] 1675 	clr	a
      000253 F5 F0            [12] 1676 	mov	b,a
      000255 C0 06            [24] 1677 	push	ar6
      000257 C0 05            [24] 1678 	push	ar5
      000259 12r03r0D         [24] 1679 	lcall	_delay_time
      00025C D0 05            [24] 1680 	pop	ar5
      00025E D0 06            [24] 1681 	pop	ar6
      000260 80 DD            [24] 1682 	sjmp	00107$
      000262                       1683 00109$:
                           000262  1684 	C$i2c.h$170$3$83 ==.
                                   1685 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1686 	mov	dpl,r5
      000264 8E 83            [24] 1687 	mov	dph,r6
      000266 02r03r0C         [24] 1688 	ljmp	00119$
      000269                       1689 00114$:
                           000269  1690 	C$i2c.h$174$3$84 ==.
                                   1691 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1692 	mov	a,r3
      00026A FA               [12] 1693 	mov	r2,a
      00026B 33               [12] 1694 	rlc	a
      00026C 95 E0            [12] 1695 	subb	a,acc
      00026E FC               [12] 1696 	mov	r4,a
      00026F C0 07            [24] 1697 	push	ar7
      000271 C0 06            [24] 1698 	push	ar6
      000273 C0 05            [24] 1699 	push	ar5
      000275 C0 04            [24] 1700 	push	ar4
      000277 C0 03            [24] 1701 	push	ar3
      000279 C0 02            [24] 1702 	push	ar2
      00027B C0 02            [24] 1703 	push	ar2
      00027D C0 04            [24] 1704 	push	ar4
      00027F 74r26            [12] 1705 	mov	a,#___str_2
      000281 C0 E0            [24] 1706 	push	acc
      000283 74s00            [12] 1707 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1708 	push	acc
      000287 74 80            [12] 1709 	mov	a,#0x80
      000289 C0 E0            [24] 1710 	push	acc
      00028B 12r00r5C         [24] 1711 	lcall	_lcd_print
      00028E E5 81            [12] 1712 	mov	a,sp
      000290 24 FB            [12] 1713 	add	a,#0xfb
      000292 F5 81            [12] 1714 	mov	sp,a
      000294 D0 02            [24] 1715 	pop	ar2
      000296 D0 03            [24] 1716 	pop	ar3
      000298 D0 04            [24] 1717 	pop	ar4
      00029A D0 05            [24] 1718 	pop	ar5
      00029C D0 06            [24] 1719 	pop	ar6
                           00029E  1720 	C$i2c.h$175$1$81 ==.
                                   1721 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1722 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1723 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1724 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1725 	push	ar4
      0002A7 C0 03            [24] 1726 	push	ar3
      0002A9 C0 02            [24] 1727 	push	ar2
      0002AB 12r00r00         [24] 1728 	lcall	__mulint
      0002AE A8 82            [24] 1729 	mov	r0,dpl
      0002B0 A9 83            [24] 1730 	mov	r1,dph
      0002B2 D0 02            [24] 1731 	pop	ar2
      0002B4 D0 03            [24] 1732 	pop	ar3
      0002B6 D0 04            [24] 1733 	pop	ar4
      0002B8 D0 07            [24] 1734 	pop	ar7
      0002BA EA               [12] 1735 	mov	a,r2
      0002BB 28               [12] 1736 	add	a,r0
      0002BC F8               [12] 1737 	mov	r0,a
      0002BD EC               [12] 1738 	mov	a,r4
      0002BE 39               [12] 1739 	addc	a,r1
      0002BF F9               [12] 1740 	mov	r1,a
      0002C0 E8               [12] 1741 	mov	a,r0
      0002C1 24 D0            [12] 1742 	add	a,#0xD0
      0002C3 FD               [12] 1743 	mov	r5,a
      0002C4 E9               [12] 1744 	mov	a,r1
      0002C5 34 FF            [12] 1745 	addc	a,#0xFF
      0002C7 FE               [12] 1746 	mov	r6,a
                           0002C8  1747 	C$i2c.h$176$3$84 ==.
                                   1748 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1749 00110$:
      0002C8 C0 07            [24] 1750 	push	ar7
      0002CA C0 06            [24] 1751 	push	ar6
      0002CC C0 05            [24] 1752 	push	ar5
      0002CE C0 03            [24] 1753 	push	ar3
      0002D0 12r01r1A         [24] 1754 	lcall	_read_keypad
      0002D3 AC 82            [24] 1755 	mov	r4,dpl
      0002D5 D0 03            [24] 1756 	pop	ar3
      0002D7 D0 05            [24] 1757 	pop	ar5
      0002D9 D0 06            [24] 1758 	pop	ar6
      0002DB D0 07            [24] 1759 	pop	ar7
      0002DD EC               [12] 1760 	mov	a,r4
      0002DE B5 03 1B         [24] 1761 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1762 	mov	dptr,#0x2710
      0002E4 E4               [12] 1763 	clr	a
      0002E5 F5 F0            [12] 1764 	mov	b,a
      0002E7 C0 07            [24] 1765 	push	ar7
      0002E9 C0 06            [24] 1766 	push	ar6
      0002EB C0 05            [24] 1767 	push	ar5
      0002ED C0 03            [24] 1768 	push	ar3
      0002EF 12r03r0D         [24] 1769 	lcall	_delay_time
      0002F2 D0 03            [24] 1770 	pop	ar3
      0002F4 D0 05            [24] 1771 	pop	ar5
      0002F6 D0 06            [24] 1772 	pop	ar6
      0002F8 D0 07            [24] 1773 	pop	ar7
      0002FA 80 CC            [24] 1774 	sjmp	00110$
      0002FC                       1775 00118$:
                           0002FC  1776 	C$i2c.h$164$1$81 ==.
                                   1777 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1778 	inc	r7
      0002FD C3               [12] 1779 	clr	c
      0002FE EF               [12] 1780 	mov	a,r7
      0002FF 64 80            [12] 1781 	xrl	a,#0x80
      000301 94 85            [12] 1782 	subb	a,#0x85
      000303 50 03            [24] 1783 	jnc	00155$
      000305 02r02r0A         [24] 1784 	ljmp	00104$
      000308                       1785 00155$:
                           000308  1786 	C$i2c.h$179$1$81 ==.
                                   1787 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1788 	mov	dpl,r5
      00030A 8E 83            [24] 1789 	mov	dph,r6
      00030C                       1790 00119$:
                           00030C  1791 	C$i2c.h$180$1$81 ==.
                           00030C  1792 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1793 	ret
                                   1794 ;------------------------------------------------------------
                                   1795 ;Allocation info for local variables in function 'delay_time'
                                   1796 ;------------------------------------------------------------
                                   1797 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1798 ;index                     Allocated to registers 
                                   1799 ;------------------------------------------------------------
                           00030D  1800 	G$delay_time$0$0 ==.
                           00030D  1801 	C$i2c.h$189$1$81 ==.
                                   1802 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1803 ;	-----------------------------------------
                                   1804 ;	 function delay_time
                                   1805 ;	-----------------------------------------
      00030D                       1806 _delay_time:
      00030D AC 82            [24] 1807 	mov	r4,dpl
      00030F AD 83            [24] 1808 	mov	r5,dph
      000311 AE F0            [24] 1809 	mov	r6,b
      000313 FF               [12] 1810 	mov	r7,a
                           000314  1811 	C$i2c.h$192$1$86 ==.
                                   1812 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1813 	mov	r0,#0x00
      000316 79 00            [12] 1814 	mov	r1,#0x00
      000318 7A 00            [12] 1815 	mov	r2,#0x00
      00031A 7B 00            [12] 1816 	mov	r3,#0x00
      00031C                       1817 00103$:
      00031C C3               [12] 1818 	clr	c
      00031D E8               [12] 1819 	mov	a,r0
      00031E 9C               [12] 1820 	subb	a,r4
      00031F E9               [12] 1821 	mov	a,r1
      000320 9D               [12] 1822 	subb	a,r5
      000321 EA               [12] 1823 	mov	a,r2
      000322 9E               [12] 1824 	subb	a,r6
      000323 EB               [12] 1825 	mov	a,r3
      000324 9F               [12] 1826 	subb	a,r7
      000325 50 0F            [24] 1827 	jnc	00105$
      000327 08               [12] 1828 	inc	r0
      000328 B8 00 09         [24] 1829 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1830 	inc	r1
      00032C B9 00 05         [24] 1831 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1832 	inc	r2
      000330 BA 00 E9         [24] 1833 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1834 	inc	r3
      000334                       1835 00115$:
      000334 80 E6            [24] 1836 	sjmp	00103$
      000336                       1837 00105$:
                           000336  1838 	C$i2c.h$193$1$86 ==.
                           000336  1839 	XG$delay_time$0$0 ==.
      000336 22               [24] 1840 	ret
                                   1841 ;------------------------------------------------------------
                                   1842 ;Allocation info for local variables in function 'i2c_start'
                                   1843 ;------------------------------------------------------------
                           000337  1844 	G$i2c_start$0$0 ==.
                           000337  1845 	C$i2c.h$196$1$86 ==.
                                   1846 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1847 ;	-----------------------------------------
                                   1848 ;	 function i2c_start
                                   1849 ;	-----------------------------------------
      000337                       1850 _i2c_start:
                           000337  1851 	C$i2c.h$198$1$88 ==.
                                   1852 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1853 00101$:
      000337 20 C7 FD         [24] 1854 	jb	_BUSY,00101$
                           00033A  1855 	C$i2c.h$199$1$88 ==.
                                   1856 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1857 	setb	_STA
                           00033C  1858 	C$i2c.h$200$1$88 ==.
                                   1859 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1860 00104$:
      00033C 30 C3 FD         [24] 1861 	jnb	_SI,00104$
                           00033F  1862 	C$i2c.h$201$1$88 ==.
                                   1863 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1864 	clr	_STA
                           000341  1865 	C$i2c.h$202$1$88 ==.
                                   1866 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1867 	clr	_SI
                           000343  1868 	C$i2c.h$203$1$88 ==.
                           000343  1869 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1870 	ret
                                   1871 ;------------------------------------------------------------
                                   1872 ;Allocation info for local variables in function 'i2c_write'
                                   1873 ;------------------------------------------------------------
                                   1874 ;output_data               Allocated to registers 
                                   1875 ;------------------------------------------------------------
                           000344  1876 	G$i2c_write$0$0 ==.
                           000344  1877 	C$i2c.h$206$1$88 ==.
                                   1878 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1879 ;	-----------------------------------------
                                   1880 ;	 function i2c_write
                                   1881 ;	-----------------------------------------
      000344                       1882 _i2c_write:
      000344 85 82 C2         [24] 1883 	mov	_SMB0DAT,dpl
                           000347  1884 	C$i2c.h$209$1$90 ==.
                                   1885 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1886 00101$:
                           000347  1887 	C$i2c.h$210$1$90 ==.
                                   1888 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1889 	jbc	_SI,00112$
      00034A 80 FB            [24] 1890 	sjmp	00101$
      00034C                       1891 00112$:
                           00034C  1892 	C$i2c.h$211$1$90 ==.
                           00034C  1893 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1894 	ret
                                   1895 ;------------------------------------------------------------
                                   1896 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1897 ;------------------------------------------------------------
                                   1898 ;output_data               Allocated to registers 
                                   1899 ;------------------------------------------------------------
                           00034D  1900 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1901 	C$i2c.h$214$1$90 ==.
                                   1902 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1903 ;	-----------------------------------------
                                   1904 ;	 function i2c_write_and_stop
                                   1905 ;	-----------------------------------------
      00034D                       1906 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 1907 	mov	_SMB0DAT,dpl
                           000350  1908 	C$i2c.h$217$1$92 ==.
                                   1909 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 1910 	setb	_STO
                           000352  1911 	C$i2c.h$218$1$92 ==.
                                   1912 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       1913 00101$:
                           000352  1914 	C$i2c.h$219$1$92 ==.
                                   1915 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 1916 	jbc	_SI,00112$
      000355 80 FB            [24] 1917 	sjmp	00101$
      000357                       1918 00112$:
                           000357  1919 	C$i2c.h$220$1$92 ==.
                           000357  1920 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 1921 	ret
                                   1922 ;------------------------------------------------------------
                                   1923 ;Allocation info for local variables in function 'i2c_read'
                                   1924 ;------------------------------------------------------------
                                   1925 ;input_data                Allocated to registers 
                                   1926 ;------------------------------------------------------------
                           000358  1927 	G$i2c_read$0$0 ==.
                           000358  1928 	C$i2c.h$223$1$92 ==.
                                   1929 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   1930 ;	-----------------------------------------
                                   1931 ;	 function i2c_read
                                   1932 ;	-----------------------------------------
      000358                       1933 _i2c_read:
                           000358  1934 	C$i2c.h$226$1$94 ==.
                                   1935 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       1936 00101$:
      000358 30 C3 FD         [24] 1937 	jnb	_SI,00101$
                           00035B  1938 	C$i2c.h$227$1$94 ==.
                                   1939 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 1940 	mov	dpl,_SMB0DAT
                           00035E  1941 	C$i2c.h$228$1$94 ==.
                                   1942 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 1943 	clr	_SI
                           000360  1944 	C$i2c.h$229$1$94 ==.
                                   1945 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  1946 	C$i2c.h$230$1$94 ==.
                           000360  1947 	XG$i2c_read$0$0 ==.
      000360 22               [24] 1948 	ret
                                   1949 ;------------------------------------------------------------
                                   1950 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   1951 ;------------------------------------------------------------
                                   1952 ;input_data                Allocated to registers r7 
                                   1953 ;------------------------------------------------------------
                           000361  1954 	G$i2c_read_and_stop$0$0 ==.
                           000361  1955 	C$i2c.h$233$1$94 ==.
                                   1956 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   1957 ;	-----------------------------------------
                                   1958 ;	 function i2c_read_and_stop
                                   1959 ;	-----------------------------------------
      000361                       1960 _i2c_read_and_stop:
                           000361  1961 	C$i2c.h$236$1$96 ==.
                                   1962 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       1963 00101$:
      000361 30 C3 FD         [24] 1964 	jnb	_SI,00101$
                           000364  1965 	C$i2c.h$237$1$96 ==.
                                   1966 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 1967 	mov	r7,_SMB0DAT
                           000366  1968 	C$i2c.h$238$1$96 ==.
                                   1969 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 1970 	clr	_SI
                           000368  1971 	C$i2c.h$239$1$96 ==.
                                   1972 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 1973 	setb	_STO
                           00036A  1974 	C$i2c.h$240$1$96 ==.
                                   1975 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       1976 00104$:
                           00036A  1977 	C$i2c.h$241$1$96 ==.
                                   1978 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 1979 	jbc	_SI,00122$
      00036D 80 FB            [24] 1980 	sjmp	00104$
      00036F                       1981 00122$:
                           00036F  1982 	C$i2c.h$242$1$96 ==.
                                   1983 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 1984 	mov	dpl,r7
                           000371  1985 	C$i2c.h$243$1$96 ==.
                           000371  1986 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 1987 	ret
                                   1988 ;------------------------------------------------------------
                                   1989 ;Allocation info for local variables in function 'i2c_write_data'
                                   1990 ;------------------------------------------------------------
                                   1991 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   1992 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   1993 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   1994 ;addr                      Allocated to registers r7 
                                   1995 ;i                         Allocated to registers 
                                   1996 ;------------------------------------------------------------
                           000372  1997 	G$i2c_write_data$0$0 ==.
                           000372  1998 	C$i2c.h$246$1$96 ==.
                                   1999 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2000 ;	-----------------------------------------
                                   2001 ;	 function i2c_write_data
                                   2002 ;	-----------------------------------------
      000372                       2003 _i2c_write_data:
      000372 AF 82            [24] 2004 	mov	r7,dpl
                           000374  2005 	C$i2c.h$250$1$98 ==.
                                   2006 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2007 	push	ar7
      000376 12r03r37         [24] 2008 	lcall	_i2c_start
      000379 D0 07            [24] 2009 	pop	ar7
                           00037B  2010 	C$i2c.h$251$1$98 ==.
                                   2011 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2012 	mov	a,#0xFE
      00037D 5F               [12] 2013 	anl	a,r7
      00037E F5 82            [12] 2014 	mov	dpl,a
      000380 12r03r44         [24] 2015 	lcall	_i2c_write
                           000383  2016 	C$i2c.h$252$1$98 ==.
                                   2017 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2018 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2019 	lcall	_i2c_write
                           000389  2020 	C$i2c.h$253$1$98 ==.
                                   2021 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2022 	mov	r7,#0x00
      00038B                       2023 00103$:
      00038B AD*09            [24] 2024 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2025 	mov	r6,#0x00
      00038F 1D               [12] 2026 	dec	r5
      000390 BD FF 01         [24] 2027 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2028 	dec	r6
      000394                       2029 00114$:
      000394 8F 03            [24] 2030 	mov	ar3,r7
      000396 7C 00            [12] 2031 	mov	r4,#0x00
      000398 C3               [12] 2032 	clr	c
      000399 EB               [12] 2033 	mov	a,r3
      00039A 9D               [12] 2034 	subb	a,r5
      00039B EC               [12] 2035 	mov	a,r4
      00039C 64 80            [12] 2036 	xrl	a,#0x80
      00039E 8E F0            [24] 2037 	mov	b,r6
      0003A0 63 F0 80         [24] 2038 	xrl	b,#0x80
      0003A3 95 F0            [12] 2039 	subb	a,b
      0003A5 50 1F            [24] 2040 	jnc	00101$
                           0003A7  2041 	C$i2c.h$254$1$98 ==.
                                   2042 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2043 	mov	a,r7
      0003A8 25*06            [12] 2044 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2045 	mov	r4,a
      0003AB E4               [12] 2046 	clr	a
      0003AC 35*07            [12] 2047 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2048 	mov	r5,a
      0003AF AE*08            [24] 2049 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2050 	mov	dpl,r4
      0003B3 8D 83            [24] 2051 	mov	dph,r5
      0003B5 8E F0            [24] 2052 	mov	b,r6
      0003B7 12r00r00         [24] 2053 	lcall	__gptrget
      0003BA F5 82            [12] 2054 	mov	dpl,a
      0003BC C0 07            [24] 2055 	push	ar7
      0003BE 12r03r44         [24] 2056 	lcall	_i2c_write
      0003C1 D0 07            [24] 2057 	pop	ar7
                           0003C3  2058 	C$i2c.h$253$1$98 ==.
                                   2059 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2060 	inc	r7
      0003C4 80 C5            [24] 2061 	sjmp	00103$
      0003C6                       2062 00101$:
                           0003C6  2063 	C$i2c.h$255$1$98 ==.
                                   2064 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2065 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2066 	mov	r7,#0x00
      0003CA 1E               [12] 2067 	dec	r6
      0003CB BE FF 01         [24] 2068 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2069 	dec	r7
      0003CF                       2070 00116$:
      0003CF EE               [12] 2071 	mov	a,r6
      0003D0 25*06            [12] 2072 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2073 	mov	r6,a
      0003D3 EF               [12] 2074 	mov	a,r7
      0003D4 35*07            [12] 2075 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2076 	mov	r7,a
      0003D7 AD*08            [24] 2077 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2078 	mov	dpl,r6
      0003DB 8F 83            [24] 2079 	mov	dph,r7
      0003DD 8D F0            [24] 2080 	mov	b,r5
      0003DF 12r00r00         [24] 2081 	lcall	__gptrget
      0003E2 F5 82            [12] 2082 	mov	dpl,a
      0003E4 12r03r4D         [24] 2083 	lcall	_i2c_write_and_stop
                           0003E7  2084 	C$i2c.h$256$1$98 ==.
                           0003E7  2085 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2086 	ret
                                   2087 ;------------------------------------------------------------
                                   2088 ;Allocation info for local variables in function 'i2c_read_data'
                                   2089 ;------------------------------------------------------------
                                   2090 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2091 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2092 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2093 ;addr                      Allocated to registers r7 
                                   2094 ;j                         Allocated to registers 
                                   2095 ;------------------------------------------------------------
                           0003E8  2096 	G$i2c_read_data$0$0 ==.
                           0003E8  2097 	C$i2c.h$259$1$98 ==.
                                   2098 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2099 ;	-----------------------------------------
                                   2100 ;	 function i2c_read_data
                                   2101 ;	-----------------------------------------
      0003E8                       2102 _i2c_read_data:
      0003E8 AF 82            [24] 2103 	mov	r7,dpl
                           0003EA  2104 	C$i2c.h$262$1$100 ==.
                                   2105 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2106 	push	ar7
      0003EC 12r03r37         [24] 2107 	lcall	_i2c_start
      0003EF D0 07            [24] 2108 	pop	ar7
                           0003F1  2109 	C$i2c.h$263$1$100 ==.
                                   2110 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2111 	mov	ar6,r7
      0003F3 74 FE            [12] 2112 	mov	a,#0xFE
      0003F5 5E               [12] 2113 	anl	a,r6
      0003F6 F5 82            [12] 2114 	mov	dpl,a
      0003F8 C0 07            [24] 2115 	push	ar7
      0003FA 12r03r44         [24] 2116 	lcall	_i2c_write
                           0003FD  2117 	C$i2c.h$264$1$100 ==.
                                   2118 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2119 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2120 	lcall	_i2c_write_and_stop
                           000403  2121 	C$i2c.h$265$1$100 ==.
                                   2122 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2123 	lcall	_i2c_start
      000406 D0 07            [24] 2124 	pop	ar7
                           000408  2125 	C$i2c.h$266$1$100 ==.
                                   2126 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2127 	mov	a,#0x01
      00040A 4F               [12] 2128 	orl	a,r7
      00040B F5 82            [12] 2129 	mov	dpl,a
      00040D 12r03r44         [24] 2130 	lcall	_i2c_write
                           000410  2131 	C$i2c.h$267$1$100 ==.
                                   2132 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2133 	mov	r7,#0x00
      000412                       2134 00103$:
      000412 AD*0E            [24] 2135 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2136 	mov	r6,#0x00
      000416 1D               [12] 2137 	dec	r5
      000417 BD FF 01         [24] 2138 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2139 	dec	r6
      00041B                       2140 00114$:
      00041B 8F 03            [24] 2141 	mov	ar3,r7
      00041D 7C 00            [12] 2142 	mov	r4,#0x00
      00041F C3               [12] 2143 	clr	c
      000420 EB               [12] 2144 	mov	a,r3
      000421 9D               [12] 2145 	subb	a,r5
      000422 EC               [12] 2146 	mov	a,r4
      000423 64 80            [12] 2147 	xrl	a,#0x80
      000425 8E F0            [24] 2148 	mov	b,r6
      000427 63 F0 80         [24] 2149 	xrl	b,#0x80
      00042A 95 F0            [12] 2150 	subb	a,b
      00042C 50 2E            [24] 2151 	jnc	00101$
                           00042E  2152 	C$i2c.h$269$2$101 ==.
                                   2153 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2154 	setb	_AA
                           000430  2155 	C$i2c.h$270$2$101 ==.
                                   2156 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2157 	mov	a,r7
      000431 25*0B            [12] 2158 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2159 	mov	r4,a
      000434 E4               [12] 2160 	clr	a
      000435 35*0C            [12] 2161 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2162 	mov	r5,a
      000438 AE*0D            [24] 2163 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2164 	push	ar7
      00043C C0 06            [24] 2165 	push	ar6
      00043E C0 05            [24] 2166 	push	ar5
      000440 C0 04            [24] 2167 	push	ar4
      000442 12r03r58         [24] 2168 	lcall	_i2c_read
      000445 AB 82            [24] 2169 	mov	r3,dpl
      000447 D0 04            [24] 2170 	pop	ar4
      000449 D0 05            [24] 2171 	pop	ar5
      00044B D0 06            [24] 2172 	pop	ar6
      00044D D0 07            [24] 2173 	pop	ar7
      00044F 8C 82            [24] 2174 	mov	dpl,r4
      000451 8D 83            [24] 2175 	mov	dph,r5
      000453 8E F0            [24] 2176 	mov	b,r6
      000455 EB               [12] 2177 	mov	a,r3
      000456 12r00r00         [24] 2178 	lcall	__gptrput
                           000459  2179 	C$i2c.h$267$1$100 ==.
                                   2180 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2181 	inc	r7
      00045A 80 B6            [24] 2182 	sjmp	00103$
      00045C                       2183 00101$:
                           00045C  2184 	C$i2c.h$272$1$100 ==.
                                   2185 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2186 	clr	_AA
                           00045E  2187 	C$i2c.h$273$1$100 ==.
                                   2188 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2189 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2190 	mov	r7,#0x00
      000462 1E               [12] 2191 	dec	r6
      000463 BE FF 01         [24] 2192 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2193 	dec	r7
      000467                       2194 00116$:
      000467 EE               [12] 2195 	mov	a,r6
      000468 25*0B            [12] 2196 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2197 	mov	r6,a
      00046B EF               [12] 2198 	mov	a,r7
      00046C 35*0C            [12] 2199 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2200 	mov	r7,a
      00046F AD*0D            [24] 2201 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2202 	push	ar7
      000473 C0 06            [24] 2203 	push	ar6
      000475 C0 05            [24] 2204 	push	ar5
      000477 12r03r61         [24] 2205 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2206 	mov	r4,dpl
      00047C D0 05            [24] 2207 	pop	ar5
      00047E D0 06            [24] 2208 	pop	ar6
      000480 D0 07            [24] 2209 	pop	ar7
      000482 8E 82            [24] 2210 	mov	dpl,r6
      000484 8F 83            [24] 2211 	mov	dph,r7
      000486 8D F0            [24] 2212 	mov	b,r5
      000488 EC               [12] 2213 	mov	a,r4
      000489 12r00r00         [24] 2214 	lcall	__gptrput
                           00048C  2215 	C$i2c.h$274$1$100 ==.
                           00048C  2216 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2217 	ret
                                   2218 ;------------------------------------------------------------
                                   2219 ;Allocation info for local variables in function 'Accel_Init'
                                   2220 ;------------------------------------------------------------
                                   2221 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2222 ;------------------------------------------------------------
                           00048D  2223 	G$Accel_Init$0$0 ==.
                           00048D  2224 	C$i2c.h$283$1$100 ==.
                                   2225 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2226 ;	-----------------------------------------
                                   2227 ;	 function Accel_Init
                                   2228 ;	-----------------------------------------
      00048D                       2229 _Accel_Init:
                           00048D  2230 	C$i2c.h$287$1$103 ==.
                                   2231 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2232 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2233 	C$i2c.h$289$1$103 ==.
                                   2234 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2235 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2236 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2237 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2238 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2239 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2240 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2241 	lcall	_i2c_write_data
                           0004A5  2242 	C$i2c.h$290$1$103 ==.
                                   2243 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2244 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2245 	C$i2c.h$292$1$103 ==.
                                   2246 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2247 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2248 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2249 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2250 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2251 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2252 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2253 	lcall	_i2c_write_data
                           0004BD  2254 	C$i2c.h$293$1$103 ==.
                                   2255 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2256 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2257 	C$i2c.h$294$1$103 ==.
                                   2258 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2259 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2260 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2261 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2262 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2263 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2264 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2265 	lcall	_i2c_write_data
                           0004D5  2266 	C$i2c.h$298$1$103 ==.
                           0004D5  2267 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2268 	ret
                                   2269 ;------------------------------------------------------------
                                   2270 ;Allocation info for local variables in function 'main'
                                   2271 ;------------------------------------------------------------
                           0004D6  2272 	G$main$0$0 ==.
                           0004D6  2273 	C$lab3_3compass.c$37$1$103 ==.
                                   2274 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:37: void main(void)
                                   2275 ;	-----------------------------------------
                                   2276 ;	 function main
                                   2277 ;	-----------------------------------------
      0004D6                       2278 _main:
                           0004D6  2279 	C$lab3_3compass.c$40$1$111 ==.
                                   2280 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:40: Sys_Init();
      0004D6 12r00r30         [24] 2281 	lcall	_Sys_Init
                           0004D9  2282 	C$lab3_3compass.c$41$1$111 ==.
                                   2283 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:41: putchar(' '); //the quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2284 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2285 	lcall	_putchar
                           0004DF  2286 	C$lab3_3compass.c$42$1$111 ==.
                                   2287 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:42: Port_Init();
      0004DF 12r05r8A         [24] 2288 	lcall	_Port_Init
                           0004E2  2289 	C$lab3_3compass.c$43$1$111 ==.
                                   2290 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:43: XBR0_Init();
      0004E2 12r05rBB         [24] 2291 	lcall	_XBR0_Init
                           0004E5  2292 	C$lab3_3compass.c$44$1$111 ==.
                                   2293 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:44: PCA_Init();
      0004E5 12r05rC5         [24] 2294 	lcall	_PCA_Init
                           0004E8  2295 	C$lab3_3compass.c$45$1$111 ==.
                                   2296 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:45: SMB_Init();
      0004E8 12r05rBF         [24] 2297 	lcall	_SMB_Init
                           0004EB  2298 	C$lab3_3compass.c$48$1$111 ==.
                                   2299 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:48: printf("Embedded Control Steering Calibration\n");
      0004EB 74r29            [12] 2300 	mov	a,#___str_3
      0004ED C0 E0            [24] 2301 	push	acc
      0004EF 74s00            [12] 2302 	mov	a,#(___str_3 >> 8)
      0004F1 C0 E0            [24] 2303 	push	acc
      0004F3 74 80            [12] 2304 	mov	a,#0x80
      0004F5 C0 E0            [24] 2305 	push	acc
      0004F7 12r00r00         [24] 2306 	lcall	_printf
      0004FA 15 81            [12] 2307 	dec	sp
      0004FC 15 81            [12] 2308 	dec	sp
      0004FE 15 81            [12] 2309 	dec	sp
                           000500  2310 	C$lab3_3compass.c$52$1$111 ==.
                                   2311 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:52: STR_PW = PW_CENTER_STR;
      000500 75*12 7D         [24] 2312 	mov	_STR_PW,#0x7D
      000503 75*13 0A         [24] 2313 	mov	(_STR_PW + 1),#0x0A
                           000506  2314 	C$lab3_3compass.c$53$1$111 ==.
                                   2315 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:53: tmp0_lo_to_hi= 0xFFFF - STR_PW;
      000506 75*10 82         [24] 2316 	mov	_tmp0_lo_to_hi,#0x82
      000509 75*11 F5         [24] 2317 	mov	(_tmp0_lo_to_hi + 1),#0xF5
                           00050C  2318 	C$lab3_3compass.c$54$1$111 ==.
                                   2319 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:54: PCA0CP0 = tmp0_lo_to_hi;
      00050C 75 EA 82         [24] 2320 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x82
      00050F 75 FA F5         [24] 2321 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           000512  2322 	C$lab3_3compass.c$55$1$111 ==.
                                   2323 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:55: count=0;
      000512 E4               [12] 2324 	clr	a
      000513 F5*14            [12] 2325 	mov	_count,a
      000515 F5*15            [12] 2326 	mov	(_count + 1),a
                           000517  2327 	C$lab3_3compass.c$56$1$111 ==.
                                   2328 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:56: while (count < 50);
      000517                       2329 00101$:
      000517 C3               [12] 2330 	clr	c
      000518 E5*14            [12] 2331 	mov	a,_count
      00051A 94 32            [12] 2332 	subb	a,#0x32
      00051C E5*15            [12] 2333 	mov	a,(_count + 1)
      00051E 94 00            [12] 2334 	subb	a,#0x00
      000520 40 F5            [24] 2335 	jc	00101$
                           000522  2336 	C$lab3_3compass.c$57$1$111 ==.
                                   2337 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:57: while (1)
      000522                       2338 00108$:
                           000522  2339 	C$lab3_3compass.c$59$2$112 ==.
                                   2340 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:59: count =0;
      000522 E4               [12] 2341 	clr	a
      000523 F5*14            [12] 2342 	mov	_count,a
      000525 F5*15            [12] 2343 	mov	(_count + 1),a
                           000527  2344 	C$lab3_3compass.c$60$2$112 ==.
                                   2345 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:60: while (count < 2);
      000527                       2346 00104$:
      000527 C3               [12] 2347 	clr	c
      000528 E5*14            [12] 2348 	mov	a,_count
      00052A 94 02            [12] 2349 	subb	a,#0x02
      00052C E5*15            [12] 2350 	mov	a,(_count + 1)
      00052E 94 00            [12] 2351 	subb	a,#0x00
      000530 40 F5            [24] 2352 	jc	00104$
                           000532  2353 	C$lab3_3compass.c$61$2$112 ==.
                                   2354 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:61: actual_heading = ReadCompass();
      000532 12r05r95         [24] 2355 	lcall	_ReadCompass
      000535 85 82*17         [24] 2356 	mov	_actual_heading,dpl
      000538 85 83*18         [24] 2357 	mov	(_actual_heading + 1),dph
                           00053B  2358 	C$lab3_3compass.c$62$2$112 ==.
                                   2359 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:62: offset = (unsigned int)((actual_heading +3600- desired_heading ) % 3600);
      00053B 74 10            [12] 2360 	mov	a,#0x10
      00053D 25*17            [12] 2361 	add	a,_actual_heading
      00053F FE               [12] 2362 	mov	r6,a
      000540 74 0E            [12] 2363 	mov	a,#0x0E
      000542 35*18            [12] 2364 	addc	a,(_actual_heading + 1)
      000544 FF               [12] 2365 	mov	r7,a
      000545 EE               [12] 2366 	mov	a,r6
      000546 C3               [12] 2367 	clr	c
      000547 95*19            [12] 2368 	subb	a,_desired_heading
      000549 F5 82            [12] 2369 	mov	dpl,a
      00054B EF               [12] 2370 	mov	a,r7
      00054C 95*1A            [12] 2371 	subb	a,(_desired_heading + 1)
      00054E F5 83            [12] 2372 	mov	dph,a
      000550 75*00 10         [24] 2373 	mov	__modsint_PARM_2,#0x10
      000553 75*01 0E         [24] 2374 	mov	(__modsint_PARM_2 + 1),#0x0E
      000556 12r00r00         [24] 2375 	lcall	__modsint
      000559 AE 82            [24] 2376 	mov	r6,dpl
      00055B AF 83            [24] 2377 	mov	r7,dph
      00055D 8E*1D            [24] 2378 	mov	_offset,r6
      00055F 8F*1E            [24] 2379 	mov	(_offset + 1),r7
                           000561  2380 	C$lab3_3compass.c$63$2$112 ==.
                                   2381 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:63: printf("\r\n%d||%d",actual_heading,offset);
      000561 C0*1D            [24] 2382 	push	_offset
      000563 C0*1E            [24] 2383 	push	(_offset + 1)
      000565 C0*17            [24] 2384 	push	_actual_heading
      000567 C0*18            [24] 2385 	push	(_actual_heading + 1)
      000569 74r50            [12] 2386 	mov	a,#___str_4
      00056B C0 E0            [24] 2387 	push	acc
      00056D 74s00            [12] 2388 	mov	a,#(___str_4 >> 8)
      00056F C0 E0            [24] 2389 	push	acc
      000571 74 80            [12] 2390 	mov	a,#0x80
      000573 C0 E0            [24] 2391 	push	acc
      000575 12r00r00         [24] 2392 	lcall	_printf
      000578 E5 81            [12] 2393 	mov	a,sp
      00057A 24 F9            [12] 2394 	add	a,#0xf9
      00057C F5 81            [12] 2395 	mov	sp,a
                           00057E  2396 	C$lab3_3compass.c$64$2$112 ==.
                                   2397 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:64: Steering_Servo(offset);
      00057E 85*1D 82         [24] 2398 	mov	dpl,_offset
      000581 85*1E 83         [24] 2399 	mov	dph,(_offset + 1)
      000584 12r05rF3         [24] 2400 	lcall	_Steering_Servo
      000587 80 99            [24] 2401 	sjmp	00108$
                           000589  2402 	C$lab3_3compass.c$70$1$111 ==.
                           000589  2403 	XG$main$0$0 ==.
      000589 22               [24] 2404 	ret
                                   2405 ;------------------------------------------------------------
                                   2406 ;Allocation info for local variables in function 'Port_Init'
                                   2407 ;------------------------------------------------------------
                           00058A  2408 	G$Port_Init$0$0 ==.
                           00058A  2409 	C$lab3_3compass.c$72$1$111 ==.
                                   2410 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:72: void Port_Init()
                                   2411 ;	-----------------------------------------
                                   2412 ;	 function Port_Init
                                   2413 ;	-----------------------------------------
      00058A                       2414 _Port_Init:
                           00058A  2415 	C$lab3_3compass.c$74$1$113 ==.
                                   2416 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:74: P1MDOUT = 0x0F;  //set output pin for CEX0 or CEX2 in push-pull mode
      00058A 75 A5 0F         [24] 2417 	mov	_P1MDOUT,#0x0F
                           00058D  2418 	C$lab3_3compass.c$75$1$113 ==.
                                   2419 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:75: P0MDOUT &= ~0x32;
      00058D AF A4            [24] 2420 	mov	r7,_P0MDOUT
      00058F 74 CD            [12] 2421 	mov	a,#0xCD
      000591 5F               [12] 2422 	anl	a,r7
      000592 F5 A4            [12] 2423 	mov	_P0MDOUT,a
                           000594  2424 	C$lab3_3compass.c$76$1$113 ==.
                           000594  2425 	XG$Port_Init$0$0 ==.
      000594 22               [24] 2426 	ret
                                   2427 ;------------------------------------------------------------
                                   2428 ;Allocation info for local variables in function 'ReadCompass'
                                   2429 ;------------------------------------------------------------
                                   2430 ;Data                      Allocated with name '_ReadCompass_Data_1_115'
                                   2431 ;range                     Allocated to registers 
                                   2432 ;addr                      Allocated to registers 
                                   2433 ;------------------------------------------------------------
                           000595  2434 	G$ReadCompass$0$0 ==.
                           000595  2435 	C$lab3_3compass.c$78$1$113 ==.
                                   2436 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:78: unsigned int ReadCompass(void)
                                   2437 ;	-----------------------------------------
                                   2438 ;	 function ReadCompass
                                   2439 ;	-----------------------------------------
      000595                       2440 _ReadCompass:
                           000595  2441 	C$lab3_3compass.c$83$1$115 ==.
                                   2442 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:83: i2c_read_data(addr, 2,Data,2);
      000595 75*0Br1F         [24] 2443 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_1_115
      000598 75*0C 00         [24] 2444 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00059B 75*0D 40         [24] 2445 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00059E 75*0A 02         [24] 2446 	mov	_i2c_read_data_PARM_2,#0x02
      0005A1 75*0E 02         [24] 2447 	mov	_i2c_read_data_PARM_4,#0x02
      0005A4 75 82 C0         [24] 2448 	mov	dpl,#0xC0
      0005A7 12r03rE8         [24] 2449 	lcall	_i2c_read_data
                           0005AA  2450 	C$lab3_3compass.c$84$1$115 ==.
                                   2451 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:84: range = ((unsigned int) Data[0] << 8 | Data[1]);
      0005AA AF*1F            [24] 2452 	mov	r7,_ReadCompass_Data_1_115
      0005AC 7E 00            [12] 2453 	mov	r6,#0x00
      0005AE AC*20            [24] 2454 	mov	r4,(_ReadCompass_Data_1_115 + 0x0001)
      0005B0 7D 00            [12] 2455 	mov	r5,#0x00
      0005B2 EC               [12] 2456 	mov	a,r4
      0005B3 4E               [12] 2457 	orl	a,r6
      0005B4 F5 82            [12] 2458 	mov	dpl,a
      0005B6 ED               [12] 2459 	mov	a,r5
      0005B7 4F               [12] 2460 	orl	a,r7
      0005B8 F5 83            [12] 2461 	mov	dph,a
                           0005BA  2462 	C$lab3_3compass.c$85$1$115 ==.
                                   2463 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:85: return range;
                           0005BA  2464 	C$lab3_3compass.c$87$1$115 ==.
                           0005BA  2465 	XG$ReadCompass$0$0 ==.
      0005BA 22               [24] 2466 	ret
                                   2467 ;------------------------------------------------------------
                                   2468 ;Allocation info for local variables in function 'XBR0_Init'
                                   2469 ;------------------------------------------------------------
                           0005BB  2470 	G$XBR0_Init$0$0 ==.
                           0005BB  2471 	C$lab3_3compass.c$95$1$115 ==.
                                   2472 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:95: void XBR0_Init()
                                   2473 ;	-----------------------------------------
                                   2474 ;	 function XBR0_Init
                                   2475 ;	-----------------------------------------
      0005BB                       2476 _XBR0_Init:
                           0005BB  2477 	C$lab3_3compass.c$98$1$116 ==.
                                   2478 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:98: XBR0  = 0x27;  //configure crossbar as directed in the laboratory
      0005BB 75 E1 27         [24] 2479 	mov	_XBR0,#0x27
                           0005BE  2480 	C$lab3_3compass.c$100$1$116 ==.
                           0005BE  2481 	XG$XBR0_Init$0$0 ==.
      0005BE 22               [24] 2482 	ret
                                   2483 ;------------------------------------------------------------
                                   2484 ;Allocation info for local variables in function 'SMB_Init'
                                   2485 ;------------------------------------------------------------
                           0005BF  2486 	G$SMB_Init$0$0 ==.
                           0005BF  2487 	C$lab3_3compass.c$102$1$116 ==.
                                   2488 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:102: void SMB_Init(void)
                                   2489 ;	-----------------------------------------
                                   2490 ;	 function SMB_Init
                                   2491 ;	-----------------------------------------
      0005BF                       2492 _SMB_Init:
                           0005BF  2493 	C$lab3_3compass.c$104$1$118 ==.
                                   2494 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:104: SMB0CR =0x93;
      0005BF 75 CF 93         [24] 2495 	mov	_SMB0CR,#0x93
                           0005C2  2496 	C$lab3_3compass.c$105$1$118 ==.
                                   2497 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:105: ENSMB =1;
      0005C2 D2 C6            [12] 2498 	setb	_ENSMB
                           0005C4  2499 	C$lab3_3compass.c$106$1$118 ==.
                           0005C4  2500 	XG$SMB_Init$0$0 ==.
      0005C4 22               [24] 2501 	ret
                                   2502 ;------------------------------------------------------------
                                   2503 ;Allocation info for local variables in function 'PCA_Init'
                                   2504 ;------------------------------------------------------------
                           0005C5  2505 	G$PCA_Init$0$0 ==.
                           0005C5  2506 	C$lab3_3compass.c$114$1$118 ==.
                                   2507 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:114: void PCA_Init(void)
                                   2508 ;	-----------------------------------------
                                   2509 ;	 function PCA_Init
                                   2510 ;	-----------------------------------------
      0005C5                       2511 _PCA_Init:
                           0005C5  2512 	C$lab3_3compass.c$118$1$120 ==.
                                   2513 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:118: PCA0MD = 0x81;
      0005C5 75 D9 81         [24] 2514 	mov	_PCA0MD,#0x81
                           0005C8  2515 	C$lab3_3compass.c$119$1$120 ==.
                                   2516 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:119: PCA0CPM0 = 0xC2;    //CCM0 in 16-bit compare mode
      0005C8 75 DA C2         [24] 2517 	mov	_PCA0CPM0,#0xC2
                           0005CB  2518 	C$lab3_3compass.c$120$1$120 ==.
                                   2519 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:120: PCA0CN = 0x40;      //Enable PCA counter
      0005CB 75 D8 40         [24] 2520 	mov	_PCA0CN,#0x40
                           0005CE  2521 	C$lab3_3compass.c$121$1$120 ==.
                                   2522 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:121: EIE1 |= 0x08;       //Enable PCA interrupt
      0005CE 43 E6 08         [24] 2523 	orl	_EIE1,#0x08
                           0005D1  2524 	C$lab3_3compass.c$122$1$120 ==.
                                   2525 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:122: EA = 1;             //Enable global interrupts
      0005D1 D2 AF            [12] 2526 	setb	_EA
                           0005D3  2527 	C$lab3_3compass.c$123$1$120 ==.
                           0005D3  2528 	XG$PCA_Init$0$0 ==.
      0005D3 22               [24] 2529 	ret
                                   2530 ;------------------------------------------------------------
                                   2531 ;Allocation info for local variables in function 'PCA_ISR'
                                   2532 ;------------------------------------------------------------
                           0005D4  2533 	G$PCA_ISR$0$0 ==.
                           0005D4  2534 	C$lab3_3compass.c$131$1$120 ==.
                                   2535 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:131: void PCA_ISR ( void ) __interrupt 9
                                   2536 ;	-----------------------------------------
                                   2537 ;	 function PCA_ISR
                                   2538 ;	-----------------------------------------
      0005D4                       2539 _PCA_ISR:
      0005D4 C0 E0            [24] 2540 	push	acc
      0005D6 C0 D0            [24] 2541 	push	psw
                           0005D8  2542 	C$lab3_3compass.c$134$1$122 ==.
                                   2543 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:134: if (CF)
                           0005D8  2544 	C$lab3_3compass.c$136$2$123 ==.
                                   2545 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:136: CF =0;
      0005D8 10 DF 02         [24] 2546 	jbc	_CF,00108$
      0005DB 80 0E            [24] 2547 	sjmp	00102$
      0005DD                       2548 00108$:
                           0005DD  2549 	C$lab3_3compass.c$137$2$123 ==.
                                   2550 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:137: PCA0 = 0x7000;
      0005DD 75 E9 00         [24] 2551 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0005E0 75 F9 70         [24] 2552 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           0005E3  2553 	C$lab3_3compass.c$138$2$123 ==.
                                   2554 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:138: count++;
      0005E3 05*14            [12] 2555 	inc	_count
      0005E5 E4               [12] 2556 	clr	a
      0005E6 B5*14 02         [24] 2557 	cjne	a,_count,00109$
      0005E9 05*15            [12] 2558 	inc	(_count + 1)
      0005EB                       2559 00109$:
      0005EB                       2560 00102$:
                           0005EB  2561 	C$lab3_3compass.c$141$1$122 ==.
                                   2562 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:141: PCA0CN &= 0xC0;
      0005EB 53 D8 C0         [24] 2563 	anl	_PCA0CN,#0xC0
      0005EE D0 D0            [24] 2564 	pop	psw
      0005F0 D0 E0            [24] 2565 	pop	acc
                           0005F2  2566 	C$lab3_3compass.c$144$1$122 ==.
                           0005F2  2567 	XG$PCA_ISR$0$0 ==.
      0005F2 32               [24] 2568 	reti
                                   2569 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2570 ;	eliminated unneeded push/pop dpl
                                   2571 ;	eliminated unneeded push/pop dph
                                   2572 ;	eliminated unneeded push/pop b
                                   2573 ;------------------------------------------------------------
                                   2574 ;Allocation info for local variables in function 'Steering_Servo'
                                   2575 ;------------------------------------------------------------
                                   2576 ;direction                 Allocated with name '_Steering_Servo_direction_1_124'
                                   2577 ;------------------------------------------------------------
                           0005F3  2578 	G$Steering_Servo$0$0 ==.
                           0005F3  2579 	C$lab3_3compass.c$146$1$122 ==.
                                   2580 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:146: void Steering_Servo(unsigned int direction)
                                   2581 ;	-----------------------------------------
                                   2582 ;	 function Steering_Servo
                                   2583 ;	-----------------------------------------
      0005F3                       2584 _Steering_Servo:
      0005F3 85 82*21         [24] 2585 	mov	_Steering_Servo_direction_1_124,dpl
      0005F6 85 83*22         [24] 2586 	mov	(_Steering_Servo_direction_1_124 + 1),dph
                           0005F9  2587 	C$lab3_3compass.c$150$1$125 ==.
                                   2588 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:150: if (direction < 1800)
      0005F9 C3               [12] 2589 	clr	c
      0005FA E5*21            [12] 2590 	mov	a,_Steering_Servo_direction_1_124
      0005FC 94 08            [12] 2591 	subb	a,#0x08
      0005FE E5*22            [12] 2592 	mov	a,(_Steering_Servo_direction_1_124 + 1)
      000600 94 07            [12] 2593 	subb	a,#0x07
      000602 40 03            [24] 2594 	jc	00128$
      000604 02r07r10         [24] 2595 	ljmp	00112$
      000607                       2596 00128$:
                           000607  2597 	C$lab3_3compass.c$152$1$125 ==.
                                   2598 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:152: if (STR_PW <= PW_CENTER_STR - (float)(direction)/4.2)
      000607 85*21 82         [24] 2599 	mov	dpl,_Steering_Servo_direction_1_124
      00060A 85*22 83         [24] 2600 	mov	dph,(_Steering_Servo_direction_1_124 + 1)
      00060D 12r00r00         [24] 2601 	lcall	___uint2fs
      000610 AA 82            [24] 2602 	mov	r2,dpl
      000612 AB 83            [24] 2603 	mov	r3,dph
      000614 AC F0            [24] 2604 	mov	r4,b
      000616 FD               [12] 2605 	mov	r5,a
      000617 74 66            [12] 2606 	mov	a,#0x66
      000619 C0 E0            [24] 2607 	push	acc
      00061B C0 E0            [24] 2608 	push	acc
      00061D 74 86            [12] 2609 	mov	a,#0x86
      00061F C0 E0            [24] 2610 	push	acc
      000621 74 40            [12] 2611 	mov	a,#0x40
      000623 C0 E0            [24] 2612 	push	acc
      000625 8A 82            [24] 2613 	mov	dpl,r2
      000627 8B 83            [24] 2614 	mov	dph,r3
      000629 8C F0            [24] 2615 	mov	b,r4
      00062B ED               [12] 2616 	mov	a,r5
      00062C 12r00r00         [24] 2617 	lcall	___fsdiv
      00062F AA 82            [24] 2618 	mov	r2,dpl
      000631 AB 83            [24] 2619 	mov	r3,dph
      000633 AC F0            [24] 2620 	mov	r4,b
      000635 FD               [12] 2621 	mov	r5,a
      000636 E5 81            [12] 2622 	mov	a,sp
      000638 24 FC            [12] 2623 	add	a,#0xfc
      00063A F5 81            [12] 2624 	mov	sp,a
      00063C C0 02            [24] 2625 	push	ar2
      00063E C0 03            [24] 2626 	push	ar3
      000640 C0 04            [24] 2627 	push	ar4
      000642 C0 05            [24] 2628 	push	ar5
      000644 90 D0 00         [24] 2629 	mov	dptr,#0xD000
      000647 75 F0 27         [24] 2630 	mov	b,#0x27
      00064A 74 45            [12] 2631 	mov	a,#0x45
      00064C 12r00r00         [24] 2632 	lcall	___fssub
      00064F AA 82            [24] 2633 	mov	r2,dpl
      000651 AB 83            [24] 2634 	mov	r3,dph
      000653 AC F0            [24] 2635 	mov	r4,b
      000655 FD               [12] 2636 	mov	r5,a
      000656 E5 81            [12] 2637 	mov	a,sp
      000658 24 FC            [12] 2638 	add	a,#0xfc
      00065A F5 81            [12] 2639 	mov	sp,a
      00065C 85*12 82         [24] 2640 	mov	dpl,_STR_PW
      00065F 85*13 83         [24] 2641 	mov	dph,(_STR_PW + 1)
      000662 C0 05            [24] 2642 	push	ar5
      000664 C0 04            [24] 2643 	push	ar4
      000666 C0 03            [24] 2644 	push	ar3
      000668 C0 02            [24] 2645 	push	ar2
      00066A 12r00r00         [24] 2646 	lcall	___uint2fs
      00066D A8 82            [24] 2647 	mov	r0,dpl
      00066F A9 83            [24] 2648 	mov	r1,dph
      000671 AE F0            [24] 2649 	mov	r6,b
      000673 FF               [12] 2650 	mov	r7,a
      000674 D0 02            [24] 2651 	pop	ar2
      000676 D0 03            [24] 2652 	pop	ar3
      000678 D0 04            [24] 2653 	pop	ar4
      00067A D0 05            [24] 2654 	pop	ar5
      00067C C0 02            [24] 2655 	push	ar2
      00067E C0 03            [24] 2656 	push	ar3
      000680 C0 04            [24] 2657 	push	ar4
      000682 C0 05            [24] 2658 	push	ar5
      000684 88 82            [24] 2659 	mov	dpl,r0
      000686 89 83            [24] 2660 	mov	dph,r1
      000688 8E F0            [24] 2661 	mov	b,r6
      00068A EF               [12] 2662 	mov	a,r7
      00068B 12r00r00         [24] 2663 	lcall	___fsgt
      00068E AF 82            [24] 2664 	mov	r7,dpl
      000690 E5 81            [12] 2665 	mov	a,sp
      000692 24 FC            [12] 2666 	add	a,#0xfc
      000694 F5 81            [12] 2667 	mov	sp,a
      000696 EF               [12] 2668 	mov	a,r7
      000697 70 68            [24] 2669 	jnz	00102$
                           000699  2670 	C$lab3_3compass.c$154$1$125 ==.
                                   2671 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:154: STR_PW = PW_CENTER_STR - (float)(direction)/4.2;
      000699 85*21 82         [24] 2672 	mov	dpl,_Steering_Servo_direction_1_124
      00069C 85*22 83         [24] 2673 	mov	dph,(_Steering_Servo_direction_1_124 + 1)
      00069F 12r00r00         [24] 2674 	lcall	___uint2fs
      0006A2 AC 82            [24] 2675 	mov	r4,dpl
      0006A4 AD 83            [24] 2676 	mov	r5,dph
      0006A6 AE F0            [24] 2677 	mov	r6,b
      0006A8 FF               [12] 2678 	mov	r7,a
      0006A9 74 66            [12] 2679 	mov	a,#0x66
      0006AB C0 E0            [24] 2680 	push	acc
      0006AD C0 E0            [24] 2681 	push	acc
      0006AF 74 86            [12] 2682 	mov	a,#0x86
      0006B1 C0 E0            [24] 2683 	push	acc
      0006B3 74 40            [12] 2684 	mov	a,#0x40
      0006B5 C0 E0            [24] 2685 	push	acc
      0006B7 8C 82            [24] 2686 	mov	dpl,r4
      0006B9 8D 83            [24] 2687 	mov	dph,r5
      0006BB 8E F0            [24] 2688 	mov	b,r6
      0006BD EF               [12] 2689 	mov	a,r7
      0006BE 12r00r00         [24] 2690 	lcall	___fsdiv
      0006C1 AC 82            [24] 2691 	mov	r4,dpl
      0006C3 AD 83            [24] 2692 	mov	r5,dph
      0006C5 AE F0            [24] 2693 	mov	r6,b
      0006C7 FF               [12] 2694 	mov	r7,a
      0006C8 E5 81            [12] 2695 	mov	a,sp
      0006CA 24 FC            [12] 2696 	add	a,#0xfc
      0006CC F5 81            [12] 2697 	mov	sp,a
      0006CE C0 04            [24] 2698 	push	ar4
      0006D0 C0 05            [24] 2699 	push	ar5
      0006D2 C0 06            [24] 2700 	push	ar6
      0006D4 C0 07            [24] 2701 	push	ar7
      0006D6 90 D0 00         [24] 2702 	mov	dptr,#0xD000
      0006D9 75 F0 27         [24] 2703 	mov	b,#0x27
      0006DC 74 45            [12] 2704 	mov	a,#0x45
      0006DE 12r00r00         [24] 2705 	lcall	___fssub
      0006E1 AC 82            [24] 2706 	mov	r4,dpl
      0006E3 AD 83            [24] 2707 	mov	r5,dph
      0006E5 AE F0            [24] 2708 	mov	r6,b
      0006E7 FF               [12] 2709 	mov	r7,a
      0006E8 E5 81            [12] 2710 	mov	a,sp
      0006EA 24 FC            [12] 2711 	add	a,#0xfc
      0006EC F5 81            [12] 2712 	mov	sp,a
      0006EE 8C 82            [24] 2713 	mov	dpl,r4
      0006F0 8D 83            [24] 2714 	mov	dph,r5
      0006F2 8E F0            [24] 2715 	mov	b,r6
      0006F4 EF               [12] 2716 	mov	a,r7
      0006F5 12r00r00         [24] 2717 	lcall	___fs2uint
      0006F8 85 82*12         [24] 2718 	mov	_STR_PW,dpl
      0006FB 85 83*13         [24] 2719 	mov	(_STR_PW + 1),dph
      0006FE 02r08r45         [24] 2720 	ljmp	00113$
      000701                       2721 00102$:
                           000701  2722 	C$lab3_3compass.c$158$3$128 ==.
                                   2723 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:158: STR_PW -= 10;
      000701 E5*12            [12] 2724 	mov	a,_STR_PW
      000703 24 F6            [12] 2725 	add	a,#0xF6
      000705 F5*12            [12] 2726 	mov	_STR_PW,a
      000707 E5*13            [12] 2727 	mov	a,(_STR_PW + 1)
      000709 34 FF            [12] 2728 	addc	a,#0xFF
      00070B F5*13            [12] 2729 	mov	(_STR_PW + 1),a
      00070D 02r08r45         [24] 2730 	ljmp	00113$
      000710                       2731 00112$:
                           000710  2732 	C$lab3_3compass.c$161$1$125 ==.
                                   2733 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:161: else if ( direction == 0 || direction ==3600)
      000710 E5*21            [12] 2734 	mov	a,_Steering_Servo_direction_1_124
      000712 45*22            [12] 2735 	orl	a,(_Steering_Servo_direction_1_124 + 1)
      000714 60 0A            [24] 2736 	jz	00107$
      000716 74 10            [12] 2737 	mov	a,#0x10
      000718 B5*21 0E         [24] 2738 	cjne	a,_Steering_Servo_direction_1_124,00108$
      00071B 74 0E            [12] 2739 	mov	a,#0x0E
      00071D B5*22 09         [24] 2740 	cjne	a,(_Steering_Servo_direction_1_124 + 1),00108$
      000720                       2741 00107$:
                           000720  2742 	C$lab3_3compass.c$163$2$129 ==.
                                   2743 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:163: STR_PW=PW_CENTER_STR;
      000720 75*12 7D         [24] 2744 	mov	_STR_PW,#0x7D
      000723 75*13 0A         [24] 2745 	mov	(_STR_PW + 1),#0x0A
      000726 02r08r45         [24] 2746 	ljmp	00113$
      000729                       2747 00108$:
                           000729  2748 	C$lab3_3compass.c$167$2$130 ==.
                                   2749 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:167: if (STR_PW >= PW_CENTER_STR + (float)(3600-direction)/1.9)
      000729 74 10            [12] 2750 	mov	a,#0x10
      00072B C3               [12] 2751 	clr	c
      00072C 95*21            [12] 2752 	subb	a,_Steering_Servo_direction_1_124
      00072E F5 82            [12] 2753 	mov	dpl,a
      000730 74 0E            [12] 2754 	mov	a,#0x0E
      000732 95*22            [12] 2755 	subb	a,(_Steering_Servo_direction_1_124 + 1)
      000734 F5 83            [12] 2756 	mov	dph,a
      000736 12r00r00         [24] 2757 	lcall	___uint2fs
      000739 AC 82            [24] 2758 	mov	r4,dpl
      00073B AD 83            [24] 2759 	mov	r5,dph
      00073D AE F0            [24] 2760 	mov	r6,b
      00073F FF               [12] 2761 	mov	r7,a
      000740 74 33            [12] 2762 	mov	a,#0x33
      000742 C0 E0            [24] 2763 	push	acc
      000744 C0 E0            [24] 2764 	push	acc
      000746 74 F3            [12] 2765 	mov	a,#0xF3
      000748 C0 E0            [24] 2766 	push	acc
      00074A C4               [12] 2767 	swap	a
      00074B C0 E0            [24] 2768 	push	acc
      00074D 8C 82            [24] 2769 	mov	dpl,r4
      00074F 8D 83            [24] 2770 	mov	dph,r5
      000751 8E F0            [24] 2771 	mov	b,r6
      000753 EF               [12] 2772 	mov	a,r7
      000754 12r00r00         [24] 2773 	lcall	___fsdiv
      000757 AC 82            [24] 2774 	mov	r4,dpl
      000759 AD 83            [24] 2775 	mov	r5,dph
      00075B AE F0            [24] 2776 	mov	r6,b
      00075D FF               [12] 2777 	mov	r7,a
      00075E E5 81            [12] 2778 	mov	a,sp
      000760 24 FC            [12] 2779 	add	a,#0xfc
      000762 F5 81            [12] 2780 	mov	sp,a
      000764 E4               [12] 2781 	clr	a
      000765 C0 E0            [24] 2782 	push	acc
      000767 74 D0            [12] 2783 	mov	a,#0xD0
      000769 C0 E0            [24] 2784 	push	acc
      00076B 74 27            [12] 2785 	mov	a,#0x27
      00076D C0 E0            [24] 2786 	push	acc
      00076F 74 45            [12] 2787 	mov	a,#0x45
      000771 C0 E0            [24] 2788 	push	acc
      000773 8C 82            [24] 2789 	mov	dpl,r4
      000775 8D 83            [24] 2790 	mov	dph,r5
      000777 8E F0            [24] 2791 	mov	b,r6
      000779 EF               [12] 2792 	mov	a,r7
      00077A 12r00r00         [24] 2793 	lcall	___fsadd
      00077D AC 82            [24] 2794 	mov	r4,dpl
      00077F AD 83            [24] 2795 	mov	r5,dph
      000781 AE F0            [24] 2796 	mov	r6,b
      000783 FF               [12] 2797 	mov	r7,a
      000784 E5 81            [12] 2798 	mov	a,sp
      000786 24 FC            [12] 2799 	add	a,#0xfc
      000788 F5 81            [12] 2800 	mov	sp,a
      00078A 85*12 82         [24] 2801 	mov	dpl,_STR_PW
      00078D 85*13 83         [24] 2802 	mov	dph,(_STR_PW + 1)
      000790 C0 07            [24] 2803 	push	ar7
      000792 C0 06            [24] 2804 	push	ar6
      000794 C0 05            [24] 2805 	push	ar5
      000796 C0 04            [24] 2806 	push	ar4
      000798 12r00r00         [24] 2807 	lcall	___uint2fs
      00079B A8 82            [24] 2808 	mov	r0,dpl
      00079D A9 83            [24] 2809 	mov	r1,dph
      00079F AA F0            [24] 2810 	mov	r2,b
      0007A1 FB               [12] 2811 	mov	r3,a
      0007A2 D0 04            [24] 2812 	pop	ar4
      0007A4 D0 05            [24] 2813 	pop	ar5
      0007A6 D0 06            [24] 2814 	pop	ar6
      0007A8 D0 07            [24] 2815 	pop	ar7
      0007AA C0 04            [24] 2816 	push	ar4
      0007AC C0 05            [24] 2817 	push	ar5
      0007AE C0 06            [24] 2818 	push	ar6
      0007B0 C0 07            [24] 2819 	push	ar7
      0007B2 88 82            [24] 2820 	mov	dpl,r0
      0007B4 89 83            [24] 2821 	mov	dph,r1
      0007B6 8A F0            [24] 2822 	mov	b,r2
      0007B8 EB               [12] 2823 	mov	a,r3
      0007B9 12r00r00         [24] 2824 	lcall	___fslt
      0007BC AF 82            [24] 2825 	mov	r7,dpl
      0007BE E5 81            [12] 2826 	mov	a,sp
      0007C0 24 FC            [12] 2827 	add	a,#0xfc
      0007C2 F5 81            [12] 2828 	mov	sp,a
      0007C4 EF               [12] 2829 	mov	a,r7
      0007C5 70 73            [24] 2830 	jnz	00105$
                           0007C7  2831 	C$lab3_3compass.c$169$3$131 ==.
                                   2832 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:169: STR_PW = PW_CENTER_STR + (float)(3600-direction)/1.9;
      0007C7 74 10            [12] 2833 	mov	a,#0x10
      0007C9 C3               [12] 2834 	clr	c
      0007CA 95*21            [12] 2835 	subb	a,_Steering_Servo_direction_1_124
      0007CC F5 82            [12] 2836 	mov	dpl,a
      0007CE 74 0E            [12] 2837 	mov	a,#0x0E
      0007D0 95*22            [12] 2838 	subb	a,(_Steering_Servo_direction_1_124 + 1)
      0007D2 F5 83            [12] 2839 	mov	dph,a
      0007D4 12r00r00         [24] 2840 	lcall	___uint2fs
      0007D7 AC 82            [24] 2841 	mov	r4,dpl
      0007D9 AD 83            [24] 2842 	mov	r5,dph
      0007DB AE F0            [24] 2843 	mov	r6,b
      0007DD FF               [12] 2844 	mov	r7,a
      0007DE 74 33            [12] 2845 	mov	a,#0x33
      0007E0 C0 E0            [24] 2846 	push	acc
      0007E2 C0 E0            [24] 2847 	push	acc
      0007E4 74 F3            [12] 2848 	mov	a,#0xF3
      0007E6 C0 E0            [24] 2849 	push	acc
      0007E8 C4               [12] 2850 	swap	a
      0007E9 C0 E0            [24] 2851 	push	acc
      0007EB 8C 82            [24] 2852 	mov	dpl,r4
      0007ED 8D 83            [24] 2853 	mov	dph,r5
      0007EF 8E F0            [24] 2854 	mov	b,r6
      0007F1 EF               [12] 2855 	mov	a,r7
      0007F2 12r00r00         [24] 2856 	lcall	___fsdiv
      0007F5 AC 82            [24] 2857 	mov	r4,dpl
      0007F7 AD 83            [24] 2858 	mov	r5,dph
      0007F9 AE F0            [24] 2859 	mov	r6,b
      0007FB FF               [12] 2860 	mov	r7,a
      0007FC E5 81            [12] 2861 	mov	a,sp
      0007FE 24 FC            [12] 2862 	add	a,#0xfc
      000800 F5 81            [12] 2863 	mov	sp,a
      000802 E4               [12] 2864 	clr	a
      000803 C0 E0            [24] 2865 	push	acc
      000805 74 D0            [12] 2866 	mov	a,#0xD0
      000807 C0 E0            [24] 2867 	push	acc
      000809 74 27            [12] 2868 	mov	a,#0x27
      00080B C0 E0            [24] 2869 	push	acc
      00080D 74 45            [12] 2870 	mov	a,#0x45
      00080F C0 E0            [24] 2871 	push	acc
      000811 8C 82            [24] 2872 	mov	dpl,r4
      000813 8D 83            [24] 2873 	mov	dph,r5
      000815 8E F0            [24] 2874 	mov	b,r6
      000817 EF               [12] 2875 	mov	a,r7
      000818 12r00r00         [24] 2876 	lcall	___fsadd
      00081B AC 82            [24] 2877 	mov	r4,dpl
      00081D AD 83            [24] 2878 	mov	r5,dph
      00081F AE F0            [24] 2879 	mov	r6,b
      000821 FF               [12] 2880 	mov	r7,a
      000822 E5 81            [12] 2881 	mov	a,sp
      000824 24 FC            [12] 2882 	add	a,#0xfc
      000826 F5 81            [12] 2883 	mov	sp,a
      000828 8C 82            [24] 2884 	mov	dpl,r4
      00082A 8D 83            [24] 2885 	mov	dph,r5
      00082C 8E F0            [24] 2886 	mov	b,r6
      00082E EF               [12] 2887 	mov	a,r7
      00082F 12r00r00         [24] 2888 	lcall	___fs2uint
      000832 85 82*12         [24] 2889 	mov	_STR_PW,dpl
      000835 85 83*13         [24] 2890 	mov	(_STR_PW + 1),dph
      000838 80 0B            [24] 2891 	sjmp	00113$
      00083A                       2892 00105$:
                           00083A  2893 	C$lab3_3compass.c$173$3$132 ==.
                                   2894 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:173: STR_PW += 10;
      00083A 74 0A            [12] 2895 	mov	a,#0x0A
      00083C 25*12            [12] 2896 	add	a,_STR_PW
      00083E F5*12            [12] 2897 	mov	_STR_PW,a
      000840 E4               [12] 2898 	clr	a
      000841 35*13            [12] 2899 	addc	a,(_STR_PW + 1)
      000843 F5*13            [12] 2900 	mov	(_STR_PW + 1),a
      000845                       2901 00113$:
                           000845  2902 	C$lab3_3compass.c$178$1$125 ==.
                                   2903 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:178: printf("\r\nSTR_PW: %u", STR_PW);
      000845 C0*12            [24] 2904 	push	_STR_PW
      000847 C0*13            [24] 2905 	push	(_STR_PW + 1)
      000849 74r59            [12] 2906 	mov	a,#___str_5
      00084B C0 E0            [24] 2907 	push	acc
      00084D 74s00            [12] 2908 	mov	a,#(___str_5 >> 8)
      00084F C0 E0            [24] 2909 	push	acc
      000851 74 80            [12] 2910 	mov	a,#0x80
      000853 C0 E0            [24] 2911 	push	acc
      000855 12r00r00         [24] 2912 	lcall	_printf
      000858 E5 81            [12] 2913 	mov	a,sp
      00085A 24 FB            [12] 2914 	add	a,#0xfb
      00085C F5 81            [12] 2915 	mov	sp,a
                           00085E  2916 	C$lab3_3compass.c$179$1$125 ==.
                                   2917 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:179: tmp0_lo_to_hi= 0xFFFF - STR_PW;
      00085E 74 FF            [12] 2918 	mov	a,#0xFF
      000860 C3               [12] 2919 	clr	c
      000861 95*12            [12] 2920 	subb	a,_STR_PW
      000863 F5*10            [12] 2921 	mov	_tmp0_lo_to_hi,a
      000865 74 FF            [12] 2922 	mov	a,#0xFF
      000867 95*13            [12] 2923 	subb	a,(_STR_PW + 1)
      000869 F5*11            [12] 2924 	mov	(_tmp0_lo_to_hi + 1),a
                           00086B  2925 	C$lab3_3compass.c$180$1$125 ==.
                                   2926 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-3\lab3-3compass.c:180: PCA0CP0 = tmp0_lo_to_hi;
      00086B 85*10 EA         [24] 2927 	mov	((_PCA0CP0 >> 0) & 0xFF),_tmp0_lo_to_hi
      00086E 85*11 FA         [24] 2928 	mov	((_PCA0CP0 >> 8) & 0xFF),(_tmp0_lo_to_hi + 1)
                           000871  2929 	C$lab3_3compass.c$183$1$125 ==.
                           000871  2930 	XG$Steering_Servo$0$0 ==.
      000871 22               [24] 2931 	ret
                                   2932 	.area CSEG    (CODE)
                                   2933 	.area CONST   (CODE)
                           000000  2934 Flab3_3compass$__str_0$0$0 == .
      000000                       2935 ___str_0:
      000000 0A                    2936 	.db 0x0A
      000001 54 79 70 65 20 64 69  2937 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    2938 	.db 0x00
                           000016  2939 Flab3_3compass$__str_1$0$0 == .
      000016                       2940 ___str_1:
      000016 20 20 20 20 20 25 63  2941 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    2942 	.db 0x00
                           000026  2943 Flab3_3compass$__str_2$0$0 == .
      000026                       2944 ___str_2:
      000026 25 63                 2945 	.ascii "%c"
      000028 00                    2946 	.db 0x00
                           000029  2947 Flab3_3compass$__str_3$0$0 == .
      000029                       2948 ___str_3:
      000029 45 6D 62 65 64 64 65  2949 	.ascii "Embedded Control Steering Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 53 74 65 65
             72 69 6E 67 20 43 61
             6C 69 62 72 61 74 69
             6F 6E
      00004E 0A                    2950 	.db 0x0A
      00004F 00                    2951 	.db 0x00
                           000050  2952 Flab3_3compass$__str_4$0$0 == .
      000050                       2953 ___str_4:
      000050 0D                    2954 	.db 0x0D
      000051 0A                    2955 	.db 0x0A
      000052 25 64 7C 7C 25 64     2956 	.ascii "%d||%d"
      000058 00                    2957 	.db 0x00
                           000059  2958 Flab3_3compass$__str_5$0$0 == .
      000059                       2959 ___str_5:
      000059 0D                    2960 	.db 0x0D
      00005A 0A                    2961 	.db 0x0A
      00005B 53 54 52 5F 50 57 3A  2962 	.ascii "STR_PW: %u"
             20 25 75
      000065 00                    2963 	.db 0x00
                                   2964 	.area XINIT   (CODE)
                                   2965 	.area CABS    (ABS,CODE)
