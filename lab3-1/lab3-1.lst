                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Mon Mar 16 18:43:23 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module lab3_1
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _putchar
                                     14 	.globl _getchar
                                     15 	.globl _printf
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _SPIF
                                     20 	.globl _WCOL
                                     21 	.globl _MODF
                                     22 	.globl _RXOVRN
                                     23 	.globl _TXBSY
                                     24 	.globl _SLVSEL
                                     25 	.globl _MSTEN
                                     26 	.globl _SPIEN
                                     27 	.globl _AD0EN
                                     28 	.globl _ADCEN
                                     29 	.globl _AD0TM
                                     30 	.globl _ADCTM
                                     31 	.globl _AD0INT
                                     32 	.globl _ADCINT
                                     33 	.globl _AD0BUSY
                                     34 	.globl _ADBUSY
                                     35 	.globl _AD0CM1
                                     36 	.globl _ADSTM1
                                     37 	.globl _AD0CM0
                                     38 	.globl _ADSTM0
                                     39 	.globl _AD0WINT
                                     40 	.globl _ADWINT
                                     41 	.globl _AD0LJST
                                     42 	.globl _ADLJST
                                     43 	.globl _CF
                                     44 	.globl _CR
                                     45 	.globl _CCF4
                                     46 	.globl _CCF3
                                     47 	.globl _CCF2
                                     48 	.globl _CCF1
                                     49 	.globl _CCF0
                                     50 	.globl _CY
                                     51 	.globl _AC
                                     52 	.globl _F0
                                     53 	.globl _RS1
                                     54 	.globl _RS0
                                     55 	.globl _OV
                                     56 	.globl _F1
                                     57 	.globl _P
                                     58 	.globl _TF2
                                     59 	.globl _EXF2
                                     60 	.globl _RCLK
                                     61 	.globl _TCLK
                                     62 	.globl _EXEN2
                                     63 	.globl _TR2
                                     64 	.globl _CT2
                                     65 	.globl _CPRL2
                                     66 	.globl _BUSY
                                     67 	.globl _ENSMB
                                     68 	.globl _STA
                                     69 	.globl _STO
                                     70 	.globl _SI
                                     71 	.globl _AA
                                     72 	.globl _SMBFTE
                                     73 	.globl _SMBTOE
                                     74 	.globl _PT2
                                     75 	.globl _PS
                                     76 	.globl _PS0
                                     77 	.globl _PT1
                                     78 	.globl _PX1
                                     79 	.globl _PT0
                                     80 	.globl _PX0
                                     81 	.globl _P3_7
                                     82 	.globl _P3_6
                                     83 	.globl _P3_5
                                     84 	.globl _P3_4
                                     85 	.globl _P3_3
                                     86 	.globl _P3_2
                                     87 	.globl _P3_1
                                     88 	.globl _P3_0
                                     89 	.globl _EA
                                     90 	.globl _ET2
                                     91 	.globl _ES
                                     92 	.globl _ES0
                                     93 	.globl _ET1
                                     94 	.globl _EX1
                                     95 	.globl _ET0
                                     96 	.globl _EX0
                                     97 	.globl _P2_7
                                     98 	.globl _P2_6
                                     99 	.globl _P2_5
                                    100 	.globl _P2_4
                                    101 	.globl _P2_3
                                    102 	.globl _P2_2
                                    103 	.globl _P2_1
                                    104 	.globl _P2_0
                                    105 	.globl _S0MODE
                                    106 	.globl _SM00
                                    107 	.globl _SM0
                                    108 	.globl _SM10
                                    109 	.globl _SM1
                                    110 	.globl _MCE0
                                    111 	.globl _SM20
                                    112 	.globl _SM2
                                    113 	.globl _REN0
                                    114 	.globl _REN
                                    115 	.globl _TB80
                                    116 	.globl _TB8
                                    117 	.globl _RB80
                                    118 	.globl _RB8
                                    119 	.globl _TI0
                                    120 	.globl _TI
                                    121 	.globl _RI0
                                    122 	.globl _RI
                                    123 	.globl _P1_7
                                    124 	.globl _P1_6
                                    125 	.globl _P1_5
                                    126 	.globl _P1_4
                                    127 	.globl _P1_3
                                    128 	.globl _P1_2
                                    129 	.globl _P1_1
                                    130 	.globl _P1_0
                                    131 	.globl _TF1
                                    132 	.globl _TR1
                                    133 	.globl _TF0
                                    134 	.globl _TR0
                                    135 	.globl _IE1
                                    136 	.globl _IT1
                                    137 	.globl _IE0
                                    138 	.globl _IT0
                                    139 	.globl _P0_7
                                    140 	.globl _P0_6
                                    141 	.globl _P0_5
                                    142 	.globl _P0_4
                                    143 	.globl _P0_3
                                    144 	.globl _P0_2
                                    145 	.globl _P0_1
                                    146 	.globl _P0_0
                                    147 	.globl _PCA0CP4
                                    148 	.globl _PCA0CP3
                                    149 	.globl _PCA0CP2
                                    150 	.globl _PCA0CP1
                                    151 	.globl _PCA0CP0
                                    152 	.globl _PCA0
                                    153 	.globl _DAC1
                                    154 	.globl _DAC0
                                    155 	.globl _ADC0LT
                                    156 	.globl _ADC0GT
                                    157 	.globl _ADC0
                                    158 	.globl _RCAP4
                                    159 	.globl _TMR4
                                    160 	.globl _TMR3RL
                                    161 	.globl _TMR3
                                    162 	.globl _RCAP2
                                    163 	.globl _TMR2
                                    164 	.globl _TMR1
                                    165 	.globl _TMR0
                                    166 	.globl _WDTCN
                                    167 	.globl _PCA0CPH4
                                    168 	.globl _PCA0CPH3
                                    169 	.globl _PCA0CPH2
                                    170 	.globl _PCA0CPH1
                                    171 	.globl _PCA0CPH0
                                    172 	.globl _PCA0H
                                    173 	.globl _SPI0CN
                                    174 	.globl _EIP2
                                    175 	.globl _EIP1
                                    176 	.globl _TH4
                                    177 	.globl _TL4
                                    178 	.globl _SADDR1
                                    179 	.globl _SBUF1
                                    180 	.globl _SCON1
                                    181 	.globl _B
                                    182 	.globl _RSTSRC
                                    183 	.globl _PCA0CPL4
                                    184 	.globl _PCA0CPL3
                                    185 	.globl _PCA0CPL2
                                    186 	.globl _PCA0CPL1
                                    187 	.globl _PCA0CPL0
                                    188 	.globl _PCA0L
                                    189 	.globl _ADC0CN
                                    190 	.globl _EIE2
                                    191 	.globl _EIE1
                                    192 	.globl _RCAP4H
                                    193 	.globl _RCAP4L
                                    194 	.globl _XBR2
                                    195 	.globl _XBR1
                                    196 	.globl _XBR0
                                    197 	.globl _ACC
                                    198 	.globl _PCA0CPM4
                                    199 	.globl _PCA0CPM3
                                    200 	.globl _PCA0CPM2
                                    201 	.globl _PCA0CPM1
                                    202 	.globl _PCA0CPM0
                                    203 	.globl _PCA0MD
                                    204 	.globl _PCA0CN
                                    205 	.globl _DAC1CN
                                    206 	.globl _DAC1H
                                    207 	.globl _DAC1L
                                    208 	.globl _DAC0CN
                                    209 	.globl _DAC0H
                                    210 	.globl _DAC0L
                                    211 	.globl _REF0CN
                                    212 	.globl _PSW
                                    213 	.globl _SMB0CR
                                    214 	.globl _TH2
                                    215 	.globl _TL2
                                    216 	.globl _RCAP2H
                                    217 	.globl _RCAP2L
                                    218 	.globl _T4CON
                                    219 	.globl _T2CON
                                    220 	.globl _ADC0LTH
                                    221 	.globl _ADC0LTL
                                    222 	.globl _ADC0GTH
                                    223 	.globl _ADC0GTL
                                    224 	.globl _SMB0ADR
                                    225 	.globl _SMB0DAT
                                    226 	.globl _SMB0STA
                                    227 	.globl _SMB0CN
                                    228 	.globl _ADC0H
                                    229 	.globl _ADC0L
                                    230 	.globl _P1MDIN
                                    231 	.globl _ADC0CF
                                    232 	.globl _AMX0SL
                                    233 	.globl _AMX0CF
                                    234 	.globl _SADEN0
                                    235 	.globl _IP
                                    236 	.globl _FLACL
                                    237 	.globl _FLSCL
                                    238 	.globl _P74OUT
                                    239 	.globl _OSCICN
                                    240 	.globl _OSCXCN
                                    241 	.globl _P3
                                    242 	.globl __XPAGE
                                    243 	.globl _EMI0CN
                                    244 	.globl _SADEN1
                                    245 	.globl _P3IF
                                    246 	.globl _AMX1SL
                                    247 	.globl _ADC1CF
                                    248 	.globl _ADC1CN
                                    249 	.globl _SADDR0
                                    250 	.globl _IE
                                    251 	.globl _P3MDOUT
                                    252 	.globl _PRT3CF
                                    253 	.globl _P2MDOUT
                                    254 	.globl _PRT2CF
                                    255 	.globl _P1MDOUT
                                    256 	.globl _PRT1CF
                                    257 	.globl _P0MDOUT
                                    258 	.globl _PRT0CF
                                    259 	.globl _EMI0CF
                                    260 	.globl _EMI0TC
                                    261 	.globl _P2
                                    262 	.globl _CPT1CN
                                    263 	.globl _CPT0CN
                                    264 	.globl _SPI0CKR
                                    265 	.globl _ADC1
                                    266 	.globl _SPI0DAT
                                    267 	.globl _SPI0CFG
                                    268 	.globl _SBUF0
                                    269 	.globl _SBUF
                                    270 	.globl _SCON0
                                    271 	.globl _SCON
                                    272 	.globl _P7
                                    273 	.globl _TMR3H
                                    274 	.globl _TMR3L
                                    275 	.globl _TMR3RLH
                                    276 	.globl _TMR3RLL
                                    277 	.globl _TMR3CN
                                    278 	.globl _P1
                                    279 	.globl _PSCTL
                                    280 	.globl _CKCON
                                    281 	.globl _TH1
                                    282 	.globl _TH0
                                    283 	.globl _TL1
                                    284 	.globl _TL0
                                    285 	.globl _TMOD
                                    286 	.globl _TCON
                                    287 	.globl _PCON
                                    288 	.globl _P6
                                    289 	.globl _P5
                                    290 	.globl _P4
                                    291 	.globl _DPH
                                    292 	.globl _DPL
                                    293 	.globl _SP
                                    294 	.globl _P0
                                    295 	.globl _count
                                    296 	.globl _PW
                                    297 	.globl _PW_MAX
                                    298 	.globl _PW_MIN
                                    299 	.globl _PW_CENTER
                                    300 	.globl _Port_Init
                                    301 	.globl _XBR0_Init
                                    302 	.globl _PCA_Init
                                    303 	.globl _PCA_ISR
                                    304 	.globl _Steering_Servo
                                    305 ;--------------------------------------------------------
                                    306 ; special function registers
                                    307 ;--------------------------------------------------------
                                    308 	.area RSEG    (ABS,DATA)
      000000                        309 	.org 0x0000
                           000080   310 G$P0$0$0 == 0x0080
                           000080   311 _P0	=	0x0080
                           000081   312 G$SP$0$0 == 0x0081
                           000081   313 _SP	=	0x0081
                           000082   314 G$DPL$0$0 == 0x0082
                           000082   315 _DPL	=	0x0082
                           000083   316 G$DPH$0$0 == 0x0083
                           000083   317 _DPH	=	0x0083
                           000084   318 G$P4$0$0 == 0x0084
                           000084   319 _P4	=	0x0084
                           000085   320 G$P5$0$0 == 0x0085
                           000085   321 _P5	=	0x0085
                           000086   322 G$P6$0$0 == 0x0086
                           000086   323 _P6	=	0x0086
                           000087   324 G$PCON$0$0 == 0x0087
                           000087   325 _PCON	=	0x0087
                           000088   326 G$TCON$0$0 == 0x0088
                           000088   327 _TCON	=	0x0088
                           000089   328 G$TMOD$0$0 == 0x0089
                           000089   329 _TMOD	=	0x0089
                           00008A   330 G$TL0$0$0 == 0x008a
                           00008A   331 _TL0	=	0x008a
                           00008B   332 G$TL1$0$0 == 0x008b
                           00008B   333 _TL1	=	0x008b
                           00008C   334 G$TH0$0$0 == 0x008c
                           00008C   335 _TH0	=	0x008c
                           00008D   336 G$TH1$0$0 == 0x008d
                           00008D   337 _TH1	=	0x008d
                           00008E   338 G$CKCON$0$0 == 0x008e
                           00008E   339 _CKCON	=	0x008e
                           00008F   340 G$PSCTL$0$0 == 0x008f
                           00008F   341 _PSCTL	=	0x008f
                           000090   342 G$P1$0$0 == 0x0090
                           000090   343 _P1	=	0x0090
                           000091   344 G$TMR3CN$0$0 == 0x0091
                           000091   345 _TMR3CN	=	0x0091
                           000092   346 G$TMR3RLL$0$0 == 0x0092
                           000092   347 _TMR3RLL	=	0x0092
                           000093   348 G$TMR3RLH$0$0 == 0x0093
                           000093   349 _TMR3RLH	=	0x0093
                           000094   350 G$TMR3L$0$0 == 0x0094
                           000094   351 _TMR3L	=	0x0094
                           000095   352 G$TMR3H$0$0 == 0x0095
                           000095   353 _TMR3H	=	0x0095
                           000096   354 G$P7$0$0 == 0x0096
                           000096   355 _P7	=	0x0096
                           000098   356 G$SCON$0$0 == 0x0098
                           000098   357 _SCON	=	0x0098
                           000098   358 G$SCON0$0$0 == 0x0098
                           000098   359 _SCON0	=	0x0098
                           000099   360 G$SBUF$0$0 == 0x0099
                           000099   361 _SBUF	=	0x0099
                           000099   362 G$SBUF0$0$0 == 0x0099
                           000099   363 _SBUF0	=	0x0099
                           00009A   364 G$SPI0CFG$0$0 == 0x009a
                           00009A   365 _SPI0CFG	=	0x009a
                           00009B   366 G$SPI0DAT$0$0 == 0x009b
                           00009B   367 _SPI0DAT	=	0x009b
                           00009C   368 G$ADC1$0$0 == 0x009c
                           00009C   369 _ADC1	=	0x009c
                           00009D   370 G$SPI0CKR$0$0 == 0x009d
                           00009D   371 _SPI0CKR	=	0x009d
                           00009E   372 G$CPT0CN$0$0 == 0x009e
                           00009E   373 _CPT0CN	=	0x009e
                           00009F   374 G$CPT1CN$0$0 == 0x009f
                           00009F   375 _CPT1CN	=	0x009f
                           0000A0   376 G$P2$0$0 == 0x00a0
                           0000A0   377 _P2	=	0x00a0
                           0000A1   378 G$EMI0TC$0$0 == 0x00a1
                           0000A1   379 _EMI0TC	=	0x00a1
                           0000A3   380 G$EMI0CF$0$0 == 0x00a3
                           0000A3   381 _EMI0CF	=	0x00a3
                           0000A4   382 G$PRT0CF$0$0 == 0x00a4
                           0000A4   383 _PRT0CF	=	0x00a4
                           0000A4   384 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   385 _P0MDOUT	=	0x00a4
                           0000A5   386 G$PRT1CF$0$0 == 0x00a5
                           0000A5   387 _PRT1CF	=	0x00a5
                           0000A5   388 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   389 _P1MDOUT	=	0x00a5
                           0000A6   390 G$PRT2CF$0$0 == 0x00a6
                           0000A6   391 _PRT2CF	=	0x00a6
                           0000A6   392 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   393 _P2MDOUT	=	0x00a6
                           0000A7   394 G$PRT3CF$0$0 == 0x00a7
                           0000A7   395 _PRT3CF	=	0x00a7
                           0000A7   396 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   397 _P3MDOUT	=	0x00a7
                           0000A8   398 G$IE$0$0 == 0x00a8
                           0000A8   399 _IE	=	0x00a8
                           0000A9   400 G$SADDR0$0$0 == 0x00a9
                           0000A9   401 _SADDR0	=	0x00a9
                           0000AA   402 G$ADC1CN$0$0 == 0x00aa
                           0000AA   403 _ADC1CN	=	0x00aa
                           0000AB   404 G$ADC1CF$0$0 == 0x00ab
                           0000AB   405 _ADC1CF	=	0x00ab
                           0000AC   406 G$AMX1SL$0$0 == 0x00ac
                           0000AC   407 _AMX1SL	=	0x00ac
                           0000AD   408 G$P3IF$0$0 == 0x00ad
                           0000AD   409 _P3IF	=	0x00ad
                           0000AE   410 G$SADEN1$0$0 == 0x00ae
                           0000AE   411 _SADEN1	=	0x00ae
                           0000AF   412 G$EMI0CN$0$0 == 0x00af
                           0000AF   413 _EMI0CN	=	0x00af
                           0000AF   414 G$_XPAGE$0$0 == 0x00af
                           0000AF   415 __XPAGE	=	0x00af
                           0000B0   416 G$P3$0$0 == 0x00b0
                           0000B0   417 _P3	=	0x00b0
                           0000B1   418 G$OSCXCN$0$0 == 0x00b1
                           0000B1   419 _OSCXCN	=	0x00b1
                           0000B2   420 G$OSCICN$0$0 == 0x00b2
                           0000B2   421 _OSCICN	=	0x00b2
                           0000B5   422 G$P74OUT$0$0 == 0x00b5
                           0000B5   423 _P74OUT	=	0x00b5
                           0000B6   424 G$FLSCL$0$0 == 0x00b6
                           0000B6   425 _FLSCL	=	0x00b6
                           0000B7   426 G$FLACL$0$0 == 0x00b7
                           0000B7   427 _FLACL	=	0x00b7
                           0000B8   428 G$IP$0$0 == 0x00b8
                           0000B8   429 _IP	=	0x00b8
                           0000B9   430 G$SADEN0$0$0 == 0x00b9
                           0000B9   431 _SADEN0	=	0x00b9
                           0000BA   432 G$AMX0CF$0$0 == 0x00ba
                           0000BA   433 _AMX0CF	=	0x00ba
                           0000BB   434 G$AMX0SL$0$0 == 0x00bb
                           0000BB   435 _AMX0SL	=	0x00bb
                           0000BC   436 G$ADC0CF$0$0 == 0x00bc
                           0000BC   437 _ADC0CF	=	0x00bc
                           0000BD   438 G$P1MDIN$0$0 == 0x00bd
                           0000BD   439 _P1MDIN	=	0x00bd
                           0000BE   440 G$ADC0L$0$0 == 0x00be
                           0000BE   441 _ADC0L	=	0x00be
                           0000BF   442 G$ADC0H$0$0 == 0x00bf
                           0000BF   443 _ADC0H	=	0x00bf
                           0000C0   444 G$SMB0CN$0$0 == 0x00c0
                           0000C0   445 _SMB0CN	=	0x00c0
                           0000C1   446 G$SMB0STA$0$0 == 0x00c1
                           0000C1   447 _SMB0STA	=	0x00c1
                           0000C2   448 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   449 _SMB0DAT	=	0x00c2
                           0000C3   450 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   451 _SMB0ADR	=	0x00c3
                           0000C4   452 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   453 _ADC0GTL	=	0x00c4
                           0000C5   454 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   455 _ADC0GTH	=	0x00c5
                           0000C6   456 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   457 _ADC0LTL	=	0x00c6
                           0000C7   458 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   459 _ADC0LTH	=	0x00c7
                           0000C8   460 G$T2CON$0$0 == 0x00c8
                           0000C8   461 _T2CON	=	0x00c8
                           0000C9   462 G$T4CON$0$0 == 0x00c9
                           0000C9   463 _T4CON	=	0x00c9
                           0000CA   464 G$RCAP2L$0$0 == 0x00ca
                           0000CA   465 _RCAP2L	=	0x00ca
                           0000CB   466 G$RCAP2H$0$0 == 0x00cb
                           0000CB   467 _RCAP2H	=	0x00cb
                           0000CC   468 G$TL2$0$0 == 0x00cc
                           0000CC   469 _TL2	=	0x00cc
                           0000CD   470 G$TH2$0$0 == 0x00cd
                           0000CD   471 _TH2	=	0x00cd
                           0000CF   472 G$SMB0CR$0$0 == 0x00cf
                           0000CF   473 _SMB0CR	=	0x00cf
                           0000D0   474 G$PSW$0$0 == 0x00d0
                           0000D0   475 _PSW	=	0x00d0
                           0000D1   476 G$REF0CN$0$0 == 0x00d1
                           0000D1   477 _REF0CN	=	0x00d1
                           0000D2   478 G$DAC0L$0$0 == 0x00d2
                           0000D2   479 _DAC0L	=	0x00d2
                           0000D3   480 G$DAC0H$0$0 == 0x00d3
                           0000D3   481 _DAC0H	=	0x00d3
                           0000D4   482 G$DAC0CN$0$0 == 0x00d4
                           0000D4   483 _DAC0CN	=	0x00d4
                           0000D5   484 G$DAC1L$0$0 == 0x00d5
                           0000D5   485 _DAC1L	=	0x00d5
                           0000D6   486 G$DAC1H$0$0 == 0x00d6
                           0000D6   487 _DAC1H	=	0x00d6
                           0000D7   488 G$DAC1CN$0$0 == 0x00d7
                           0000D7   489 _DAC1CN	=	0x00d7
                           0000D8   490 G$PCA0CN$0$0 == 0x00d8
                           0000D8   491 _PCA0CN	=	0x00d8
                           0000D9   492 G$PCA0MD$0$0 == 0x00d9
                           0000D9   493 _PCA0MD	=	0x00d9
                           0000DA   494 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   495 _PCA0CPM0	=	0x00da
                           0000DB   496 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   497 _PCA0CPM1	=	0x00db
                           0000DC   498 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   499 _PCA0CPM2	=	0x00dc
                           0000DD   500 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   501 _PCA0CPM3	=	0x00dd
                           0000DE   502 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   503 _PCA0CPM4	=	0x00de
                           0000E0   504 G$ACC$0$0 == 0x00e0
                           0000E0   505 _ACC	=	0x00e0
                           0000E1   506 G$XBR0$0$0 == 0x00e1
                           0000E1   507 _XBR0	=	0x00e1
                           0000E2   508 G$XBR1$0$0 == 0x00e2
                           0000E2   509 _XBR1	=	0x00e2
                           0000E3   510 G$XBR2$0$0 == 0x00e3
                           0000E3   511 _XBR2	=	0x00e3
                           0000E4   512 G$RCAP4L$0$0 == 0x00e4
                           0000E4   513 _RCAP4L	=	0x00e4
                           0000E5   514 G$RCAP4H$0$0 == 0x00e5
                           0000E5   515 _RCAP4H	=	0x00e5
                           0000E6   516 G$EIE1$0$0 == 0x00e6
                           0000E6   517 _EIE1	=	0x00e6
                           0000E7   518 G$EIE2$0$0 == 0x00e7
                           0000E7   519 _EIE2	=	0x00e7
                           0000E8   520 G$ADC0CN$0$0 == 0x00e8
                           0000E8   521 _ADC0CN	=	0x00e8
                           0000E9   522 G$PCA0L$0$0 == 0x00e9
                           0000E9   523 _PCA0L	=	0x00e9
                           0000EA   524 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   525 _PCA0CPL0	=	0x00ea
                           0000EB   526 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   527 _PCA0CPL1	=	0x00eb
                           0000EC   528 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   529 _PCA0CPL2	=	0x00ec
                           0000ED   530 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   531 _PCA0CPL3	=	0x00ed
                           0000EE   532 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   533 _PCA0CPL4	=	0x00ee
                           0000EF   534 G$RSTSRC$0$0 == 0x00ef
                           0000EF   535 _RSTSRC	=	0x00ef
                           0000F0   536 G$B$0$0 == 0x00f0
                           0000F0   537 _B	=	0x00f0
                           0000F1   538 G$SCON1$0$0 == 0x00f1
                           0000F1   539 _SCON1	=	0x00f1
                           0000F2   540 G$SBUF1$0$0 == 0x00f2
                           0000F2   541 _SBUF1	=	0x00f2
                           0000F3   542 G$SADDR1$0$0 == 0x00f3
                           0000F3   543 _SADDR1	=	0x00f3
                           0000F4   544 G$TL4$0$0 == 0x00f4
                           0000F4   545 _TL4	=	0x00f4
                           0000F5   546 G$TH4$0$0 == 0x00f5
                           0000F5   547 _TH4	=	0x00f5
                           0000F6   548 G$EIP1$0$0 == 0x00f6
                           0000F6   549 _EIP1	=	0x00f6
                           0000F7   550 G$EIP2$0$0 == 0x00f7
                           0000F7   551 _EIP2	=	0x00f7
                           0000F8   552 G$SPI0CN$0$0 == 0x00f8
                           0000F8   553 _SPI0CN	=	0x00f8
                           0000F9   554 G$PCA0H$0$0 == 0x00f9
                           0000F9   555 _PCA0H	=	0x00f9
                           0000FA   556 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   557 _PCA0CPH0	=	0x00fa
                           0000FB   558 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   559 _PCA0CPH1	=	0x00fb
                           0000FC   560 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   561 _PCA0CPH2	=	0x00fc
                           0000FD   562 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   563 _PCA0CPH3	=	0x00fd
                           0000FE   564 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   565 _PCA0CPH4	=	0x00fe
                           0000FF   566 G$WDTCN$0$0 == 0x00ff
                           0000FF   567 _WDTCN	=	0x00ff
                           008C8A   568 G$TMR0$0$0 == 0x8c8a
                           008C8A   569 _TMR0	=	0x8c8a
                           008D8B   570 G$TMR1$0$0 == 0x8d8b
                           008D8B   571 _TMR1	=	0x8d8b
                           00CDCC   572 G$TMR2$0$0 == 0xcdcc
                           00CDCC   573 _TMR2	=	0xcdcc
                           00CBCA   574 G$RCAP2$0$0 == 0xcbca
                           00CBCA   575 _RCAP2	=	0xcbca
                           009594   576 G$TMR3$0$0 == 0x9594
                           009594   577 _TMR3	=	0x9594
                           009392   578 G$TMR3RL$0$0 == 0x9392
                           009392   579 _TMR3RL	=	0x9392
                           00F5F4   580 G$TMR4$0$0 == 0xf5f4
                           00F5F4   581 _TMR4	=	0xf5f4
                           00E5E4   582 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   583 _RCAP4	=	0xe5e4
                           00BFBE   584 G$ADC0$0$0 == 0xbfbe
                           00BFBE   585 _ADC0	=	0xbfbe
                           00C5C4   586 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   587 _ADC0GT	=	0xc5c4
                           00C7C6   588 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   589 _ADC0LT	=	0xc7c6
                           00D3D2   590 G$DAC0$0$0 == 0xd3d2
                           00D3D2   591 _DAC0	=	0xd3d2
                           00D6D5   592 G$DAC1$0$0 == 0xd6d5
                           00D6D5   593 _DAC1	=	0xd6d5
                           00F9E9   594 G$PCA0$0$0 == 0xf9e9
                           00F9E9   595 _PCA0	=	0xf9e9
                           00FAEA   596 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   597 _PCA0CP0	=	0xfaea
                           00FBEB   598 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   599 _PCA0CP1	=	0xfbeb
                           00FCEC   600 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   601 _PCA0CP2	=	0xfcec
                           00FDED   602 G$PCA0CP3$0$0 == 0xfded
                           00FDED   603 _PCA0CP3	=	0xfded
                           00FEEE   604 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   605 _PCA0CP4	=	0xfeee
                                    606 ;--------------------------------------------------------
                                    607 ; special function bits
                                    608 ;--------------------------------------------------------
                                    609 	.area RSEG    (ABS,DATA)
      000000                        610 	.org 0x0000
                           000080   611 G$P0_0$0$0 == 0x0080
                           000080   612 _P0_0	=	0x0080
                           000081   613 G$P0_1$0$0 == 0x0081
                           000081   614 _P0_1	=	0x0081
                           000082   615 G$P0_2$0$0 == 0x0082
                           000082   616 _P0_2	=	0x0082
                           000083   617 G$P0_3$0$0 == 0x0083
                           000083   618 _P0_3	=	0x0083
                           000084   619 G$P0_4$0$0 == 0x0084
                           000084   620 _P0_4	=	0x0084
                           000085   621 G$P0_5$0$0 == 0x0085
                           000085   622 _P0_5	=	0x0085
                           000086   623 G$P0_6$0$0 == 0x0086
                           000086   624 _P0_6	=	0x0086
                           000087   625 G$P0_7$0$0 == 0x0087
                           000087   626 _P0_7	=	0x0087
                           000088   627 G$IT0$0$0 == 0x0088
                           000088   628 _IT0	=	0x0088
                           000089   629 G$IE0$0$0 == 0x0089
                           000089   630 _IE0	=	0x0089
                           00008A   631 G$IT1$0$0 == 0x008a
                           00008A   632 _IT1	=	0x008a
                           00008B   633 G$IE1$0$0 == 0x008b
                           00008B   634 _IE1	=	0x008b
                           00008C   635 G$TR0$0$0 == 0x008c
                           00008C   636 _TR0	=	0x008c
                           00008D   637 G$TF0$0$0 == 0x008d
                           00008D   638 _TF0	=	0x008d
                           00008E   639 G$TR1$0$0 == 0x008e
                           00008E   640 _TR1	=	0x008e
                           00008F   641 G$TF1$0$0 == 0x008f
                           00008F   642 _TF1	=	0x008f
                           000090   643 G$P1_0$0$0 == 0x0090
                           000090   644 _P1_0	=	0x0090
                           000091   645 G$P1_1$0$0 == 0x0091
                           000091   646 _P1_1	=	0x0091
                           000092   647 G$P1_2$0$0 == 0x0092
                           000092   648 _P1_2	=	0x0092
                           000093   649 G$P1_3$0$0 == 0x0093
                           000093   650 _P1_3	=	0x0093
                           000094   651 G$P1_4$0$0 == 0x0094
                           000094   652 _P1_4	=	0x0094
                           000095   653 G$P1_5$0$0 == 0x0095
                           000095   654 _P1_5	=	0x0095
                           000096   655 G$P1_6$0$0 == 0x0096
                           000096   656 _P1_6	=	0x0096
                           000097   657 G$P1_7$0$0 == 0x0097
                           000097   658 _P1_7	=	0x0097
                           000098   659 G$RI$0$0 == 0x0098
                           000098   660 _RI	=	0x0098
                           000098   661 G$RI0$0$0 == 0x0098
                           000098   662 _RI0	=	0x0098
                           000099   663 G$TI$0$0 == 0x0099
                           000099   664 _TI	=	0x0099
                           000099   665 G$TI0$0$0 == 0x0099
                           000099   666 _TI0	=	0x0099
                           00009A   667 G$RB8$0$0 == 0x009a
                           00009A   668 _RB8	=	0x009a
                           00009A   669 G$RB80$0$0 == 0x009a
                           00009A   670 _RB80	=	0x009a
                           00009B   671 G$TB8$0$0 == 0x009b
                           00009B   672 _TB8	=	0x009b
                           00009B   673 G$TB80$0$0 == 0x009b
                           00009B   674 _TB80	=	0x009b
                           00009C   675 G$REN$0$0 == 0x009c
                           00009C   676 _REN	=	0x009c
                           00009C   677 G$REN0$0$0 == 0x009c
                           00009C   678 _REN0	=	0x009c
                           00009D   679 G$SM2$0$0 == 0x009d
                           00009D   680 _SM2	=	0x009d
                           00009D   681 G$SM20$0$0 == 0x009d
                           00009D   682 _SM20	=	0x009d
                           00009D   683 G$MCE0$0$0 == 0x009d
                           00009D   684 _MCE0	=	0x009d
                           00009E   685 G$SM1$0$0 == 0x009e
                           00009E   686 _SM1	=	0x009e
                           00009E   687 G$SM10$0$0 == 0x009e
                           00009E   688 _SM10	=	0x009e
                           00009F   689 G$SM0$0$0 == 0x009f
                           00009F   690 _SM0	=	0x009f
                           00009F   691 G$SM00$0$0 == 0x009f
                           00009F   692 _SM00	=	0x009f
                           00009F   693 G$S0MODE$0$0 == 0x009f
                           00009F   694 _S0MODE	=	0x009f
                           0000A0   695 G$P2_0$0$0 == 0x00a0
                           0000A0   696 _P2_0	=	0x00a0
                           0000A1   697 G$P2_1$0$0 == 0x00a1
                           0000A1   698 _P2_1	=	0x00a1
                           0000A2   699 G$P2_2$0$0 == 0x00a2
                           0000A2   700 _P2_2	=	0x00a2
                           0000A3   701 G$P2_3$0$0 == 0x00a3
                           0000A3   702 _P2_3	=	0x00a3
                           0000A4   703 G$P2_4$0$0 == 0x00a4
                           0000A4   704 _P2_4	=	0x00a4
                           0000A5   705 G$P2_5$0$0 == 0x00a5
                           0000A5   706 _P2_5	=	0x00a5
                           0000A6   707 G$P2_6$0$0 == 0x00a6
                           0000A6   708 _P2_6	=	0x00a6
                           0000A7   709 G$P2_7$0$0 == 0x00a7
                           0000A7   710 _P2_7	=	0x00a7
                           0000A8   711 G$EX0$0$0 == 0x00a8
                           0000A8   712 _EX0	=	0x00a8
                           0000A9   713 G$ET0$0$0 == 0x00a9
                           0000A9   714 _ET0	=	0x00a9
                           0000AA   715 G$EX1$0$0 == 0x00aa
                           0000AA   716 _EX1	=	0x00aa
                           0000AB   717 G$ET1$0$0 == 0x00ab
                           0000AB   718 _ET1	=	0x00ab
                           0000AC   719 G$ES0$0$0 == 0x00ac
                           0000AC   720 _ES0	=	0x00ac
                           0000AC   721 G$ES$0$0 == 0x00ac
                           0000AC   722 _ES	=	0x00ac
                           0000AD   723 G$ET2$0$0 == 0x00ad
                           0000AD   724 _ET2	=	0x00ad
                           0000AF   725 G$EA$0$0 == 0x00af
                           0000AF   726 _EA	=	0x00af
                           0000B0   727 G$P3_0$0$0 == 0x00b0
                           0000B0   728 _P3_0	=	0x00b0
                           0000B1   729 G$P3_1$0$0 == 0x00b1
                           0000B1   730 _P3_1	=	0x00b1
                           0000B2   731 G$P3_2$0$0 == 0x00b2
                           0000B2   732 _P3_2	=	0x00b2
                           0000B3   733 G$P3_3$0$0 == 0x00b3
                           0000B3   734 _P3_3	=	0x00b3
                           0000B4   735 G$P3_4$0$0 == 0x00b4
                           0000B4   736 _P3_4	=	0x00b4
                           0000B5   737 G$P3_5$0$0 == 0x00b5
                           0000B5   738 _P3_5	=	0x00b5
                           0000B6   739 G$P3_6$0$0 == 0x00b6
                           0000B6   740 _P3_6	=	0x00b6
                           0000B7   741 G$P3_7$0$0 == 0x00b7
                           0000B7   742 _P3_7	=	0x00b7
                           0000B8   743 G$PX0$0$0 == 0x00b8
                           0000B8   744 _PX0	=	0x00b8
                           0000B9   745 G$PT0$0$0 == 0x00b9
                           0000B9   746 _PT0	=	0x00b9
                           0000BA   747 G$PX1$0$0 == 0x00ba
                           0000BA   748 _PX1	=	0x00ba
                           0000BB   749 G$PT1$0$0 == 0x00bb
                           0000BB   750 _PT1	=	0x00bb
                           0000BC   751 G$PS0$0$0 == 0x00bc
                           0000BC   752 _PS0	=	0x00bc
                           0000BC   753 G$PS$0$0 == 0x00bc
                           0000BC   754 _PS	=	0x00bc
                           0000BD   755 G$PT2$0$0 == 0x00bd
                           0000BD   756 _PT2	=	0x00bd
                           0000C0   757 G$SMBTOE$0$0 == 0x00c0
                           0000C0   758 _SMBTOE	=	0x00c0
                           0000C1   759 G$SMBFTE$0$0 == 0x00c1
                           0000C1   760 _SMBFTE	=	0x00c1
                           0000C2   761 G$AA$0$0 == 0x00c2
                           0000C2   762 _AA	=	0x00c2
                           0000C3   763 G$SI$0$0 == 0x00c3
                           0000C3   764 _SI	=	0x00c3
                           0000C4   765 G$STO$0$0 == 0x00c4
                           0000C4   766 _STO	=	0x00c4
                           0000C5   767 G$STA$0$0 == 0x00c5
                           0000C5   768 _STA	=	0x00c5
                           0000C6   769 G$ENSMB$0$0 == 0x00c6
                           0000C6   770 _ENSMB	=	0x00c6
                           0000C7   771 G$BUSY$0$0 == 0x00c7
                           0000C7   772 _BUSY	=	0x00c7
                           0000C8   773 G$CPRL2$0$0 == 0x00c8
                           0000C8   774 _CPRL2	=	0x00c8
                           0000C9   775 G$CT2$0$0 == 0x00c9
                           0000C9   776 _CT2	=	0x00c9
                           0000CA   777 G$TR2$0$0 == 0x00ca
                           0000CA   778 _TR2	=	0x00ca
                           0000CB   779 G$EXEN2$0$0 == 0x00cb
                           0000CB   780 _EXEN2	=	0x00cb
                           0000CC   781 G$TCLK$0$0 == 0x00cc
                           0000CC   782 _TCLK	=	0x00cc
                           0000CD   783 G$RCLK$0$0 == 0x00cd
                           0000CD   784 _RCLK	=	0x00cd
                           0000CE   785 G$EXF2$0$0 == 0x00ce
                           0000CE   786 _EXF2	=	0x00ce
                           0000CF   787 G$TF2$0$0 == 0x00cf
                           0000CF   788 _TF2	=	0x00cf
                           0000D0   789 G$P$0$0 == 0x00d0
                           0000D0   790 _P	=	0x00d0
                           0000D1   791 G$F1$0$0 == 0x00d1
                           0000D1   792 _F1	=	0x00d1
                           0000D2   793 G$OV$0$0 == 0x00d2
                           0000D2   794 _OV	=	0x00d2
                           0000D3   795 G$RS0$0$0 == 0x00d3
                           0000D3   796 _RS0	=	0x00d3
                           0000D4   797 G$RS1$0$0 == 0x00d4
                           0000D4   798 _RS1	=	0x00d4
                           0000D5   799 G$F0$0$0 == 0x00d5
                           0000D5   800 _F0	=	0x00d5
                           0000D6   801 G$AC$0$0 == 0x00d6
                           0000D6   802 _AC	=	0x00d6
                           0000D7   803 G$CY$0$0 == 0x00d7
                           0000D7   804 _CY	=	0x00d7
                           0000D8   805 G$CCF0$0$0 == 0x00d8
                           0000D8   806 _CCF0	=	0x00d8
                           0000D9   807 G$CCF1$0$0 == 0x00d9
                           0000D9   808 _CCF1	=	0x00d9
                           0000DA   809 G$CCF2$0$0 == 0x00da
                           0000DA   810 _CCF2	=	0x00da
                           0000DB   811 G$CCF3$0$0 == 0x00db
                           0000DB   812 _CCF3	=	0x00db
                           0000DC   813 G$CCF4$0$0 == 0x00dc
                           0000DC   814 _CCF4	=	0x00dc
                           0000DE   815 G$CR$0$0 == 0x00de
                           0000DE   816 _CR	=	0x00de
                           0000DF   817 G$CF$0$0 == 0x00df
                           0000DF   818 _CF	=	0x00df
                           0000E8   819 G$ADLJST$0$0 == 0x00e8
                           0000E8   820 _ADLJST	=	0x00e8
                           0000E8   821 G$AD0LJST$0$0 == 0x00e8
                           0000E8   822 _AD0LJST	=	0x00e8
                           0000E9   823 G$ADWINT$0$0 == 0x00e9
                           0000E9   824 _ADWINT	=	0x00e9
                           0000E9   825 G$AD0WINT$0$0 == 0x00e9
                           0000E9   826 _AD0WINT	=	0x00e9
                           0000EA   827 G$ADSTM0$0$0 == 0x00ea
                           0000EA   828 _ADSTM0	=	0x00ea
                           0000EA   829 G$AD0CM0$0$0 == 0x00ea
                           0000EA   830 _AD0CM0	=	0x00ea
                           0000EB   831 G$ADSTM1$0$0 == 0x00eb
                           0000EB   832 _ADSTM1	=	0x00eb
                           0000EB   833 G$AD0CM1$0$0 == 0x00eb
                           0000EB   834 _AD0CM1	=	0x00eb
                           0000EC   835 G$ADBUSY$0$0 == 0x00ec
                           0000EC   836 _ADBUSY	=	0x00ec
                           0000EC   837 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   838 _AD0BUSY	=	0x00ec
                           0000ED   839 G$ADCINT$0$0 == 0x00ed
                           0000ED   840 _ADCINT	=	0x00ed
                           0000ED   841 G$AD0INT$0$0 == 0x00ed
                           0000ED   842 _AD0INT	=	0x00ed
                           0000EE   843 G$ADCTM$0$0 == 0x00ee
                           0000EE   844 _ADCTM	=	0x00ee
                           0000EE   845 G$AD0TM$0$0 == 0x00ee
                           0000EE   846 _AD0TM	=	0x00ee
                           0000EF   847 G$ADCEN$0$0 == 0x00ef
                           0000EF   848 _ADCEN	=	0x00ef
                           0000EF   849 G$AD0EN$0$0 == 0x00ef
                           0000EF   850 _AD0EN	=	0x00ef
                           0000F8   851 G$SPIEN$0$0 == 0x00f8
                           0000F8   852 _SPIEN	=	0x00f8
                           0000F9   853 G$MSTEN$0$0 == 0x00f9
                           0000F9   854 _MSTEN	=	0x00f9
                           0000FA   855 G$SLVSEL$0$0 == 0x00fa
                           0000FA   856 _SLVSEL	=	0x00fa
                           0000FB   857 G$TXBSY$0$0 == 0x00fb
                           0000FB   858 _TXBSY	=	0x00fb
                           0000FC   859 G$RXOVRN$0$0 == 0x00fc
                           0000FC   860 _RXOVRN	=	0x00fc
                           0000FD   861 G$MODF$0$0 == 0x00fd
                           0000FD   862 _MODF	=	0x00fd
                           0000FE   863 G$WCOL$0$0 == 0x00fe
                           0000FE   864 _WCOL	=	0x00fe
                           0000FF   865 G$SPIF$0$0 == 0x00ff
                           0000FF   866 _SPIF	=	0x00ff
                                    867 ;--------------------------------------------------------
                                    868 ; overlayable register banks
                                    869 ;--------------------------------------------------------
                                    870 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        871 	.ds 8
                                    872 ;--------------------------------------------------------
                                    873 ; internal ram data
                                    874 ;--------------------------------------------------------
                                    875 	.area DSEG    (DATA)
                           000000   876 G$PW_CENTER$0$0==.
      000000                        877 _PW_CENTER::
      000000                        878 	.ds 2
                           000002   879 G$PW_MIN$0$0==.
      000002                        880 _PW_MIN::
      000002                        881 	.ds 2
                           000004   882 G$PW_MAX$0$0==.
      000004                        883 _PW_MAX::
      000004                        884 	.ds 2
                           000006   885 G$PW$0$0==.
      000006                        886 _PW::
      000006                        887 	.ds 2
                           000008   888 G$count$0$0==.
      000008                        889 _count::
      000008                        890 	.ds 2
                                    891 ;--------------------------------------------------------
                                    892 ; overlayable items in internal ram 
                                    893 ;--------------------------------------------------------
                                    894 	.area	OSEG    (OVR,DATA)
                                    895 	.area	OSEG    (OVR,DATA)
                                    896 ;--------------------------------------------------------
                                    897 ; Stack segment in internal ram 
                                    898 ;--------------------------------------------------------
                                    899 	.area	SSEG
      000000                        900 __start__stack:
      000000                        901 	.ds	1
                                    902 
                                    903 ;--------------------------------------------------------
                                    904 ; indirectly addressable internal ram data
                                    905 ;--------------------------------------------------------
                                    906 	.area ISEG    (DATA)
                                    907 ;--------------------------------------------------------
                                    908 ; absolute internal ram data
                                    909 ;--------------------------------------------------------
                                    910 	.area IABS    (ABS,DATA)
                                    911 	.area IABS    (ABS,DATA)
                                    912 ;--------------------------------------------------------
                                    913 ; bit data
                                    914 ;--------------------------------------------------------
                                    915 	.area BSEG    (BIT)
                                    916 ;--------------------------------------------------------
                                    917 ; paged external ram data
                                    918 ;--------------------------------------------------------
                                    919 	.area PSEG    (PAG,XDATA)
                                    920 ;--------------------------------------------------------
                                    921 ; external ram data
                                    922 ;--------------------------------------------------------
                                    923 	.area XSEG    (XDATA)
                                    924 ;--------------------------------------------------------
                                    925 ; absolute external ram data
                                    926 ;--------------------------------------------------------
                                    927 	.area XABS    (ABS,XDATA)
                                    928 ;--------------------------------------------------------
                                    929 ; external initialized ram data
                                    930 ;--------------------------------------------------------
                                    931 	.area XISEG   (XDATA)
                                    932 	.area HOME    (CODE)
                                    933 	.area GSINIT0 (CODE)
                                    934 	.area GSINIT1 (CODE)
                                    935 	.area GSINIT2 (CODE)
                                    936 	.area GSINIT3 (CODE)
                                    937 	.area GSINIT4 (CODE)
                                    938 	.area GSINIT5 (CODE)
                                    939 	.area GSINIT  (CODE)
                                    940 	.area GSFINAL (CODE)
                                    941 	.area CSEG    (CODE)
                                    942 ;--------------------------------------------------------
                                    943 ; interrupt vector 
                                    944 ;--------------------------------------------------------
                                    945 	.area HOME    (CODE)
      000000                        946 __interrupt_vect:
      000000 02r00r00         [24]  947 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  948 	reti
      000004                        949 	.ds	7
      00000B 32               [24]  950 	reti
      00000C                        951 	.ds	7
      000013 32               [24]  952 	reti
      000014                        953 	.ds	7
      00001B 32               [24]  954 	reti
      00001C                        955 	.ds	7
      000023 32               [24]  956 	reti
      000024                        957 	.ds	7
      00002B 32               [24]  958 	reti
      00002C                        959 	.ds	7
      000033 32               [24]  960 	reti
      000034                        961 	.ds	7
      00003B 32               [24]  962 	reti
      00003C                        963 	.ds	7
      000043 32               [24]  964 	reti
      000044                        965 	.ds	7
      00004B 02r00rCB         [24]  966 	ljmp	_PCA_ISR
                                    967 ;--------------------------------------------------------
                                    968 ; global & static initialisations
                                    969 ;--------------------------------------------------------
                                    970 	.area HOME    (CODE)
                                    971 	.area GSINIT  (CODE)
                                    972 	.area GSFINAL (CODE)
                                    973 	.area GSINIT  (CODE)
                                    974 	.globl __sdcc_gsinit_startup
                                    975 	.globl __sdcc_program_startup
                                    976 	.globl __start__stack
                                    977 	.globl __mcs51_genXINIT
                                    978 	.globl __mcs51_genXRAMCLEAR
                                    979 	.globl __mcs51_genRAMCLEAR
                           000000   980 	C$lab3_1.c$17$1$53 ==.
                                    981 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:17: unsigned int PW_CENTER = 2765;
      000000 75*00 CD         [24]  982 	mov	_PW_CENTER,#0xCD
      000003 75*01 0A         [24]  983 	mov	(_PW_CENTER + 1),#0x0A
                           000006   984 	C$lab3_1.c$18$1$53 ==.
                                    985 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:18: unsigned int PW_MIN =  2085;
      000006 75*02 25         [24]  986 	mov	_PW_MIN,#0x25
      000009 75*03 08         [24]  987 	mov	(_PW_MIN + 1),#0x08
                           00000C   988 	C$lab3_1.c$19$1$53 ==.
                                    989 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:19: unsigned int PW_MAX = 3265;
      00000C 75*04 C1         [24]  990 	mov	_PW_MAX,#0xC1
      00000F 75*05 0C         [24]  991 	mov	(_PW_MAX + 1),#0x0C
                           000012   992 	C$lab3_1.c$20$1$53 ==.
                                    993 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:20: unsigned int PW = 0;
      000012 E4               [12]  994 	clr	a
      000013 F5*06            [12]  995 	mov	_PW,a
      000015 F5*07            [12]  996 	mov	(_PW + 1),a
                           000017   997 	C$lab3_1.c$21$1$53 ==.
                                    998 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:21: unsigned int count =0;
      000017 F5*08            [12]  999 	mov	_count,a
      000019 F5*09            [12] 1000 	mov	(_count + 1),a
                                   1001 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1002 	ljmp	__sdcc_program_startup
                                   1003 ;--------------------------------------------------------
                                   1004 ; Home
                                   1005 ;--------------------------------------------------------
                                   1006 	.area HOME    (CODE)
                                   1007 	.area HOME    (CODE)
      00004E                       1008 __sdcc_program_startup:
      00004E 02r00r5C         [24] 1009 	ljmp	_main
                                   1010 ;	return from main will return to caller
                                   1011 ;--------------------------------------------------------
                                   1012 ; code
                                   1013 ;--------------------------------------------------------
                                   1014 	.area CSEG    (CODE)
                                   1015 ;------------------------------------------------------------
                                   1016 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1017 ;------------------------------------------------------------
                                   1018 ;i                         Allocated to registers 
                                   1019 ;------------------------------------------------------------
                           000000  1020 	G$SYSCLK_Init$0$0 ==.
                           000000  1021 	C$c8051_SDCC.h$42$0$0 ==.
                                   1022 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1023 ;	-----------------------------------------
                                   1024 ;	 function SYSCLK_Init
                                   1025 ;	-----------------------------------------
      000000                       1026 _SYSCLK_Init:
                           000007  1027 	ar7 = 0x07
                           000006  1028 	ar6 = 0x06
                           000005  1029 	ar5 = 0x05
                           000004  1030 	ar4 = 0x04
                           000003  1031 	ar3 = 0x03
                           000002  1032 	ar2 = 0x02
                           000001  1033 	ar1 = 0x01
                           000000  1034 	ar0 = 0x00
                           000000  1035 	C$c8051_SDCC.h$46$1$2 ==.
                                   1036 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1037 	mov	_OSCXCN,#0x67
                           000003  1038 	C$c8051_SDCC.h$49$1$2 ==.
                                   1039 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1040 	mov	r6,#0x00
      000005 7F 01            [12] 1041 	mov	r7,#0x01
      000007                       1042 00107$:
      000007 1E               [12] 1043 	dec	r6
      000008 BE FF 01         [24] 1044 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1045 	dec	r7
      00000C                       1046 00121$:
      00000C EE               [12] 1047 	mov	a,r6
      00000D 4F               [12] 1048 	orl	a,r7
      00000E 70 F7            [24] 1049 	jnz	00107$
                           000010  1050 	C$c8051_SDCC.h$51$1$2 ==.
                                   1051 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1052 00102$:
      000010 E5 B1            [12] 1053 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1054 	jnb	acc.7,00102$
                           000015  1055 	C$c8051_SDCC.h$53$1$2 ==.
                                   1056 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1057 	mov	_OSCICN,#0x88
                           000018  1058 	C$c8051_SDCC.h$56$1$2 ==.
                           000018  1059 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1060 	ret
                                   1061 ;------------------------------------------------------------
                                   1062 ;Allocation info for local variables in function 'UART0_Init'
                                   1063 ;------------------------------------------------------------
                           000019  1064 	G$UART0_Init$0$0 ==.
                           000019  1065 	C$c8051_SDCC.h$64$1$2 ==.
                                   1066 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1067 ;	-----------------------------------------
                                   1068 ;	 function UART0_Init
                                   1069 ;	-----------------------------------------
      000019                       1070 _UART0_Init:
                           000019  1071 	C$c8051_SDCC.h$66$1$4 ==.
                                   1072 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1073 	mov	_SCON0,#0x50
                           00001C  1074 	C$c8051_SDCC.h$67$1$4 ==.
                                   1075 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1076 	mov	_TMOD,#0x20
                           00001F  1077 	C$c8051_SDCC.h$68$1$4 ==.
                                   1078 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1079 	mov	_TH1,#0xDC
                           000022  1080 	C$c8051_SDCC.h$69$1$4 ==.
                                   1081 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1082 	setb	_TR1
                           000024  1083 	C$c8051_SDCC.h$70$1$4 ==.
                                   1084 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1085 	orl	_CKCON,#0x10
                           000027  1086 	C$c8051_SDCC.h$71$1$4 ==.
                                   1087 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1088 	orl	_PCON,#0x80
                           00002A  1089 	C$c8051_SDCC.h$73$1$4 ==.
                                   1090 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1091 	setb	_TI0
                           00002C  1092 	C$c8051_SDCC.h$74$1$4 ==.
                                   1093 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1094 	orl	_P0MDOUT,#0x01
                           00002F  1095 	C$c8051_SDCC.h$75$1$4 ==.
                           00002F  1096 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1097 	ret
                                   1098 ;------------------------------------------------------------
                                   1099 ;Allocation info for local variables in function 'Sys_Init'
                                   1100 ;------------------------------------------------------------
                           000030  1101 	G$Sys_Init$0$0 ==.
                           000030  1102 	C$c8051_SDCC.h$83$1$4 ==.
                                   1103 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1104 ;	-----------------------------------------
                                   1105 ;	 function Sys_Init
                                   1106 ;	-----------------------------------------
      000030                       1107 _Sys_Init:
                           000030  1108 	C$c8051_SDCC.h$85$1$6 ==.
                                   1109 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1110 	mov	_WDTCN,#0xDE
                           000033  1111 	C$c8051_SDCC.h$86$1$6 ==.
                                   1112 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1113 	mov	_WDTCN,#0xAD
                           000036  1114 	C$c8051_SDCC.h$88$1$6 ==.
                                   1115 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1116 	lcall	_SYSCLK_Init
                           000039  1117 	C$c8051_SDCC.h$89$1$6 ==.
                                   1118 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1119 	lcall	_UART0_Init
                           00003C  1120 	C$c8051_SDCC.h$91$1$6 ==.
                                   1121 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1122 	orl	_XBR0,#0x04
                           00003F  1123 	C$c8051_SDCC.h$92$1$6 ==.
                                   1124 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1125 	orl	_XBR2,#0x40
                           000042  1126 	C$c8051_SDCC.h$93$1$6 ==.
                           000042  1127 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1128 	ret
                                   1129 ;------------------------------------------------------------
                                   1130 ;Allocation info for local variables in function 'putchar'
                                   1131 ;------------------------------------------------------------
                                   1132 ;c                         Allocated to registers r7 
                                   1133 ;------------------------------------------------------------
                           000043  1134 	G$putchar$0$0 ==.
                           000043  1135 	C$c8051_SDCC.h$98$1$6 ==.
                                   1136 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1137 ;	-----------------------------------------
                                   1138 ;	 function putchar
                                   1139 ;	-----------------------------------------
      000043                       1140 _putchar:
      000043 AF 82            [24] 1141 	mov	r7,dpl
                           000045  1142 	C$c8051_SDCC.h$100$1$8 ==.
                                   1143 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1144 00101$:
                           000045  1145 	C$c8051_SDCC.h$101$1$8 ==.
                                   1146 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1147 	jbc	_TI0,00112$
      000048 80 FB            [24] 1148 	sjmp	00101$
      00004A                       1149 00112$:
                           00004A  1150 	C$c8051_SDCC.h$102$1$8 ==.
                                   1151 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1152 	mov	_SBUF0,r7
                           00004C  1153 	C$c8051_SDCC.h$103$1$8 ==.
                           00004C  1154 	XG$putchar$0$0 ==.
      00004C 22               [24] 1155 	ret
                                   1156 ;------------------------------------------------------------
                                   1157 ;Allocation info for local variables in function 'getchar'
                                   1158 ;------------------------------------------------------------
                                   1159 ;c                         Allocated to registers 
                                   1160 ;------------------------------------------------------------
                           00004D  1161 	G$getchar$0$0 ==.
                           00004D  1162 	C$c8051_SDCC.h$108$1$8 ==.
                                   1163 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1164 ;	-----------------------------------------
                                   1165 ;	 function getchar
                                   1166 ;	-----------------------------------------
      00004D                       1167 _getchar:
                           00004D  1168 	C$c8051_SDCC.h$111$1$10 ==.
                                   1169 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1170 00101$:
                           00004D  1171 	C$c8051_SDCC.h$112$1$10 ==.
                                   1172 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1173 	jbc	_RI0,00112$
      000050 80 FB            [24] 1174 	sjmp	00101$
      000052                       1175 00112$:
                           000052  1176 	C$c8051_SDCC.h$113$1$10 ==.
                                   1177 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1178 	mov	dpl,_SBUF0
                           000055  1179 	C$c8051_SDCC.h$114$1$10 ==.
                                   1180 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1181 	lcall	_putchar
                           000058  1182 	C$c8051_SDCC.h$115$1$10 ==.
                                   1183 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1184 	mov	dpl,_SBUF0
                           00005B  1185 	C$c8051_SDCC.h$116$1$10 ==.
                           00005B  1186 	XG$getchar$0$0 ==.
      00005B 22               [24] 1187 	ret
                                   1188 ;------------------------------------------------------------
                                   1189 ;Allocation info for local variables in function 'main'
                                   1190 ;------------------------------------------------------------
                           00005C  1191 	G$main$0$0 ==.
                           00005C  1192 	C$lab3_1.c$25$1$10 ==.
                                   1193 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:25: void main(void)
                                   1194 ;	-----------------------------------------
                                   1195 ;	 function main
                                   1196 ;	-----------------------------------------
      00005C                       1197 _main:
                           00005C  1198 	C$lab3_1.c$28$1$45 ==.
                                   1199 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:28: Sys_Init();
      00005C 12r00r30         [24] 1200 	lcall	_Sys_Init
                           00005F  1201 	C$lab3_1.c$29$1$45 ==.
                                   1202 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:29: putchar(' '); //the quotes in this line may not format correctly
      00005F 75 82 20         [24] 1203 	mov	dpl,#0x20
      000062 12r00r43         [24] 1204 	lcall	_putchar
                           000065  1205 	C$lab3_1.c$30$1$45 ==.
                                   1206 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:30: Port_Init();
      000065 12r00rB4         [24] 1207 	lcall	_Port_Init
                           000068  1208 	C$lab3_1.c$31$1$45 ==.
                                   1209 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:31: XBR0_Init();
      000068 12r00rB8         [24] 1210 	lcall	_XBR0_Init
                           00006B  1211 	C$lab3_1.c$32$1$45 ==.
                                   1212 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:32: PCA_Init();
      00006B 12r00rBC         [24] 1213 	lcall	_PCA_Init
                           00006E  1214 	C$lab3_1.c$35$1$45 ==.
                                   1215 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:35: printf("Embedded Control Steering Calibration\n");
      00006E 74r00            [12] 1216 	mov	a,#___str_0
      000070 C0 E0            [24] 1217 	push	acc
      000072 74s00            [12] 1218 	mov	a,#(___str_0 >> 8)
      000074 C0 E0            [24] 1219 	push	acc
      000076 74 80            [12] 1220 	mov	a,#0x80
      000078 C0 E0            [24] 1221 	push	acc
      00007A 12r00r00         [24] 1222 	lcall	_printf
      00007D 15 81            [12] 1223 	dec	sp
      00007F 15 81            [12] 1224 	dec	sp
      000081 15 81            [12] 1225 	dec	sp
                           000083  1226 	C$lab3_1.c$39$1$45 ==.
                                   1227 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:39: PW = PW_CENTER;
      000083 85*00*06         [24] 1228 	mov	_PW,_PW_CENTER
      000086 85*01*07         [24] 1229 	mov	(_PW + 1),(_PW_CENTER + 1)
                           000089  1230 	C$lab3_1.c$40$1$45 ==.
                                   1231 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:40: count=0;
      000089 E4               [12] 1232 	clr	a
      00008A F5*08            [12] 1233 	mov	_count,a
      00008C F5*09            [12] 1234 	mov	(_count + 1),a
                           00008E  1235 	C$lab3_1.c$41$1$45 ==.
                                   1236 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:41: while (count < 29);
      00008E                       1237 00101$:
      00008E C3               [12] 1238 	clr	c
      00008F E5*08            [12] 1239 	mov	a,_count
      000091 94 1D            [12] 1240 	subb	a,#0x1D
      000093 E5*09            [12] 1241 	mov	a,(_count + 1)
      000095 94 00            [12] 1242 	subb	a,#0x00
      000097 40 F5            [24] 1243 	jc	00101$
                           000099  1244 	C$lab3_1.c$42$1$45 ==.
                                   1245 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:42: PCA0CPL0 = 0xFFFF - PW;
      000099 AF*06            [24] 1246 	mov	r7,_PW
      00009B 74 FF            [12] 1247 	mov	a,#0xFF
      00009D C3               [12] 1248 	clr	c
      00009E 9F               [12] 1249 	subb	a,r7
      00009F F5 EA            [12] 1250 	mov	_PCA0CPL0,a
                           0000A1  1251 	C$lab3_1.c$43$1$45 ==.
                                   1252 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:43: PCA0CPH0 = (0xFFFF - PW) >> 8;
      0000A1 74 FF            [12] 1253 	mov	a,#0xFF
      0000A3 C3               [12] 1254 	clr	c
      0000A4 95*06            [12] 1255 	subb	a,_PW
      0000A6 FE               [12] 1256 	mov	r6,a
      0000A7 74 FF            [12] 1257 	mov	a,#0xFF
      0000A9 95*07            [12] 1258 	subb	a,(_PW + 1)
      0000AB FF               [12] 1259 	mov	r7,a
      0000AC 8F FA            [24] 1260 	mov	_PCA0CPH0,r7
                           0000AE  1261 	C$lab3_1.c$44$1$45 ==.
                                   1262 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:44: while(1)
      0000AE                       1263 00105$:
                           0000AE  1264 	C$lab3_1.c$45$1$45 ==.
                                   1265 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:45: Steering_Servo();
      0000AE 12r00rEA         [24] 1266 	lcall	_Steering_Servo
      0000B1 80 FB            [24] 1267 	sjmp	00105$
                           0000B3  1268 	C$lab3_1.c$46$1$45 ==.
                           0000B3  1269 	XG$main$0$0 ==.
      0000B3 22               [24] 1270 	ret
                                   1271 ;------------------------------------------------------------
                                   1272 ;Allocation info for local variables in function 'Port_Init'
                                   1273 ;------------------------------------------------------------
                           0000B4  1274 	G$Port_Init$0$0 ==.
                           0000B4  1275 	C$lab3_1.c$54$1$45 ==.
                                   1276 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:54: void Port_Init()
                                   1277 ;	-----------------------------------------
                                   1278 ;	 function Port_Init
                                   1279 ;	-----------------------------------------
      0000B4                       1280 _Port_Init:
                           0000B4  1281 	C$lab3_1.c$56$1$46 ==.
                                   1282 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:56: P1MDOUT = 0x0F;  //set output pin for CEX0 or >CEX2< in push-pull mode
      0000B4 75 A5 0F         [24] 1283 	mov	_P1MDOUT,#0x0F
                           0000B7  1284 	C$lab3_1.c$58$1$46 ==.
                           0000B7  1285 	XG$Port_Init$0$0 ==.
      0000B7 22               [24] 1286 	ret
                                   1287 ;------------------------------------------------------------
                                   1288 ;Allocation info for local variables in function 'XBR0_Init'
                                   1289 ;------------------------------------------------------------
                           0000B8  1290 	G$XBR0_Init$0$0 ==.
                           0000B8  1291 	C$lab3_1.c$66$1$46 ==.
                                   1292 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:66: void XBR0_Init()
                                   1293 ;	-----------------------------------------
                                   1294 ;	 function XBR0_Init
                                   1295 ;	-----------------------------------------
      0000B8                       1296 _XBR0_Init:
                           0000B8  1297 	C$lab3_1.c$69$1$47 ==.
                                   1298 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:69: XBR0  = 0x27;  //configure crossbar as directed in the laboratory
      0000B8 75 E1 27         [24] 1299 	mov	_XBR0,#0x27
                           0000BB  1300 	C$lab3_1.c$71$1$47 ==.
                           0000BB  1301 	XG$XBR0_Init$0$0 ==.
      0000BB 22               [24] 1302 	ret
                                   1303 ;------------------------------------------------------------
                                   1304 ;Allocation info for local variables in function 'PCA_Init'
                                   1305 ;------------------------------------------------------------
                           0000BC  1306 	G$PCA_Init$0$0 ==.
                           0000BC  1307 	C$lab3_1.c$79$1$47 ==.
                                   1308 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:79: void PCA_Init(void)
                                   1309 ;	-----------------------------------------
                                   1310 ;	 function PCA_Init
                                   1311 ;	-----------------------------------------
      0000BC                       1312 _PCA_Init:
                           0000BC  1313 	C$lab3_1.c$83$1$49 ==.
                                   1314 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:83: PCA0MD = 0x81;
      0000BC 75 D9 81         [24] 1315 	mov	_PCA0MD,#0x81
                           0000BF  1316 	C$lab3_1.c$84$1$49 ==.
                                   1317 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:84: PCA0CPM0 = 0xC2;	//CCM0 in 16-bit compare mode
      0000BF 75 DA C2         [24] 1318 	mov	_PCA0CPM0,#0xC2
                           0000C2  1319 	C$lab3_1.c$85$1$49 ==.
                                   1320 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:85: PCA0CN = 0x40;		//Enable PCA counter
      0000C2 75 D8 40         [24] 1321 	mov	_PCA0CN,#0x40
                           0000C5  1322 	C$lab3_1.c$86$1$49 ==.
                                   1323 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:86: EIE1 |= 0x08;		//Enable PCA interrupt
      0000C5 43 E6 08         [24] 1324 	orl	_EIE1,#0x08
                           0000C8  1325 	C$lab3_1.c$87$1$49 ==.
                                   1326 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:87: EA = 1;				//Enable global interrupts
      0000C8 D2 AF            [12] 1327 	setb	_EA
                           0000CA  1328 	C$lab3_1.c$88$1$49 ==.
                           0000CA  1329 	XG$PCA_Init$0$0 ==.
      0000CA 22               [24] 1330 	ret
                                   1331 ;------------------------------------------------------------
                                   1332 ;Allocation info for local variables in function 'PCA_ISR'
                                   1333 ;------------------------------------------------------------
                           0000CB  1334 	G$PCA_ISR$0$0 ==.
                           0000CB  1335 	C$lab3_1.c$96$1$49 ==.
                                   1336 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:96: void PCA_ISR ( void ) __interrupt 9
                                   1337 ;	-----------------------------------------
                                   1338 ;	 function PCA_ISR
                                   1339 ;	-----------------------------------------
      0000CB                       1340 _PCA_ISR:
      0000CB C0 E0            [24] 1341 	push	acc
      0000CD C0 D0            [24] 1342 	push	psw
                           0000CF  1343 	C$lab3_1.c$99$1$51 ==.
                                   1344 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:99: if (CF)
                           0000CF  1345 	C$lab3_1.c$101$2$52 ==.
                                   1346 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:101: CF =0;
      0000CF 10 DF 02         [24] 1347 	jbc	_CF,00108$
      0000D2 80 0E            [24] 1348 	sjmp	00102$
      0000D4                       1349 00108$:
                           0000D4  1350 	C$lab3_1.c$102$2$52 ==.
                                   1351 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:102: PCA0 = 0x7000;
      0000D4 75 E9 00         [24] 1352 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0000D7 75 F9 70         [24] 1353 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           0000DA  1354 	C$lab3_1.c$103$2$52 ==.
                                   1355 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:103: count++;
      0000DA 05*08            [12] 1356 	inc	_count
      0000DC E4               [12] 1357 	clr	a
      0000DD B5*08 02         [24] 1358 	cjne	a,_count,00109$
      0000E0 05*09            [12] 1359 	inc	(_count + 1)
      0000E2                       1360 00109$:
      0000E2                       1361 00102$:
                           0000E2  1362 	C$lab3_1.c$106$1$51 ==.
                                   1363 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:106: PCA0CN &= 0xC0;
      0000E2 53 D8 C0         [24] 1364 	anl	_PCA0CN,#0xC0
      0000E5 D0 D0            [24] 1365 	pop	psw
      0000E7 D0 E0            [24] 1366 	pop	acc
                           0000E9  1367 	C$lab3_1.c$109$1$51 ==.
                           0000E9  1368 	XG$PCA_ISR$0$0 ==.
      0000E9 32               [24] 1369 	reti
                                   1370 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1371 ;	eliminated unneeded push/pop dpl
                                   1372 ;	eliminated unneeded push/pop dph
                                   1373 ;	eliminated unneeded push/pop b
                                   1374 ;------------------------------------------------------------
                                   1375 ;Allocation info for local variables in function 'Steering_Servo'
                                   1376 ;------------------------------------------------------------
                                   1377 ;input                     Allocated to registers r7 
                                   1378 ;------------------------------------------------------------
                           0000EA  1379 	G$Steering_Servo$0$0 ==.
                           0000EA  1380 	C$lab3_1.c$111$1$51 ==.
                                   1381 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:111: void Steering_Servo()
                                   1382 ;	-----------------------------------------
                                   1383 ;	 function Steering_Servo
                                   1384 ;	-----------------------------------------
      0000EA                       1385 _Steering_Servo:
                           0000EA  1386 	C$lab3_1.c$115$1$53 ==.
                                   1387 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:115: input = (char)getchar();
      0000EA 12r00r4D         [24] 1388 	lcall	_getchar
      0000ED AF 82            [24] 1389 	mov	r7,dpl
                           0000EF  1390 	C$lab3_1.c$116$1$53 ==.
                                   1391 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:116: if(input == 'r')  // single character input to increase the pulsewidth
      0000EF BF 72 21         [24] 1392 	cjne	r7,#0x72,00110$
                           0000F2  1393 	C$lab3_1.c$120$2$54 ==.
                                   1394 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:120: if(PW <= PW_MIN)  // check if less than pulsewidth minimum
      0000F2 C3               [12] 1395 	clr	c
      0000F3 E5*02            [12] 1396 	mov	a,_PW_MIN
      0000F5 95*06            [12] 1397 	subb	a,_PW
      0000F7 E5*03            [12] 1398 	mov	a,(_PW_MIN + 1)
      0000F9 95*07            [12] 1399 	subb	a,(_PW + 1)
      0000FB 40 08            [24] 1400 	jc	00102$
                           0000FD  1401 	C$lab3_1.c$122$3$55 ==.
                                   1402 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:122: PW = PW_MIN;    // set SERVO_PW to a minimum value
      0000FD 85*02*06         [24] 1403 	mov	_PW,_PW_MIN
      000100 85*03*07         [24] 1404 	mov	(_PW + 1),(_PW_MIN + 1)
      000103 80 2F            [24] 1405 	sjmp	00111$
      000105                       1406 00102$:
                           000105  1407 	C$lab3_1.c$126$3$56 ==.
                                   1408 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:126: PW -= 10;
      000105 E5*06            [12] 1409 	mov	a,_PW
      000107 24 F6            [12] 1410 	add	a,#0xF6
      000109 F5*06            [12] 1411 	mov	_PW,a
      00010B E5*07            [12] 1412 	mov	a,(_PW + 1)
      00010D 34 FF            [12] 1413 	addc	a,#0xFF
      00010F F5*07            [12] 1414 	mov	(_PW + 1),a
      000111 80 21            [24] 1415 	sjmp	00111$
      000113                       1416 00110$:
                           000113  1417 	C$lab3_1.c$129$1$53 ==.
                                   1418 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:129: else if(input == 'l')  // single character input to decrease the pulsewidth
      000113 BF 6C 1E         [24] 1419 	cjne	r7,#0x6C,00111$
                           000116  1420 	C$lab3_1.c$133$2$57 ==.
                                   1421 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:133: if(PW > PW_MAX)  // check if pulsewidth maximum exceeded
      000116 C3               [12] 1422 	clr	c
      000117 E5*04            [12] 1423 	mov	a,_PW_MAX
      000119 95*06            [12] 1424 	subb	a,_PW
      00011B E5*05            [12] 1425 	mov	a,(_PW_MAX + 1)
      00011D 95*07            [12] 1426 	subb	a,(_PW + 1)
      00011F 50 08            [24] 1427 	jnc	00105$
                           000121  1428 	C$lab3_1.c$135$3$58 ==.
                                   1429 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:135: PW = PW_MAX;     // set PW to a maximum value
      000121 85*04*06         [24] 1430 	mov	_PW,_PW_MAX
      000124 85*05*07         [24] 1431 	mov	(_PW + 1),(_PW_MAX + 1)
      000127 80 0B            [24] 1432 	sjmp	00111$
      000129                       1433 00105$:
                           000129  1434 	C$lab3_1.c$139$3$59 ==.
                                   1435 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:139: PW += 10;
      000129 74 0A            [12] 1436 	mov	a,#0x0A
      00012B 25*06            [12] 1437 	add	a,_PW
      00012D F5*06            [12] 1438 	mov	_PW,a
      00012F E4               [12] 1439 	clr	a
      000130 35*07            [12] 1440 	addc	a,(_PW + 1)
      000132 F5*07            [12] 1441 	mov	(_PW + 1),a
      000134                       1442 00111$:
                           000134  1443 	C$lab3_1.c$142$1$53 ==.
                                   1444 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:142: printf("PW: %u\n", PW);
      000134 C0*06            [24] 1445 	push	_PW
      000136 C0*07            [24] 1446 	push	(_PW + 1)
      000138 74r27            [12] 1447 	mov	a,#___str_1
      00013A C0 E0            [24] 1448 	push	acc
      00013C 74s00            [12] 1449 	mov	a,#(___str_1 >> 8)
      00013E C0 E0            [24] 1450 	push	acc
      000140 74 80            [12] 1451 	mov	a,#0x80
      000142 C0 E0            [24] 1452 	push	acc
      000144 12r00r00         [24] 1453 	lcall	_printf
      000147 E5 81            [12] 1454 	mov	a,sp
      000149 24 FB            [12] 1455 	add	a,#0xfb
      00014B F5 81            [12] 1456 	mov	sp,a
                           00014D  1457 	C$lab3_1.c$143$1$53 ==.
                                   1458 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:143: PCA0CPL0 = 0xFFFF - PW;
      00014D AF*06            [24] 1459 	mov	r7,_PW
      00014F 74 FF            [12] 1460 	mov	a,#0xFF
      000151 C3               [12] 1461 	clr	c
      000152 9F               [12] 1462 	subb	a,r7
      000153 F5 EA            [12] 1463 	mov	_PCA0CPL0,a
                           000155  1464 	C$lab3_1.c$144$1$53 ==.
                                   1465 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab3-1\lab3-1.c:144: PCA0CPH0 = (0xFFFF - PW) >> 8;
      000155 74 FF            [12] 1466 	mov	a,#0xFF
      000157 C3               [12] 1467 	clr	c
      000158 95*06            [12] 1468 	subb	a,_PW
      00015A 74 FF            [12] 1469 	mov	a,#0xFF
      00015C 95*07            [12] 1470 	subb	a,(_PW + 1)
      00015E FF               [12] 1471 	mov	r7,a
      00015F 8F FA            [24] 1472 	mov	_PCA0CPH0,r7
                           000161  1473 	C$lab3_1.c$146$1$53 ==.
                           000161  1474 	XG$Steering_Servo$0$0 ==.
      000161 22               [24] 1475 	ret
                                   1476 	.area CSEG    (CODE)
                                   1477 	.area CONST   (CODE)
                           000000  1478 Flab3_1$__str_0$0$0 == .
      000000                       1479 ___str_0:
      000000 45 6D 62 65 64 64 65  1480 	.ascii "Embedded Control Steering Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 53 74 65 65
             72 69 6E 67 20 43 61
             6C 69 62 72 61 74 69
             6F 6E
      000025 0A                    1481 	.db 0x0A
      000026 00                    1482 	.db 0x00
                           000027  1483 Flab3_1$__str_1$0$0 == .
      000027                       1484 ___str_1:
      000027 50 57 3A 20 25 75     1485 	.ascii "PW: %u"
      00002D 0A                    1486 	.db 0x0A
      00002E 00                    1487 	.db 0x00
                                   1488 	.area XINIT   (CODE)
                                   1489 	.area CABS    (ABS,CODE)
