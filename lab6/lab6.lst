                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Thu Apr 23 20:10:40 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module lab6
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _PCA_ISR
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _vsprintf
                                     20 	.globl _printf
                                     21 	.globl _BUS_SCL
                                     22 	.globl _BUS_TOE
                                     23 	.globl _BUS_FTE
                                     24 	.globl _BUS_AA
                                     25 	.globl _BUS_INT
                                     26 	.globl _BUS_STOP
                                     27 	.globl _BUS_START
                                     28 	.globl _BUS_EN
                                     29 	.globl _BUS_BUSY
                                     30 	.globl _SPIF
                                     31 	.globl _WCOL
                                     32 	.globl _MODF
                                     33 	.globl _RXOVRN
                                     34 	.globl _TXBSY
                                     35 	.globl _SLVSEL
                                     36 	.globl _MSTEN
                                     37 	.globl _SPIEN
                                     38 	.globl _AD0EN
                                     39 	.globl _ADCEN
                                     40 	.globl _AD0TM
                                     41 	.globl _ADCTM
                                     42 	.globl _AD0INT
                                     43 	.globl _ADCINT
                                     44 	.globl _AD0BUSY
                                     45 	.globl _ADBUSY
                                     46 	.globl _AD0CM1
                                     47 	.globl _ADSTM1
                                     48 	.globl _AD0CM0
                                     49 	.globl _ADSTM0
                                     50 	.globl _AD0WINT
                                     51 	.globl _ADWINT
                                     52 	.globl _AD0LJST
                                     53 	.globl _ADLJST
                                     54 	.globl _CF
                                     55 	.globl _CR
                                     56 	.globl _CCF4
                                     57 	.globl _CCF3
                                     58 	.globl _CCF2
                                     59 	.globl _CCF1
                                     60 	.globl _CCF0
                                     61 	.globl _CY
                                     62 	.globl _AC
                                     63 	.globl _F0
                                     64 	.globl _RS1
                                     65 	.globl _RS0
                                     66 	.globl _OV
                                     67 	.globl _F1
                                     68 	.globl _P
                                     69 	.globl _TF2
                                     70 	.globl _EXF2
                                     71 	.globl _RCLK
                                     72 	.globl _TCLK
                                     73 	.globl _EXEN2
                                     74 	.globl _TR2
                                     75 	.globl _CT2
                                     76 	.globl _CPRL2
                                     77 	.globl _BUSY
                                     78 	.globl _ENSMB
                                     79 	.globl _STA
                                     80 	.globl _STO
                                     81 	.globl _SI
                                     82 	.globl _AA
                                     83 	.globl _SMBFTE
                                     84 	.globl _SMBTOE
                                     85 	.globl _PT2
                                     86 	.globl _PS
                                     87 	.globl _PS0
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _P3_7
                                     93 	.globl _P3_6
                                     94 	.globl _P3_5
                                     95 	.globl _P3_4
                                     96 	.globl _P3_3
                                     97 	.globl _P3_2
                                     98 	.globl _P3_1
                                     99 	.globl _P3_0
                                    100 	.globl _EA
                                    101 	.globl _ET2
                                    102 	.globl _ES
                                    103 	.globl _ES0
                                    104 	.globl _ET1
                                    105 	.globl _EX1
                                    106 	.globl _ET0
                                    107 	.globl _EX0
                                    108 	.globl _P2_7
                                    109 	.globl _P2_6
                                    110 	.globl _P2_5
                                    111 	.globl _P2_4
                                    112 	.globl _P2_3
                                    113 	.globl _P2_2
                                    114 	.globl _P2_1
                                    115 	.globl _P2_0
                                    116 	.globl _S0MODE
                                    117 	.globl _SM00
                                    118 	.globl _SM0
                                    119 	.globl _SM10
                                    120 	.globl _SM1
                                    121 	.globl _MCE0
                                    122 	.globl _SM20
                                    123 	.globl _SM2
                                    124 	.globl _REN0
                                    125 	.globl _REN
                                    126 	.globl _TB80
                                    127 	.globl _TB8
                                    128 	.globl _RB80
                                    129 	.globl _RB8
                                    130 	.globl _TI0
                                    131 	.globl _TI
                                    132 	.globl _RI0
                                    133 	.globl _RI
                                    134 	.globl _P1_7
                                    135 	.globl _P1_6
                                    136 	.globl _P1_5
                                    137 	.globl _P1_4
                                    138 	.globl _P1_3
                                    139 	.globl _P1_2
                                    140 	.globl _P1_1
                                    141 	.globl _P1_0
                                    142 	.globl _TF1
                                    143 	.globl _TR1
                                    144 	.globl _TF0
                                    145 	.globl _TR0
                                    146 	.globl _IE1
                                    147 	.globl _IT1
                                    148 	.globl _IE0
                                    149 	.globl _IT0
                                    150 	.globl _P0_7
                                    151 	.globl _P0_6
                                    152 	.globl _P0_5
                                    153 	.globl _P0_4
                                    154 	.globl _P0_3
                                    155 	.globl _P0_2
                                    156 	.globl _P0_1
                                    157 	.globl _P0_0
                                    158 	.globl _PCA0CP4
                                    159 	.globl _PCA0CP3
                                    160 	.globl _PCA0CP2
                                    161 	.globl _PCA0CP1
                                    162 	.globl _PCA0CP0
                                    163 	.globl _PCA0
                                    164 	.globl _DAC1
                                    165 	.globl _DAC0
                                    166 	.globl _ADC0LT
                                    167 	.globl _ADC0GT
                                    168 	.globl _ADC0
                                    169 	.globl _RCAP4
                                    170 	.globl _TMR4
                                    171 	.globl _TMR3RL
                                    172 	.globl _TMR3
                                    173 	.globl _RCAP2
                                    174 	.globl _TMR2
                                    175 	.globl _TMR1
                                    176 	.globl _TMR0
                                    177 	.globl _WDTCN
                                    178 	.globl _PCA0CPH4
                                    179 	.globl _PCA0CPH3
                                    180 	.globl _PCA0CPH2
                                    181 	.globl _PCA0CPH1
                                    182 	.globl _PCA0CPH0
                                    183 	.globl _PCA0H
                                    184 	.globl _SPI0CN
                                    185 	.globl _EIP2
                                    186 	.globl _EIP1
                                    187 	.globl _TH4
                                    188 	.globl _TL4
                                    189 	.globl _SADDR1
                                    190 	.globl _SBUF1
                                    191 	.globl _SCON1
                                    192 	.globl _B
                                    193 	.globl _RSTSRC
                                    194 	.globl _PCA0CPL4
                                    195 	.globl _PCA0CPL3
                                    196 	.globl _PCA0CPL2
                                    197 	.globl _PCA0CPL1
                                    198 	.globl _PCA0CPL0
                                    199 	.globl _PCA0L
                                    200 	.globl _ADC0CN
                                    201 	.globl _EIE2
                                    202 	.globl _EIE1
                                    203 	.globl _RCAP4H
                                    204 	.globl _RCAP4L
                                    205 	.globl _XBR2
                                    206 	.globl _XBR1
                                    207 	.globl _XBR0
                                    208 	.globl _ACC
                                    209 	.globl _PCA0CPM4
                                    210 	.globl _PCA0CPM3
                                    211 	.globl _PCA0CPM2
                                    212 	.globl _PCA0CPM1
                                    213 	.globl _PCA0CPM0
                                    214 	.globl _PCA0MD
                                    215 	.globl _PCA0CN
                                    216 	.globl _DAC1CN
                                    217 	.globl _DAC1H
                                    218 	.globl _DAC1L
                                    219 	.globl _DAC0CN
                                    220 	.globl _DAC0H
                                    221 	.globl _DAC0L
                                    222 	.globl _REF0CN
                                    223 	.globl _PSW
                                    224 	.globl _SMB0CR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T4CON
                                    230 	.globl _T2CON
                                    231 	.globl _ADC0LTH
                                    232 	.globl _ADC0LTL
                                    233 	.globl _ADC0GTH
                                    234 	.globl _ADC0GTL
                                    235 	.globl _SMB0ADR
                                    236 	.globl _SMB0DAT
                                    237 	.globl _SMB0STA
                                    238 	.globl _SMB0CN
                                    239 	.globl _ADC0H
                                    240 	.globl _ADC0L
                                    241 	.globl _P1MDIN
                                    242 	.globl _ADC0CF
                                    243 	.globl _AMX0SL
                                    244 	.globl _AMX0CF
                                    245 	.globl _SADEN0
                                    246 	.globl _IP
                                    247 	.globl _FLACL
                                    248 	.globl _FLSCL
                                    249 	.globl _P74OUT
                                    250 	.globl _OSCICN
                                    251 	.globl _OSCXCN
                                    252 	.globl _P3
                                    253 	.globl __XPAGE
                                    254 	.globl _EMI0CN
                                    255 	.globl _SADEN1
                                    256 	.globl _P3IF
                                    257 	.globl _AMX1SL
                                    258 	.globl _ADC1CF
                                    259 	.globl _ADC1CN
                                    260 	.globl _SADDR0
                                    261 	.globl _IE
                                    262 	.globl _P3MDOUT
                                    263 	.globl _PRT3CF
                                    264 	.globl _P2MDOUT
                                    265 	.globl _PRT2CF
                                    266 	.globl _P1MDOUT
                                    267 	.globl _PRT1CF
                                    268 	.globl _P0MDOUT
                                    269 	.globl _PRT0CF
                                    270 	.globl _EMI0CF
                                    271 	.globl _EMI0TC
                                    272 	.globl _P2
                                    273 	.globl _CPT1CN
                                    274 	.globl _CPT0CN
                                    275 	.globl _SPI0CKR
                                    276 	.globl _ADC1
                                    277 	.globl _SPI0DAT
                                    278 	.globl _SPI0CFG
                                    279 	.globl _SBUF0
                                    280 	.globl _SBUF
                                    281 	.globl _SCON0
                                    282 	.globl _SCON
                                    283 	.globl _P7
                                    284 	.globl _TMR3H
                                    285 	.globl _TMR3L
                                    286 	.globl _TMR3RLH
                                    287 	.globl _TMR3RLL
                                    288 	.globl _TMR3CN
                                    289 	.globl _P1
                                    290 	.globl _PSCTL
                                    291 	.globl _CKCON
                                    292 	.globl _TH1
                                    293 	.globl _TH0
                                    294 	.globl _TL1
                                    295 	.globl _TL0
                                    296 	.globl _TMOD
                                    297 	.globl _TCON
                                    298 	.globl _PCON
                                    299 	.globl _P6
                                    300 	.globl _P5
                                    301 	.globl _P4
                                    302 	.globl _DPH
                                    303 	.globl _DPL
                                    304 	.globl _SP
                                    305 	.globl _P0
                                    306 	.globl _PW_DOWN_ANGLE
                                    307 	.globl _PW_CENTER_ANGLE
                                    308 	.globl _PW_UP_ANGLE
                                    309 	.globl _PW_RIGHT_RUDDER
                                    310 	.globl _PW_CENTER_RUDDER
                                    311 	.globl _PW_LEFT_RUDDER
                                    312 	.globl _PW_MAX_THRUST
                                    313 	.globl _PW_NUET_THRUST
                                    314 	.globl _PW_MIN_THRUST
                                    315 	.globl _count
                                    316 	.globl _i2c_read_data_PARM_4
                                    317 	.globl _i2c_read_data_PARM_3
                                    318 	.globl _i2c_read_data_PARM_2
                                    319 	.globl _i2c_write_data_PARM_4
                                    320 	.globl _i2c_write_data_PARM_3
                                    321 	.globl _i2c_write_data_PARM_2
                                    322 	.globl _putchar
                                    323 	.globl _getchar
                                    324 	.globl _lcd_print
                                    325 	.globl _lcd_clear
                                    326 	.globl _kpd_input
                                    327 	.globl _delay_time
                                    328 	.globl _i2c_start
                                    329 	.globl _i2c_write
                                    330 	.globl _i2c_write_and_stop
                                    331 	.globl _i2c_read
                                    332 	.globl _i2c_read_and_stop
                                    333 	.globl _i2c_write_data
                                    334 	.globl _i2c_read_data
                                    335 	.globl _Accel_Init
                                    336 	.globl _direction
                                    337 	.globl _start
                                    338 	.globl _wait
                                    339 	.globl _Port_Init
                                    340 	.globl _PCA_Init
                                    341 	.globl _XBR0_Init
                                    342 	.globl _SMB_Init
                                    343 	.globl _ADC_Init
                                    344 ;--------------------------------------------------------
                                    345 ; special function registers
                                    346 ;--------------------------------------------------------
                                    347 	.area RSEG    (ABS,DATA)
      000000                        348 	.org 0x0000
                           000080   349 G$P0$0$0 == 0x0080
                           000080   350 _P0	=	0x0080
                           000081   351 G$SP$0$0 == 0x0081
                           000081   352 _SP	=	0x0081
                           000082   353 G$DPL$0$0 == 0x0082
                           000082   354 _DPL	=	0x0082
                           000083   355 G$DPH$0$0 == 0x0083
                           000083   356 _DPH	=	0x0083
                           000084   357 G$P4$0$0 == 0x0084
                           000084   358 _P4	=	0x0084
                           000085   359 G$P5$0$0 == 0x0085
                           000085   360 _P5	=	0x0085
                           000086   361 G$P6$0$0 == 0x0086
                           000086   362 _P6	=	0x0086
                           000087   363 G$PCON$0$0 == 0x0087
                           000087   364 _PCON	=	0x0087
                           000088   365 G$TCON$0$0 == 0x0088
                           000088   366 _TCON	=	0x0088
                           000089   367 G$TMOD$0$0 == 0x0089
                           000089   368 _TMOD	=	0x0089
                           00008A   369 G$TL0$0$0 == 0x008a
                           00008A   370 _TL0	=	0x008a
                           00008B   371 G$TL1$0$0 == 0x008b
                           00008B   372 _TL1	=	0x008b
                           00008C   373 G$TH0$0$0 == 0x008c
                           00008C   374 _TH0	=	0x008c
                           00008D   375 G$TH1$0$0 == 0x008d
                           00008D   376 _TH1	=	0x008d
                           00008E   377 G$CKCON$0$0 == 0x008e
                           00008E   378 _CKCON	=	0x008e
                           00008F   379 G$PSCTL$0$0 == 0x008f
                           00008F   380 _PSCTL	=	0x008f
                           000090   381 G$P1$0$0 == 0x0090
                           000090   382 _P1	=	0x0090
                           000091   383 G$TMR3CN$0$0 == 0x0091
                           000091   384 _TMR3CN	=	0x0091
                           000092   385 G$TMR3RLL$0$0 == 0x0092
                           000092   386 _TMR3RLL	=	0x0092
                           000093   387 G$TMR3RLH$0$0 == 0x0093
                           000093   388 _TMR3RLH	=	0x0093
                           000094   389 G$TMR3L$0$0 == 0x0094
                           000094   390 _TMR3L	=	0x0094
                           000095   391 G$TMR3H$0$0 == 0x0095
                           000095   392 _TMR3H	=	0x0095
                           000096   393 G$P7$0$0 == 0x0096
                           000096   394 _P7	=	0x0096
                           000098   395 G$SCON$0$0 == 0x0098
                           000098   396 _SCON	=	0x0098
                           000098   397 G$SCON0$0$0 == 0x0098
                           000098   398 _SCON0	=	0x0098
                           000099   399 G$SBUF$0$0 == 0x0099
                           000099   400 _SBUF	=	0x0099
                           000099   401 G$SBUF0$0$0 == 0x0099
                           000099   402 _SBUF0	=	0x0099
                           00009A   403 G$SPI0CFG$0$0 == 0x009a
                           00009A   404 _SPI0CFG	=	0x009a
                           00009B   405 G$SPI0DAT$0$0 == 0x009b
                           00009B   406 _SPI0DAT	=	0x009b
                           00009C   407 G$ADC1$0$0 == 0x009c
                           00009C   408 _ADC1	=	0x009c
                           00009D   409 G$SPI0CKR$0$0 == 0x009d
                           00009D   410 _SPI0CKR	=	0x009d
                           00009E   411 G$CPT0CN$0$0 == 0x009e
                           00009E   412 _CPT0CN	=	0x009e
                           00009F   413 G$CPT1CN$0$0 == 0x009f
                           00009F   414 _CPT1CN	=	0x009f
                           0000A0   415 G$P2$0$0 == 0x00a0
                           0000A0   416 _P2	=	0x00a0
                           0000A1   417 G$EMI0TC$0$0 == 0x00a1
                           0000A1   418 _EMI0TC	=	0x00a1
                           0000A3   419 G$EMI0CF$0$0 == 0x00a3
                           0000A3   420 _EMI0CF	=	0x00a3
                           0000A4   421 G$PRT0CF$0$0 == 0x00a4
                           0000A4   422 _PRT0CF	=	0x00a4
                           0000A4   423 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   424 _P0MDOUT	=	0x00a4
                           0000A5   425 G$PRT1CF$0$0 == 0x00a5
                           0000A5   426 _PRT1CF	=	0x00a5
                           0000A5   427 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   428 _P1MDOUT	=	0x00a5
                           0000A6   429 G$PRT2CF$0$0 == 0x00a6
                           0000A6   430 _PRT2CF	=	0x00a6
                           0000A6   431 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   432 _P2MDOUT	=	0x00a6
                           0000A7   433 G$PRT3CF$0$0 == 0x00a7
                           0000A7   434 _PRT3CF	=	0x00a7
                           0000A7   435 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   436 _P3MDOUT	=	0x00a7
                           0000A8   437 G$IE$0$0 == 0x00a8
                           0000A8   438 _IE	=	0x00a8
                           0000A9   439 G$SADDR0$0$0 == 0x00a9
                           0000A9   440 _SADDR0	=	0x00a9
                           0000AA   441 G$ADC1CN$0$0 == 0x00aa
                           0000AA   442 _ADC1CN	=	0x00aa
                           0000AB   443 G$ADC1CF$0$0 == 0x00ab
                           0000AB   444 _ADC1CF	=	0x00ab
                           0000AC   445 G$AMX1SL$0$0 == 0x00ac
                           0000AC   446 _AMX1SL	=	0x00ac
                           0000AD   447 G$P3IF$0$0 == 0x00ad
                           0000AD   448 _P3IF	=	0x00ad
                           0000AE   449 G$SADEN1$0$0 == 0x00ae
                           0000AE   450 _SADEN1	=	0x00ae
                           0000AF   451 G$EMI0CN$0$0 == 0x00af
                           0000AF   452 _EMI0CN	=	0x00af
                           0000AF   453 G$_XPAGE$0$0 == 0x00af
                           0000AF   454 __XPAGE	=	0x00af
                           0000B0   455 G$P3$0$0 == 0x00b0
                           0000B0   456 _P3	=	0x00b0
                           0000B1   457 G$OSCXCN$0$0 == 0x00b1
                           0000B1   458 _OSCXCN	=	0x00b1
                           0000B2   459 G$OSCICN$0$0 == 0x00b2
                           0000B2   460 _OSCICN	=	0x00b2
                           0000B5   461 G$P74OUT$0$0 == 0x00b5
                           0000B5   462 _P74OUT	=	0x00b5
                           0000B6   463 G$FLSCL$0$0 == 0x00b6
                           0000B6   464 _FLSCL	=	0x00b6
                           0000B7   465 G$FLACL$0$0 == 0x00b7
                           0000B7   466 _FLACL	=	0x00b7
                           0000B8   467 G$IP$0$0 == 0x00b8
                           0000B8   468 _IP	=	0x00b8
                           0000B9   469 G$SADEN0$0$0 == 0x00b9
                           0000B9   470 _SADEN0	=	0x00b9
                           0000BA   471 G$AMX0CF$0$0 == 0x00ba
                           0000BA   472 _AMX0CF	=	0x00ba
                           0000BB   473 G$AMX0SL$0$0 == 0x00bb
                           0000BB   474 _AMX0SL	=	0x00bb
                           0000BC   475 G$ADC0CF$0$0 == 0x00bc
                           0000BC   476 _ADC0CF	=	0x00bc
                           0000BD   477 G$P1MDIN$0$0 == 0x00bd
                           0000BD   478 _P1MDIN	=	0x00bd
                           0000BE   479 G$ADC0L$0$0 == 0x00be
                           0000BE   480 _ADC0L	=	0x00be
                           0000BF   481 G$ADC0H$0$0 == 0x00bf
                           0000BF   482 _ADC0H	=	0x00bf
                           0000C0   483 G$SMB0CN$0$0 == 0x00c0
                           0000C0   484 _SMB0CN	=	0x00c0
                           0000C1   485 G$SMB0STA$0$0 == 0x00c1
                           0000C1   486 _SMB0STA	=	0x00c1
                           0000C2   487 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   488 _SMB0DAT	=	0x00c2
                           0000C3   489 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   490 _SMB0ADR	=	0x00c3
                           0000C4   491 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   492 _ADC0GTL	=	0x00c4
                           0000C5   493 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   494 _ADC0GTH	=	0x00c5
                           0000C6   495 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   496 _ADC0LTL	=	0x00c6
                           0000C7   497 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   498 _ADC0LTH	=	0x00c7
                           0000C8   499 G$T2CON$0$0 == 0x00c8
                           0000C8   500 _T2CON	=	0x00c8
                           0000C9   501 G$T4CON$0$0 == 0x00c9
                           0000C9   502 _T4CON	=	0x00c9
                           0000CA   503 G$RCAP2L$0$0 == 0x00ca
                           0000CA   504 _RCAP2L	=	0x00ca
                           0000CB   505 G$RCAP2H$0$0 == 0x00cb
                           0000CB   506 _RCAP2H	=	0x00cb
                           0000CC   507 G$TL2$0$0 == 0x00cc
                           0000CC   508 _TL2	=	0x00cc
                           0000CD   509 G$TH2$0$0 == 0x00cd
                           0000CD   510 _TH2	=	0x00cd
                           0000CF   511 G$SMB0CR$0$0 == 0x00cf
                           0000CF   512 _SMB0CR	=	0x00cf
                           0000D0   513 G$PSW$0$0 == 0x00d0
                           0000D0   514 _PSW	=	0x00d0
                           0000D1   515 G$REF0CN$0$0 == 0x00d1
                           0000D1   516 _REF0CN	=	0x00d1
                           0000D2   517 G$DAC0L$0$0 == 0x00d2
                           0000D2   518 _DAC0L	=	0x00d2
                           0000D3   519 G$DAC0H$0$0 == 0x00d3
                           0000D3   520 _DAC0H	=	0x00d3
                           0000D4   521 G$DAC0CN$0$0 == 0x00d4
                           0000D4   522 _DAC0CN	=	0x00d4
                           0000D5   523 G$DAC1L$0$0 == 0x00d5
                           0000D5   524 _DAC1L	=	0x00d5
                           0000D6   525 G$DAC1H$0$0 == 0x00d6
                           0000D6   526 _DAC1H	=	0x00d6
                           0000D7   527 G$DAC1CN$0$0 == 0x00d7
                           0000D7   528 _DAC1CN	=	0x00d7
                           0000D8   529 G$PCA0CN$0$0 == 0x00d8
                           0000D8   530 _PCA0CN	=	0x00d8
                           0000D9   531 G$PCA0MD$0$0 == 0x00d9
                           0000D9   532 _PCA0MD	=	0x00d9
                           0000DA   533 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   534 _PCA0CPM0	=	0x00da
                           0000DB   535 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   536 _PCA0CPM1	=	0x00db
                           0000DC   537 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   538 _PCA0CPM2	=	0x00dc
                           0000DD   539 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   540 _PCA0CPM3	=	0x00dd
                           0000DE   541 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   542 _PCA0CPM4	=	0x00de
                           0000E0   543 G$ACC$0$0 == 0x00e0
                           0000E0   544 _ACC	=	0x00e0
                           0000E1   545 G$XBR0$0$0 == 0x00e1
                           0000E1   546 _XBR0	=	0x00e1
                           0000E2   547 G$XBR1$0$0 == 0x00e2
                           0000E2   548 _XBR1	=	0x00e2
                           0000E3   549 G$XBR2$0$0 == 0x00e3
                           0000E3   550 _XBR2	=	0x00e3
                           0000E4   551 G$RCAP4L$0$0 == 0x00e4
                           0000E4   552 _RCAP4L	=	0x00e4
                           0000E5   553 G$RCAP4H$0$0 == 0x00e5
                           0000E5   554 _RCAP4H	=	0x00e5
                           0000E6   555 G$EIE1$0$0 == 0x00e6
                           0000E6   556 _EIE1	=	0x00e6
                           0000E7   557 G$EIE2$0$0 == 0x00e7
                           0000E7   558 _EIE2	=	0x00e7
                           0000E8   559 G$ADC0CN$0$0 == 0x00e8
                           0000E8   560 _ADC0CN	=	0x00e8
                           0000E9   561 G$PCA0L$0$0 == 0x00e9
                           0000E9   562 _PCA0L	=	0x00e9
                           0000EA   563 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   564 _PCA0CPL0	=	0x00ea
                           0000EB   565 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   566 _PCA0CPL1	=	0x00eb
                           0000EC   567 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   568 _PCA0CPL2	=	0x00ec
                           0000ED   569 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   570 _PCA0CPL3	=	0x00ed
                           0000EE   571 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   572 _PCA0CPL4	=	0x00ee
                           0000EF   573 G$RSTSRC$0$0 == 0x00ef
                           0000EF   574 _RSTSRC	=	0x00ef
                           0000F0   575 G$B$0$0 == 0x00f0
                           0000F0   576 _B	=	0x00f0
                           0000F1   577 G$SCON1$0$0 == 0x00f1
                           0000F1   578 _SCON1	=	0x00f1
                           0000F2   579 G$SBUF1$0$0 == 0x00f2
                           0000F2   580 _SBUF1	=	0x00f2
                           0000F3   581 G$SADDR1$0$0 == 0x00f3
                           0000F3   582 _SADDR1	=	0x00f3
                           0000F4   583 G$TL4$0$0 == 0x00f4
                           0000F4   584 _TL4	=	0x00f4
                           0000F5   585 G$TH4$0$0 == 0x00f5
                           0000F5   586 _TH4	=	0x00f5
                           0000F6   587 G$EIP1$0$0 == 0x00f6
                           0000F6   588 _EIP1	=	0x00f6
                           0000F7   589 G$EIP2$0$0 == 0x00f7
                           0000F7   590 _EIP2	=	0x00f7
                           0000F8   591 G$SPI0CN$0$0 == 0x00f8
                           0000F8   592 _SPI0CN	=	0x00f8
                           0000F9   593 G$PCA0H$0$0 == 0x00f9
                           0000F9   594 _PCA0H	=	0x00f9
                           0000FA   595 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   596 _PCA0CPH0	=	0x00fa
                           0000FB   597 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   598 _PCA0CPH1	=	0x00fb
                           0000FC   599 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   600 _PCA0CPH2	=	0x00fc
                           0000FD   601 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   602 _PCA0CPH3	=	0x00fd
                           0000FE   603 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   604 _PCA0CPH4	=	0x00fe
                           0000FF   605 G$WDTCN$0$0 == 0x00ff
                           0000FF   606 _WDTCN	=	0x00ff
                           008C8A   607 G$TMR0$0$0 == 0x8c8a
                           008C8A   608 _TMR0	=	0x8c8a
                           008D8B   609 G$TMR1$0$0 == 0x8d8b
                           008D8B   610 _TMR1	=	0x8d8b
                           00CDCC   611 G$TMR2$0$0 == 0xcdcc
                           00CDCC   612 _TMR2	=	0xcdcc
                           00CBCA   613 G$RCAP2$0$0 == 0xcbca
                           00CBCA   614 _RCAP2	=	0xcbca
                           009594   615 G$TMR3$0$0 == 0x9594
                           009594   616 _TMR3	=	0x9594
                           009392   617 G$TMR3RL$0$0 == 0x9392
                           009392   618 _TMR3RL	=	0x9392
                           00F5F4   619 G$TMR4$0$0 == 0xf5f4
                           00F5F4   620 _TMR4	=	0xf5f4
                           00E5E4   621 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   622 _RCAP4	=	0xe5e4
                           00BFBE   623 G$ADC0$0$0 == 0xbfbe
                           00BFBE   624 _ADC0	=	0xbfbe
                           00C5C4   625 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   626 _ADC0GT	=	0xc5c4
                           00C7C6   627 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   628 _ADC0LT	=	0xc7c6
                           00D3D2   629 G$DAC0$0$0 == 0xd3d2
                           00D3D2   630 _DAC0	=	0xd3d2
                           00D6D5   631 G$DAC1$0$0 == 0xd6d5
                           00D6D5   632 _DAC1	=	0xd6d5
                           00F9E9   633 G$PCA0$0$0 == 0xf9e9
                           00F9E9   634 _PCA0	=	0xf9e9
                           00FAEA   635 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   636 _PCA0CP0	=	0xfaea
                           00FBEB   637 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   638 _PCA0CP1	=	0xfbeb
                           00FCEC   639 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   640 _PCA0CP2	=	0xfcec
                           00FDED   641 G$PCA0CP3$0$0 == 0xfded
                           00FDED   642 _PCA0CP3	=	0xfded
                           00FEEE   643 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   644 _PCA0CP4	=	0xfeee
                                    645 ;--------------------------------------------------------
                                    646 ; special function bits
                                    647 ;--------------------------------------------------------
                                    648 	.area RSEG    (ABS,DATA)
      000000                        649 	.org 0x0000
                           000080   650 G$P0_0$0$0 == 0x0080
                           000080   651 _P0_0	=	0x0080
                           000081   652 G$P0_1$0$0 == 0x0081
                           000081   653 _P0_1	=	0x0081
                           000082   654 G$P0_2$0$0 == 0x0082
                           000082   655 _P0_2	=	0x0082
                           000083   656 G$P0_3$0$0 == 0x0083
                           000083   657 _P0_3	=	0x0083
                           000084   658 G$P0_4$0$0 == 0x0084
                           000084   659 _P0_4	=	0x0084
                           000085   660 G$P0_5$0$0 == 0x0085
                           000085   661 _P0_5	=	0x0085
                           000086   662 G$P0_6$0$0 == 0x0086
                           000086   663 _P0_6	=	0x0086
                           000087   664 G$P0_7$0$0 == 0x0087
                           000087   665 _P0_7	=	0x0087
                           000088   666 G$IT0$0$0 == 0x0088
                           000088   667 _IT0	=	0x0088
                           000089   668 G$IE0$0$0 == 0x0089
                           000089   669 _IE0	=	0x0089
                           00008A   670 G$IT1$0$0 == 0x008a
                           00008A   671 _IT1	=	0x008a
                           00008B   672 G$IE1$0$0 == 0x008b
                           00008B   673 _IE1	=	0x008b
                           00008C   674 G$TR0$0$0 == 0x008c
                           00008C   675 _TR0	=	0x008c
                           00008D   676 G$TF0$0$0 == 0x008d
                           00008D   677 _TF0	=	0x008d
                           00008E   678 G$TR1$0$0 == 0x008e
                           00008E   679 _TR1	=	0x008e
                           00008F   680 G$TF1$0$0 == 0x008f
                           00008F   681 _TF1	=	0x008f
                           000090   682 G$P1_0$0$0 == 0x0090
                           000090   683 _P1_0	=	0x0090
                           000091   684 G$P1_1$0$0 == 0x0091
                           000091   685 _P1_1	=	0x0091
                           000092   686 G$P1_2$0$0 == 0x0092
                           000092   687 _P1_2	=	0x0092
                           000093   688 G$P1_3$0$0 == 0x0093
                           000093   689 _P1_3	=	0x0093
                           000094   690 G$P1_4$0$0 == 0x0094
                           000094   691 _P1_4	=	0x0094
                           000095   692 G$P1_5$0$0 == 0x0095
                           000095   693 _P1_5	=	0x0095
                           000096   694 G$P1_6$0$0 == 0x0096
                           000096   695 _P1_6	=	0x0096
                           000097   696 G$P1_7$0$0 == 0x0097
                           000097   697 _P1_7	=	0x0097
                           000098   698 G$RI$0$0 == 0x0098
                           000098   699 _RI	=	0x0098
                           000098   700 G$RI0$0$0 == 0x0098
                           000098   701 _RI0	=	0x0098
                           000099   702 G$TI$0$0 == 0x0099
                           000099   703 _TI	=	0x0099
                           000099   704 G$TI0$0$0 == 0x0099
                           000099   705 _TI0	=	0x0099
                           00009A   706 G$RB8$0$0 == 0x009a
                           00009A   707 _RB8	=	0x009a
                           00009A   708 G$RB80$0$0 == 0x009a
                           00009A   709 _RB80	=	0x009a
                           00009B   710 G$TB8$0$0 == 0x009b
                           00009B   711 _TB8	=	0x009b
                           00009B   712 G$TB80$0$0 == 0x009b
                           00009B   713 _TB80	=	0x009b
                           00009C   714 G$REN$0$0 == 0x009c
                           00009C   715 _REN	=	0x009c
                           00009C   716 G$REN0$0$0 == 0x009c
                           00009C   717 _REN0	=	0x009c
                           00009D   718 G$SM2$0$0 == 0x009d
                           00009D   719 _SM2	=	0x009d
                           00009D   720 G$SM20$0$0 == 0x009d
                           00009D   721 _SM20	=	0x009d
                           00009D   722 G$MCE0$0$0 == 0x009d
                           00009D   723 _MCE0	=	0x009d
                           00009E   724 G$SM1$0$0 == 0x009e
                           00009E   725 _SM1	=	0x009e
                           00009E   726 G$SM10$0$0 == 0x009e
                           00009E   727 _SM10	=	0x009e
                           00009F   728 G$SM0$0$0 == 0x009f
                           00009F   729 _SM0	=	0x009f
                           00009F   730 G$SM00$0$0 == 0x009f
                           00009F   731 _SM00	=	0x009f
                           00009F   732 G$S0MODE$0$0 == 0x009f
                           00009F   733 _S0MODE	=	0x009f
                           0000A0   734 G$P2_0$0$0 == 0x00a0
                           0000A0   735 _P2_0	=	0x00a0
                           0000A1   736 G$P2_1$0$0 == 0x00a1
                           0000A1   737 _P2_1	=	0x00a1
                           0000A2   738 G$P2_2$0$0 == 0x00a2
                           0000A2   739 _P2_2	=	0x00a2
                           0000A3   740 G$P2_3$0$0 == 0x00a3
                           0000A3   741 _P2_3	=	0x00a3
                           0000A4   742 G$P2_4$0$0 == 0x00a4
                           0000A4   743 _P2_4	=	0x00a4
                           0000A5   744 G$P2_5$0$0 == 0x00a5
                           0000A5   745 _P2_5	=	0x00a5
                           0000A6   746 G$P2_6$0$0 == 0x00a6
                           0000A6   747 _P2_6	=	0x00a6
                           0000A7   748 G$P2_7$0$0 == 0x00a7
                           0000A7   749 _P2_7	=	0x00a7
                           0000A8   750 G$EX0$0$0 == 0x00a8
                           0000A8   751 _EX0	=	0x00a8
                           0000A9   752 G$ET0$0$0 == 0x00a9
                           0000A9   753 _ET0	=	0x00a9
                           0000AA   754 G$EX1$0$0 == 0x00aa
                           0000AA   755 _EX1	=	0x00aa
                           0000AB   756 G$ET1$0$0 == 0x00ab
                           0000AB   757 _ET1	=	0x00ab
                           0000AC   758 G$ES0$0$0 == 0x00ac
                           0000AC   759 _ES0	=	0x00ac
                           0000AC   760 G$ES$0$0 == 0x00ac
                           0000AC   761 _ES	=	0x00ac
                           0000AD   762 G$ET2$0$0 == 0x00ad
                           0000AD   763 _ET2	=	0x00ad
                           0000AF   764 G$EA$0$0 == 0x00af
                           0000AF   765 _EA	=	0x00af
                           0000B0   766 G$P3_0$0$0 == 0x00b0
                           0000B0   767 _P3_0	=	0x00b0
                           0000B1   768 G$P3_1$0$0 == 0x00b1
                           0000B1   769 _P3_1	=	0x00b1
                           0000B2   770 G$P3_2$0$0 == 0x00b2
                           0000B2   771 _P3_2	=	0x00b2
                           0000B3   772 G$P3_3$0$0 == 0x00b3
                           0000B3   773 _P3_3	=	0x00b3
                           0000B4   774 G$P3_4$0$0 == 0x00b4
                           0000B4   775 _P3_4	=	0x00b4
                           0000B5   776 G$P3_5$0$0 == 0x00b5
                           0000B5   777 _P3_5	=	0x00b5
                           0000B6   778 G$P3_6$0$0 == 0x00b6
                           0000B6   779 _P3_6	=	0x00b6
                           0000B7   780 G$P3_7$0$0 == 0x00b7
                           0000B7   781 _P3_7	=	0x00b7
                           0000B8   782 G$PX0$0$0 == 0x00b8
                           0000B8   783 _PX0	=	0x00b8
                           0000B9   784 G$PT0$0$0 == 0x00b9
                           0000B9   785 _PT0	=	0x00b9
                           0000BA   786 G$PX1$0$0 == 0x00ba
                           0000BA   787 _PX1	=	0x00ba
                           0000BB   788 G$PT1$0$0 == 0x00bb
                           0000BB   789 _PT1	=	0x00bb
                           0000BC   790 G$PS0$0$0 == 0x00bc
                           0000BC   791 _PS0	=	0x00bc
                           0000BC   792 G$PS$0$0 == 0x00bc
                           0000BC   793 _PS	=	0x00bc
                           0000BD   794 G$PT2$0$0 == 0x00bd
                           0000BD   795 _PT2	=	0x00bd
                           0000C0   796 G$SMBTOE$0$0 == 0x00c0
                           0000C0   797 _SMBTOE	=	0x00c0
                           0000C1   798 G$SMBFTE$0$0 == 0x00c1
                           0000C1   799 _SMBFTE	=	0x00c1
                           0000C2   800 G$AA$0$0 == 0x00c2
                           0000C2   801 _AA	=	0x00c2
                           0000C3   802 G$SI$0$0 == 0x00c3
                           0000C3   803 _SI	=	0x00c3
                           0000C4   804 G$STO$0$0 == 0x00c4
                           0000C4   805 _STO	=	0x00c4
                           0000C5   806 G$STA$0$0 == 0x00c5
                           0000C5   807 _STA	=	0x00c5
                           0000C6   808 G$ENSMB$0$0 == 0x00c6
                           0000C6   809 _ENSMB	=	0x00c6
                           0000C7   810 G$BUSY$0$0 == 0x00c7
                           0000C7   811 _BUSY	=	0x00c7
                           0000C8   812 G$CPRL2$0$0 == 0x00c8
                           0000C8   813 _CPRL2	=	0x00c8
                           0000C9   814 G$CT2$0$0 == 0x00c9
                           0000C9   815 _CT2	=	0x00c9
                           0000CA   816 G$TR2$0$0 == 0x00ca
                           0000CA   817 _TR2	=	0x00ca
                           0000CB   818 G$EXEN2$0$0 == 0x00cb
                           0000CB   819 _EXEN2	=	0x00cb
                           0000CC   820 G$TCLK$0$0 == 0x00cc
                           0000CC   821 _TCLK	=	0x00cc
                           0000CD   822 G$RCLK$0$0 == 0x00cd
                           0000CD   823 _RCLK	=	0x00cd
                           0000CE   824 G$EXF2$0$0 == 0x00ce
                           0000CE   825 _EXF2	=	0x00ce
                           0000CF   826 G$TF2$0$0 == 0x00cf
                           0000CF   827 _TF2	=	0x00cf
                           0000D0   828 G$P$0$0 == 0x00d0
                           0000D0   829 _P	=	0x00d0
                           0000D1   830 G$F1$0$0 == 0x00d1
                           0000D1   831 _F1	=	0x00d1
                           0000D2   832 G$OV$0$0 == 0x00d2
                           0000D2   833 _OV	=	0x00d2
                           0000D3   834 G$RS0$0$0 == 0x00d3
                           0000D3   835 _RS0	=	0x00d3
                           0000D4   836 G$RS1$0$0 == 0x00d4
                           0000D4   837 _RS1	=	0x00d4
                           0000D5   838 G$F0$0$0 == 0x00d5
                           0000D5   839 _F0	=	0x00d5
                           0000D6   840 G$AC$0$0 == 0x00d6
                           0000D6   841 _AC	=	0x00d6
                           0000D7   842 G$CY$0$0 == 0x00d7
                           0000D7   843 _CY	=	0x00d7
                           0000D8   844 G$CCF0$0$0 == 0x00d8
                           0000D8   845 _CCF0	=	0x00d8
                           0000D9   846 G$CCF1$0$0 == 0x00d9
                           0000D9   847 _CCF1	=	0x00d9
                           0000DA   848 G$CCF2$0$0 == 0x00da
                           0000DA   849 _CCF2	=	0x00da
                           0000DB   850 G$CCF3$0$0 == 0x00db
                           0000DB   851 _CCF3	=	0x00db
                           0000DC   852 G$CCF4$0$0 == 0x00dc
                           0000DC   853 _CCF4	=	0x00dc
                           0000DE   854 G$CR$0$0 == 0x00de
                           0000DE   855 _CR	=	0x00de
                           0000DF   856 G$CF$0$0 == 0x00df
                           0000DF   857 _CF	=	0x00df
                           0000E8   858 G$ADLJST$0$0 == 0x00e8
                           0000E8   859 _ADLJST	=	0x00e8
                           0000E8   860 G$AD0LJST$0$0 == 0x00e8
                           0000E8   861 _AD0LJST	=	0x00e8
                           0000E9   862 G$ADWINT$0$0 == 0x00e9
                           0000E9   863 _ADWINT	=	0x00e9
                           0000E9   864 G$AD0WINT$0$0 == 0x00e9
                           0000E9   865 _AD0WINT	=	0x00e9
                           0000EA   866 G$ADSTM0$0$0 == 0x00ea
                           0000EA   867 _ADSTM0	=	0x00ea
                           0000EA   868 G$AD0CM0$0$0 == 0x00ea
                           0000EA   869 _AD0CM0	=	0x00ea
                           0000EB   870 G$ADSTM1$0$0 == 0x00eb
                           0000EB   871 _ADSTM1	=	0x00eb
                           0000EB   872 G$AD0CM1$0$0 == 0x00eb
                           0000EB   873 _AD0CM1	=	0x00eb
                           0000EC   874 G$ADBUSY$0$0 == 0x00ec
                           0000EC   875 _ADBUSY	=	0x00ec
                           0000EC   876 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   877 _AD0BUSY	=	0x00ec
                           0000ED   878 G$ADCINT$0$0 == 0x00ed
                           0000ED   879 _ADCINT	=	0x00ed
                           0000ED   880 G$AD0INT$0$0 == 0x00ed
                           0000ED   881 _AD0INT	=	0x00ed
                           0000EE   882 G$ADCTM$0$0 == 0x00ee
                           0000EE   883 _ADCTM	=	0x00ee
                           0000EE   884 G$AD0TM$0$0 == 0x00ee
                           0000EE   885 _AD0TM	=	0x00ee
                           0000EF   886 G$ADCEN$0$0 == 0x00ef
                           0000EF   887 _ADCEN	=	0x00ef
                           0000EF   888 G$AD0EN$0$0 == 0x00ef
                           0000EF   889 _AD0EN	=	0x00ef
                           0000F8   890 G$SPIEN$0$0 == 0x00f8
                           0000F8   891 _SPIEN	=	0x00f8
                           0000F9   892 G$MSTEN$0$0 == 0x00f9
                           0000F9   893 _MSTEN	=	0x00f9
                           0000FA   894 G$SLVSEL$0$0 == 0x00fa
                           0000FA   895 _SLVSEL	=	0x00fa
                           0000FB   896 G$TXBSY$0$0 == 0x00fb
                           0000FB   897 _TXBSY	=	0x00fb
                           0000FC   898 G$RXOVRN$0$0 == 0x00fc
                           0000FC   899 _RXOVRN	=	0x00fc
                           0000FD   900 G$MODF$0$0 == 0x00fd
                           0000FD   901 _MODF	=	0x00fd
                           0000FE   902 G$WCOL$0$0 == 0x00fe
                           0000FE   903 _WCOL	=	0x00fe
                           0000FF   904 G$SPIF$0$0 == 0x00ff
                           0000FF   905 _SPIF	=	0x00ff
                           0000C7   906 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   907 _BUS_BUSY	=	0x00c7
                           0000C6   908 G$BUS_EN$0$0 == 0x00c6
                           0000C6   909 _BUS_EN	=	0x00c6
                           0000C5   910 G$BUS_START$0$0 == 0x00c5
                           0000C5   911 _BUS_START	=	0x00c5
                           0000C4   912 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   913 _BUS_STOP	=	0x00c4
                           0000C3   914 G$BUS_INT$0$0 == 0x00c3
                           0000C3   915 _BUS_INT	=	0x00c3
                           0000C2   916 G$BUS_AA$0$0 == 0x00c2
                           0000C2   917 _BUS_AA	=	0x00c2
                           0000C1   918 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   919 _BUS_FTE	=	0x00c1
                           0000C0   920 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   921 _BUS_TOE	=	0x00c0
                           000083   922 G$BUS_SCL$0$0 == 0x0083
                           000083   923 _BUS_SCL	=	0x0083
                                    924 ;--------------------------------------------------------
                                    925 ; overlayable register banks
                                    926 ;--------------------------------------------------------
                                    927 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        928 	.ds 8
                                    929 ;--------------------------------------------------------
                                    930 ; internal ram data
                                    931 ;--------------------------------------------------------
                                    932 	.area DSEG    (DATA)
                           000000   933 Llab6.lcd_clear$NumBytes$1$77==.
      000000                        934 _lcd_clear_NumBytes_1_77:
      000000                        935 	.ds 1
                           000001   936 Llab6.lcd_clear$Cmd$1$77==.
      000001                        937 _lcd_clear_Cmd_1_77:
      000001                        938 	.ds 2
                           000003   939 Llab6.read_keypad$Data$1$78==.
      000003                        940 _read_keypad_Data_1_78:
      000003                        941 	.ds 2
                           000005   942 Llab6.i2c_write_data$start_reg$1$97==.
      000005                        943 _i2c_write_data_PARM_2:
      000005                        944 	.ds 1
                           000006   945 Llab6.i2c_write_data$buffer$1$97==.
      000006                        946 _i2c_write_data_PARM_3:
      000006                        947 	.ds 3
                           000009   948 Llab6.i2c_write_data$num_bytes$1$97==.
      000009                        949 _i2c_write_data_PARM_4:
      000009                        950 	.ds 1
                           00000A   951 Llab6.i2c_read_data$start_reg$1$99==.
      00000A                        952 _i2c_read_data_PARM_2:
      00000A                        953 	.ds 1
                           00000B   954 Llab6.i2c_read_data$buffer$1$99==.
      00000B                        955 _i2c_read_data_PARM_3:
      00000B                        956 	.ds 3
                           00000E   957 Llab6.i2c_read_data$num_bytes$1$99==.
      00000E                        958 _i2c_read_data_PARM_4:
      00000E                        959 	.ds 1
                           00000F   960 Llab6.Accel_Init$Data2$1$103==.
      00000F                        961 _Accel_Init_Data2_1_103:
      00000F                        962 	.ds 1
                           000010   963 G$count$0$0==.
      000010                        964 _count::
      000010                        965 	.ds 2
                           000012   966 G$PW_MIN_THRUST$0$0==.
      000012                        967 _PW_MIN_THRUST::
      000012                        968 	.ds 2
                           000014   969 G$PW_NUET_THRUST$0$0==.
      000014                        970 _PW_NUET_THRUST::
      000014                        971 	.ds 2
                           000016   972 G$PW_MAX_THRUST$0$0==.
      000016                        973 _PW_MAX_THRUST::
      000016                        974 	.ds 2
                           000018   975 G$PW_LEFT_RUDDER$0$0==.
      000018                        976 _PW_LEFT_RUDDER::
      000018                        977 	.ds 2
                           00001A   978 G$PW_CENTER_RUDDER$0$0==.
      00001A                        979 _PW_CENTER_RUDDER::
      00001A                        980 	.ds 2
                           00001C   981 G$PW_RIGHT_RUDDER$0$0==.
      00001C                        982 _PW_RIGHT_RUDDER::
      00001C                        983 	.ds 2
                           00001E   984 G$PW_UP_ANGLE$0$0==.
      00001E                        985 _PW_UP_ANGLE::
      00001E                        986 	.ds 2
                           000020   987 G$PW_CENTER_ANGLE$0$0==.
      000020                        988 _PW_CENTER_ANGLE::
      000020                        989 	.ds 2
                           000022   990 G$PW_DOWN_ANGLE$0$0==.
      000022                        991 _PW_DOWN_ANGLE::
      000022                        992 	.ds 2
                                    993 ;--------------------------------------------------------
                                    994 ; overlayable items in internal ram 
                                    995 ;--------------------------------------------------------
                                    996 	.area	OSEG    (OVR,DATA)
                                    997 	.area	OSEG    (OVR,DATA)
                                    998 	.area	OSEG    (OVR,DATA)
                                    999 	.area	OSEG    (OVR,DATA)
                                   1000 	.area	OSEG    (OVR,DATA)
                                   1001 	.area	OSEG    (OVR,DATA)
                                   1002 	.area	OSEG    (OVR,DATA)
                                   1003 	.area	OSEG    (OVR,DATA)
                                   1004 ;--------------------------------------------------------
                                   1005 ; Stack segment in internal ram 
                                   1006 ;--------------------------------------------------------
                                   1007 	.area	SSEG
      000000                       1008 __start__stack:
      000000                       1009 	.ds	1
                                   1010 
                                   1011 ;--------------------------------------------------------
                                   1012 ; indirectly addressable internal ram data
                                   1013 ;--------------------------------------------------------
                                   1014 	.area ISEG    (DATA)
                                   1015 ;--------------------------------------------------------
                                   1016 ; absolute internal ram data
                                   1017 ;--------------------------------------------------------
                                   1018 	.area IABS    (ABS,DATA)
                                   1019 	.area IABS    (ABS,DATA)
                                   1020 ;--------------------------------------------------------
                                   1021 ; bit data
                                   1022 ;--------------------------------------------------------
                                   1023 	.area BSEG    (BIT)
                                   1024 ;--------------------------------------------------------
                                   1025 ; paged external ram data
                                   1026 ;--------------------------------------------------------
                                   1027 	.area PSEG    (PAG,XDATA)
                                   1028 ;--------------------------------------------------------
                                   1029 ; external ram data
                                   1030 ;--------------------------------------------------------
                                   1031 	.area XSEG    (XDATA)
                           000000  1032 Llab6.lcd_print$text$1$73==.
      000000                       1033 _lcd_print_text_1_73:
      000000                       1034 	.ds 80
                                   1035 ;--------------------------------------------------------
                                   1036 ; absolute external ram data
                                   1037 ;--------------------------------------------------------
                                   1038 	.area XABS    (ABS,XDATA)
                                   1039 ;--------------------------------------------------------
                                   1040 ; external initialized ram data
                                   1041 ;--------------------------------------------------------
                                   1042 	.area XISEG   (XDATA)
                                   1043 	.area HOME    (CODE)
                                   1044 	.area GSINIT0 (CODE)
                                   1045 	.area GSINIT1 (CODE)
                                   1046 	.area GSINIT2 (CODE)
                                   1047 	.area GSINIT3 (CODE)
                                   1048 	.area GSINIT4 (CODE)
                                   1049 	.area GSINIT5 (CODE)
                                   1050 	.area GSINIT  (CODE)
                                   1051 	.area GSFINAL (CODE)
                                   1052 	.area CSEG    (CODE)
                                   1053 ;--------------------------------------------------------
                                   1054 ; interrupt vector 
                                   1055 ;--------------------------------------------------------
                                   1056 	.area HOME    (CODE)
      000000                       1057 __interrupt_vect:
      000000 02r00r00         [24] 1058 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1059 	reti
      000004                       1060 	.ds	7
      00000B 32               [24] 1061 	reti
      00000C                       1062 	.ds	7
      000013 32               [24] 1063 	reti
      000014                       1064 	.ds	7
      00001B 32               [24] 1065 	reti
      00001C                       1066 	.ds	7
      000023 32               [24] 1067 	reti
      000024                       1068 	.ds	7
      00002B 32               [24] 1069 	reti
      00002C                       1070 	.ds	7
      000033 32               [24] 1071 	reti
      000034                       1072 	.ds	7
      00003B 32               [24] 1073 	reti
      00003C                       1074 	.ds	7
      000043 32               [24] 1075 	reti
      000044                       1076 	.ds	7
      00004B 02r06r1A         [24] 1077 	ljmp	_PCA_ISR
                                   1078 ;--------------------------------------------------------
                                   1079 ; global & static initialisations
                                   1080 ;--------------------------------------------------------
                                   1081 	.area HOME    (CODE)
                                   1082 	.area GSINIT  (CODE)
                                   1083 	.area GSFINAL (CODE)
                                   1084 	.area GSINIT  (CODE)
                                   1085 	.globl __sdcc_gsinit_startup
                                   1086 	.globl __sdcc_program_startup
                                   1087 	.globl __start__stack
                                   1088 	.globl __mcs51_genXINIT
                                   1089 	.globl __mcs51_genXRAMCLEAR
                                   1090 	.globl __mcs51_genRAMCLEAR
                           000000  1091 	C$lab6.c$33$1$132 ==.
                                   1092 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:33: int count=0;
      000000 E4               [12] 1093 	clr	a
      000001 F5*10            [12] 1094 	mov	_count,a
      000003 F5*11            [12] 1095 	mov	(_count + 1),a
                           000005  1096 	C$lab6.c$34$1$132 ==.
                                   1097 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:34: unsigned int PW_MIN_THRUST = 2000;
      000005 75*12 D0         [24] 1098 	mov	_PW_MIN_THRUST,#0xD0
      000008 75*13 07         [24] 1099 	mov	(_PW_MIN_THRUST + 1),#0x07
                           00000B  1100 	C$lab6.c$35$1$132 ==.
                                   1101 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:35: unsigned int PW_NUET_THRUST = 2750;
      00000B 75*14 BE         [24] 1102 	mov	_PW_NUET_THRUST,#0xBE
      00000E 75*15 0A         [24] 1103 	mov	(_PW_NUET_THRUST + 1),#0x0A
                           000011  1104 	C$lab6.c$36$1$132 ==.
                                   1105 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:36: unsigned int PW_MAX_THRUST = 3500;
      000011 75*16 AC         [24] 1106 	mov	_PW_MAX_THRUST,#0xAC
      000014 75*17 0D         [24] 1107 	mov	(_PW_MAX_THRUST + 1),#0x0D
                           000017  1108 	C$lab6.c$38$1$132 ==.
                                   1109 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:38: unsigned int PW_LEFT_RUDDER = 2000;
      000017 75*18 D0         [24] 1110 	mov	_PW_LEFT_RUDDER,#0xD0
      00001A 75*19 07         [24] 1111 	mov	(_PW_LEFT_RUDDER + 1),#0x07
                           00001D  1112 	C$lab6.c$39$1$132 ==.
                                   1113 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:39: unsigned int PW_CENTER_RUDDER = 2750;
      00001D 75*1A BE         [24] 1114 	mov	_PW_CENTER_RUDDER,#0xBE
      000020 75*1B 0A         [24] 1115 	mov	(_PW_CENTER_RUDDER + 1),#0x0A
                           000023  1116 	C$lab6.c$40$1$132 ==.
                                   1117 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:40: unsigned int PW_RIGHT_RUDDER = 3500;
      000023 75*1C AC         [24] 1118 	mov	_PW_RIGHT_RUDDER,#0xAC
      000026 75*1D 0D         [24] 1119 	mov	(_PW_RIGHT_RUDDER + 1),#0x0D
                           000029  1120 	C$lab6.c$42$1$132 ==.
                                   1121 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:42: unsigned int PW_UP_ANGLE = 2000;
      000029 75*1E D0         [24] 1122 	mov	_PW_UP_ANGLE,#0xD0
      00002C 75*1F 07         [24] 1123 	mov	(_PW_UP_ANGLE + 1),#0x07
                           00002F  1124 	C$lab6.c$43$1$132 ==.
                                   1125 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:43: unsigned int PW_CENTER_ANGLE = 2750;
      00002F 75*20 BE         [24] 1126 	mov	_PW_CENTER_ANGLE,#0xBE
      000032 75*21 0A         [24] 1127 	mov	(_PW_CENTER_ANGLE + 1),#0x0A
                           000035  1128 	C$lab6.c$44$1$132 ==.
                                   1129 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:44: unsigned int PW_DOWN_ANGLE = 3500;
      000035 75*22 AC         [24] 1130 	mov	_PW_DOWN_ANGLE,#0xAC
      000038 75*23 0D         [24] 1131 	mov	(_PW_DOWN_ANGLE + 1),#0x0D
                                   1132 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1133 	ljmp	__sdcc_program_startup
                                   1134 ;--------------------------------------------------------
                                   1135 ; Home
                                   1136 ;--------------------------------------------------------
                                   1137 	.area HOME    (CODE)
                                   1138 	.area HOME    (CODE)
      00004E                       1139 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1140 	ljmp	_main
                                   1141 ;	return from main will return to caller
                                   1142 ;--------------------------------------------------------
                                   1143 ; code
                                   1144 ;--------------------------------------------------------
                                   1145 	.area CSEG    (CODE)
                                   1146 ;------------------------------------------------------------
                                   1147 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1148 ;------------------------------------------------------------
                                   1149 ;i                         Allocated to registers 
                                   1150 ;------------------------------------------------------------
                           000000  1151 	G$SYSCLK_Init$0$0 ==.
                           000000  1152 	C$c8051_SDCC.h$42$0$0 ==.
                                   1153 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1154 ;	-----------------------------------------
                                   1155 ;	 function SYSCLK_Init
                                   1156 ;	-----------------------------------------
      000000                       1157 _SYSCLK_Init:
                           000007  1158 	ar7 = 0x07
                           000006  1159 	ar6 = 0x06
                           000005  1160 	ar5 = 0x05
                           000004  1161 	ar4 = 0x04
                           000003  1162 	ar3 = 0x03
                           000002  1163 	ar2 = 0x02
                           000001  1164 	ar1 = 0x01
                           000000  1165 	ar0 = 0x00
                           000000  1166 	C$c8051_SDCC.h$46$1$31 ==.
                                   1167 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1168 	mov	_OSCXCN,#0x67
                           000003  1169 	C$c8051_SDCC.h$49$1$31 ==.
                                   1170 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1171 	mov	r6,#0x00
      000005 7F 01            [12] 1172 	mov	r7,#0x01
      000007                       1173 00107$:
      000007 1E               [12] 1174 	dec	r6
      000008 BE FF 01         [24] 1175 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1176 	dec	r7
      00000C                       1177 00121$:
      00000C EE               [12] 1178 	mov	a,r6
      00000D 4F               [12] 1179 	orl	a,r7
      00000E 70 F7            [24] 1180 	jnz	00107$
                           000010  1181 	C$c8051_SDCC.h$51$1$31 ==.
                                   1182 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1183 00102$:
      000010 E5 B1            [12] 1184 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1185 	jnb	acc.7,00102$
                           000015  1186 	C$c8051_SDCC.h$53$1$31 ==.
                                   1187 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1188 	mov	_OSCICN,#0x88
                           000018  1189 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1190 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1191 	ret
                                   1192 ;------------------------------------------------------------
                                   1193 ;Allocation info for local variables in function 'UART0_Init'
                                   1194 ;------------------------------------------------------------
                           000019  1195 	G$UART0_Init$0$0 ==.
                           000019  1196 	C$c8051_SDCC.h$64$1$31 ==.
                                   1197 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1198 ;	-----------------------------------------
                                   1199 ;	 function UART0_Init
                                   1200 ;	-----------------------------------------
      000019                       1201 _UART0_Init:
                           000019  1202 	C$c8051_SDCC.h$66$1$33 ==.
                                   1203 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1204 	mov	_SCON0,#0x50
                           00001C  1205 	C$c8051_SDCC.h$67$1$33 ==.
                                   1206 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1207 	mov	_TMOD,#0x20
                           00001F  1208 	C$c8051_SDCC.h$68$1$33 ==.
                                   1209 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1210 	mov	_TH1,#0xDC
                           000022  1211 	C$c8051_SDCC.h$69$1$33 ==.
                                   1212 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1213 	setb	_TR1
                           000024  1214 	C$c8051_SDCC.h$70$1$33 ==.
                                   1215 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1216 	orl	_CKCON,#0x10
                           000027  1217 	C$c8051_SDCC.h$71$1$33 ==.
                                   1218 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1219 	orl	_PCON,#0x80
                           00002A  1220 	C$c8051_SDCC.h$73$1$33 ==.
                                   1221 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1222 	setb	_TI0
                           00002C  1223 	C$c8051_SDCC.h$74$1$33 ==.
                                   1224 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1225 	orl	_P0MDOUT,#0x01
                           00002F  1226 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1227 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1228 	ret
                                   1229 ;------------------------------------------------------------
                                   1230 ;Allocation info for local variables in function 'Sys_Init'
                                   1231 ;------------------------------------------------------------
                           000030  1232 	G$Sys_Init$0$0 ==.
                           000030  1233 	C$c8051_SDCC.h$83$1$33 ==.
                                   1234 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1235 ;	-----------------------------------------
                                   1236 ;	 function Sys_Init
                                   1237 ;	-----------------------------------------
      000030                       1238 _Sys_Init:
                           000030  1239 	C$c8051_SDCC.h$85$1$35 ==.
                                   1240 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1241 	mov	_WDTCN,#0xDE
                           000033  1242 	C$c8051_SDCC.h$86$1$35 ==.
                                   1243 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1244 	mov	_WDTCN,#0xAD
                           000036  1245 	C$c8051_SDCC.h$88$1$35 ==.
                                   1246 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1247 	lcall	_SYSCLK_Init
                           000039  1248 	C$c8051_SDCC.h$89$1$35 ==.
                                   1249 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1250 	lcall	_UART0_Init
                           00003C  1251 	C$c8051_SDCC.h$91$1$35 ==.
                                   1252 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1253 	orl	_XBR0,#0x04
                           00003F  1254 	C$c8051_SDCC.h$92$1$35 ==.
                                   1255 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1256 	orl	_XBR2,#0x40
                           000042  1257 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1258 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1259 	ret
                                   1260 ;------------------------------------------------------------
                                   1261 ;Allocation info for local variables in function 'putchar'
                                   1262 ;------------------------------------------------------------
                                   1263 ;c                         Allocated to registers r7 
                                   1264 ;------------------------------------------------------------
                           000043  1265 	G$putchar$0$0 ==.
                           000043  1266 	C$c8051_SDCC.h$98$1$35 ==.
                                   1267 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1268 ;	-----------------------------------------
                                   1269 ;	 function putchar
                                   1270 ;	-----------------------------------------
      000043                       1271 _putchar:
      000043 AF 82            [24] 1272 	mov	r7,dpl
                           000045  1273 	C$c8051_SDCC.h$100$1$37 ==.
                                   1274 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1275 00101$:
                           000045  1276 	C$c8051_SDCC.h$101$1$37 ==.
                                   1277 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1278 	jbc	_TI0,00112$
      000048 80 FB            [24] 1279 	sjmp	00101$
      00004A                       1280 00112$:
                           00004A  1281 	C$c8051_SDCC.h$102$1$37 ==.
                                   1282 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1283 	mov	_SBUF0,r7
                           00004C  1284 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1285 	XG$putchar$0$0 ==.
      00004C 22               [24] 1286 	ret
                                   1287 ;------------------------------------------------------------
                                   1288 ;Allocation info for local variables in function 'getchar'
                                   1289 ;------------------------------------------------------------
                                   1290 ;c                         Allocated to registers 
                                   1291 ;------------------------------------------------------------
                           00004D  1292 	G$getchar$0$0 ==.
                           00004D  1293 	C$c8051_SDCC.h$108$1$37 ==.
                                   1294 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1295 ;	-----------------------------------------
                                   1296 ;	 function getchar
                                   1297 ;	-----------------------------------------
      00004D                       1298 _getchar:
                           00004D  1299 	C$c8051_SDCC.h$111$1$39 ==.
                                   1300 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1301 00101$:
                           00004D  1302 	C$c8051_SDCC.h$112$1$39 ==.
                                   1303 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1304 	jbc	_RI0,00112$
      000050 80 FB            [24] 1305 	sjmp	00101$
      000052                       1306 00112$:
                           000052  1307 	C$c8051_SDCC.h$113$1$39 ==.
                                   1308 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1309 	mov	dpl,_SBUF0
                           000055  1310 	C$c8051_SDCC.h$114$1$39 ==.
                                   1311 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1312 	lcall	_putchar
                           000058  1313 	C$c8051_SDCC.h$115$1$39 ==.
                                   1314 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1315 	mov	dpl,_SBUF0
                           00005B  1316 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1317 	XG$getchar$0$0 ==.
      00005B 22               [24] 1318 	ret
                                   1319 ;------------------------------------------------------------
                                   1320 ;Allocation info for local variables in function 'lcd_print'
                                   1321 ;------------------------------------------------------------
                                   1322 ;fmt                       Allocated to stack - _bp -5
                                   1323 ;len                       Allocated to registers r6 
                                   1324 ;i                         Allocated to registers 
                                   1325 ;ap                        Allocated to registers 
                                   1326 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1327 ;------------------------------------------------------------
                           00005C  1328 	G$lcd_print$0$0 ==.
                           00005C  1329 	C$i2c.h$81$1$39 ==.
                                   1330 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1331 ;	-----------------------------------------
                                   1332 ;	 function lcd_print
                                   1333 ;	-----------------------------------------
      00005C                       1334 _lcd_print:
      00005C C0*00            [24] 1335 	push	_bp
      00005E 85 81*00         [24] 1336 	mov	_bp,sp
                           000061  1337 	C$i2c.h$87$1$73 ==.
                                   1338 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1339 	mov	a,_bp
      000063 24 FB            [12] 1340 	add	a,#0xfb
      000065 F8               [12] 1341 	mov	r0,a
      000066 86 82            [24] 1342 	mov	dpl,@r0
      000068 08               [12] 1343 	inc	r0
      000069 86 83            [24] 1344 	mov	dph,@r0
      00006B 08               [12] 1345 	inc	r0
      00006C 86 F0            [24] 1346 	mov	b,@r0
      00006E 12r00r00         [24] 1347 	lcall	_strlen
      000071 E5 82            [12] 1348 	mov	a,dpl
      000073 85 83 F0         [24] 1349 	mov	b,dph
      000076 45 F0            [12] 1350 	orl	a,b
      000078 70 02            [24] 1351 	jnz	00102$
      00007A 80 62            [24] 1352 	sjmp	00109$
      00007C                       1353 00102$:
                           00007C  1354 	C$i2c.h$89$2$74 ==.
                                   1355 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1356 	mov	a,_bp
      00007E 24 FB            [12] 1357 	add	a,#0xFB
      000080 FF               [12] 1358 	mov	r7,a
      000081 8F*00            [24] 1359 	mov	_vsprintf_PARM_3,r7
                           000083  1360 	C$i2c.h$90$1$73 ==.
                                   1361 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1362 	mov	a,_bp
      000085 24 FB            [12] 1363 	add	a,#0xfb
      000087 F8               [12] 1364 	mov	r0,a
      000088 86*00            [24] 1365 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1366 	inc	r0
      00008B 86*01            [24] 1367 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1368 	inc	r0
      00008E 86*02            [24] 1369 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1370 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1371 	mov	b,#0x00
      000096 12r00r00         [24] 1372 	lcall	_vsprintf
                           000099  1373 	C$i2c.h$93$1$73 ==.
                                   1374 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1375 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1376 	mov	b,#0x00
      00009F 12r00r00         [24] 1377 	lcall	_strlen
      0000A2 AE 82            [24] 1378 	mov	r6,dpl
                           0000A4  1379 	C$i2c.h$94$1$73 ==.
                                   1380 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1381 	mov	r7,#0x00
      0000A6                       1382 00107$:
      0000A6 C3               [12] 1383 	clr	c
      0000A7 EF               [12] 1384 	mov	a,r7
      0000A8 9E               [12] 1385 	subb	a,r6
      0000A9 50 1F            [24] 1386 	jnc	00105$
                           0000AB  1387 	C$i2c.h$96$2$76 ==.
                                   1388 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1389 	mov	a,r7
      0000AC 24r00            [12] 1390 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1391 	mov	dpl,a
      0000B0 E4               [12] 1392 	clr	a
      0000B1 34s00            [12] 1393 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1394 	mov	dph,a
      0000B5 E0               [24] 1395 	movx	a,@dptr
      0000B6 FD               [12] 1396 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1397 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1398 	mov	a,r7
      0000BB 24r00            [12] 1399 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1400 	mov	dpl,a
      0000BF E4               [12] 1401 	clr	a
      0000C0 34s00            [12] 1402 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1403 	mov	dph,a
      0000C4 74 0D            [12] 1404 	mov	a,#0x0D
      0000C6 F0               [24] 1405 	movx	@dptr,a
      0000C7                       1406 00108$:
                           0000C7  1407 	C$i2c.h$94$1$73 ==.
                                   1408 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1409 	inc	r7
      0000C8 80 DC            [24] 1410 	sjmp	00107$
      0000CA                       1411 00105$:
                           0000CA  1412 	C$i2c.h$99$1$73 ==.
                                   1413 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1414 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1415 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1416 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1417 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1418 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1419 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1420 	lcall	_i2c_write_data
      0000DE                       1421 00109$:
      0000DE D0*00            [24] 1422 	pop	_bp
                           0000E0  1423 	C$i2c.h$100$1$73 ==.
                           0000E0  1424 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1425 	ret
                                   1426 ;------------------------------------------------------------
                                   1427 ;Allocation info for local variables in function 'lcd_clear'
                                   1428 ;------------------------------------------------------------
                                   1429 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1430 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1431 ;------------------------------------------------------------
                           0000E1  1432 	G$lcd_clear$0$0 ==.
                           0000E1  1433 	C$i2c.h$103$1$73 ==.
                                   1434 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1435 ;	-----------------------------------------
                                   1436 ;	 function lcd_clear
                                   1437 ;	-----------------------------------------
      0000E1                       1438 _lcd_clear:
                           0000E1  1439 	C$i2c.h$105$1$73 ==.
                                   1440 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1441 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1442 	C$i2c.h$107$1$77 ==.
                                   1443 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1444 00101$:
      0000E4 74 C0            [12] 1445 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1446 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1447 	jc	00103$
      0000EA 75*0Br00         [24] 1448 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1449 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1450 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1451 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1452 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1453 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1454 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1455 	sjmp	00101$
      000101                       1456 00103$:
                           000101  1457 	C$i2c.h$109$1$77 ==.
                                   1458 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1459 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1460 	C$i2c.h$110$1$77 ==.
                                   1461 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1462 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1463 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1464 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1465 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1466 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1467 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1468 	lcall	_i2c_write_data
                           000119  1469 	C$i2c.h$111$1$77 ==.
                           000119  1470 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1471 	ret
                                   1472 ;------------------------------------------------------------
                                   1473 ;Allocation info for local variables in function 'read_keypad'
                                   1474 ;------------------------------------------------------------
                                   1475 ;i                         Allocated to registers r7 
                                   1476 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1477 ;------------------------------------------------------------
                           00011A  1478 	G$read_keypad$0$0 ==.
                           00011A  1479 	C$i2c.h$114$1$77 ==.
                                   1480 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1481 ;	-----------------------------------------
                                   1482 ;	 function read_keypad
                                   1483 ;	-----------------------------------------
      00011A                       1484 _read_keypad:
                           00011A  1485 	C$i2c.h$118$1$78 ==.
                                   1486 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1487 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1488 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1489 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1490 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1491 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1492 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1493 	lcall	_i2c_read_data
                           00012F  1494 	C$i2c.h$119$1$78 ==.
                                   1495 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1496 	mov	a,#0xFF
      000131 B5*03 05         [24] 1497 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1498 	mov	dpl,#0x00
      000137 80 5F            [24] 1499 	sjmp	00116$
      000139                       1500 00102$:
                           000139  1501 	C$i2c.h$121$1$78 ==.
                                   1502 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1503 	mov	r7,#0x00
      00013B 8F 06            [24] 1504 	mov	ar6,r7
      00013D                       1505 00114$:
                           00013D  1506 	C$i2c.h$123$2$79 ==.
                                   1507 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1508 	mov	b,r6
      00013F 05 F0            [12] 1509 	inc	b
      000141 7C 01            [12] 1510 	mov	r4,#0x01
      000143 7D 00            [12] 1511 	mov	r5,#0x00
      000145 80 06            [24] 1512 	sjmp	00145$
      000147                       1513 00144$:
      000147 EC               [12] 1514 	mov	a,r4
      000148 2C               [12] 1515 	add	a,r4
      000149 FC               [12] 1516 	mov	r4,a
      00014A ED               [12] 1517 	mov	a,r5
      00014B 33               [12] 1518 	rlc	a
      00014C FD               [12] 1519 	mov	r5,a
      00014D                       1520 00145$:
      00014D D5 F0 F7         [24] 1521 	djnz	b,00144$
      000150 AA*03            [24] 1522 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1523 	mov	r3,#0x00
      000154 EA               [12] 1524 	mov	a,r2
      000155 52 04            [12] 1525 	anl	ar4,a
      000157 EB               [12] 1526 	mov	a,r3
      000158 52 05            [12] 1527 	anl	ar5,a
      00015A EC               [12] 1528 	mov	a,r4
      00015B 4D               [12] 1529 	orl	a,r5
      00015C 60 07            [24] 1530 	jz	00115$
                           00015E  1531 	C$i2c.h$124$2$79 ==.
                                   1532 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1533 	mov	a,#0x31
      000160 2F               [12] 1534 	add	a,r7
      000161 F5 82            [12] 1535 	mov	dpl,a
      000163 80 33            [24] 1536 	sjmp	00116$
      000165                       1537 00115$:
                           000165  1538 	C$i2c.h$121$1$78 ==.
                                   1539 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1540 	inc	r6
      000166 8E 07            [24] 1541 	mov	ar7,r6
      000168 BE 08 00         [24] 1542 	cjne	r6,#0x08,00147$
      00016B                       1543 00147$:
      00016B 40 D0            [24] 1544 	jc	00114$
                           00016D  1545 	C$i2c.h$127$1$78 ==.
                                   1546 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1547 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1548 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1549 	mov	dpl,#0x39
      000175 80 21            [24] 1550 	sjmp	00116$
      000177                       1551 00107$:
                           000177  1552 	C$i2c.h$129$1$78 ==.
                                   1553 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1554 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1555 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1556 	mov	dpl,#0x2A
      00017F 80 17            [24] 1557 	sjmp	00116$
      000181                       1558 00109$:
                           000181  1559 	C$i2c.h$131$1$78 ==.
                                   1560 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1561 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1562 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1563 	mov	dpl,#0x30
      000189 80 0D            [24] 1564 	sjmp	00116$
      00018B                       1565 00111$:
                           00018B  1566 	C$i2c.h$133$1$78 ==.
                                   1567 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1568 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1569 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1570 	mov	dpl,#0x23
      000193 80 03            [24] 1571 	sjmp	00116$
      000195                       1572 00113$:
                           000195  1573 	C$i2c.h$135$1$78 ==.
                                   1574 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1575 	mov	dpl,#0xFF
      000198                       1576 00116$:
                           000198  1577 	C$i2c.h$136$1$78 ==.
                           000198  1578 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1579 	ret
                                   1580 ;------------------------------------------------------------
                                   1581 ;Allocation info for local variables in function 'kpd_input'
                                   1582 ;------------------------------------------------------------
                                   1583 ;mode                      Allocated to registers r7 
                                   1584 ;sum                       Allocated to registers r5 r6 
                                   1585 ;key                       Allocated to registers r3 
                                   1586 ;i                         Allocated to registers 
                                   1587 ;------------------------------------------------------------
                           000199  1588 	G$kpd_input$0$0 ==.
                           000199  1589 	C$i2c.h$148$1$78 ==.
                                   1590 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1591 ;	-----------------------------------------
                                   1592 ;	 function kpd_input
                                   1593 ;	-----------------------------------------
      000199                       1594 _kpd_input:
      000199 AF 82            [24] 1595 	mov	r7,dpl
                           00019B  1596 	C$i2c.h$153$1$81 ==.
                                   1597 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1598 	C$i2c.h$156$1$81 ==.
                                   1599 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1600 	clr	a
      00019C FD               [12] 1601 	mov	r5,a
      00019D FE               [12] 1602 	mov	r6,a
      00019E EF               [12] 1603 	mov	a,r7
      00019F 70 1D            [24] 1604 	jnz	00102$
      0001A1 C0 06            [24] 1605 	push	ar6
      0001A3 C0 05            [24] 1606 	push	ar5
      0001A5 74r00            [12] 1607 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1608 	push	acc
      0001A9 74s00            [12] 1609 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1610 	push	acc
      0001AD 74 80            [12] 1611 	mov	a,#0x80
      0001AF C0 E0            [24] 1612 	push	acc
      0001B1 12r00r5C         [24] 1613 	lcall	_lcd_print
      0001B4 15 81            [12] 1614 	dec	sp
      0001B6 15 81            [12] 1615 	dec	sp
      0001B8 15 81            [12] 1616 	dec	sp
      0001BA D0 05            [24] 1617 	pop	ar5
      0001BC D0 06            [24] 1618 	pop	ar6
      0001BE                       1619 00102$:
                           0001BE  1620 	C$i2c.h$158$1$81 ==.
                                   1621 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1622 	push	ar6
      0001C0 C0 05            [24] 1623 	push	ar5
      0001C2 74 08            [12] 1624 	mov	a,#0x08
      0001C4 C0 E0            [24] 1625 	push	acc
      0001C6 E4               [12] 1626 	clr	a
      0001C7 C0 E0            [24] 1627 	push	acc
      0001C9 74 08            [12] 1628 	mov	a,#0x08
      0001CB C0 E0            [24] 1629 	push	acc
      0001CD E4               [12] 1630 	clr	a
      0001CE C0 E0            [24] 1631 	push	acc
      0001D0 74 08            [12] 1632 	mov	a,#0x08
      0001D2 C0 E0            [24] 1633 	push	acc
      0001D4 E4               [12] 1634 	clr	a
      0001D5 C0 E0            [24] 1635 	push	acc
      0001D7 74 08            [12] 1636 	mov	a,#0x08
      0001D9 C0 E0            [24] 1637 	push	acc
      0001DB E4               [12] 1638 	clr	a
      0001DC C0 E0            [24] 1639 	push	acc
      0001DE 74 08            [12] 1640 	mov	a,#0x08
      0001E0 C0 E0            [24] 1641 	push	acc
      0001E2 E4               [12] 1642 	clr	a
      0001E3 C0 E0            [24] 1643 	push	acc
      0001E5 74r16            [12] 1644 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1645 	push	acc
      0001E9 74s00            [12] 1646 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1647 	push	acc
      0001ED 74 80            [12] 1648 	mov	a,#0x80
      0001EF C0 E0            [24] 1649 	push	acc
      0001F1 12r00r5C         [24] 1650 	lcall	_lcd_print
      0001F4 E5 81            [12] 1651 	mov	a,sp
      0001F6 24 F3            [12] 1652 	add	a,#0xf3
      0001F8 F5 81            [12] 1653 	mov	sp,a
                           0001FA  1654 	C$i2c.h$160$1$81 ==.
                                   1655 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1656 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1657 	mov	b,#0x07
      000200 E4               [12] 1658 	clr	a
      000201 12r03r0D         [24] 1659 	lcall	_delay_time
      000204 D0 05            [24] 1660 	pop	ar5
      000206 D0 06            [24] 1661 	pop	ar6
                           000208  1662 	C$i2c.h$164$1$81 ==.
                                   1663 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1664 	mov	r7,#0x00
                           00020A  1665 	C$i2c.h$166$3$84 ==.
                                   1666 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1667 00104$:
      00020A C0 07            [24] 1668 	push	ar7
      00020C C0 06            [24] 1669 	push	ar6
      00020E C0 05            [24] 1670 	push	ar5
      000210 12r01r1A         [24] 1671 	lcall	_read_keypad
      000213 AC 82            [24] 1672 	mov	r4,dpl
      000215 D0 05            [24] 1673 	pop	ar5
      000217 D0 06            [24] 1674 	pop	ar6
      000219 D0 07            [24] 1675 	pop	ar7
      00021B 8C 03            [24] 1676 	mov	ar3,r4
      00021D BC FF 02         [24] 1677 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1678 	sjmp	00105$
      000222                       1679 00146$:
      000222 BB 2A 17         [24] 1680 	cjne	r3,#0x2A,00106$
      000225                       1681 00105$:
      000225 90 27 10         [24] 1682 	mov	dptr,#0x2710
      000228 E4               [12] 1683 	clr	a
      000229 F5 F0            [12] 1684 	mov	b,a
      00022B C0 07            [24] 1685 	push	ar7
      00022D C0 06            [24] 1686 	push	ar6
      00022F C0 05            [24] 1687 	push	ar5
      000231 12r03r0D         [24] 1688 	lcall	_delay_time
      000234 D0 05            [24] 1689 	pop	ar5
      000236 D0 06            [24] 1690 	pop	ar6
      000238 D0 07            [24] 1691 	pop	ar7
      00023A 80 CE            [24] 1692 	sjmp	00104$
      00023C                       1693 00106$:
                           00023C  1694 	C$i2c.h$167$2$82 ==.
                                   1695 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1696 	cjne	r3,#0x23,00114$
                           00023F  1697 	C$i2c.h$169$3$83 ==.
                                   1698 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1699 00107$:
      00023F C0 06            [24] 1700 	push	ar6
      000241 C0 05            [24] 1701 	push	ar5
      000243 12r01r1A         [24] 1702 	lcall	_read_keypad
      000246 AC 82            [24] 1703 	mov	r4,dpl
      000248 D0 05            [24] 1704 	pop	ar5
      00024A D0 06            [24] 1705 	pop	ar6
      00024C BC 23 13         [24] 1706 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1707 	mov	dptr,#0x2710
      000252 E4               [12] 1708 	clr	a
      000253 F5 F0            [12] 1709 	mov	b,a
      000255 C0 06            [24] 1710 	push	ar6
      000257 C0 05            [24] 1711 	push	ar5
      000259 12r03r0D         [24] 1712 	lcall	_delay_time
      00025C D0 05            [24] 1713 	pop	ar5
      00025E D0 06            [24] 1714 	pop	ar6
      000260 80 DD            [24] 1715 	sjmp	00107$
      000262                       1716 00109$:
                           000262  1717 	C$i2c.h$170$3$83 ==.
                                   1718 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1719 	mov	dpl,r5
      000264 8E 83            [24] 1720 	mov	dph,r6
      000266 02r03r0C         [24] 1721 	ljmp	00119$
      000269                       1722 00114$:
                           000269  1723 	C$i2c.h$174$3$84 ==.
                                   1724 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1725 	mov	a,r3
      00026A FA               [12] 1726 	mov	r2,a
      00026B 33               [12] 1727 	rlc	a
      00026C 95 E0            [12] 1728 	subb	a,acc
      00026E FC               [12] 1729 	mov	r4,a
      00026F C0 07            [24] 1730 	push	ar7
      000271 C0 06            [24] 1731 	push	ar6
      000273 C0 05            [24] 1732 	push	ar5
      000275 C0 04            [24] 1733 	push	ar4
      000277 C0 03            [24] 1734 	push	ar3
      000279 C0 02            [24] 1735 	push	ar2
      00027B C0 02            [24] 1736 	push	ar2
      00027D C0 04            [24] 1737 	push	ar4
      00027F 74r26            [12] 1738 	mov	a,#___str_2
      000281 C0 E0            [24] 1739 	push	acc
      000283 74s00            [12] 1740 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1741 	push	acc
      000287 74 80            [12] 1742 	mov	a,#0x80
      000289 C0 E0            [24] 1743 	push	acc
      00028B 12r00r5C         [24] 1744 	lcall	_lcd_print
      00028E E5 81            [12] 1745 	mov	a,sp
      000290 24 FB            [12] 1746 	add	a,#0xfb
      000292 F5 81            [12] 1747 	mov	sp,a
      000294 D0 02            [24] 1748 	pop	ar2
      000296 D0 03            [24] 1749 	pop	ar3
      000298 D0 04            [24] 1750 	pop	ar4
      00029A D0 05            [24] 1751 	pop	ar5
      00029C D0 06            [24] 1752 	pop	ar6
                           00029E  1753 	C$i2c.h$175$1$81 ==.
                                   1754 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1755 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1756 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1757 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1758 	push	ar4
      0002A7 C0 03            [24] 1759 	push	ar3
      0002A9 C0 02            [24] 1760 	push	ar2
      0002AB 12r00r00         [24] 1761 	lcall	__mulint
      0002AE A8 82            [24] 1762 	mov	r0,dpl
      0002B0 A9 83            [24] 1763 	mov	r1,dph
      0002B2 D0 02            [24] 1764 	pop	ar2
      0002B4 D0 03            [24] 1765 	pop	ar3
      0002B6 D0 04            [24] 1766 	pop	ar4
      0002B8 D0 07            [24] 1767 	pop	ar7
      0002BA EA               [12] 1768 	mov	a,r2
      0002BB 28               [12] 1769 	add	a,r0
      0002BC F8               [12] 1770 	mov	r0,a
      0002BD EC               [12] 1771 	mov	a,r4
      0002BE 39               [12] 1772 	addc	a,r1
      0002BF F9               [12] 1773 	mov	r1,a
      0002C0 E8               [12] 1774 	mov	a,r0
      0002C1 24 D0            [12] 1775 	add	a,#0xD0
      0002C3 FD               [12] 1776 	mov	r5,a
      0002C4 E9               [12] 1777 	mov	a,r1
      0002C5 34 FF            [12] 1778 	addc	a,#0xFF
      0002C7 FE               [12] 1779 	mov	r6,a
                           0002C8  1780 	C$i2c.h$176$3$84 ==.
                                   1781 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1782 00110$:
      0002C8 C0 07            [24] 1783 	push	ar7
      0002CA C0 06            [24] 1784 	push	ar6
      0002CC C0 05            [24] 1785 	push	ar5
      0002CE C0 03            [24] 1786 	push	ar3
      0002D0 12r01r1A         [24] 1787 	lcall	_read_keypad
      0002D3 AC 82            [24] 1788 	mov	r4,dpl
      0002D5 D0 03            [24] 1789 	pop	ar3
      0002D7 D0 05            [24] 1790 	pop	ar5
      0002D9 D0 06            [24] 1791 	pop	ar6
      0002DB D0 07            [24] 1792 	pop	ar7
      0002DD EC               [12] 1793 	mov	a,r4
      0002DE B5 03 1B         [24] 1794 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1795 	mov	dptr,#0x2710
      0002E4 E4               [12] 1796 	clr	a
      0002E5 F5 F0            [12] 1797 	mov	b,a
      0002E7 C0 07            [24] 1798 	push	ar7
      0002E9 C0 06            [24] 1799 	push	ar6
      0002EB C0 05            [24] 1800 	push	ar5
      0002ED C0 03            [24] 1801 	push	ar3
      0002EF 12r03r0D         [24] 1802 	lcall	_delay_time
      0002F2 D0 03            [24] 1803 	pop	ar3
      0002F4 D0 05            [24] 1804 	pop	ar5
      0002F6 D0 06            [24] 1805 	pop	ar6
      0002F8 D0 07            [24] 1806 	pop	ar7
      0002FA 80 CC            [24] 1807 	sjmp	00110$
      0002FC                       1808 00118$:
                           0002FC  1809 	C$i2c.h$164$1$81 ==.
                                   1810 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1811 	inc	r7
      0002FD C3               [12] 1812 	clr	c
      0002FE EF               [12] 1813 	mov	a,r7
      0002FF 64 80            [12] 1814 	xrl	a,#0x80
      000301 94 85            [12] 1815 	subb	a,#0x85
      000303 50 03            [24] 1816 	jnc	00155$
      000305 02r02r0A         [24] 1817 	ljmp	00104$
      000308                       1818 00155$:
                           000308  1819 	C$i2c.h$179$1$81 ==.
                                   1820 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1821 	mov	dpl,r5
      00030A 8E 83            [24] 1822 	mov	dph,r6
      00030C                       1823 00119$:
                           00030C  1824 	C$i2c.h$180$1$81 ==.
                           00030C  1825 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1826 	ret
                                   1827 ;------------------------------------------------------------
                                   1828 ;Allocation info for local variables in function 'delay_time'
                                   1829 ;------------------------------------------------------------
                                   1830 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1831 ;index                     Allocated to registers 
                                   1832 ;------------------------------------------------------------
                           00030D  1833 	G$delay_time$0$0 ==.
                           00030D  1834 	C$i2c.h$189$1$81 ==.
                                   1835 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1836 ;	-----------------------------------------
                                   1837 ;	 function delay_time
                                   1838 ;	-----------------------------------------
      00030D                       1839 _delay_time:
      00030D AC 82            [24] 1840 	mov	r4,dpl
      00030F AD 83            [24] 1841 	mov	r5,dph
      000311 AE F0            [24] 1842 	mov	r6,b
      000313 FF               [12] 1843 	mov	r7,a
                           000314  1844 	C$i2c.h$192$1$86 ==.
                                   1845 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1846 	mov	r0,#0x00
      000316 79 00            [12] 1847 	mov	r1,#0x00
      000318 7A 00            [12] 1848 	mov	r2,#0x00
      00031A 7B 00            [12] 1849 	mov	r3,#0x00
      00031C                       1850 00103$:
      00031C C3               [12] 1851 	clr	c
      00031D E8               [12] 1852 	mov	a,r0
      00031E 9C               [12] 1853 	subb	a,r4
      00031F E9               [12] 1854 	mov	a,r1
      000320 9D               [12] 1855 	subb	a,r5
      000321 EA               [12] 1856 	mov	a,r2
      000322 9E               [12] 1857 	subb	a,r6
      000323 EB               [12] 1858 	mov	a,r3
      000324 9F               [12] 1859 	subb	a,r7
      000325 50 0F            [24] 1860 	jnc	00105$
      000327 08               [12] 1861 	inc	r0
      000328 B8 00 09         [24] 1862 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1863 	inc	r1
      00032C B9 00 05         [24] 1864 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1865 	inc	r2
      000330 BA 00 E9         [24] 1866 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1867 	inc	r3
      000334                       1868 00115$:
      000334 80 E6            [24] 1869 	sjmp	00103$
      000336                       1870 00105$:
                           000336  1871 	C$i2c.h$193$1$86 ==.
                           000336  1872 	XG$delay_time$0$0 ==.
      000336 22               [24] 1873 	ret
                                   1874 ;------------------------------------------------------------
                                   1875 ;Allocation info for local variables in function 'i2c_start'
                                   1876 ;------------------------------------------------------------
                           000337  1877 	G$i2c_start$0$0 ==.
                           000337  1878 	C$i2c.h$196$1$86 ==.
                                   1879 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1880 ;	-----------------------------------------
                                   1881 ;	 function i2c_start
                                   1882 ;	-----------------------------------------
      000337                       1883 _i2c_start:
                           000337  1884 	C$i2c.h$198$1$88 ==.
                                   1885 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1886 00101$:
      000337 20 C7 FD         [24] 1887 	jb	_BUSY,00101$
                           00033A  1888 	C$i2c.h$199$1$88 ==.
                                   1889 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1890 	setb	_STA
                           00033C  1891 	C$i2c.h$200$1$88 ==.
                                   1892 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1893 00104$:
      00033C 30 C3 FD         [24] 1894 	jnb	_SI,00104$
                           00033F  1895 	C$i2c.h$201$1$88 ==.
                                   1896 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1897 	clr	_STA
                           000341  1898 	C$i2c.h$202$1$88 ==.
                                   1899 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1900 	clr	_SI
                           000343  1901 	C$i2c.h$203$1$88 ==.
                           000343  1902 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1903 	ret
                                   1904 ;------------------------------------------------------------
                                   1905 ;Allocation info for local variables in function 'i2c_write'
                                   1906 ;------------------------------------------------------------
                                   1907 ;output_data               Allocated to registers 
                                   1908 ;------------------------------------------------------------
                           000344  1909 	G$i2c_write$0$0 ==.
                           000344  1910 	C$i2c.h$206$1$88 ==.
                                   1911 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1912 ;	-----------------------------------------
                                   1913 ;	 function i2c_write
                                   1914 ;	-----------------------------------------
      000344                       1915 _i2c_write:
      000344 85 82 C2         [24] 1916 	mov	_SMB0DAT,dpl
                           000347  1917 	C$i2c.h$209$1$90 ==.
                                   1918 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1919 00101$:
                           000347  1920 	C$i2c.h$210$1$90 ==.
                                   1921 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1922 	jbc	_SI,00112$
      00034A 80 FB            [24] 1923 	sjmp	00101$
      00034C                       1924 00112$:
                           00034C  1925 	C$i2c.h$211$1$90 ==.
                           00034C  1926 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1927 	ret
                                   1928 ;------------------------------------------------------------
                                   1929 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1930 ;------------------------------------------------------------
                                   1931 ;output_data               Allocated to registers 
                                   1932 ;------------------------------------------------------------
                           00034D  1933 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1934 	C$i2c.h$214$1$90 ==.
                                   1935 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1936 ;	-----------------------------------------
                                   1937 ;	 function i2c_write_and_stop
                                   1938 ;	-----------------------------------------
      00034D                       1939 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 1940 	mov	_SMB0DAT,dpl
                           000350  1941 	C$i2c.h$217$1$92 ==.
                                   1942 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 1943 	setb	_STO
                           000352  1944 	C$i2c.h$218$1$92 ==.
                                   1945 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       1946 00101$:
                           000352  1947 	C$i2c.h$219$1$92 ==.
                                   1948 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 1949 	jbc	_SI,00112$
      000355 80 FB            [24] 1950 	sjmp	00101$
      000357                       1951 00112$:
                           000357  1952 	C$i2c.h$220$1$92 ==.
                           000357  1953 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 1954 	ret
                                   1955 ;------------------------------------------------------------
                                   1956 ;Allocation info for local variables in function 'i2c_read'
                                   1957 ;------------------------------------------------------------
                                   1958 ;input_data                Allocated to registers 
                                   1959 ;------------------------------------------------------------
                           000358  1960 	G$i2c_read$0$0 ==.
                           000358  1961 	C$i2c.h$223$1$92 ==.
                                   1962 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   1963 ;	-----------------------------------------
                                   1964 ;	 function i2c_read
                                   1965 ;	-----------------------------------------
      000358                       1966 _i2c_read:
                           000358  1967 	C$i2c.h$226$1$94 ==.
                                   1968 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       1969 00101$:
      000358 30 C3 FD         [24] 1970 	jnb	_SI,00101$
                           00035B  1971 	C$i2c.h$227$1$94 ==.
                                   1972 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 1973 	mov	dpl,_SMB0DAT
                           00035E  1974 	C$i2c.h$228$1$94 ==.
                                   1975 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 1976 	clr	_SI
                           000360  1977 	C$i2c.h$229$1$94 ==.
                                   1978 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  1979 	C$i2c.h$230$1$94 ==.
                           000360  1980 	XG$i2c_read$0$0 ==.
      000360 22               [24] 1981 	ret
                                   1982 ;------------------------------------------------------------
                                   1983 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   1984 ;------------------------------------------------------------
                                   1985 ;input_data                Allocated to registers r7 
                                   1986 ;------------------------------------------------------------
                           000361  1987 	G$i2c_read_and_stop$0$0 ==.
                           000361  1988 	C$i2c.h$233$1$94 ==.
                                   1989 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   1990 ;	-----------------------------------------
                                   1991 ;	 function i2c_read_and_stop
                                   1992 ;	-----------------------------------------
      000361                       1993 _i2c_read_and_stop:
                           000361  1994 	C$i2c.h$236$1$96 ==.
                                   1995 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       1996 00101$:
      000361 30 C3 FD         [24] 1997 	jnb	_SI,00101$
                           000364  1998 	C$i2c.h$237$1$96 ==.
                                   1999 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2000 	mov	r7,_SMB0DAT
                           000366  2001 	C$i2c.h$238$1$96 ==.
                                   2002 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2003 	clr	_SI
                           000368  2004 	C$i2c.h$239$1$96 ==.
                                   2005 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2006 	setb	_STO
                           00036A  2007 	C$i2c.h$240$1$96 ==.
                                   2008 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2009 00104$:
                           00036A  2010 	C$i2c.h$241$1$96 ==.
                                   2011 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2012 	jbc	_SI,00122$
      00036D 80 FB            [24] 2013 	sjmp	00104$
      00036F                       2014 00122$:
                           00036F  2015 	C$i2c.h$242$1$96 ==.
                                   2016 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2017 	mov	dpl,r7
                           000371  2018 	C$i2c.h$243$1$96 ==.
                           000371  2019 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2020 	ret
                                   2021 ;------------------------------------------------------------
                                   2022 ;Allocation info for local variables in function 'i2c_write_data'
                                   2023 ;------------------------------------------------------------
                                   2024 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2025 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2026 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2027 ;addr                      Allocated to registers r7 
                                   2028 ;i                         Allocated to registers 
                                   2029 ;------------------------------------------------------------
                           000372  2030 	G$i2c_write_data$0$0 ==.
                           000372  2031 	C$i2c.h$246$1$96 ==.
                                   2032 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2033 ;	-----------------------------------------
                                   2034 ;	 function i2c_write_data
                                   2035 ;	-----------------------------------------
      000372                       2036 _i2c_write_data:
      000372 AF 82            [24] 2037 	mov	r7,dpl
                           000374  2038 	C$i2c.h$250$1$98 ==.
                                   2039 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2040 	push	ar7
      000376 12r03r37         [24] 2041 	lcall	_i2c_start
      000379 D0 07            [24] 2042 	pop	ar7
                           00037B  2043 	C$i2c.h$251$1$98 ==.
                                   2044 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2045 	mov	a,#0xFE
      00037D 5F               [12] 2046 	anl	a,r7
      00037E F5 82            [12] 2047 	mov	dpl,a
      000380 12r03r44         [24] 2048 	lcall	_i2c_write
                           000383  2049 	C$i2c.h$252$1$98 ==.
                                   2050 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2051 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2052 	lcall	_i2c_write
                           000389  2053 	C$i2c.h$253$1$98 ==.
                                   2054 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2055 	mov	r7,#0x00
      00038B                       2056 00103$:
      00038B AD*09            [24] 2057 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2058 	mov	r6,#0x00
      00038F 1D               [12] 2059 	dec	r5
      000390 BD FF 01         [24] 2060 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2061 	dec	r6
      000394                       2062 00114$:
      000394 8F 03            [24] 2063 	mov	ar3,r7
      000396 7C 00            [12] 2064 	mov	r4,#0x00
      000398 C3               [12] 2065 	clr	c
      000399 EB               [12] 2066 	mov	a,r3
      00039A 9D               [12] 2067 	subb	a,r5
      00039B EC               [12] 2068 	mov	a,r4
      00039C 64 80            [12] 2069 	xrl	a,#0x80
      00039E 8E F0            [24] 2070 	mov	b,r6
      0003A0 63 F0 80         [24] 2071 	xrl	b,#0x80
      0003A3 95 F0            [12] 2072 	subb	a,b
      0003A5 50 1F            [24] 2073 	jnc	00101$
                           0003A7  2074 	C$i2c.h$254$1$98 ==.
                                   2075 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2076 	mov	a,r7
      0003A8 25*06            [12] 2077 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2078 	mov	r4,a
      0003AB E4               [12] 2079 	clr	a
      0003AC 35*07            [12] 2080 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2081 	mov	r5,a
      0003AF AE*08            [24] 2082 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2083 	mov	dpl,r4
      0003B3 8D 83            [24] 2084 	mov	dph,r5
      0003B5 8E F0            [24] 2085 	mov	b,r6
      0003B7 12r00r00         [24] 2086 	lcall	__gptrget
      0003BA F5 82            [12] 2087 	mov	dpl,a
      0003BC C0 07            [24] 2088 	push	ar7
      0003BE 12r03r44         [24] 2089 	lcall	_i2c_write
      0003C1 D0 07            [24] 2090 	pop	ar7
                           0003C3  2091 	C$i2c.h$253$1$98 ==.
                                   2092 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2093 	inc	r7
      0003C4 80 C5            [24] 2094 	sjmp	00103$
      0003C6                       2095 00101$:
                           0003C6  2096 	C$i2c.h$255$1$98 ==.
                                   2097 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2098 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2099 	mov	r7,#0x00
      0003CA 1E               [12] 2100 	dec	r6
      0003CB BE FF 01         [24] 2101 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2102 	dec	r7
      0003CF                       2103 00116$:
      0003CF EE               [12] 2104 	mov	a,r6
      0003D0 25*06            [12] 2105 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2106 	mov	r6,a
      0003D3 EF               [12] 2107 	mov	a,r7
      0003D4 35*07            [12] 2108 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2109 	mov	r7,a
      0003D7 AD*08            [24] 2110 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2111 	mov	dpl,r6
      0003DB 8F 83            [24] 2112 	mov	dph,r7
      0003DD 8D F0            [24] 2113 	mov	b,r5
      0003DF 12r00r00         [24] 2114 	lcall	__gptrget
      0003E2 F5 82            [12] 2115 	mov	dpl,a
      0003E4 12r03r4D         [24] 2116 	lcall	_i2c_write_and_stop
                           0003E7  2117 	C$i2c.h$256$1$98 ==.
                           0003E7  2118 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2119 	ret
                                   2120 ;------------------------------------------------------------
                                   2121 ;Allocation info for local variables in function 'i2c_read_data'
                                   2122 ;------------------------------------------------------------
                                   2123 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2124 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2125 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2126 ;addr                      Allocated to registers r7 
                                   2127 ;j                         Allocated to registers 
                                   2128 ;------------------------------------------------------------
                           0003E8  2129 	G$i2c_read_data$0$0 ==.
                           0003E8  2130 	C$i2c.h$259$1$98 ==.
                                   2131 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2132 ;	-----------------------------------------
                                   2133 ;	 function i2c_read_data
                                   2134 ;	-----------------------------------------
      0003E8                       2135 _i2c_read_data:
      0003E8 AF 82            [24] 2136 	mov	r7,dpl
                           0003EA  2137 	C$i2c.h$262$1$100 ==.
                                   2138 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2139 	push	ar7
      0003EC 12r03r37         [24] 2140 	lcall	_i2c_start
      0003EF D0 07            [24] 2141 	pop	ar7
                           0003F1  2142 	C$i2c.h$263$1$100 ==.
                                   2143 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2144 	mov	ar6,r7
      0003F3 74 FE            [12] 2145 	mov	a,#0xFE
      0003F5 5E               [12] 2146 	anl	a,r6
      0003F6 F5 82            [12] 2147 	mov	dpl,a
      0003F8 C0 07            [24] 2148 	push	ar7
      0003FA 12r03r44         [24] 2149 	lcall	_i2c_write
                           0003FD  2150 	C$i2c.h$264$1$100 ==.
                                   2151 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2152 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2153 	lcall	_i2c_write_and_stop
                           000403  2154 	C$i2c.h$265$1$100 ==.
                                   2155 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2156 	lcall	_i2c_start
      000406 D0 07            [24] 2157 	pop	ar7
                           000408  2158 	C$i2c.h$266$1$100 ==.
                                   2159 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2160 	mov	a,#0x01
      00040A 4F               [12] 2161 	orl	a,r7
      00040B F5 82            [12] 2162 	mov	dpl,a
      00040D 12r03r44         [24] 2163 	lcall	_i2c_write
                           000410  2164 	C$i2c.h$267$1$100 ==.
                                   2165 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2166 	mov	r7,#0x00
      000412                       2167 00103$:
      000412 AD*0E            [24] 2168 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2169 	mov	r6,#0x00
      000416 1D               [12] 2170 	dec	r5
      000417 BD FF 01         [24] 2171 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2172 	dec	r6
      00041B                       2173 00114$:
      00041B 8F 03            [24] 2174 	mov	ar3,r7
      00041D 7C 00            [12] 2175 	mov	r4,#0x00
      00041F C3               [12] 2176 	clr	c
      000420 EB               [12] 2177 	mov	a,r3
      000421 9D               [12] 2178 	subb	a,r5
      000422 EC               [12] 2179 	mov	a,r4
      000423 64 80            [12] 2180 	xrl	a,#0x80
      000425 8E F0            [24] 2181 	mov	b,r6
      000427 63 F0 80         [24] 2182 	xrl	b,#0x80
      00042A 95 F0            [12] 2183 	subb	a,b
      00042C 50 2E            [24] 2184 	jnc	00101$
                           00042E  2185 	C$i2c.h$269$2$101 ==.
                                   2186 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2187 	setb	_AA
                           000430  2188 	C$i2c.h$270$2$101 ==.
                                   2189 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2190 	mov	a,r7
      000431 25*0B            [12] 2191 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2192 	mov	r4,a
      000434 E4               [12] 2193 	clr	a
      000435 35*0C            [12] 2194 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2195 	mov	r5,a
      000438 AE*0D            [24] 2196 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2197 	push	ar7
      00043C C0 06            [24] 2198 	push	ar6
      00043E C0 05            [24] 2199 	push	ar5
      000440 C0 04            [24] 2200 	push	ar4
      000442 12r03r58         [24] 2201 	lcall	_i2c_read
      000445 AB 82            [24] 2202 	mov	r3,dpl
      000447 D0 04            [24] 2203 	pop	ar4
      000449 D0 05            [24] 2204 	pop	ar5
      00044B D0 06            [24] 2205 	pop	ar6
      00044D D0 07            [24] 2206 	pop	ar7
      00044F 8C 82            [24] 2207 	mov	dpl,r4
      000451 8D 83            [24] 2208 	mov	dph,r5
      000453 8E F0            [24] 2209 	mov	b,r6
      000455 EB               [12] 2210 	mov	a,r3
      000456 12r00r00         [24] 2211 	lcall	__gptrput
                           000459  2212 	C$i2c.h$267$1$100 ==.
                                   2213 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2214 	inc	r7
      00045A 80 B6            [24] 2215 	sjmp	00103$
      00045C                       2216 00101$:
                           00045C  2217 	C$i2c.h$272$1$100 ==.
                                   2218 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2219 	clr	_AA
                           00045E  2220 	C$i2c.h$273$1$100 ==.
                                   2221 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2222 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2223 	mov	r7,#0x00
      000462 1E               [12] 2224 	dec	r6
      000463 BE FF 01         [24] 2225 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2226 	dec	r7
      000467                       2227 00116$:
      000467 EE               [12] 2228 	mov	a,r6
      000468 25*0B            [12] 2229 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2230 	mov	r6,a
      00046B EF               [12] 2231 	mov	a,r7
      00046C 35*0C            [12] 2232 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2233 	mov	r7,a
      00046F AD*0D            [24] 2234 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2235 	push	ar7
      000473 C0 06            [24] 2236 	push	ar6
      000475 C0 05            [24] 2237 	push	ar5
      000477 12r03r61         [24] 2238 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2239 	mov	r4,dpl
      00047C D0 05            [24] 2240 	pop	ar5
      00047E D0 06            [24] 2241 	pop	ar6
      000480 D0 07            [24] 2242 	pop	ar7
      000482 8E 82            [24] 2243 	mov	dpl,r6
      000484 8F 83            [24] 2244 	mov	dph,r7
      000486 8D F0            [24] 2245 	mov	b,r5
      000488 EC               [12] 2246 	mov	a,r4
      000489 12r00r00         [24] 2247 	lcall	__gptrput
                           00048C  2248 	C$i2c.h$274$1$100 ==.
                           00048C  2249 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2250 	ret
                                   2251 ;------------------------------------------------------------
                                   2252 ;Allocation info for local variables in function 'Accel_Init'
                                   2253 ;------------------------------------------------------------
                                   2254 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2255 ;------------------------------------------------------------
                           00048D  2256 	G$Accel_Init$0$0 ==.
                           00048D  2257 	C$i2c.h$283$1$100 ==.
                                   2258 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2259 ;	-----------------------------------------
                                   2260 ;	 function Accel_Init
                                   2261 ;	-----------------------------------------
      00048D                       2262 _Accel_Init:
                           00048D  2263 	C$i2c.h$287$1$103 ==.
                                   2264 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2265 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2266 	C$i2c.h$289$1$103 ==.
                                   2267 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2268 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2269 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2270 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2271 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2272 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2273 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2274 	lcall	_i2c_write_data
                           0004A5  2275 	C$i2c.h$290$1$103 ==.
                                   2276 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2277 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2278 	C$i2c.h$292$1$103 ==.
                                   2279 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2280 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2281 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2282 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2283 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2284 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2285 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2286 	lcall	_i2c_write_data
                           0004BD  2287 	C$i2c.h$293$1$103 ==.
                                   2288 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2289 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2290 	C$i2c.h$294$1$103 ==.
                                   2291 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2292 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2293 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2294 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2295 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2296 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2297 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2298 	lcall	_i2c_write_data
                           0004D5  2299 	C$i2c.h$298$1$103 ==.
                           0004D5  2300 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2301 	ret
                                   2302 ;------------------------------------------------------------
                                   2303 ;Allocation info for local variables in function 'main'
                                   2304 ;------------------------------------------------------------
                           0004D6  2305 	G$main$0$0 ==.
                           0004D6  2306 	C$lab6.c$48$1$103 ==.
                                   2307 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:48: void main(void)
                                   2308 ;	-----------------------------------------
                                   2309 ;	 function main
                                   2310 ;	-----------------------------------------
      0004D6                       2311 _main:
                           0004D6  2312 	C$lab6.c$50$1$113 ==.
                                   2313 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:50: Sys_Init();
      0004D6 12r00r30         [24] 2314 	lcall	_Sys_Init
                           0004D9  2315 	C$lab6.c$51$1$113 ==.
                                   2316 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:51: putchar(' '); //the quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2317 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2318 	lcall	_putchar
                           0004DF  2319 	C$lab6.c$52$1$113 ==.
                                   2320 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:52: Port_Init();
      0004DF 12r05rD9         [24] 2321 	lcall	_Port_Init
                           0004E2  2322 	C$lab6.c$53$1$113 ==.
                                   2323 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:53: XBR0_Init();
      0004E2 12r06r06         [24] 2324 	lcall	_XBR0_Init
                           0004E5  2325 	C$lab6.c$54$1$113 ==.
                                   2326 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:54: PCA_Init();
      0004E5 12r05rF1         [24] 2327 	lcall	_PCA_Init
                           0004E8  2328 	C$lab6.c$55$1$113 ==.
                                   2329 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:55: SMB_Init();
      0004E8 12r06r0A         [24] 2330 	lcall	_SMB_Init
                           0004EB  2331 	C$lab6.c$56$1$113 ==.
                                   2332 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:56: ADC_Init();
      0004EB 12r06r10         [24] 2333 	lcall	_ADC_Init
                           0004EE  2334 	C$lab6.c$58$1$113 ==.
                                   2335 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:58: count =0;
      0004EE E4               [12] 2336 	clr	a
      0004EF F5*10            [12] 2337 	mov	_count,a
      0004F1 F5*11            [12] 2338 	mov	(_count + 1),a
                           0004F3  2339 	C$lab6.c$60$1$113 ==.
                                   2340 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:60: while (1)
      0004F3                       2341 00102$:
                           0004F3  2342 	C$lab6.c$62$1$113 ==.
                                   2343 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:62: printf("\r\n%u ms",count*20);
      0004F3 85*10*00         [24] 2344 	mov	__mulint_PARM_2,_count
      0004F6 85*11*01         [24] 2345 	mov	(__mulint_PARM_2 + 1),(_count + 1)
      0004F9 90 00 14         [24] 2346 	mov	dptr,#0x0014
      0004FC 12r00r00         [24] 2347 	lcall	__mulint
      0004FF AE 82            [24] 2348 	mov	r6,dpl
      000501 AF 83            [24] 2349 	mov	r7,dph
      000503 C0 06            [24] 2350 	push	ar6
      000505 C0 07            [24] 2351 	push	ar7
      000507 74r29            [12] 2352 	mov	a,#___str_3
      000509 C0 E0            [24] 2353 	push	acc
      00050B 74s00            [12] 2354 	mov	a,#(___str_3 >> 8)
      00050D C0 E0            [24] 2355 	push	acc
      00050F 74 80            [12] 2356 	mov	a,#0x80
      000511 C0 E0            [24] 2357 	push	acc
      000513 12r00r00         [24] 2358 	lcall	_printf
      000516 E5 81            [12] 2359 	mov	a,sp
      000518 24 FB            [12] 2360 	add	a,#0xfb
      00051A F5 81            [12] 2361 	mov	sp,a
                           00051C  2362 	C$lab6.c$63$2$114 ==.
                                   2363 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:63: wait();
      00051C 12r05rBE         [24] 2364 	lcall	_wait
      00051F 80 D2            [24] 2365 	sjmp	00102$
                           000521  2366 	C$lab6.c$66$1$113 ==.
                           000521  2367 	XG$main$0$0 ==.
      000521 22               [24] 2368 	ret
                                   2369 ;------------------------------------------------------------
                                   2370 ;Allocation info for local variables in function 'direction'
                                   2371 ;------------------------------------------------------------
                                   2372 ;value                     Allocated to registers r6 r7 
                                   2373 ;------------------------------------------------------------
                           000522  2374 	G$direction$0$0 ==.
                           000522  2375 	C$lab6.c$69$1$113 ==.
                                   2376 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:69: unsigned int direction(void)        ///ADJUSTS THE VALUES OF DIRECTION SO THE DESIRED DIRECTION IS THE CAR'S 'NORTH'
                                   2377 ;	-----------------------------------------
                                   2378 ;	 function direction
                                   2379 ;	-----------------------------------------
      000522                       2380 _direction:
                           000522  2381 	C$lab6.c$72$1$116 ==.
                                   2382 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:72: count =0;
      000522 E4               [12] 2383 	clr	a
      000523 F5*10            [12] 2384 	mov	_count,a
      000525 F5*11            [12] 2385 	mov	(_count + 1),a
                           000527  2386 	C$lab6.c$73$1$116 ==.
                                   2387 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:73: while (count < 1);
      000527                       2388 00101$:
      000527 C3               [12] 2389 	clr	c
      000528 E5*10            [12] 2390 	mov	a,_count
      00052A 94 01            [12] 2391 	subb	a,#0x01
      00052C E5*11            [12] 2392 	mov	a,(_count + 1)
      00052E 64 80            [12] 2393 	xrl	a,#0x80
      000530 94 80            [12] 2394 	subb	a,#0x80
      000532 40 F3            [24] 2395 	jc	00101$
                           000534  2396 	C$lab6.c$74$1$116 ==.
                                   2397 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:74: lcd_clear();
      000534 12r00rE1         [24] 2398 	lcall	_lcd_clear
                           000537  2399 	C$lab6.c$75$1$116 ==.
                                   2400 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:75: lcd_print("Calibration:\nHello world!\n012_345_678:\nabc def ghij");
      000537 74r31            [12] 2401 	mov	a,#___str_4
      000539 C0 E0            [24] 2402 	push	acc
      00053B 74s00            [12] 2403 	mov	a,#(___str_4 >> 8)
      00053D C0 E0            [24] 2404 	push	acc
      00053F 74 80            [12] 2405 	mov	a,#0x80
      000541 C0 E0            [24] 2406 	push	acc
      000543 12r00r5C         [24] 2407 	lcall	_lcd_print
      000546 15 81            [12] 2408 	dec	sp
      000548 15 81            [12] 2409 	dec	sp
      00054A 15 81            [12] 2410 	dec	sp
                           00054C  2411 	C$lab6.c$76$1$116 ==.
                                   2412 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:76: start();
      00054C 12r05rAE         [24] 2413 	lcall	_start
                           00054F  2414 	C$lab6.c$77$1$116 ==.
                                   2415 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:77: lcd_clear();
      00054F 12r00rE1         [24] 2416 	lcall	_lcd_clear
                           000552  2417 	C$lab6.c$78$1$116 ==.
                                   2418 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:78: value = kpd_input(0);
      000552 75 82 00         [24] 2419 	mov	dpl,#0x00
      000555 12r01r99         [24] 2420 	lcall	_kpd_input
      000558 AE 82            [24] 2421 	mov	r6,dpl
      00055A AF 83            [24] 2422 	mov	r7,dph
                           00055C  2423 	C$lab6.c$79$1$116 ==.
                                   2424 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:79: lcd_clear();
      00055C C0 07            [24] 2425 	push	ar7
      00055E C0 06            [24] 2426 	push	ar6
      000560 12r00rE1         [24] 2427 	lcall	_lcd_clear
      000563 D0 06            [24] 2428 	pop	ar6
      000565 D0 07            [24] 2429 	pop	ar7
                           000567  2430 	C$lab6.c$80$1$116 ==.
                                   2431 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:80: lcd_print("\r\nThe desired direction is: %d", value);
      000567 C0 07            [24] 2432 	push	ar7
      000569 C0 06            [24] 2433 	push	ar6
      00056B C0 06            [24] 2434 	push	ar6
      00056D C0 07            [24] 2435 	push	ar7
      00056F 74r65            [12] 2436 	mov	a,#___str_5
      000571 C0 E0            [24] 2437 	push	acc
      000573 74s00            [12] 2438 	mov	a,#(___str_5 >> 8)
      000575 C0 E0            [24] 2439 	push	acc
      000577 74 80            [12] 2440 	mov	a,#0x80
      000579 C0 E0            [24] 2441 	push	acc
      00057B 12r00r5C         [24] 2442 	lcall	_lcd_print
      00057E E5 81            [12] 2443 	mov	a,sp
      000580 24 FB            [12] 2444 	add	a,#0xfb
      000582 F5 81            [12] 2445 	mov	sp,a
      000584 D0 06            [24] 2446 	pop	ar6
      000586 D0 07            [24] 2447 	pop	ar7
                           000588  2448 	C$lab6.c$81$1$116 ==.
                                   2449 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:81: printf("\r\nThe desired direction is: %d", value);
      000588 C0 07            [24] 2450 	push	ar7
      00058A C0 06            [24] 2451 	push	ar6
      00058C C0 06            [24] 2452 	push	ar6
      00058E C0 07            [24] 2453 	push	ar7
      000590 74r65            [12] 2454 	mov	a,#___str_5
      000592 C0 E0            [24] 2455 	push	acc
      000594 74s00            [12] 2456 	mov	a,#(___str_5 >> 8)
      000596 C0 E0            [24] 2457 	push	acc
      000598 74 80            [12] 2458 	mov	a,#0x80
      00059A C0 E0            [24] 2459 	push	acc
      00059C 12r00r00         [24] 2460 	lcall	_printf
      00059F E5 81            [12] 2461 	mov	a,sp
      0005A1 24 FB            [12] 2462 	add	a,#0xfb
      0005A3 F5 81            [12] 2463 	mov	sp,a
      0005A5 D0 06            [24] 2464 	pop	ar6
      0005A7 D0 07            [24] 2465 	pop	ar7
                           0005A9  2466 	C$lab6.c$83$1$116 ==.
                                   2467 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:83: return value;
      0005A9 8E 82            [24] 2468 	mov	dpl,r6
      0005AB 8F 83            [24] 2469 	mov	dph,r7
                           0005AD  2470 	C$lab6.c$85$1$116 ==.
                           0005AD  2471 	XG$direction$0$0 ==.
      0005AD 22               [24] 2472 	ret
                                   2473 ;------------------------------------------------------------
                                   2474 ;Allocation info for local variables in function 'start'
                                   2475 ;------------------------------------------------------------
                           0005AE  2476 	G$start$0$0 ==.
                           0005AE  2477 	C$lab6.c$87$1$116 ==.
                                   2478 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:87: void start(void)            ///WAITS UNTIL '*' IS ENTERED
                                   2479 ;	-----------------------------------------
                                   2480 ;	 function start
                                   2481 ;	-----------------------------------------
      0005AE                       2482 _start:
                           0005AE  2483 	C$lab6.c$89$1$118 ==.
                                   2484 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:89: while (read_keypad() != '*') wait();
      0005AE                       2485 00101$:
      0005AE 12r01r1A         [24] 2486 	lcall	_read_keypad
      0005B1 AF 82            [24] 2487 	mov	r7,dpl
      0005B3 BF 2A 02         [24] 2488 	cjne	r7,#0x2A,00112$
      0005B6 80 05            [24] 2489 	sjmp	00104$
      0005B8                       2490 00112$:
      0005B8 12r05rBE         [24] 2491 	lcall	_wait
      0005BB 80 F1            [24] 2492 	sjmp	00101$
      0005BD                       2493 00104$:
                           0005BD  2494 	C$lab6.c$90$1$118 ==.
                           0005BD  2495 	XG$start$0$0 ==.
      0005BD 22               [24] 2496 	ret
                                   2497 ;------------------------------------------------------------
                                   2498 ;Allocation info for local variables in function 'wait'
                                   2499 ;------------------------------------------------------------
                                   2500 ;old_count                 Allocated to registers r6 r7 
                                   2501 ;------------------------------------------------------------
                           0005BE  2502 	G$wait$0$0 ==.
                           0005BE  2503 	C$lab6.c$94$1$118 ==.
                                   2504 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:94: void wait(void)
                                   2505 ;	-----------------------------------------
                                   2506 ;	 function wait
                                   2507 ;	-----------------------------------------
      0005BE                       2508 _wait:
                           0005BE  2509 	C$lab6.c$96$1$120 ==.
                                   2510 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:96: int old_count = count+1;
      0005BE 74 01            [12] 2511 	mov	a,#0x01
      0005C0 25*10            [12] 2512 	add	a,_count
      0005C2 FE               [12] 2513 	mov	r6,a
      0005C3 E4               [12] 2514 	clr	a
      0005C4 35*11            [12] 2515 	addc	a,(_count + 1)
      0005C6 FF               [12] 2516 	mov	r7,a
                           0005C7  2517 	C$lab6.c$97$1$120 ==.
                                   2518 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:97: while (old_count> count);
      0005C7                       2519 00101$:
      0005C7 C3               [12] 2520 	clr	c
      0005C8 E5*10            [12] 2521 	mov	a,_count
      0005CA 9E               [12] 2522 	subb	a,r6
      0005CB E5*11            [12] 2523 	mov	a,(_count + 1)
      0005CD 64 80            [12] 2524 	xrl	a,#0x80
      0005CF 8F F0            [24] 2525 	mov	b,r7
      0005D1 63 F0 80         [24] 2526 	xrl	b,#0x80
      0005D4 95 F0            [12] 2527 	subb	a,b
      0005D6 40 EF            [24] 2528 	jc	00101$
                           0005D8  2529 	C$lab6.c$98$1$120 ==.
                           0005D8  2530 	XG$wait$0$0 ==.
      0005D8 22               [24] 2531 	ret
                                   2532 ;------------------------------------------------------------
                                   2533 ;Allocation info for local variables in function 'Port_Init'
                                   2534 ;------------------------------------------------------------
                           0005D9  2535 	G$Port_Init$0$0 ==.
                           0005D9  2536 	C$lab6.c$100$1$120 ==.
                                   2537 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:100: void Port_Init(void)
                                   2538 ;	-----------------------------------------
                                   2539 ;	 function Port_Init
                                   2540 ;	-----------------------------------------
      0005D9                       2541 _Port_Init:
                           0005D9  2542 	C$lab6.c$102$1$122 ==.
                                   2543 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:102: P0MDOUT &= ~0x32;
      0005D9 AF A4            [24] 2544 	mov	r7,_P0MDOUT
      0005DB 74 CD            [12] 2545 	mov	a,#0xCD
      0005DD 5F               [12] 2546 	anl	a,r7
      0005DE F5 A4            [12] 2547 	mov	_P0MDOUT,a
                           0005E0  2548 	C$lab6.c$104$1$122 ==.
                                   2549 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:104: P1MDIN  &= ~0x20;
      0005E0 AF BD            [24] 2550 	mov	r7,_P1MDIN
      0005E2 74 DF            [12] 2551 	mov	a,#0xDF
      0005E4 5F               [12] 2552 	anl	a,r7
      0005E5 F5 BD            [12] 2553 	mov	_P1MDIN,a
                           0005E7  2554 	C$lab6.c$106$1$122 ==.
                                   2555 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:106: P1MDOUT |= 0x0F;
      0005E7 43 A5 0F         [24] 2556 	orl	_P1MDOUT,#0x0F
                           0005EA  2557 	C$lab6.c$107$1$122 ==.
                                   2558 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:107: P1MDOUT &= 0x20;
      0005EA 53 A5 20         [24] 2559 	anl	_P1MDOUT,#0x20
                           0005ED  2560 	C$lab6.c$109$1$122 ==.
                                   2561 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:109: P1 		 = 0x20;
      0005ED 75 90 20         [24] 2562 	mov	_P1,#0x20
                           0005F0  2563 	C$lab6.c$112$1$122 ==.
                           0005F0  2564 	XG$Port_Init$0$0 ==.
      0005F0 22               [24] 2565 	ret
                                   2566 ;------------------------------------------------------------
                                   2567 ;Allocation info for local variables in function 'PCA_Init'
                                   2568 ;------------------------------------------------------------
                           0005F1  2569 	G$PCA_Init$0$0 ==.
                           0005F1  2570 	C$lab6.c$114$1$122 ==.
                                   2571 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:114: void PCA_Init(void)
                                   2572 ;	-----------------------------------------
                                   2573 ;	 function PCA_Init
                                   2574 ;	-----------------------------------------
      0005F1                       2575 _PCA_Init:
                           0005F1  2576 	C$lab6.c$116$1$124 ==.
                                   2577 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:116: PCA0MD   = 0x81;
      0005F1 75 D9 81         [24] 2578 	mov	_PCA0MD,#0x81
                           0005F4  2579 	C$lab6.c$117$1$124 ==.
                                   2580 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:117: PCA0CPM0 = 0xC2;    //CCM0 in 16-bit compare mode FOR STEERING
      0005F4 75 DA C2         [24] 2581 	mov	_PCA0CPM0,#0xC2
                           0005F7  2582 	C$lab6.c$118$1$124 ==.
                                   2583 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:118: PCA0CPM1 = 0xC2;
      0005F7 75 DB C2         [24] 2584 	mov	_PCA0CPM1,#0xC2
                           0005FA  2585 	C$lab6.c$119$1$124 ==.
                                   2586 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:119: PCA0CPM2 = 0xC2;    //CCM2 in 16-bit compare mode FOR MOTOR
      0005FA 75 DC C2         [24] 2587 	mov	_PCA0CPM2,#0xC2
                           0005FD  2588 	C$lab6.c$120$1$124 ==.
                                   2589 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:120: PCA0CN 	 = 0x40;    //Enable PCA counter
      0005FD 75 D8 40         [24] 2590 	mov	_PCA0CN,#0x40
                           000600  2591 	C$lab6.c$121$1$124 ==.
                                   2592 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:121: EIE1    |= 0x08;    //Enable PCA interrupt
      000600 43 E6 08         [24] 2593 	orl	_EIE1,#0x08
                           000603  2594 	C$lab6.c$122$1$124 ==.
                                   2595 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:122: EA       = 1   ;    //Enable global interrupts
      000603 D2 AF            [12] 2596 	setb	_EA
                           000605  2597 	C$lab6.c$123$1$124 ==.
                           000605  2598 	XG$PCA_Init$0$0 ==.
      000605 22               [24] 2599 	ret
                                   2600 ;------------------------------------------------------------
                                   2601 ;Allocation info for local variables in function 'XBR0_Init'
                                   2602 ;------------------------------------------------------------
                           000606  2603 	G$XBR0_Init$0$0 ==.
                           000606  2604 	C$lab6.c$126$1$124 ==.
                                   2605 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:126: void XBR0_Init(void)
                                   2606 ;	-----------------------------------------
                                   2607 ;	 function XBR0_Init
                                   2608 ;	-----------------------------------------
      000606                       2609 _XBR0_Init:
                           000606  2610 	C$lab6.c$128$1$126 ==.
                                   2611 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:128: XBR0 = 0x27;
      000606 75 E1 27         [24] 2612 	mov	_XBR0,#0x27
                           000609  2613 	C$lab6.c$129$1$126 ==.
                           000609  2614 	XG$XBR0_Init$0$0 ==.
      000609 22               [24] 2615 	ret
                                   2616 ;------------------------------------------------------------
                                   2617 ;Allocation info for local variables in function 'SMB_Init'
                                   2618 ;------------------------------------------------------------
                           00060A  2619 	G$SMB_Init$0$0 ==.
                           00060A  2620 	C$lab6.c$131$1$126 ==.
                                   2621 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:131: void SMB_Init(void)
                                   2622 ;	-----------------------------------------
                                   2623 ;	 function SMB_Init
                                   2624 ;	-----------------------------------------
      00060A                       2625 _SMB_Init:
                           00060A  2626 	C$lab6.c$133$1$128 ==.
                                   2627 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:133: SMB0CR =0x93;
      00060A 75 CF 93         [24] 2628 	mov	_SMB0CR,#0x93
                           00060D  2629 	C$lab6.c$134$1$128 ==.
                                   2630 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:134: ENSMB =1;
      00060D D2 C6            [12] 2631 	setb	_ENSMB
                           00060F  2632 	C$lab6.c$135$1$128 ==.
                           00060F  2633 	XG$SMB_Init$0$0 ==.
      00060F 22               [24] 2634 	ret
                                   2635 ;------------------------------------------------------------
                                   2636 ;Allocation info for local variables in function 'ADC_Init'
                                   2637 ;------------------------------------------------------------
                           000610  2638 	G$ADC_Init$0$0 ==.
                           000610  2639 	C$lab6.c$137$1$128 ==.
                                   2640 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:137: void ADC_Init(void)								/////SETS ADC 
                                   2641 ;	-----------------------------------------
                                   2642 ;	 function ADC_Init
                                   2643 ;	-----------------------------------------
      000610                       2644 _ADC_Init:
                           000610  2645 	C$lab6.c$139$1$130 ==.
                                   2646 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:139: REF0CN = 0x03;
      000610 75 D1 03         [24] 2647 	mov	_REF0CN,#0x03
                           000613  2648 	C$lab6.c$140$1$130 ==.
                                   2649 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:140: ADC1CN = 0x80;
      000613 75 AA 80         [24] 2650 	mov	_ADC1CN,#0x80
                           000616  2651 	C$lab6.c$141$1$130 ==.
                                   2652 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:141: ADC1CF |= 0x01;
      000616 43 AB 01         [24] 2653 	orl	_ADC1CF,#0x01
                           000619  2654 	C$lab6.c$142$1$130 ==.
                           000619  2655 	XG$ADC_Init$0$0 ==.
      000619 22               [24] 2656 	ret
                                   2657 ;------------------------------------------------------------
                                   2658 ;Allocation info for local variables in function 'PCA_ISR'
                                   2659 ;------------------------------------------------------------
                           00061A  2660 	G$PCA_ISR$0$0 ==.
                           00061A  2661 	C$lab6.c$144$1$130 ==.
                                   2662 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:144: void PCA_ISR ( void ) __interrupt 9
                                   2663 ;	-----------------------------------------
                                   2664 ;	 function PCA_ISR
                                   2665 ;	-----------------------------------------
      00061A                       2666 _PCA_ISR:
      00061A C0 E0            [24] 2667 	push	acc
      00061C C0 D0            [24] 2668 	push	psw
                           00061E  2669 	C$lab6.c$147$1$132 ==.
                                   2670 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:147: if (CF)
                           00061E  2671 	C$lab6.c$149$2$133 ==.
                                   2672 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:149: CF =0;
      00061E 10 DF 02         [24] 2673 	jbc	_CF,00108$
      000621 80 0E            [24] 2674 	sjmp	00102$
      000623                       2675 00108$:
                           000623  2676 	C$lab6.c$150$2$133 ==.
                                   2677 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:150: PCA0 = PCA_START;
      000623 75 E9 00         [24] 2678 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      000626 75 F9 70         [24] 2679 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           000629  2680 	C$lab6.c$151$2$133 ==.
                                   2681 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:151: count++;
      000629 05*10            [12] 2682 	inc	_count
      00062B E4               [12] 2683 	clr	a
      00062C B5*10 02         [24] 2684 	cjne	a,_count,00109$
      00062F 05*11            [12] 2685 	inc	(_count + 1)
      000631                       2686 00109$:
      000631                       2687 00102$:
                           000631  2688 	C$lab6.c$156$1$132 ==.
                                   2689 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:156: PCA0CN &= 0xC0;
      000631 53 D8 C0         [24] 2690 	anl	_PCA0CN,#0xC0
      000634 D0 D0            [24] 2691 	pop	psw
      000636 D0 E0            [24] 2692 	pop	acc
                           000638  2693 	C$lab6.c$157$1$132 ==.
                           000638  2694 	XG$PCA_ISR$0$0 ==.
      000638 32               [24] 2695 	reti
                                   2696 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2697 ;	eliminated unneeded push/pop dpl
                                   2698 ;	eliminated unneeded push/pop dph
                                   2699 ;	eliminated unneeded push/pop b
                                   2700 	.area CSEG    (CODE)
                                   2701 	.area CONST   (CODE)
                           000000  2702 Flab6$__str_0$0$0 == .
      000000                       2703 ___str_0:
      000000 0A                    2704 	.db 0x0A
      000001 54 79 70 65 20 64 69  2705 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    2706 	.db 0x00
                           000016  2707 Flab6$__str_1$0$0 == .
      000016                       2708 ___str_1:
      000016 20 20 20 20 20 25 63  2709 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    2710 	.db 0x00
                           000026  2711 Flab6$__str_2$0$0 == .
      000026                       2712 ___str_2:
      000026 25 63                 2713 	.ascii "%c"
      000028 00                    2714 	.db 0x00
                           000029  2715 Flab6$__str_3$0$0 == .
      000029                       2716 ___str_3:
      000029 0D                    2717 	.db 0x0D
      00002A 0A                    2718 	.db 0x0A
      00002B 25 75 20 6D 73        2719 	.ascii "%u ms"
      000030 00                    2720 	.db 0x00
                           000031  2721 Flab6$__str_4$0$0 == .
      000031                       2722 ___str_4:
      000031 43 61 6C 69 62 72 61  2723 	.ascii "Calibration:"
             74 69 6F 6E 3A
      00003D 0A                    2724 	.db 0x0A
      00003E 48 65 6C 6C 6F 20 77  2725 	.ascii "Hello world!"
             6F 72 6C 64 21
      00004A 0A                    2726 	.db 0x0A
      00004B 30 31 32 5F 33 34 35  2727 	.ascii "012_345_678:"
             5F 36 37 38 3A
      000057 0A                    2728 	.db 0x0A
      000058 61 62 63 20 64 65 66  2729 	.ascii "abc def ghij"
             20 67 68 69 6A
      000064 00                    2730 	.db 0x00
                           000065  2731 Flab6$__str_5$0$0 == .
      000065                       2732 ___str_5:
      000065 0D                    2733 	.db 0x0D
      000066 0A                    2734 	.db 0x0A
      000067 54 68 65 20 64 65 73  2735 	.ascii "The desired direction is: %d"
             69 72 65 64 20 64 69
             72 65 63 74 69 6F 6E
             20 69 73 3A 20 25 64
      000083 00                    2736 	.db 0x00
                                   2737 	.area XINIT   (CODE)
                                   2738 	.area CABS    (ABS,CODE)
