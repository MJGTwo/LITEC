                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Tue Apr 28 10:48:55 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module lab6
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _PCA_ISR
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _vsprintf
                                     20 	.globl _printf
                                     21 	.globl _BUS_SCL
                                     22 	.globl _BUS_TOE
                                     23 	.globl _BUS_FTE
                                     24 	.globl _BUS_AA
                                     25 	.globl _BUS_INT
                                     26 	.globl _BUS_STOP
                                     27 	.globl _BUS_START
                                     28 	.globl _BUS_EN
                                     29 	.globl _BUS_BUSY
                                     30 	.globl _SPIF
                                     31 	.globl _WCOL
                                     32 	.globl _MODF
                                     33 	.globl _RXOVRN
                                     34 	.globl _TXBSY
                                     35 	.globl _SLVSEL
                                     36 	.globl _MSTEN
                                     37 	.globl _SPIEN
                                     38 	.globl _AD0EN
                                     39 	.globl _ADCEN
                                     40 	.globl _AD0TM
                                     41 	.globl _ADCTM
                                     42 	.globl _AD0INT
                                     43 	.globl _ADCINT
                                     44 	.globl _AD0BUSY
                                     45 	.globl _ADBUSY
                                     46 	.globl _AD0CM1
                                     47 	.globl _ADSTM1
                                     48 	.globl _AD0CM0
                                     49 	.globl _ADSTM0
                                     50 	.globl _AD0WINT
                                     51 	.globl _ADWINT
                                     52 	.globl _AD0LJST
                                     53 	.globl _ADLJST
                                     54 	.globl _CF
                                     55 	.globl _CR
                                     56 	.globl _CCF4
                                     57 	.globl _CCF3
                                     58 	.globl _CCF2
                                     59 	.globl _CCF1
                                     60 	.globl _CCF0
                                     61 	.globl _CY
                                     62 	.globl _AC
                                     63 	.globl _F0
                                     64 	.globl _RS1
                                     65 	.globl _RS0
                                     66 	.globl _OV
                                     67 	.globl _F1
                                     68 	.globl _P
                                     69 	.globl _TF2
                                     70 	.globl _EXF2
                                     71 	.globl _RCLK
                                     72 	.globl _TCLK
                                     73 	.globl _EXEN2
                                     74 	.globl _TR2
                                     75 	.globl _CT2
                                     76 	.globl _CPRL2
                                     77 	.globl _BUSY
                                     78 	.globl _ENSMB
                                     79 	.globl _STA
                                     80 	.globl _STO
                                     81 	.globl _SI
                                     82 	.globl _AA
                                     83 	.globl _SMBFTE
                                     84 	.globl _SMBTOE
                                     85 	.globl _PT2
                                     86 	.globl _PS
                                     87 	.globl _PS0
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _P3_7
                                     93 	.globl _P3_6
                                     94 	.globl _P3_5
                                     95 	.globl _P3_4
                                     96 	.globl _P3_3
                                     97 	.globl _P3_2
                                     98 	.globl _P3_1
                                     99 	.globl _P3_0
                                    100 	.globl _EA
                                    101 	.globl _ET2
                                    102 	.globl _ES
                                    103 	.globl _ES0
                                    104 	.globl _ET1
                                    105 	.globl _EX1
                                    106 	.globl _ET0
                                    107 	.globl _EX0
                                    108 	.globl _P2_7
                                    109 	.globl _P2_6
                                    110 	.globl _P2_5
                                    111 	.globl _P2_4
                                    112 	.globl _P2_3
                                    113 	.globl _P2_2
                                    114 	.globl _P2_1
                                    115 	.globl _P2_0
                                    116 	.globl _S0MODE
                                    117 	.globl _SM00
                                    118 	.globl _SM0
                                    119 	.globl _SM10
                                    120 	.globl _SM1
                                    121 	.globl _MCE0
                                    122 	.globl _SM20
                                    123 	.globl _SM2
                                    124 	.globl _REN0
                                    125 	.globl _REN
                                    126 	.globl _TB80
                                    127 	.globl _TB8
                                    128 	.globl _RB80
                                    129 	.globl _RB8
                                    130 	.globl _TI0
                                    131 	.globl _TI
                                    132 	.globl _RI0
                                    133 	.globl _RI
                                    134 	.globl _P1_7
                                    135 	.globl _P1_6
                                    136 	.globl _P1_5
                                    137 	.globl _P1_4
                                    138 	.globl _P1_3
                                    139 	.globl _P1_2
                                    140 	.globl _P1_1
                                    141 	.globl _P1_0
                                    142 	.globl _TF1
                                    143 	.globl _TR1
                                    144 	.globl _TF0
                                    145 	.globl _TR0
                                    146 	.globl _IE1
                                    147 	.globl _IT1
                                    148 	.globl _IE0
                                    149 	.globl _IT0
                                    150 	.globl _P0_7
                                    151 	.globl _P0_6
                                    152 	.globl _P0_5
                                    153 	.globl _P0_4
                                    154 	.globl _P0_3
                                    155 	.globl _P0_2
                                    156 	.globl _P0_1
                                    157 	.globl _P0_0
                                    158 	.globl _PCA0CP4
                                    159 	.globl _PCA0CP3
                                    160 	.globl _PCA0CP2
                                    161 	.globl _PCA0CP1
                                    162 	.globl _PCA0CP0
                                    163 	.globl _PCA0
                                    164 	.globl _DAC1
                                    165 	.globl _DAC0
                                    166 	.globl _ADC0LT
                                    167 	.globl _ADC0GT
                                    168 	.globl _ADC0
                                    169 	.globl _RCAP4
                                    170 	.globl _TMR4
                                    171 	.globl _TMR3RL
                                    172 	.globl _TMR3
                                    173 	.globl _RCAP2
                                    174 	.globl _TMR2
                                    175 	.globl _TMR1
                                    176 	.globl _TMR0
                                    177 	.globl _WDTCN
                                    178 	.globl _PCA0CPH4
                                    179 	.globl _PCA0CPH3
                                    180 	.globl _PCA0CPH2
                                    181 	.globl _PCA0CPH1
                                    182 	.globl _PCA0CPH0
                                    183 	.globl _PCA0H
                                    184 	.globl _SPI0CN
                                    185 	.globl _EIP2
                                    186 	.globl _EIP1
                                    187 	.globl _TH4
                                    188 	.globl _TL4
                                    189 	.globl _SADDR1
                                    190 	.globl _SBUF1
                                    191 	.globl _SCON1
                                    192 	.globl _B
                                    193 	.globl _RSTSRC
                                    194 	.globl _PCA0CPL4
                                    195 	.globl _PCA0CPL3
                                    196 	.globl _PCA0CPL2
                                    197 	.globl _PCA0CPL1
                                    198 	.globl _PCA0CPL0
                                    199 	.globl _PCA0L
                                    200 	.globl _ADC0CN
                                    201 	.globl _EIE2
                                    202 	.globl _EIE1
                                    203 	.globl _RCAP4H
                                    204 	.globl _RCAP4L
                                    205 	.globl _XBR2
                                    206 	.globl _XBR1
                                    207 	.globl _XBR0
                                    208 	.globl _ACC
                                    209 	.globl _PCA0CPM4
                                    210 	.globl _PCA0CPM3
                                    211 	.globl _PCA0CPM2
                                    212 	.globl _PCA0CPM1
                                    213 	.globl _PCA0CPM0
                                    214 	.globl _PCA0MD
                                    215 	.globl _PCA0CN
                                    216 	.globl _DAC1CN
                                    217 	.globl _DAC1H
                                    218 	.globl _DAC1L
                                    219 	.globl _DAC0CN
                                    220 	.globl _DAC0H
                                    221 	.globl _DAC0L
                                    222 	.globl _REF0CN
                                    223 	.globl _PSW
                                    224 	.globl _SMB0CR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T4CON
                                    230 	.globl _T2CON
                                    231 	.globl _ADC0LTH
                                    232 	.globl _ADC0LTL
                                    233 	.globl _ADC0GTH
                                    234 	.globl _ADC0GTL
                                    235 	.globl _SMB0ADR
                                    236 	.globl _SMB0DAT
                                    237 	.globl _SMB0STA
                                    238 	.globl _SMB0CN
                                    239 	.globl _ADC0H
                                    240 	.globl _ADC0L
                                    241 	.globl _P1MDIN
                                    242 	.globl _ADC0CF
                                    243 	.globl _AMX0SL
                                    244 	.globl _AMX0CF
                                    245 	.globl _SADEN0
                                    246 	.globl _IP
                                    247 	.globl _FLACL
                                    248 	.globl _FLSCL
                                    249 	.globl _P74OUT
                                    250 	.globl _OSCICN
                                    251 	.globl _OSCXCN
                                    252 	.globl _P3
                                    253 	.globl __XPAGE
                                    254 	.globl _EMI0CN
                                    255 	.globl _SADEN1
                                    256 	.globl _P3IF
                                    257 	.globl _AMX1SL
                                    258 	.globl _ADC1CF
                                    259 	.globl _ADC1CN
                                    260 	.globl _SADDR0
                                    261 	.globl _IE
                                    262 	.globl _P3MDOUT
                                    263 	.globl _PRT3CF
                                    264 	.globl _P2MDOUT
                                    265 	.globl _PRT2CF
                                    266 	.globl _P1MDOUT
                                    267 	.globl _PRT1CF
                                    268 	.globl _P0MDOUT
                                    269 	.globl _PRT0CF
                                    270 	.globl _EMI0CF
                                    271 	.globl _EMI0TC
                                    272 	.globl _P2
                                    273 	.globl _CPT1CN
                                    274 	.globl _CPT0CN
                                    275 	.globl _SPI0CKR
                                    276 	.globl _ADC1
                                    277 	.globl _SPI0DAT
                                    278 	.globl _SPI0CFG
                                    279 	.globl _SBUF0
                                    280 	.globl _SBUF
                                    281 	.globl _SCON0
                                    282 	.globl _SCON
                                    283 	.globl _P7
                                    284 	.globl _TMR3H
                                    285 	.globl _TMR3L
                                    286 	.globl _TMR3RLH
                                    287 	.globl _TMR3RLL
                                    288 	.globl _TMR3CN
                                    289 	.globl _P1
                                    290 	.globl _PSCTL
                                    291 	.globl _CKCON
                                    292 	.globl _TH1
                                    293 	.globl _TH0
                                    294 	.globl _TL1
                                    295 	.globl _TL0
                                    296 	.globl _TMOD
                                    297 	.globl _TCON
                                    298 	.globl _PCON
                                    299 	.globl _P6
                                    300 	.globl _P5
                                    301 	.globl _P4
                                    302 	.globl _DPH
                                    303 	.globl _DPL
                                    304 	.globl _SP
                                    305 	.globl _P0
                                    306 	.globl _old_error
                                    307 	.globl _error
                                    308 	.globl _actual_D
                                    309 	.globl _desired_D
                                    310 	.globl _dratio
                                    311 	.globl _ratio
                                    312 	.globl _kd
                                    313 	.globl _kp
                                    314 	.globl _r_addr
                                    315 	.globl _r_data
                                    316 	.globl _offset
                                    317 	.globl _LTRST_lo_to_hi
                                    318 	.globl _RTRST_lo_to_hi
                                    319 	.globl _LTHRUST_PW
                                    320 	.globl _RTHRUST_PW
                                    321 	.globl _AGL_lo_to_hi
                                    322 	.globl _ANGLE_PW
                                    323 	.globl _RDR_lo_to_hi
                                    324 	.globl _RUDDER_PW
                                    325 	.globl _PW_DOWN_ANGLE
                                    326 	.globl _PW_CENTER_ANGLE
                                    327 	.globl _PW_UP_ANGLE
                                    328 	.globl _PW_RIGHT_RUDDER
                                    329 	.globl _PW_CENTER_RUDDER
                                    330 	.globl _PW_LEFT_RUDDER
                                    331 	.globl _PW_MAX_THRUST
                                    332 	.globl _PW_NUET_THRUST
                                    333 	.globl _PW_MIN_THRUST
                                    334 	.globl _count
                                    335 	.globl _i2c_read_data_PARM_4
                                    336 	.globl _i2c_read_data_PARM_3
                                    337 	.globl _i2c_read_data_PARM_2
                                    338 	.globl _i2c_write_data_PARM_4
                                    339 	.globl _i2c_write_data_PARM_3
                                    340 	.globl _i2c_write_data_PARM_2
                                    341 	.globl _putchar
                                    342 	.globl _getchar
                                    343 	.globl _lcd_print
                                    344 	.globl _lcd_clear
                                    345 	.globl _kpd_input
                                    346 	.globl _delay_time
                                    347 	.globl _i2c_start
                                    348 	.globl _i2c_write
                                    349 	.globl _i2c_write_and_stop
                                    350 	.globl _i2c_read
                                    351 	.globl _i2c_read_and_stop
                                    352 	.globl _i2c_write_data
                                    353 	.globl _i2c_read_data
                                    354 	.globl _Accel_Init
                                    355 	.globl _Calibrate
                                    356 	.globl _kpkd
                                    357 	.globl _Change_D
                                    358 	.globl _Read_Ranger
                                    359 	.globl _Steering_func
                                    360 	.globl _direction
                                    361 	.globl _ReadCompass
                                    362 	.globl _Rudder_cal
                                    363 	.globl _Angle_cal
                                    364 	.globl _Thrust_cal
                                    365 	.globl _Steering_Servo
                                    366 	.globl _start
                                    367 	.globl _wait
                                    368 	.globl _Port_Init
                                    369 	.globl _PCA_Init
                                    370 	.globl _XBR0_Init
                                    371 	.globl _SMB_Init
                                    372 	.globl _ADC_Init
                                    373 ;--------------------------------------------------------
                                    374 ; special function registers
                                    375 ;--------------------------------------------------------
                                    376 	.area RSEG    (ABS,DATA)
      000000                        377 	.org 0x0000
                           000080   378 G$P0$0$0 == 0x0080
                           000080   379 _P0	=	0x0080
                           000081   380 G$SP$0$0 == 0x0081
                           000081   381 _SP	=	0x0081
                           000082   382 G$DPL$0$0 == 0x0082
                           000082   383 _DPL	=	0x0082
                           000083   384 G$DPH$0$0 == 0x0083
                           000083   385 _DPH	=	0x0083
                           000084   386 G$P4$0$0 == 0x0084
                           000084   387 _P4	=	0x0084
                           000085   388 G$P5$0$0 == 0x0085
                           000085   389 _P5	=	0x0085
                           000086   390 G$P6$0$0 == 0x0086
                           000086   391 _P6	=	0x0086
                           000087   392 G$PCON$0$0 == 0x0087
                           000087   393 _PCON	=	0x0087
                           000088   394 G$TCON$0$0 == 0x0088
                           000088   395 _TCON	=	0x0088
                           000089   396 G$TMOD$0$0 == 0x0089
                           000089   397 _TMOD	=	0x0089
                           00008A   398 G$TL0$0$0 == 0x008a
                           00008A   399 _TL0	=	0x008a
                           00008B   400 G$TL1$0$0 == 0x008b
                           00008B   401 _TL1	=	0x008b
                           00008C   402 G$TH0$0$0 == 0x008c
                           00008C   403 _TH0	=	0x008c
                           00008D   404 G$TH1$0$0 == 0x008d
                           00008D   405 _TH1	=	0x008d
                           00008E   406 G$CKCON$0$0 == 0x008e
                           00008E   407 _CKCON	=	0x008e
                           00008F   408 G$PSCTL$0$0 == 0x008f
                           00008F   409 _PSCTL	=	0x008f
                           000090   410 G$P1$0$0 == 0x0090
                           000090   411 _P1	=	0x0090
                           000091   412 G$TMR3CN$0$0 == 0x0091
                           000091   413 _TMR3CN	=	0x0091
                           000092   414 G$TMR3RLL$0$0 == 0x0092
                           000092   415 _TMR3RLL	=	0x0092
                           000093   416 G$TMR3RLH$0$0 == 0x0093
                           000093   417 _TMR3RLH	=	0x0093
                           000094   418 G$TMR3L$0$0 == 0x0094
                           000094   419 _TMR3L	=	0x0094
                           000095   420 G$TMR3H$0$0 == 0x0095
                           000095   421 _TMR3H	=	0x0095
                           000096   422 G$P7$0$0 == 0x0096
                           000096   423 _P7	=	0x0096
                           000098   424 G$SCON$0$0 == 0x0098
                           000098   425 _SCON	=	0x0098
                           000098   426 G$SCON0$0$0 == 0x0098
                           000098   427 _SCON0	=	0x0098
                           000099   428 G$SBUF$0$0 == 0x0099
                           000099   429 _SBUF	=	0x0099
                           000099   430 G$SBUF0$0$0 == 0x0099
                           000099   431 _SBUF0	=	0x0099
                           00009A   432 G$SPI0CFG$0$0 == 0x009a
                           00009A   433 _SPI0CFG	=	0x009a
                           00009B   434 G$SPI0DAT$0$0 == 0x009b
                           00009B   435 _SPI0DAT	=	0x009b
                           00009C   436 G$ADC1$0$0 == 0x009c
                           00009C   437 _ADC1	=	0x009c
                           00009D   438 G$SPI0CKR$0$0 == 0x009d
                           00009D   439 _SPI0CKR	=	0x009d
                           00009E   440 G$CPT0CN$0$0 == 0x009e
                           00009E   441 _CPT0CN	=	0x009e
                           00009F   442 G$CPT1CN$0$0 == 0x009f
                           00009F   443 _CPT1CN	=	0x009f
                           0000A0   444 G$P2$0$0 == 0x00a0
                           0000A0   445 _P2	=	0x00a0
                           0000A1   446 G$EMI0TC$0$0 == 0x00a1
                           0000A1   447 _EMI0TC	=	0x00a1
                           0000A3   448 G$EMI0CF$0$0 == 0x00a3
                           0000A3   449 _EMI0CF	=	0x00a3
                           0000A4   450 G$PRT0CF$0$0 == 0x00a4
                           0000A4   451 _PRT0CF	=	0x00a4
                           0000A4   452 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   453 _P0MDOUT	=	0x00a4
                           0000A5   454 G$PRT1CF$0$0 == 0x00a5
                           0000A5   455 _PRT1CF	=	0x00a5
                           0000A5   456 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   457 _P1MDOUT	=	0x00a5
                           0000A6   458 G$PRT2CF$0$0 == 0x00a6
                           0000A6   459 _PRT2CF	=	0x00a6
                           0000A6   460 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   461 _P2MDOUT	=	0x00a6
                           0000A7   462 G$PRT3CF$0$0 == 0x00a7
                           0000A7   463 _PRT3CF	=	0x00a7
                           0000A7   464 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   465 _P3MDOUT	=	0x00a7
                           0000A8   466 G$IE$0$0 == 0x00a8
                           0000A8   467 _IE	=	0x00a8
                           0000A9   468 G$SADDR0$0$0 == 0x00a9
                           0000A9   469 _SADDR0	=	0x00a9
                           0000AA   470 G$ADC1CN$0$0 == 0x00aa
                           0000AA   471 _ADC1CN	=	0x00aa
                           0000AB   472 G$ADC1CF$0$0 == 0x00ab
                           0000AB   473 _ADC1CF	=	0x00ab
                           0000AC   474 G$AMX1SL$0$0 == 0x00ac
                           0000AC   475 _AMX1SL	=	0x00ac
                           0000AD   476 G$P3IF$0$0 == 0x00ad
                           0000AD   477 _P3IF	=	0x00ad
                           0000AE   478 G$SADEN1$0$0 == 0x00ae
                           0000AE   479 _SADEN1	=	0x00ae
                           0000AF   480 G$EMI0CN$0$0 == 0x00af
                           0000AF   481 _EMI0CN	=	0x00af
                           0000AF   482 G$_XPAGE$0$0 == 0x00af
                           0000AF   483 __XPAGE	=	0x00af
                           0000B0   484 G$P3$0$0 == 0x00b0
                           0000B0   485 _P3	=	0x00b0
                           0000B1   486 G$OSCXCN$0$0 == 0x00b1
                           0000B1   487 _OSCXCN	=	0x00b1
                           0000B2   488 G$OSCICN$0$0 == 0x00b2
                           0000B2   489 _OSCICN	=	0x00b2
                           0000B5   490 G$P74OUT$0$0 == 0x00b5
                           0000B5   491 _P74OUT	=	0x00b5
                           0000B6   492 G$FLSCL$0$0 == 0x00b6
                           0000B6   493 _FLSCL	=	0x00b6
                           0000B7   494 G$FLACL$0$0 == 0x00b7
                           0000B7   495 _FLACL	=	0x00b7
                           0000B8   496 G$IP$0$0 == 0x00b8
                           0000B8   497 _IP	=	0x00b8
                           0000B9   498 G$SADEN0$0$0 == 0x00b9
                           0000B9   499 _SADEN0	=	0x00b9
                           0000BA   500 G$AMX0CF$0$0 == 0x00ba
                           0000BA   501 _AMX0CF	=	0x00ba
                           0000BB   502 G$AMX0SL$0$0 == 0x00bb
                           0000BB   503 _AMX0SL	=	0x00bb
                           0000BC   504 G$ADC0CF$0$0 == 0x00bc
                           0000BC   505 _ADC0CF	=	0x00bc
                           0000BD   506 G$P1MDIN$0$0 == 0x00bd
                           0000BD   507 _P1MDIN	=	0x00bd
                           0000BE   508 G$ADC0L$0$0 == 0x00be
                           0000BE   509 _ADC0L	=	0x00be
                           0000BF   510 G$ADC0H$0$0 == 0x00bf
                           0000BF   511 _ADC0H	=	0x00bf
                           0000C0   512 G$SMB0CN$0$0 == 0x00c0
                           0000C0   513 _SMB0CN	=	0x00c0
                           0000C1   514 G$SMB0STA$0$0 == 0x00c1
                           0000C1   515 _SMB0STA	=	0x00c1
                           0000C2   516 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   517 _SMB0DAT	=	0x00c2
                           0000C3   518 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   519 _SMB0ADR	=	0x00c3
                           0000C4   520 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   521 _ADC0GTL	=	0x00c4
                           0000C5   522 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   523 _ADC0GTH	=	0x00c5
                           0000C6   524 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   525 _ADC0LTL	=	0x00c6
                           0000C7   526 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   527 _ADC0LTH	=	0x00c7
                           0000C8   528 G$T2CON$0$0 == 0x00c8
                           0000C8   529 _T2CON	=	0x00c8
                           0000C9   530 G$T4CON$0$0 == 0x00c9
                           0000C9   531 _T4CON	=	0x00c9
                           0000CA   532 G$RCAP2L$0$0 == 0x00ca
                           0000CA   533 _RCAP2L	=	0x00ca
                           0000CB   534 G$RCAP2H$0$0 == 0x00cb
                           0000CB   535 _RCAP2H	=	0x00cb
                           0000CC   536 G$TL2$0$0 == 0x00cc
                           0000CC   537 _TL2	=	0x00cc
                           0000CD   538 G$TH2$0$0 == 0x00cd
                           0000CD   539 _TH2	=	0x00cd
                           0000CF   540 G$SMB0CR$0$0 == 0x00cf
                           0000CF   541 _SMB0CR	=	0x00cf
                           0000D0   542 G$PSW$0$0 == 0x00d0
                           0000D0   543 _PSW	=	0x00d0
                           0000D1   544 G$REF0CN$0$0 == 0x00d1
                           0000D1   545 _REF0CN	=	0x00d1
                           0000D2   546 G$DAC0L$0$0 == 0x00d2
                           0000D2   547 _DAC0L	=	0x00d2
                           0000D3   548 G$DAC0H$0$0 == 0x00d3
                           0000D3   549 _DAC0H	=	0x00d3
                           0000D4   550 G$DAC0CN$0$0 == 0x00d4
                           0000D4   551 _DAC0CN	=	0x00d4
                           0000D5   552 G$DAC1L$0$0 == 0x00d5
                           0000D5   553 _DAC1L	=	0x00d5
                           0000D6   554 G$DAC1H$0$0 == 0x00d6
                           0000D6   555 _DAC1H	=	0x00d6
                           0000D7   556 G$DAC1CN$0$0 == 0x00d7
                           0000D7   557 _DAC1CN	=	0x00d7
                           0000D8   558 G$PCA0CN$0$0 == 0x00d8
                           0000D8   559 _PCA0CN	=	0x00d8
                           0000D9   560 G$PCA0MD$0$0 == 0x00d9
                           0000D9   561 _PCA0MD	=	0x00d9
                           0000DA   562 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   563 _PCA0CPM0	=	0x00da
                           0000DB   564 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   565 _PCA0CPM1	=	0x00db
                           0000DC   566 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   567 _PCA0CPM2	=	0x00dc
                           0000DD   568 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   569 _PCA0CPM3	=	0x00dd
                           0000DE   570 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   571 _PCA0CPM4	=	0x00de
                           0000E0   572 G$ACC$0$0 == 0x00e0
                           0000E0   573 _ACC	=	0x00e0
                           0000E1   574 G$XBR0$0$0 == 0x00e1
                           0000E1   575 _XBR0	=	0x00e1
                           0000E2   576 G$XBR1$0$0 == 0x00e2
                           0000E2   577 _XBR1	=	0x00e2
                           0000E3   578 G$XBR2$0$0 == 0x00e3
                           0000E3   579 _XBR2	=	0x00e3
                           0000E4   580 G$RCAP4L$0$0 == 0x00e4
                           0000E4   581 _RCAP4L	=	0x00e4
                           0000E5   582 G$RCAP4H$0$0 == 0x00e5
                           0000E5   583 _RCAP4H	=	0x00e5
                           0000E6   584 G$EIE1$0$0 == 0x00e6
                           0000E6   585 _EIE1	=	0x00e6
                           0000E7   586 G$EIE2$0$0 == 0x00e7
                           0000E7   587 _EIE2	=	0x00e7
                           0000E8   588 G$ADC0CN$0$0 == 0x00e8
                           0000E8   589 _ADC0CN	=	0x00e8
                           0000E9   590 G$PCA0L$0$0 == 0x00e9
                           0000E9   591 _PCA0L	=	0x00e9
                           0000EA   592 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   593 _PCA0CPL0	=	0x00ea
                           0000EB   594 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   595 _PCA0CPL1	=	0x00eb
                           0000EC   596 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   597 _PCA0CPL2	=	0x00ec
                           0000ED   598 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   599 _PCA0CPL3	=	0x00ed
                           0000EE   600 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   601 _PCA0CPL4	=	0x00ee
                           0000EF   602 G$RSTSRC$0$0 == 0x00ef
                           0000EF   603 _RSTSRC	=	0x00ef
                           0000F0   604 G$B$0$0 == 0x00f0
                           0000F0   605 _B	=	0x00f0
                           0000F1   606 G$SCON1$0$0 == 0x00f1
                           0000F1   607 _SCON1	=	0x00f1
                           0000F2   608 G$SBUF1$0$0 == 0x00f2
                           0000F2   609 _SBUF1	=	0x00f2
                           0000F3   610 G$SADDR1$0$0 == 0x00f3
                           0000F3   611 _SADDR1	=	0x00f3
                           0000F4   612 G$TL4$0$0 == 0x00f4
                           0000F4   613 _TL4	=	0x00f4
                           0000F5   614 G$TH4$0$0 == 0x00f5
                           0000F5   615 _TH4	=	0x00f5
                           0000F6   616 G$EIP1$0$0 == 0x00f6
                           0000F6   617 _EIP1	=	0x00f6
                           0000F7   618 G$EIP2$0$0 == 0x00f7
                           0000F7   619 _EIP2	=	0x00f7
                           0000F8   620 G$SPI0CN$0$0 == 0x00f8
                           0000F8   621 _SPI0CN	=	0x00f8
                           0000F9   622 G$PCA0H$0$0 == 0x00f9
                           0000F9   623 _PCA0H	=	0x00f9
                           0000FA   624 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   625 _PCA0CPH0	=	0x00fa
                           0000FB   626 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   627 _PCA0CPH1	=	0x00fb
                           0000FC   628 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   629 _PCA0CPH2	=	0x00fc
                           0000FD   630 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   631 _PCA0CPH3	=	0x00fd
                           0000FE   632 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   633 _PCA0CPH4	=	0x00fe
                           0000FF   634 G$WDTCN$0$0 == 0x00ff
                           0000FF   635 _WDTCN	=	0x00ff
                           008C8A   636 G$TMR0$0$0 == 0x8c8a
                           008C8A   637 _TMR0	=	0x8c8a
                           008D8B   638 G$TMR1$0$0 == 0x8d8b
                           008D8B   639 _TMR1	=	0x8d8b
                           00CDCC   640 G$TMR2$0$0 == 0xcdcc
                           00CDCC   641 _TMR2	=	0xcdcc
                           00CBCA   642 G$RCAP2$0$0 == 0xcbca
                           00CBCA   643 _RCAP2	=	0xcbca
                           009594   644 G$TMR3$0$0 == 0x9594
                           009594   645 _TMR3	=	0x9594
                           009392   646 G$TMR3RL$0$0 == 0x9392
                           009392   647 _TMR3RL	=	0x9392
                           00F5F4   648 G$TMR4$0$0 == 0xf5f4
                           00F5F4   649 _TMR4	=	0xf5f4
                           00E5E4   650 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   651 _RCAP4	=	0xe5e4
                           00BFBE   652 G$ADC0$0$0 == 0xbfbe
                           00BFBE   653 _ADC0	=	0xbfbe
                           00C5C4   654 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   655 _ADC0GT	=	0xc5c4
                           00C7C6   656 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   657 _ADC0LT	=	0xc7c6
                           00D3D2   658 G$DAC0$0$0 == 0xd3d2
                           00D3D2   659 _DAC0	=	0xd3d2
                           00D6D5   660 G$DAC1$0$0 == 0xd6d5
                           00D6D5   661 _DAC1	=	0xd6d5
                           00F9E9   662 G$PCA0$0$0 == 0xf9e9
                           00F9E9   663 _PCA0	=	0xf9e9
                           00FAEA   664 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   665 _PCA0CP0	=	0xfaea
                           00FBEB   666 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   667 _PCA0CP1	=	0xfbeb
                           00FCEC   668 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   669 _PCA0CP2	=	0xfcec
                           00FDED   670 G$PCA0CP3$0$0 == 0xfded
                           00FDED   671 _PCA0CP3	=	0xfded
                           00FEEE   672 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   673 _PCA0CP4	=	0xfeee
                                    674 ;--------------------------------------------------------
                                    675 ; special function bits
                                    676 ;--------------------------------------------------------
                                    677 	.area RSEG    (ABS,DATA)
      000000                        678 	.org 0x0000
                           000080   679 G$P0_0$0$0 == 0x0080
                           000080   680 _P0_0	=	0x0080
                           000081   681 G$P0_1$0$0 == 0x0081
                           000081   682 _P0_1	=	0x0081
                           000082   683 G$P0_2$0$0 == 0x0082
                           000082   684 _P0_2	=	0x0082
                           000083   685 G$P0_3$0$0 == 0x0083
                           000083   686 _P0_3	=	0x0083
                           000084   687 G$P0_4$0$0 == 0x0084
                           000084   688 _P0_4	=	0x0084
                           000085   689 G$P0_5$0$0 == 0x0085
                           000085   690 _P0_5	=	0x0085
                           000086   691 G$P0_6$0$0 == 0x0086
                           000086   692 _P0_6	=	0x0086
                           000087   693 G$P0_7$0$0 == 0x0087
                           000087   694 _P0_7	=	0x0087
                           000088   695 G$IT0$0$0 == 0x0088
                           000088   696 _IT0	=	0x0088
                           000089   697 G$IE0$0$0 == 0x0089
                           000089   698 _IE0	=	0x0089
                           00008A   699 G$IT1$0$0 == 0x008a
                           00008A   700 _IT1	=	0x008a
                           00008B   701 G$IE1$0$0 == 0x008b
                           00008B   702 _IE1	=	0x008b
                           00008C   703 G$TR0$0$0 == 0x008c
                           00008C   704 _TR0	=	0x008c
                           00008D   705 G$TF0$0$0 == 0x008d
                           00008D   706 _TF0	=	0x008d
                           00008E   707 G$TR1$0$0 == 0x008e
                           00008E   708 _TR1	=	0x008e
                           00008F   709 G$TF1$0$0 == 0x008f
                           00008F   710 _TF1	=	0x008f
                           000090   711 G$P1_0$0$0 == 0x0090
                           000090   712 _P1_0	=	0x0090
                           000091   713 G$P1_1$0$0 == 0x0091
                           000091   714 _P1_1	=	0x0091
                           000092   715 G$P1_2$0$0 == 0x0092
                           000092   716 _P1_2	=	0x0092
                           000093   717 G$P1_3$0$0 == 0x0093
                           000093   718 _P1_3	=	0x0093
                           000094   719 G$P1_4$0$0 == 0x0094
                           000094   720 _P1_4	=	0x0094
                           000095   721 G$P1_5$0$0 == 0x0095
                           000095   722 _P1_5	=	0x0095
                           000096   723 G$P1_6$0$0 == 0x0096
                           000096   724 _P1_6	=	0x0096
                           000097   725 G$P1_7$0$0 == 0x0097
                           000097   726 _P1_7	=	0x0097
                           000098   727 G$RI$0$0 == 0x0098
                           000098   728 _RI	=	0x0098
                           000098   729 G$RI0$0$0 == 0x0098
                           000098   730 _RI0	=	0x0098
                           000099   731 G$TI$0$0 == 0x0099
                           000099   732 _TI	=	0x0099
                           000099   733 G$TI0$0$0 == 0x0099
                           000099   734 _TI0	=	0x0099
                           00009A   735 G$RB8$0$0 == 0x009a
                           00009A   736 _RB8	=	0x009a
                           00009A   737 G$RB80$0$0 == 0x009a
                           00009A   738 _RB80	=	0x009a
                           00009B   739 G$TB8$0$0 == 0x009b
                           00009B   740 _TB8	=	0x009b
                           00009B   741 G$TB80$0$0 == 0x009b
                           00009B   742 _TB80	=	0x009b
                           00009C   743 G$REN$0$0 == 0x009c
                           00009C   744 _REN	=	0x009c
                           00009C   745 G$REN0$0$0 == 0x009c
                           00009C   746 _REN0	=	0x009c
                           00009D   747 G$SM2$0$0 == 0x009d
                           00009D   748 _SM2	=	0x009d
                           00009D   749 G$SM20$0$0 == 0x009d
                           00009D   750 _SM20	=	0x009d
                           00009D   751 G$MCE0$0$0 == 0x009d
                           00009D   752 _MCE0	=	0x009d
                           00009E   753 G$SM1$0$0 == 0x009e
                           00009E   754 _SM1	=	0x009e
                           00009E   755 G$SM10$0$0 == 0x009e
                           00009E   756 _SM10	=	0x009e
                           00009F   757 G$SM0$0$0 == 0x009f
                           00009F   758 _SM0	=	0x009f
                           00009F   759 G$SM00$0$0 == 0x009f
                           00009F   760 _SM00	=	0x009f
                           00009F   761 G$S0MODE$0$0 == 0x009f
                           00009F   762 _S0MODE	=	0x009f
                           0000A0   763 G$P2_0$0$0 == 0x00a0
                           0000A0   764 _P2_0	=	0x00a0
                           0000A1   765 G$P2_1$0$0 == 0x00a1
                           0000A1   766 _P2_1	=	0x00a1
                           0000A2   767 G$P2_2$0$0 == 0x00a2
                           0000A2   768 _P2_2	=	0x00a2
                           0000A3   769 G$P2_3$0$0 == 0x00a3
                           0000A3   770 _P2_3	=	0x00a3
                           0000A4   771 G$P2_4$0$0 == 0x00a4
                           0000A4   772 _P2_4	=	0x00a4
                           0000A5   773 G$P2_5$0$0 == 0x00a5
                           0000A5   774 _P2_5	=	0x00a5
                           0000A6   775 G$P2_6$0$0 == 0x00a6
                           0000A6   776 _P2_6	=	0x00a6
                           0000A7   777 G$P2_7$0$0 == 0x00a7
                           0000A7   778 _P2_7	=	0x00a7
                           0000A8   779 G$EX0$0$0 == 0x00a8
                           0000A8   780 _EX0	=	0x00a8
                           0000A9   781 G$ET0$0$0 == 0x00a9
                           0000A9   782 _ET0	=	0x00a9
                           0000AA   783 G$EX1$0$0 == 0x00aa
                           0000AA   784 _EX1	=	0x00aa
                           0000AB   785 G$ET1$0$0 == 0x00ab
                           0000AB   786 _ET1	=	0x00ab
                           0000AC   787 G$ES0$0$0 == 0x00ac
                           0000AC   788 _ES0	=	0x00ac
                           0000AC   789 G$ES$0$0 == 0x00ac
                           0000AC   790 _ES	=	0x00ac
                           0000AD   791 G$ET2$0$0 == 0x00ad
                           0000AD   792 _ET2	=	0x00ad
                           0000AF   793 G$EA$0$0 == 0x00af
                           0000AF   794 _EA	=	0x00af
                           0000B0   795 G$P3_0$0$0 == 0x00b0
                           0000B0   796 _P3_0	=	0x00b0
                           0000B1   797 G$P3_1$0$0 == 0x00b1
                           0000B1   798 _P3_1	=	0x00b1
                           0000B2   799 G$P3_2$0$0 == 0x00b2
                           0000B2   800 _P3_2	=	0x00b2
                           0000B3   801 G$P3_3$0$0 == 0x00b3
                           0000B3   802 _P3_3	=	0x00b3
                           0000B4   803 G$P3_4$0$0 == 0x00b4
                           0000B4   804 _P3_4	=	0x00b4
                           0000B5   805 G$P3_5$0$0 == 0x00b5
                           0000B5   806 _P3_5	=	0x00b5
                           0000B6   807 G$P3_6$0$0 == 0x00b6
                           0000B6   808 _P3_6	=	0x00b6
                           0000B7   809 G$P3_7$0$0 == 0x00b7
                           0000B7   810 _P3_7	=	0x00b7
                           0000B8   811 G$PX0$0$0 == 0x00b8
                           0000B8   812 _PX0	=	0x00b8
                           0000B9   813 G$PT0$0$0 == 0x00b9
                           0000B9   814 _PT0	=	0x00b9
                           0000BA   815 G$PX1$0$0 == 0x00ba
                           0000BA   816 _PX1	=	0x00ba
                           0000BB   817 G$PT1$0$0 == 0x00bb
                           0000BB   818 _PT1	=	0x00bb
                           0000BC   819 G$PS0$0$0 == 0x00bc
                           0000BC   820 _PS0	=	0x00bc
                           0000BC   821 G$PS$0$0 == 0x00bc
                           0000BC   822 _PS	=	0x00bc
                           0000BD   823 G$PT2$0$0 == 0x00bd
                           0000BD   824 _PT2	=	0x00bd
                           0000C0   825 G$SMBTOE$0$0 == 0x00c0
                           0000C0   826 _SMBTOE	=	0x00c0
                           0000C1   827 G$SMBFTE$0$0 == 0x00c1
                           0000C1   828 _SMBFTE	=	0x00c1
                           0000C2   829 G$AA$0$0 == 0x00c2
                           0000C2   830 _AA	=	0x00c2
                           0000C3   831 G$SI$0$0 == 0x00c3
                           0000C3   832 _SI	=	0x00c3
                           0000C4   833 G$STO$0$0 == 0x00c4
                           0000C4   834 _STO	=	0x00c4
                           0000C5   835 G$STA$0$0 == 0x00c5
                           0000C5   836 _STA	=	0x00c5
                           0000C6   837 G$ENSMB$0$0 == 0x00c6
                           0000C6   838 _ENSMB	=	0x00c6
                           0000C7   839 G$BUSY$0$0 == 0x00c7
                           0000C7   840 _BUSY	=	0x00c7
                           0000C8   841 G$CPRL2$0$0 == 0x00c8
                           0000C8   842 _CPRL2	=	0x00c8
                           0000C9   843 G$CT2$0$0 == 0x00c9
                           0000C9   844 _CT2	=	0x00c9
                           0000CA   845 G$TR2$0$0 == 0x00ca
                           0000CA   846 _TR2	=	0x00ca
                           0000CB   847 G$EXEN2$0$0 == 0x00cb
                           0000CB   848 _EXEN2	=	0x00cb
                           0000CC   849 G$TCLK$0$0 == 0x00cc
                           0000CC   850 _TCLK	=	0x00cc
                           0000CD   851 G$RCLK$0$0 == 0x00cd
                           0000CD   852 _RCLK	=	0x00cd
                           0000CE   853 G$EXF2$0$0 == 0x00ce
                           0000CE   854 _EXF2	=	0x00ce
                           0000CF   855 G$TF2$0$0 == 0x00cf
                           0000CF   856 _TF2	=	0x00cf
                           0000D0   857 G$P$0$0 == 0x00d0
                           0000D0   858 _P	=	0x00d0
                           0000D1   859 G$F1$0$0 == 0x00d1
                           0000D1   860 _F1	=	0x00d1
                           0000D2   861 G$OV$0$0 == 0x00d2
                           0000D2   862 _OV	=	0x00d2
                           0000D3   863 G$RS0$0$0 == 0x00d3
                           0000D3   864 _RS0	=	0x00d3
                           0000D4   865 G$RS1$0$0 == 0x00d4
                           0000D4   866 _RS1	=	0x00d4
                           0000D5   867 G$F0$0$0 == 0x00d5
                           0000D5   868 _F0	=	0x00d5
                           0000D6   869 G$AC$0$0 == 0x00d6
                           0000D6   870 _AC	=	0x00d6
                           0000D7   871 G$CY$0$0 == 0x00d7
                           0000D7   872 _CY	=	0x00d7
                           0000D8   873 G$CCF0$0$0 == 0x00d8
                           0000D8   874 _CCF0	=	0x00d8
                           0000D9   875 G$CCF1$0$0 == 0x00d9
                           0000D9   876 _CCF1	=	0x00d9
                           0000DA   877 G$CCF2$0$0 == 0x00da
                           0000DA   878 _CCF2	=	0x00da
                           0000DB   879 G$CCF3$0$0 == 0x00db
                           0000DB   880 _CCF3	=	0x00db
                           0000DC   881 G$CCF4$0$0 == 0x00dc
                           0000DC   882 _CCF4	=	0x00dc
                           0000DE   883 G$CR$0$0 == 0x00de
                           0000DE   884 _CR	=	0x00de
                           0000DF   885 G$CF$0$0 == 0x00df
                           0000DF   886 _CF	=	0x00df
                           0000E8   887 G$ADLJST$0$0 == 0x00e8
                           0000E8   888 _ADLJST	=	0x00e8
                           0000E8   889 G$AD0LJST$0$0 == 0x00e8
                           0000E8   890 _AD0LJST	=	0x00e8
                           0000E9   891 G$ADWINT$0$0 == 0x00e9
                           0000E9   892 _ADWINT	=	0x00e9
                           0000E9   893 G$AD0WINT$0$0 == 0x00e9
                           0000E9   894 _AD0WINT	=	0x00e9
                           0000EA   895 G$ADSTM0$0$0 == 0x00ea
                           0000EA   896 _ADSTM0	=	0x00ea
                           0000EA   897 G$AD0CM0$0$0 == 0x00ea
                           0000EA   898 _AD0CM0	=	0x00ea
                           0000EB   899 G$ADSTM1$0$0 == 0x00eb
                           0000EB   900 _ADSTM1	=	0x00eb
                           0000EB   901 G$AD0CM1$0$0 == 0x00eb
                           0000EB   902 _AD0CM1	=	0x00eb
                           0000EC   903 G$ADBUSY$0$0 == 0x00ec
                           0000EC   904 _ADBUSY	=	0x00ec
                           0000EC   905 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   906 _AD0BUSY	=	0x00ec
                           0000ED   907 G$ADCINT$0$0 == 0x00ed
                           0000ED   908 _ADCINT	=	0x00ed
                           0000ED   909 G$AD0INT$0$0 == 0x00ed
                           0000ED   910 _AD0INT	=	0x00ed
                           0000EE   911 G$ADCTM$0$0 == 0x00ee
                           0000EE   912 _ADCTM	=	0x00ee
                           0000EE   913 G$AD0TM$0$0 == 0x00ee
                           0000EE   914 _AD0TM	=	0x00ee
                           0000EF   915 G$ADCEN$0$0 == 0x00ef
                           0000EF   916 _ADCEN	=	0x00ef
                           0000EF   917 G$AD0EN$0$0 == 0x00ef
                           0000EF   918 _AD0EN	=	0x00ef
                           0000F8   919 G$SPIEN$0$0 == 0x00f8
                           0000F8   920 _SPIEN	=	0x00f8
                           0000F9   921 G$MSTEN$0$0 == 0x00f9
                           0000F9   922 _MSTEN	=	0x00f9
                           0000FA   923 G$SLVSEL$0$0 == 0x00fa
                           0000FA   924 _SLVSEL	=	0x00fa
                           0000FB   925 G$TXBSY$0$0 == 0x00fb
                           0000FB   926 _TXBSY	=	0x00fb
                           0000FC   927 G$RXOVRN$0$0 == 0x00fc
                           0000FC   928 _RXOVRN	=	0x00fc
                           0000FD   929 G$MODF$0$0 == 0x00fd
                           0000FD   930 _MODF	=	0x00fd
                           0000FE   931 G$WCOL$0$0 == 0x00fe
                           0000FE   932 _WCOL	=	0x00fe
                           0000FF   933 G$SPIF$0$0 == 0x00ff
                           0000FF   934 _SPIF	=	0x00ff
                           0000C7   935 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   936 _BUS_BUSY	=	0x00c7
                           0000C6   937 G$BUS_EN$0$0 == 0x00c6
                           0000C6   938 _BUS_EN	=	0x00c6
                           0000C5   939 G$BUS_START$0$0 == 0x00c5
                           0000C5   940 _BUS_START	=	0x00c5
                           0000C4   941 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   942 _BUS_STOP	=	0x00c4
                           0000C3   943 G$BUS_INT$0$0 == 0x00c3
                           0000C3   944 _BUS_INT	=	0x00c3
                           0000C2   945 G$BUS_AA$0$0 == 0x00c2
                           0000C2   946 _BUS_AA	=	0x00c2
                           0000C1   947 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   948 _BUS_FTE	=	0x00c1
                           0000C0   949 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   950 _BUS_TOE	=	0x00c0
                           000083   951 G$BUS_SCL$0$0 == 0x0083
                           000083   952 _BUS_SCL	=	0x0083
                                    953 ;--------------------------------------------------------
                                    954 ; overlayable register banks
                                    955 ;--------------------------------------------------------
                                    956 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        957 	.ds 8
                                    958 ;--------------------------------------------------------
                                    959 ; internal ram data
                                    960 ;--------------------------------------------------------
                                    961 	.area DSEG    (DATA)
                           000000   962 Llab6.lcd_clear$NumBytes$1$77==.
      000000                        963 _lcd_clear_NumBytes_1_77:
      000000                        964 	.ds 1
                           000001   965 Llab6.lcd_clear$Cmd$1$77==.
      000001                        966 _lcd_clear_Cmd_1_77:
      000001                        967 	.ds 2
                           000003   968 Llab6.read_keypad$Data$1$78==.
      000003                        969 _read_keypad_Data_1_78:
      000003                        970 	.ds 2
                           000005   971 Llab6.i2c_write_data$start_reg$1$97==.
      000005                        972 _i2c_write_data_PARM_2:
      000005                        973 	.ds 1
                           000006   974 Llab6.i2c_write_data$buffer$1$97==.
      000006                        975 _i2c_write_data_PARM_3:
      000006                        976 	.ds 3
                           000009   977 Llab6.i2c_write_data$num_bytes$1$97==.
      000009                        978 _i2c_write_data_PARM_4:
      000009                        979 	.ds 1
                           00000A   980 Llab6.i2c_read_data$start_reg$1$99==.
      00000A                        981 _i2c_read_data_PARM_2:
      00000A                        982 	.ds 1
                           00000B   983 Llab6.i2c_read_data$buffer$1$99==.
      00000B                        984 _i2c_read_data_PARM_3:
      00000B                        985 	.ds 3
                           00000E   986 Llab6.i2c_read_data$num_bytes$1$99==.
      00000E                        987 _i2c_read_data_PARM_4:
      00000E                        988 	.ds 1
                           00000F   989 Llab6.Accel_Init$Data2$1$103==.
      00000F                        990 _Accel_Init_Data2_1_103:
      00000F                        991 	.ds 1
                           000010   992 G$count$0$0==.
      000010                        993 _count::
      000010                        994 	.ds 2
                           000012   995 G$PW_MIN_THRUST$0$0==.
      000012                        996 _PW_MIN_THRUST::
      000012                        997 	.ds 2
                           000014   998 G$PW_NUET_THRUST$0$0==.
      000014                        999 _PW_NUET_THRUST::
      000014                       1000 	.ds 2
                           000016  1001 G$PW_MAX_THRUST$0$0==.
      000016                       1002 _PW_MAX_THRUST::
      000016                       1003 	.ds 2
                           000018  1004 G$PW_LEFT_RUDDER$0$0==.
      000018                       1005 _PW_LEFT_RUDDER::
      000018                       1006 	.ds 2
                           00001A  1007 G$PW_CENTER_RUDDER$0$0==.
      00001A                       1008 _PW_CENTER_RUDDER::
      00001A                       1009 	.ds 2
                           00001C  1010 G$PW_RIGHT_RUDDER$0$0==.
      00001C                       1011 _PW_RIGHT_RUDDER::
      00001C                       1012 	.ds 2
                           00001E  1013 G$PW_UP_ANGLE$0$0==.
      00001E                       1014 _PW_UP_ANGLE::
      00001E                       1015 	.ds 2
                           000020  1016 G$PW_CENTER_ANGLE$0$0==.
      000020                       1017 _PW_CENTER_ANGLE::
      000020                       1018 	.ds 2
                           000022  1019 G$PW_DOWN_ANGLE$0$0==.
      000022                       1020 _PW_DOWN_ANGLE::
      000022                       1021 	.ds 2
                           000024  1022 G$RUDDER_PW$0$0==.
      000024                       1023 _RUDDER_PW::
      000024                       1024 	.ds 2
                           000026  1025 G$RDR_lo_to_hi$0$0==.
      000026                       1026 _RDR_lo_to_hi::
      000026                       1027 	.ds 2
                           000028  1028 G$ANGLE_PW$0$0==.
      000028                       1029 _ANGLE_PW::
      000028                       1030 	.ds 2
                           00002A  1031 G$AGL_lo_to_hi$0$0==.
      00002A                       1032 _AGL_lo_to_hi::
      00002A                       1033 	.ds 2
                           00002C  1034 G$RTHRUST_PW$0$0==.
      00002C                       1035 _RTHRUST_PW::
      00002C                       1036 	.ds 2
                           00002E  1037 G$LTHRUST_PW$0$0==.
      00002E                       1038 _LTHRUST_PW::
      00002E                       1039 	.ds 2
                           000030  1040 G$RTRST_lo_to_hi$0$0==.
      000030                       1041 _RTRST_lo_to_hi::
      000030                       1042 	.ds 2
                           000032  1043 G$LTRST_lo_to_hi$0$0==.
      000032                       1044 _LTRST_lo_to_hi::
      000032                       1045 	.ds 2
                           000034  1046 G$offset$0$0==.
      000034                       1047 _offset::
      000034                       1048 	.ds 2
                           000036  1049 G$r_data$0$0==.
      000036                       1050 _r_data::
      000036                       1051 	.ds 2
                           000038  1052 G$r_addr$0$0==.
      000038                       1053 _r_addr::
      000038                       1054 	.ds 1
                           000039  1055 G$kp$0$0==.
      000039                       1056 _kp::
      000039                       1057 	.ds 2
                           00003B  1058 G$kd$0$0==.
      00003B                       1059 _kd::
      00003B                       1060 	.ds 2
                           00003D  1061 G$ratio$0$0==.
      00003D                       1062 _ratio::
      00003D                       1063 	.ds 2
                           00003F  1064 G$dratio$0$0==.
      00003F                       1065 _dratio::
      00003F                       1066 	.ds 2
                           000041  1067 Llab6.ReadCompass$Data$1$141==.
      000041                       1068 _ReadCompass_Data_1_141:
      000041                       1069 	.ds 2
                                   1070 ;--------------------------------------------------------
                                   1071 ; overlayable items in internal ram 
                                   1072 ;--------------------------------------------------------
                                   1073 	.area	OSEG    (OVR,DATA)
                                   1074 	.area	OSEG    (OVR,DATA)
                                   1075 	.area	OSEG    (OVR,DATA)
                                   1076 	.area	OSEG    (OVR,DATA)
                                   1077 	.area	OSEG    (OVR,DATA)
                                   1078 	.area	OSEG    (OVR,DATA)
                                   1079 	.area	OSEG    (OVR,DATA)
                                   1080 ;--------------------------------------------------------
                                   1081 ; Stack segment in internal ram 
                                   1082 ;--------------------------------------------------------
                                   1083 	.area	SSEG
      000000                       1084 __start__stack:
      000000                       1085 	.ds	1
                                   1086 
                                   1087 ;--------------------------------------------------------
                                   1088 ; indirectly addressable internal ram data
                                   1089 ;--------------------------------------------------------
                                   1090 	.area ISEG    (DATA)
                                   1091 ;--------------------------------------------------------
                                   1092 ; absolute internal ram data
                                   1093 ;--------------------------------------------------------
                                   1094 	.area IABS    (ABS,DATA)
                                   1095 	.area IABS    (ABS,DATA)
                                   1096 ;--------------------------------------------------------
                                   1097 ; bit data
                                   1098 ;--------------------------------------------------------
                                   1099 	.area BSEG    (BIT)
                                   1100 ;--------------------------------------------------------
                                   1101 ; paged external ram data
                                   1102 ;--------------------------------------------------------
                                   1103 	.area PSEG    (PAG,XDATA)
                                   1104 ;--------------------------------------------------------
                                   1105 ; external ram data
                                   1106 ;--------------------------------------------------------
                                   1107 	.area XSEG    (XDATA)
                           000000  1108 Llab6.lcd_print$text$1$73==.
      000000                       1109 _lcd_print_text_1_73:
      000000                       1110 	.ds 80
                           000050  1111 G$desired_D$0$0==.
      000050                       1112 _desired_D::
      000050                       1113 	.ds 2
                           000052  1114 G$actual_D$0$0==.
      000052                       1115 _actual_D::
      000052                       1116 	.ds 2
                           000054  1117 Llab6.Rudder_cal$value$1$143==.
      000054                       1118 _Rudder_cal_value_1_143:
      000054                       1119 	.ds 2
                           000056  1120 Llab6.Rudder_cal$times$1$143==.
      000056                       1121 _Rudder_cal_times_1_143:
      000056                       1122 	.ds 2
                           000058  1123 Llab6.Angle_cal$value$1$162==.
      000058                       1124 _Angle_cal_value_1_162:
      000058                       1125 	.ds 2
                           00005A  1126 Llab6.Angle_cal$times$1$162==.
      00005A                       1127 _Angle_cal_times_1_162:
      00005A                       1128 	.ds 2
                           00005C  1129 Llab6.Thrust_cal$value$1$181==.
      00005C                       1130 _Thrust_cal_value_1_181:
      00005C                       1131 	.ds 2
                           00005E  1132 Llab6.Thrust_cal$times$1$181==.
      00005E                       1133 _Thrust_cal_times_1_181:
      00005E                       1134 	.ds 2
                           000060  1135 Llab6.wait$old_count$1$216==.
      000060                       1136 _wait_old_count_1_216:
      000060                       1137 	.ds 2
                                   1138 ;--------------------------------------------------------
                                   1139 ; absolute external ram data
                                   1140 ;--------------------------------------------------------
                                   1141 	.area XABS    (ABS,XDATA)
                                   1142 ;--------------------------------------------------------
                                   1143 ; external initialized ram data
                                   1144 ;--------------------------------------------------------
                                   1145 	.area XISEG   (XDATA)
                           000000  1146 G$error$0$0==.
      000000                       1147 _error::
      000000                       1148 	.ds 2
                           000002  1149 G$old_error$0$0==.
      000002                       1150 _old_error::
      000002                       1151 	.ds 2
                                   1152 	.area HOME    (CODE)
                                   1153 	.area GSINIT0 (CODE)
                                   1154 	.area GSINIT1 (CODE)
                                   1155 	.area GSINIT2 (CODE)
                                   1156 	.area GSINIT3 (CODE)
                                   1157 	.area GSINIT4 (CODE)
                                   1158 	.area GSINIT5 (CODE)
                                   1159 	.area GSINIT  (CODE)
                                   1160 	.area GSFINAL (CODE)
                                   1161 	.area CSEG    (CODE)
                                   1162 ;--------------------------------------------------------
                                   1163 ; interrupt vector 
                                   1164 ;--------------------------------------------------------
                                   1165 	.area HOME    (CODE)
      000000                       1166 __interrupt_vect:
      000000 02r00r00         [24] 1167 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1168 	reti
      000004                       1169 	.ds	7
      00000B 32               [24] 1170 	reti
      00000C                       1171 	.ds	7
      000013 32               [24] 1172 	reti
      000014                       1173 	.ds	7
      00001B 32               [24] 1174 	reti
      00001C                       1175 	.ds	7
      000023 32               [24] 1176 	reti
      000024                       1177 	.ds	7
      00002B 32               [24] 1178 	reti
      00002C                       1179 	.ds	7
      000033 32               [24] 1180 	reti
      000034                       1181 	.ds	7
      00003B 32               [24] 1182 	reti
      00003C                       1183 	.ds	7
      000043 32               [24] 1184 	reti
      000044                       1185 	.ds	7
      00004B 02r12r98         [24] 1186 	ljmp	_PCA_ISR
                                   1187 ;--------------------------------------------------------
                                   1188 ; global & static initialisations
                                   1189 ;--------------------------------------------------------
                                   1190 	.area HOME    (CODE)
                                   1191 	.area GSINIT  (CODE)
                                   1192 	.area GSFINAL (CODE)
                                   1193 	.area GSINIT  (CODE)
                                   1194 	.globl __sdcc_gsinit_startup
                                   1195 	.globl __sdcc_program_startup
                                   1196 	.globl __start__stack
                                   1197 	.globl __mcs51_genXINIT
                                   1198 	.globl __mcs51_genXRAMCLEAR
                                   1199 	.globl __mcs51_genRAMCLEAR
                           000000  1200 	C$lab6.c$45$1$228 ==.
                                   1201 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:45: int count=0;
      000000 E4               [12] 1202 	clr	a
      000001 F5*10            [12] 1203 	mov	_count,a
      000003 F5*11            [12] 1204 	mov	(_count + 1),a
                           000005  1205 	C$lab6.c$46$1$228 ==.
                                   1206 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:46: unsigned int PW_MIN_THRUST = 2000;
      000005 75*12 D0         [24] 1207 	mov	_PW_MIN_THRUST,#0xD0
      000008 75*13 07         [24] 1208 	mov	(_PW_MIN_THRUST + 1),#0x07
                           00000B  1209 	C$lab6.c$47$1$228 ==.
                                   1210 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:47: unsigned int PW_NUET_THRUST = 2750;
      00000B 75*14 BE         [24] 1211 	mov	_PW_NUET_THRUST,#0xBE
      00000E 75*15 0A         [24] 1212 	mov	(_PW_NUET_THRUST + 1),#0x0A
                           000011  1213 	C$lab6.c$48$1$228 ==.
                                   1214 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:48: unsigned int PW_MAX_THRUST = 3500;
      000011 75*16 AC         [24] 1215 	mov	_PW_MAX_THRUST,#0xAC
      000014 75*17 0D         [24] 1216 	mov	(_PW_MAX_THRUST + 1),#0x0D
                           000017  1217 	C$lab6.c$50$1$228 ==.
                                   1218 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:50: unsigned int PW_LEFT_RUDDER = 2000;
      000017 75*18 D0         [24] 1219 	mov	_PW_LEFT_RUDDER,#0xD0
      00001A 75*19 07         [24] 1220 	mov	(_PW_LEFT_RUDDER + 1),#0x07
                           00001D  1221 	C$lab6.c$51$1$228 ==.
                                   1222 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:51: unsigned int PW_CENTER_RUDDER = 2750;
      00001D 75*1A BE         [24] 1223 	mov	_PW_CENTER_RUDDER,#0xBE
      000020 75*1B 0A         [24] 1224 	mov	(_PW_CENTER_RUDDER + 1),#0x0A
                           000023  1225 	C$lab6.c$52$1$228 ==.
                                   1226 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:52: unsigned int PW_RIGHT_RUDDER = 3500;
      000023 75*1C AC         [24] 1227 	mov	_PW_RIGHT_RUDDER,#0xAC
      000026 75*1D 0D         [24] 1228 	mov	(_PW_RIGHT_RUDDER + 1),#0x0D
                           000029  1229 	C$lab6.c$54$1$228 ==.
                                   1230 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:54: unsigned int PW_UP_ANGLE = 2880;
      000029 75*1E 40         [24] 1231 	mov	_PW_UP_ANGLE,#0x40
      00002C 75*1F 0B         [24] 1232 	mov	(_PW_UP_ANGLE + 1),#0x0B
                           00002F  1233 	C$lab6.c$55$1$228 ==.
                                   1234 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:55: unsigned int PW_CENTER_ANGLE = 3530;
      00002F 75*20 CA         [24] 1235 	mov	_PW_CENTER_ANGLE,#0xCA
      000032 75*21 0D         [24] 1236 	mov	(_PW_CENTER_ANGLE + 1),#0x0D
                           000035  1237 	C$lab6.c$56$1$228 ==.
                                   1238 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:56: unsigned int PW_DOWN_ANGLE = 4180;
      000035 75*22 54         [24] 1239 	mov	_PW_DOWN_ANGLE,#0x54
      000038 75*23 10         [24] 1240 	mov	(_PW_DOWN_ANGLE + 1),#0x10
                           00003B  1241 	C$lab6.c$75$1$228 ==.
                                   1242 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:75: unsigned char r_addr = 0xE0;
      00003B 75*38 E0         [24] 1243 	mov	_r_addr,#0xE0
                                   1244 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1245 	ljmp	__sdcc_program_startup
                                   1246 ;--------------------------------------------------------
                                   1247 ; Home
                                   1248 ;--------------------------------------------------------
                                   1249 	.area HOME    (CODE)
                                   1250 	.area HOME    (CODE)
      00004E                       1251 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1252 	ljmp	_main
                                   1253 ;	return from main will return to caller
                                   1254 ;--------------------------------------------------------
                                   1255 ; code
                                   1256 ;--------------------------------------------------------
                                   1257 	.area CSEG    (CODE)
                                   1258 ;------------------------------------------------------------
                                   1259 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1260 ;------------------------------------------------------------
                                   1261 ;i                         Allocated to registers 
                                   1262 ;------------------------------------------------------------
                           000000  1263 	G$SYSCLK_Init$0$0 ==.
                           000000  1264 	C$c8051_SDCC.h$42$0$0 ==.
                                   1265 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1266 ;	-----------------------------------------
                                   1267 ;	 function SYSCLK_Init
                                   1268 ;	-----------------------------------------
      000000                       1269 _SYSCLK_Init:
                           000007  1270 	ar7 = 0x07
                           000006  1271 	ar6 = 0x06
                           000005  1272 	ar5 = 0x05
                           000004  1273 	ar4 = 0x04
                           000003  1274 	ar3 = 0x03
                           000002  1275 	ar2 = 0x02
                           000001  1276 	ar1 = 0x01
                           000000  1277 	ar0 = 0x00
                           000000  1278 	C$c8051_SDCC.h$46$1$31 ==.
                                   1279 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1280 	mov	_OSCXCN,#0x67
                           000003  1281 	C$c8051_SDCC.h$49$1$31 ==.
                                   1282 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1283 	mov	r6,#0x00
      000005 7F 01            [12] 1284 	mov	r7,#0x01
      000007                       1285 00107$:
      000007 1E               [12] 1286 	dec	r6
      000008 BE FF 01         [24] 1287 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1288 	dec	r7
      00000C                       1289 00121$:
      00000C EE               [12] 1290 	mov	a,r6
      00000D 4F               [12] 1291 	orl	a,r7
      00000E 70 F7            [24] 1292 	jnz	00107$
                           000010  1293 	C$c8051_SDCC.h$51$1$31 ==.
                                   1294 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1295 00102$:
      000010 E5 B1            [12] 1296 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1297 	jnb	acc.7,00102$
                           000015  1298 	C$c8051_SDCC.h$53$1$31 ==.
                                   1299 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1300 	mov	_OSCICN,#0x88
                           000018  1301 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1302 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1303 	ret
                                   1304 ;------------------------------------------------------------
                                   1305 ;Allocation info for local variables in function 'UART0_Init'
                                   1306 ;------------------------------------------------------------
                           000019  1307 	G$UART0_Init$0$0 ==.
                           000019  1308 	C$c8051_SDCC.h$64$1$31 ==.
                                   1309 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1310 ;	-----------------------------------------
                                   1311 ;	 function UART0_Init
                                   1312 ;	-----------------------------------------
      000019                       1313 _UART0_Init:
                           000019  1314 	C$c8051_SDCC.h$66$1$33 ==.
                                   1315 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1316 	mov	_SCON0,#0x50
                           00001C  1317 	C$c8051_SDCC.h$67$1$33 ==.
                                   1318 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1319 	mov	_TMOD,#0x20
                           00001F  1320 	C$c8051_SDCC.h$68$1$33 ==.
                                   1321 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1322 	mov	_TH1,#0xDC
                           000022  1323 	C$c8051_SDCC.h$69$1$33 ==.
                                   1324 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1325 	setb	_TR1
                           000024  1326 	C$c8051_SDCC.h$70$1$33 ==.
                                   1327 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1328 	orl	_CKCON,#0x10
                           000027  1329 	C$c8051_SDCC.h$71$1$33 ==.
                                   1330 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1331 	orl	_PCON,#0x80
                           00002A  1332 	C$c8051_SDCC.h$73$1$33 ==.
                                   1333 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1334 	setb	_TI0
                           00002C  1335 	C$c8051_SDCC.h$74$1$33 ==.
                                   1336 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1337 	orl	_P0MDOUT,#0x01
                           00002F  1338 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1339 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1340 	ret
                                   1341 ;------------------------------------------------------------
                                   1342 ;Allocation info for local variables in function 'Sys_Init'
                                   1343 ;------------------------------------------------------------
                           000030  1344 	G$Sys_Init$0$0 ==.
                           000030  1345 	C$c8051_SDCC.h$83$1$33 ==.
                                   1346 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1347 ;	-----------------------------------------
                                   1348 ;	 function Sys_Init
                                   1349 ;	-----------------------------------------
      000030                       1350 _Sys_Init:
                           000030  1351 	C$c8051_SDCC.h$85$1$35 ==.
                                   1352 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1353 	mov	_WDTCN,#0xDE
                           000033  1354 	C$c8051_SDCC.h$86$1$35 ==.
                                   1355 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1356 	mov	_WDTCN,#0xAD
                           000036  1357 	C$c8051_SDCC.h$88$1$35 ==.
                                   1358 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1359 	lcall	_SYSCLK_Init
                           000039  1360 	C$c8051_SDCC.h$89$1$35 ==.
                                   1361 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1362 	lcall	_UART0_Init
                           00003C  1363 	C$c8051_SDCC.h$91$1$35 ==.
                                   1364 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1365 	orl	_XBR0,#0x04
                           00003F  1366 	C$c8051_SDCC.h$92$1$35 ==.
                                   1367 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1368 	orl	_XBR2,#0x40
                           000042  1369 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1370 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1371 	ret
                                   1372 ;------------------------------------------------------------
                                   1373 ;Allocation info for local variables in function 'putchar'
                                   1374 ;------------------------------------------------------------
                                   1375 ;c                         Allocated to registers r7 
                                   1376 ;------------------------------------------------------------
                           000043  1377 	G$putchar$0$0 ==.
                           000043  1378 	C$c8051_SDCC.h$98$1$35 ==.
                                   1379 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1380 ;	-----------------------------------------
                                   1381 ;	 function putchar
                                   1382 ;	-----------------------------------------
      000043                       1383 _putchar:
      000043 AF 82            [24] 1384 	mov	r7,dpl
                           000045  1385 	C$c8051_SDCC.h$100$1$37 ==.
                                   1386 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1387 00101$:
                           000045  1388 	C$c8051_SDCC.h$101$1$37 ==.
                                   1389 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1390 	jbc	_TI0,00112$
      000048 80 FB            [24] 1391 	sjmp	00101$
      00004A                       1392 00112$:
                           00004A  1393 	C$c8051_SDCC.h$102$1$37 ==.
                                   1394 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1395 	mov	_SBUF0,r7
                           00004C  1396 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1397 	XG$putchar$0$0 ==.
      00004C 22               [24] 1398 	ret
                                   1399 ;------------------------------------------------------------
                                   1400 ;Allocation info for local variables in function 'getchar'
                                   1401 ;------------------------------------------------------------
                                   1402 ;c                         Allocated to registers 
                                   1403 ;------------------------------------------------------------
                           00004D  1404 	G$getchar$0$0 ==.
                           00004D  1405 	C$c8051_SDCC.h$108$1$37 ==.
                                   1406 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1407 ;	-----------------------------------------
                                   1408 ;	 function getchar
                                   1409 ;	-----------------------------------------
      00004D                       1410 _getchar:
                           00004D  1411 	C$c8051_SDCC.h$111$1$39 ==.
                                   1412 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1413 00101$:
                           00004D  1414 	C$c8051_SDCC.h$112$1$39 ==.
                                   1415 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1416 	jbc	_RI0,00112$
      000050 80 FB            [24] 1417 	sjmp	00101$
      000052                       1418 00112$:
                           000052  1419 	C$c8051_SDCC.h$113$1$39 ==.
                                   1420 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1421 	mov	dpl,_SBUF0
                           000055  1422 	C$c8051_SDCC.h$114$1$39 ==.
                                   1423 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1424 	lcall	_putchar
                           000058  1425 	C$c8051_SDCC.h$115$1$39 ==.
                                   1426 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1427 	mov	dpl,_SBUF0
                           00005B  1428 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1429 	XG$getchar$0$0 ==.
      00005B 22               [24] 1430 	ret
                                   1431 ;------------------------------------------------------------
                                   1432 ;Allocation info for local variables in function 'lcd_print'
                                   1433 ;------------------------------------------------------------
                                   1434 ;fmt                       Allocated to stack - _bp -5
                                   1435 ;len                       Allocated to registers r6 
                                   1436 ;i                         Allocated to registers 
                                   1437 ;ap                        Allocated to registers 
                                   1438 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1439 ;------------------------------------------------------------
                           00005C  1440 	G$lcd_print$0$0 ==.
                           00005C  1441 	C$i2c.h$81$1$39 ==.
                                   1442 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1443 ;	-----------------------------------------
                                   1444 ;	 function lcd_print
                                   1445 ;	-----------------------------------------
      00005C                       1446 _lcd_print:
      00005C C0*00            [24] 1447 	push	_bp
      00005E 85 81*00         [24] 1448 	mov	_bp,sp
                           000061  1449 	C$i2c.h$87$1$73 ==.
                                   1450 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1451 	mov	a,_bp
      000063 24 FB            [12] 1452 	add	a,#0xfb
      000065 F8               [12] 1453 	mov	r0,a
      000066 86 82            [24] 1454 	mov	dpl,@r0
      000068 08               [12] 1455 	inc	r0
      000069 86 83            [24] 1456 	mov	dph,@r0
      00006B 08               [12] 1457 	inc	r0
      00006C 86 F0            [24] 1458 	mov	b,@r0
      00006E 12r00r00         [24] 1459 	lcall	_strlen
      000071 E5 82            [12] 1460 	mov	a,dpl
      000073 85 83 F0         [24] 1461 	mov	b,dph
      000076 45 F0            [12] 1462 	orl	a,b
      000078 70 02            [24] 1463 	jnz	00102$
      00007A 80 62            [24] 1464 	sjmp	00109$
      00007C                       1465 00102$:
                           00007C  1466 	C$i2c.h$89$2$74 ==.
                                   1467 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1468 	mov	a,_bp
      00007E 24 FB            [12] 1469 	add	a,#0xFB
      000080 FF               [12] 1470 	mov	r7,a
      000081 8F*00            [24] 1471 	mov	_vsprintf_PARM_3,r7
                           000083  1472 	C$i2c.h$90$1$73 ==.
                                   1473 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1474 	mov	a,_bp
      000085 24 FB            [12] 1475 	add	a,#0xfb
      000087 F8               [12] 1476 	mov	r0,a
      000088 86*00            [24] 1477 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1478 	inc	r0
      00008B 86*01            [24] 1479 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1480 	inc	r0
      00008E 86*02            [24] 1481 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1482 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1483 	mov	b,#0x00
      000096 12r00r00         [24] 1484 	lcall	_vsprintf
                           000099  1485 	C$i2c.h$93$1$73 ==.
                                   1486 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1487 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1488 	mov	b,#0x00
      00009F 12r00r00         [24] 1489 	lcall	_strlen
      0000A2 AE 82            [24] 1490 	mov	r6,dpl
                           0000A4  1491 	C$i2c.h$94$1$73 ==.
                                   1492 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1493 	mov	r7,#0x00
      0000A6                       1494 00107$:
      0000A6 C3               [12] 1495 	clr	c
      0000A7 EF               [12] 1496 	mov	a,r7
      0000A8 9E               [12] 1497 	subb	a,r6
      0000A9 50 1F            [24] 1498 	jnc	00105$
                           0000AB  1499 	C$i2c.h$96$2$76 ==.
                                   1500 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1501 	mov	a,r7
      0000AC 24r00            [12] 1502 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1503 	mov	dpl,a
      0000B0 E4               [12] 1504 	clr	a
      0000B1 34s00            [12] 1505 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1506 	mov	dph,a
      0000B5 E0               [24] 1507 	movx	a,@dptr
      0000B6 FD               [12] 1508 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1509 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1510 	mov	a,r7
      0000BB 24r00            [12] 1511 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1512 	mov	dpl,a
      0000BF E4               [12] 1513 	clr	a
      0000C0 34s00            [12] 1514 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1515 	mov	dph,a
      0000C4 74 0D            [12] 1516 	mov	a,#0x0D
      0000C6 F0               [24] 1517 	movx	@dptr,a
      0000C7                       1518 00108$:
                           0000C7  1519 	C$i2c.h$94$1$73 ==.
                                   1520 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1521 	inc	r7
      0000C8 80 DC            [24] 1522 	sjmp	00107$
      0000CA                       1523 00105$:
                           0000CA  1524 	C$i2c.h$99$1$73 ==.
                                   1525 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1526 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1527 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1528 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1529 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1530 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1531 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1532 	lcall	_i2c_write_data
      0000DE                       1533 00109$:
      0000DE D0*00            [24] 1534 	pop	_bp
                           0000E0  1535 	C$i2c.h$100$1$73 ==.
                           0000E0  1536 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1537 	ret
                                   1538 ;------------------------------------------------------------
                                   1539 ;Allocation info for local variables in function 'lcd_clear'
                                   1540 ;------------------------------------------------------------
                                   1541 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1542 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1543 ;------------------------------------------------------------
                           0000E1  1544 	G$lcd_clear$0$0 ==.
                           0000E1  1545 	C$i2c.h$103$1$73 ==.
                                   1546 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1547 ;	-----------------------------------------
                                   1548 ;	 function lcd_clear
                                   1549 ;	-----------------------------------------
      0000E1                       1550 _lcd_clear:
                           0000E1  1551 	C$i2c.h$105$1$73 ==.
                                   1552 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1553 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1554 	C$i2c.h$107$1$77 ==.
                                   1555 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1556 00101$:
      0000E4 74 C0            [12] 1557 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1558 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1559 	jc	00103$
      0000EA 75*0Br00         [24] 1560 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1561 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1562 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1563 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1564 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1565 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1566 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1567 	sjmp	00101$
      000101                       1568 00103$:
                           000101  1569 	C$i2c.h$109$1$77 ==.
                                   1570 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1571 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1572 	C$i2c.h$110$1$77 ==.
                                   1573 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1574 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1575 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1576 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1577 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1578 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1579 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1580 	lcall	_i2c_write_data
                           000119  1581 	C$i2c.h$111$1$77 ==.
                           000119  1582 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1583 	ret
                                   1584 ;------------------------------------------------------------
                                   1585 ;Allocation info for local variables in function 'read_keypad'
                                   1586 ;------------------------------------------------------------
                                   1587 ;i                         Allocated to registers r7 
                                   1588 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1589 ;------------------------------------------------------------
                           00011A  1590 	G$read_keypad$0$0 ==.
                           00011A  1591 	C$i2c.h$114$1$77 ==.
                                   1592 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1593 ;	-----------------------------------------
                                   1594 ;	 function read_keypad
                                   1595 ;	-----------------------------------------
      00011A                       1596 _read_keypad:
                           00011A  1597 	C$i2c.h$118$1$78 ==.
                                   1598 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1599 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1600 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1601 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1602 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1603 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1604 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1605 	lcall	_i2c_read_data
                           00012F  1606 	C$i2c.h$119$1$78 ==.
                                   1607 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1608 	mov	a,#0xFF
      000131 B5*03 05         [24] 1609 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1610 	mov	dpl,#0x00
      000137 80 5F            [24] 1611 	sjmp	00116$
      000139                       1612 00102$:
                           000139  1613 	C$i2c.h$121$1$78 ==.
                                   1614 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1615 	mov	r7,#0x00
      00013B 8F 06            [24] 1616 	mov	ar6,r7
      00013D                       1617 00114$:
                           00013D  1618 	C$i2c.h$123$2$79 ==.
                                   1619 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1620 	mov	b,r6
      00013F 05 F0            [12] 1621 	inc	b
      000141 7C 01            [12] 1622 	mov	r4,#0x01
      000143 7D 00            [12] 1623 	mov	r5,#0x00
      000145 80 06            [24] 1624 	sjmp	00145$
      000147                       1625 00144$:
      000147 EC               [12] 1626 	mov	a,r4
      000148 2C               [12] 1627 	add	a,r4
      000149 FC               [12] 1628 	mov	r4,a
      00014A ED               [12] 1629 	mov	a,r5
      00014B 33               [12] 1630 	rlc	a
      00014C FD               [12] 1631 	mov	r5,a
      00014D                       1632 00145$:
      00014D D5 F0 F7         [24] 1633 	djnz	b,00144$
      000150 AA*03            [24] 1634 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1635 	mov	r3,#0x00
      000154 EA               [12] 1636 	mov	a,r2
      000155 52 04            [12] 1637 	anl	ar4,a
      000157 EB               [12] 1638 	mov	a,r3
      000158 52 05            [12] 1639 	anl	ar5,a
      00015A EC               [12] 1640 	mov	a,r4
      00015B 4D               [12] 1641 	orl	a,r5
      00015C 60 07            [24] 1642 	jz	00115$
                           00015E  1643 	C$i2c.h$124$2$79 ==.
                                   1644 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1645 	mov	a,#0x31
      000160 2F               [12] 1646 	add	a,r7
      000161 F5 82            [12] 1647 	mov	dpl,a
      000163 80 33            [24] 1648 	sjmp	00116$
      000165                       1649 00115$:
                           000165  1650 	C$i2c.h$121$1$78 ==.
                                   1651 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1652 	inc	r6
      000166 8E 07            [24] 1653 	mov	ar7,r6
      000168 BE 08 00         [24] 1654 	cjne	r6,#0x08,00147$
      00016B                       1655 00147$:
      00016B 40 D0            [24] 1656 	jc	00114$
                           00016D  1657 	C$i2c.h$127$1$78 ==.
                                   1658 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1659 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1660 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1661 	mov	dpl,#0x39
      000175 80 21            [24] 1662 	sjmp	00116$
      000177                       1663 00107$:
                           000177  1664 	C$i2c.h$129$1$78 ==.
                                   1665 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1666 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1667 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1668 	mov	dpl,#0x2A
      00017F 80 17            [24] 1669 	sjmp	00116$
      000181                       1670 00109$:
                           000181  1671 	C$i2c.h$131$1$78 ==.
                                   1672 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1673 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1674 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1675 	mov	dpl,#0x30
      000189 80 0D            [24] 1676 	sjmp	00116$
      00018B                       1677 00111$:
                           00018B  1678 	C$i2c.h$133$1$78 ==.
                                   1679 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1680 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1681 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1682 	mov	dpl,#0x23
      000193 80 03            [24] 1683 	sjmp	00116$
      000195                       1684 00113$:
                           000195  1685 	C$i2c.h$135$1$78 ==.
                                   1686 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1687 	mov	dpl,#0xFF
      000198                       1688 00116$:
                           000198  1689 	C$i2c.h$136$1$78 ==.
                           000198  1690 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1691 	ret
                                   1692 ;------------------------------------------------------------
                                   1693 ;Allocation info for local variables in function 'kpd_input'
                                   1694 ;------------------------------------------------------------
                                   1695 ;mode                      Allocated to registers r7 
                                   1696 ;sum                       Allocated to registers r5 r6 
                                   1697 ;key                       Allocated to registers r3 
                                   1698 ;i                         Allocated to registers 
                                   1699 ;------------------------------------------------------------
                           000199  1700 	G$kpd_input$0$0 ==.
                           000199  1701 	C$i2c.h$148$1$78 ==.
                                   1702 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1703 ;	-----------------------------------------
                                   1704 ;	 function kpd_input
                                   1705 ;	-----------------------------------------
      000199                       1706 _kpd_input:
      000199 AF 82            [24] 1707 	mov	r7,dpl
                           00019B  1708 	C$i2c.h$153$1$81 ==.
                                   1709 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1710 	C$i2c.h$156$1$81 ==.
                                   1711 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1712 	clr	a
      00019C FD               [12] 1713 	mov	r5,a
      00019D FE               [12] 1714 	mov	r6,a
      00019E EF               [12] 1715 	mov	a,r7
      00019F 70 1D            [24] 1716 	jnz	00102$
      0001A1 C0 06            [24] 1717 	push	ar6
      0001A3 C0 05            [24] 1718 	push	ar5
      0001A5 74r00            [12] 1719 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1720 	push	acc
      0001A9 74s00            [12] 1721 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1722 	push	acc
      0001AD 74 80            [12] 1723 	mov	a,#0x80
      0001AF C0 E0            [24] 1724 	push	acc
      0001B1 12r00r5C         [24] 1725 	lcall	_lcd_print
      0001B4 15 81            [12] 1726 	dec	sp
      0001B6 15 81            [12] 1727 	dec	sp
      0001B8 15 81            [12] 1728 	dec	sp
      0001BA D0 05            [24] 1729 	pop	ar5
      0001BC D0 06            [24] 1730 	pop	ar6
      0001BE                       1731 00102$:
                           0001BE  1732 	C$i2c.h$158$1$81 ==.
                                   1733 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1734 	push	ar6
      0001C0 C0 05            [24] 1735 	push	ar5
      0001C2 74 08            [12] 1736 	mov	a,#0x08
      0001C4 C0 E0            [24] 1737 	push	acc
      0001C6 E4               [12] 1738 	clr	a
      0001C7 C0 E0            [24] 1739 	push	acc
      0001C9 74 08            [12] 1740 	mov	a,#0x08
      0001CB C0 E0            [24] 1741 	push	acc
      0001CD E4               [12] 1742 	clr	a
      0001CE C0 E0            [24] 1743 	push	acc
      0001D0 74 08            [12] 1744 	mov	a,#0x08
      0001D2 C0 E0            [24] 1745 	push	acc
      0001D4 E4               [12] 1746 	clr	a
      0001D5 C0 E0            [24] 1747 	push	acc
      0001D7 74 08            [12] 1748 	mov	a,#0x08
      0001D9 C0 E0            [24] 1749 	push	acc
      0001DB E4               [12] 1750 	clr	a
      0001DC C0 E0            [24] 1751 	push	acc
      0001DE 74 08            [12] 1752 	mov	a,#0x08
      0001E0 C0 E0            [24] 1753 	push	acc
      0001E2 E4               [12] 1754 	clr	a
      0001E3 C0 E0            [24] 1755 	push	acc
      0001E5 74r16            [12] 1756 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1757 	push	acc
      0001E9 74s00            [12] 1758 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1759 	push	acc
      0001ED 74 80            [12] 1760 	mov	a,#0x80
      0001EF C0 E0            [24] 1761 	push	acc
      0001F1 12r00r5C         [24] 1762 	lcall	_lcd_print
      0001F4 E5 81            [12] 1763 	mov	a,sp
      0001F6 24 F3            [12] 1764 	add	a,#0xf3
      0001F8 F5 81            [12] 1765 	mov	sp,a
                           0001FA  1766 	C$i2c.h$160$1$81 ==.
                                   1767 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1768 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1769 	mov	b,#0x07
      000200 E4               [12] 1770 	clr	a
      000201 12r03r0D         [24] 1771 	lcall	_delay_time
      000204 D0 05            [24] 1772 	pop	ar5
      000206 D0 06            [24] 1773 	pop	ar6
                           000208  1774 	C$i2c.h$164$1$81 ==.
                                   1775 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1776 	mov	r7,#0x00
                           00020A  1777 	C$i2c.h$166$3$84 ==.
                                   1778 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1779 00104$:
      00020A C0 07            [24] 1780 	push	ar7
      00020C C0 06            [24] 1781 	push	ar6
      00020E C0 05            [24] 1782 	push	ar5
      000210 12r01r1A         [24] 1783 	lcall	_read_keypad
      000213 AC 82            [24] 1784 	mov	r4,dpl
      000215 D0 05            [24] 1785 	pop	ar5
      000217 D0 06            [24] 1786 	pop	ar6
      000219 D0 07            [24] 1787 	pop	ar7
      00021B 8C 03            [24] 1788 	mov	ar3,r4
      00021D BC FF 02         [24] 1789 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1790 	sjmp	00105$
      000222                       1791 00146$:
      000222 BB 2A 17         [24] 1792 	cjne	r3,#0x2A,00106$
      000225                       1793 00105$:
      000225 90 27 10         [24] 1794 	mov	dptr,#0x2710
      000228 E4               [12] 1795 	clr	a
      000229 F5 F0            [12] 1796 	mov	b,a
      00022B C0 07            [24] 1797 	push	ar7
      00022D C0 06            [24] 1798 	push	ar6
      00022F C0 05            [24] 1799 	push	ar5
      000231 12r03r0D         [24] 1800 	lcall	_delay_time
      000234 D0 05            [24] 1801 	pop	ar5
      000236 D0 06            [24] 1802 	pop	ar6
      000238 D0 07            [24] 1803 	pop	ar7
      00023A 80 CE            [24] 1804 	sjmp	00104$
      00023C                       1805 00106$:
                           00023C  1806 	C$i2c.h$167$2$82 ==.
                                   1807 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1808 	cjne	r3,#0x23,00114$
                           00023F  1809 	C$i2c.h$169$3$83 ==.
                                   1810 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1811 00107$:
      00023F C0 06            [24] 1812 	push	ar6
      000241 C0 05            [24] 1813 	push	ar5
      000243 12r01r1A         [24] 1814 	lcall	_read_keypad
      000246 AC 82            [24] 1815 	mov	r4,dpl
      000248 D0 05            [24] 1816 	pop	ar5
      00024A D0 06            [24] 1817 	pop	ar6
      00024C BC 23 13         [24] 1818 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1819 	mov	dptr,#0x2710
      000252 E4               [12] 1820 	clr	a
      000253 F5 F0            [12] 1821 	mov	b,a
      000255 C0 06            [24] 1822 	push	ar6
      000257 C0 05            [24] 1823 	push	ar5
      000259 12r03r0D         [24] 1824 	lcall	_delay_time
      00025C D0 05            [24] 1825 	pop	ar5
      00025E D0 06            [24] 1826 	pop	ar6
      000260 80 DD            [24] 1827 	sjmp	00107$
      000262                       1828 00109$:
                           000262  1829 	C$i2c.h$170$3$83 ==.
                                   1830 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1831 	mov	dpl,r5
      000264 8E 83            [24] 1832 	mov	dph,r6
      000266 02r03r0C         [24] 1833 	ljmp	00119$
      000269                       1834 00114$:
                           000269  1835 	C$i2c.h$174$3$84 ==.
                                   1836 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1837 	mov	a,r3
      00026A FA               [12] 1838 	mov	r2,a
      00026B 33               [12] 1839 	rlc	a
      00026C 95 E0            [12] 1840 	subb	a,acc
      00026E FC               [12] 1841 	mov	r4,a
      00026F C0 07            [24] 1842 	push	ar7
      000271 C0 06            [24] 1843 	push	ar6
      000273 C0 05            [24] 1844 	push	ar5
      000275 C0 04            [24] 1845 	push	ar4
      000277 C0 03            [24] 1846 	push	ar3
      000279 C0 02            [24] 1847 	push	ar2
      00027B C0 02            [24] 1848 	push	ar2
      00027D C0 04            [24] 1849 	push	ar4
      00027F 74r26            [12] 1850 	mov	a,#___str_2
      000281 C0 E0            [24] 1851 	push	acc
      000283 74s00            [12] 1852 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1853 	push	acc
      000287 74 80            [12] 1854 	mov	a,#0x80
      000289 C0 E0            [24] 1855 	push	acc
      00028B 12r00r5C         [24] 1856 	lcall	_lcd_print
      00028E E5 81            [12] 1857 	mov	a,sp
      000290 24 FB            [12] 1858 	add	a,#0xfb
      000292 F5 81            [12] 1859 	mov	sp,a
      000294 D0 02            [24] 1860 	pop	ar2
      000296 D0 03            [24] 1861 	pop	ar3
      000298 D0 04            [24] 1862 	pop	ar4
      00029A D0 05            [24] 1863 	pop	ar5
      00029C D0 06            [24] 1864 	pop	ar6
                           00029E  1865 	C$i2c.h$175$1$81 ==.
                                   1866 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1867 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1868 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1869 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1870 	push	ar4
      0002A7 C0 03            [24] 1871 	push	ar3
      0002A9 C0 02            [24] 1872 	push	ar2
      0002AB 12r00r00         [24] 1873 	lcall	__mulint
      0002AE A8 82            [24] 1874 	mov	r0,dpl
      0002B0 A9 83            [24] 1875 	mov	r1,dph
      0002B2 D0 02            [24] 1876 	pop	ar2
      0002B4 D0 03            [24] 1877 	pop	ar3
      0002B6 D0 04            [24] 1878 	pop	ar4
      0002B8 D0 07            [24] 1879 	pop	ar7
      0002BA EA               [12] 1880 	mov	a,r2
      0002BB 28               [12] 1881 	add	a,r0
      0002BC F8               [12] 1882 	mov	r0,a
      0002BD EC               [12] 1883 	mov	a,r4
      0002BE 39               [12] 1884 	addc	a,r1
      0002BF F9               [12] 1885 	mov	r1,a
      0002C0 E8               [12] 1886 	mov	a,r0
      0002C1 24 D0            [12] 1887 	add	a,#0xD0
      0002C3 FD               [12] 1888 	mov	r5,a
      0002C4 E9               [12] 1889 	mov	a,r1
      0002C5 34 FF            [12] 1890 	addc	a,#0xFF
      0002C7 FE               [12] 1891 	mov	r6,a
                           0002C8  1892 	C$i2c.h$176$3$84 ==.
                                   1893 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1894 00110$:
      0002C8 C0 07            [24] 1895 	push	ar7
      0002CA C0 06            [24] 1896 	push	ar6
      0002CC C0 05            [24] 1897 	push	ar5
      0002CE C0 03            [24] 1898 	push	ar3
      0002D0 12r01r1A         [24] 1899 	lcall	_read_keypad
      0002D3 AC 82            [24] 1900 	mov	r4,dpl
      0002D5 D0 03            [24] 1901 	pop	ar3
      0002D7 D0 05            [24] 1902 	pop	ar5
      0002D9 D0 06            [24] 1903 	pop	ar6
      0002DB D0 07            [24] 1904 	pop	ar7
      0002DD EC               [12] 1905 	mov	a,r4
      0002DE B5 03 1B         [24] 1906 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1907 	mov	dptr,#0x2710
      0002E4 E4               [12] 1908 	clr	a
      0002E5 F5 F0            [12] 1909 	mov	b,a
      0002E7 C0 07            [24] 1910 	push	ar7
      0002E9 C0 06            [24] 1911 	push	ar6
      0002EB C0 05            [24] 1912 	push	ar5
      0002ED C0 03            [24] 1913 	push	ar3
      0002EF 12r03r0D         [24] 1914 	lcall	_delay_time
      0002F2 D0 03            [24] 1915 	pop	ar3
      0002F4 D0 05            [24] 1916 	pop	ar5
      0002F6 D0 06            [24] 1917 	pop	ar6
      0002F8 D0 07            [24] 1918 	pop	ar7
      0002FA 80 CC            [24] 1919 	sjmp	00110$
      0002FC                       1920 00118$:
                           0002FC  1921 	C$i2c.h$164$1$81 ==.
                                   1922 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1923 	inc	r7
      0002FD C3               [12] 1924 	clr	c
      0002FE EF               [12] 1925 	mov	a,r7
      0002FF 64 80            [12] 1926 	xrl	a,#0x80
      000301 94 85            [12] 1927 	subb	a,#0x85
      000303 50 03            [24] 1928 	jnc	00155$
      000305 02r02r0A         [24] 1929 	ljmp	00104$
      000308                       1930 00155$:
                           000308  1931 	C$i2c.h$179$1$81 ==.
                                   1932 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1933 	mov	dpl,r5
      00030A 8E 83            [24] 1934 	mov	dph,r6
      00030C                       1935 00119$:
                           00030C  1936 	C$i2c.h$180$1$81 ==.
                           00030C  1937 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1938 	ret
                                   1939 ;------------------------------------------------------------
                                   1940 ;Allocation info for local variables in function 'delay_time'
                                   1941 ;------------------------------------------------------------
                                   1942 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1943 ;index                     Allocated to registers 
                                   1944 ;------------------------------------------------------------
                           00030D  1945 	G$delay_time$0$0 ==.
                           00030D  1946 	C$i2c.h$189$1$81 ==.
                                   1947 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1948 ;	-----------------------------------------
                                   1949 ;	 function delay_time
                                   1950 ;	-----------------------------------------
      00030D                       1951 _delay_time:
      00030D AC 82            [24] 1952 	mov	r4,dpl
      00030F AD 83            [24] 1953 	mov	r5,dph
      000311 AE F0            [24] 1954 	mov	r6,b
      000313 FF               [12] 1955 	mov	r7,a
                           000314  1956 	C$i2c.h$192$1$86 ==.
                                   1957 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1958 	mov	r0,#0x00
      000316 79 00            [12] 1959 	mov	r1,#0x00
      000318 7A 00            [12] 1960 	mov	r2,#0x00
      00031A 7B 00            [12] 1961 	mov	r3,#0x00
      00031C                       1962 00103$:
      00031C C3               [12] 1963 	clr	c
      00031D E8               [12] 1964 	mov	a,r0
      00031E 9C               [12] 1965 	subb	a,r4
      00031F E9               [12] 1966 	mov	a,r1
      000320 9D               [12] 1967 	subb	a,r5
      000321 EA               [12] 1968 	mov	a,r2
      000322 9E               [12] 1969 	subb	a,r6
      000323 EB               [12] 1970 	mov	a,r3
      000324 9F               [12] 1971 	subb	a,r7
      000325 50 0F            [24] 1972 	jnc	00105$
      000327 08               [12] 1973 	inc	r0
      000328 B8 00 09         [24] 1974 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1975 	inc	r1
      00032C B9 00 05         [24] 1976 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1977 	inc	r2
      000330 BA 00 E9         [24] 1978 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1979 	inc	r3
      000334                       1980 00115$:
      000334 80 E6            [24] 1981 	sjmp	00103$
      000336                       1982 00105$:
                           000336  1983 	C$i2c.h$193$1$86 ==.
                           000336  1984 	XG$delay_time$0$0 ==.
      000336 22               [24] 1985 	ret
                                   1986 ;------------------------------------------------------------
                                   1987 ;Allocation info for local variables in function 'i2c_start'
                                   1988 ;------------------------------------------------------------
                           000337  1989 	G$i2c_start$0$0 ==.
                           000337  1990 	C$i2c.h$196$1$86 ==.
                                   1991 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1992 ;	-----------------------------------------
                                   1993 ;	 function i2c_start
                                   1994 ;	-----------------------------------------
      000337                       1995 _i2c_start:
                           000337  1996 	C$i2c.h$198$1$88 ==.
                                   1997 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1998 00101$:
      000337 20 C7 FD         [24] 1999 	jb	_BUSY,00101$
                           00033A  2000 	C$i2c.h$199$1$88 ==.
                                   2001 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 2002 	setb	_STA
                           00033C  2003 	C$i2c.h$200$1$88 ==.
                                   2004 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       2005 00104$:
      00033C 30 C3 FD         [24] 2006 	jnb	_SI,00104$
                           00033F  2007 	C$i2c.h$201$1$88 ==.
                                   2008 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 2009 	clr	_STA
                           000341  2010 	C$i2c.h$202$1$88 ==.
                                   2011 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 2012 	clr	_SI
                           000343  2013 	C$i2c.h$203$1$88 ==.
                           000343  2014 	XG$i2c_start$0$0 ==.
      000343 22               [24] 2015 	ret
                                   2016 ;------------------------------------------------------------
                                   2017 ;Allocation info for local variables in function 'i2c_write'
                                   2018 ;------------------------------------------------------------
                                   2019 ;output_data               Allocated to registers 
                                   2020 ;------------------------------------------------------------
                           000344  2021 	G$i2c_write$0$0 ==.
                           000344  2022 	C$i2c.h$206$1$88 ==.
                                   2023 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   2024 ;	-----------------------------------------
                                   2025 ;	 function i2c_write
                                   2026 ;	-----------------------------------------
      000344                       2027 _i2c_write:
      000344 85 82 C2         [24] 2028 	mov	_SMB0DAT,dpl
                           000347  2029 	C$i2c.h$209$1$90 ==.
                                   2030 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       2031 00101$:
                           000347  2032 	C$i2c.h$210$1$90 ==.
                                   2033 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 2034 	jbc	_SI,00112$
      00034A 80 FB            [24] 2035 	sjmp	00101$
      00034C                       2036 00112$:
                           00034C  2037 	C$i2c.h$211$1$90 ==.
                           00034C  2038 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 2039 	ret
                                   2040 ;------------------------------------------------------------
                                   2041 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2042 ;------------------------------------------------------------
                                   2043 ;output_data               Allocated to registers 
                                   2044 ;------------------------------------------------------------
                           00034D  2045 	G$i2c_write_and_stop$0$0 ==.
                           00034D  2046 	C$i2c.h$214$1$90 ==.
                                   2047 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2048 ;	-----------------------------------------
                                   2049 ;	 function i2c_write_and_stop
                                   2050 ;	-----------------------------------------
      00034D                       2051 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2052 	mov	_SMB0DAT,dpl
                           000350  2053 	C$i2c.h$217$1$92 ==.
                                   2054 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2055 	setb	_STO
                           000352  2056 	C$i2c.h$218$1$92 ==.
                                   2057 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2058 00101$:
                           000352  2059 	C$i2c.h$219$1$92 ==.
                                   2060 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2061 	jbc	_SI,00112$
      000355 80 FB            [24] 2062 	sjmp	00101$
      000357                       2063 00112$:
                           000357  2064 	C$i2c.h$220$1$92 ==.
                           000357  2065 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2066 	ret
                                   2067 ;------------------------------------------------------------
                                   2068 ;Allocation info for local variables in function 'i2c_read'
                                   2069 ;------------------------------------------------------------
                                   2070 ;input_data                Allocated to registers 
                                   2071 ;------------------------------------------------------------
                           000358  2072 	G$i2c_read$0$0 ==.
                           000358  2073 	C$i2c.h$223$1$92 ==.
                                   2074 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2075 ;	-----------------------------------------
                                   2076 ;	 function i2c_read
                                   2077 ;	-----------------------------------------
      000358                       2078 _i2c_read:
                           000358  2079 	C$i2c.h$226$1$94 ==.
                                   2080 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2081 00101$:
      000358 30 C3 FD         [24] 2082 	jnb	_SI,00101$
                           00035B  2083 	C$i2c.h$227$1$94 ==.
                                   2084 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2085 	mov	dpl,_SMB0DAT
                           00035E  2086 	C$i2c.h$228$1$94 ==.
                                   2087 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2088 	clr	_SI
                           000360  2089 	C$i2c.h$229$1$94 ==.
                                   2090 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2091 	C$i2c.h$230$1$94 ==.
                           000360  2092 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2093 	ret
                                   2094 ;------------------------------------------------------------
                                   2095 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2096 ;------------------------------------------------------------
                                   2097 ;input_data                Allocated to registers r7 
                                   2098 ;------------------------------------------------------------
                           000361  2099 	G$i2c_read_and_stop$0$0 ==.
                           000361  2100 	C$i2c.h$233$1$94 ==.
                                   2101 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2102 ;	-----------------------------------------
                                   2103 ;	 function i2c_read_and_stop
                                   2104 ;	-----------------------------------------
      000361                       2105 _i2c_read_and_stop:
                           000361  2106 	C$i2c.h$236$1$96 ==.
                                   2107 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2108 00101$:
      000361 30 C3 FD         [24] 2109 	jnb	_SI,00101$
                           000364  2110 	C$i2c.h$237$1$96 ==.
                                   2111 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2112 	mov	r7,_SMB0DAT
                           000366  2113 	C$i2c.h$238$1$96 ==.
                                   2114 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2115 	clr	_SI
                           000368  2116 	C$i2c.h$239$1$96 ==.
                                   2117 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2118 	setb	_STO
                           00036A  2119 	C$i2c.h$240$1$96 ==.
                                   2120 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2121 00104$:
                           00036A  2122 	C$i2c.h$241$1$96 ==.
                                   2123 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2124 	jbc	_SI,00122$
      00036D 80 FB            [24] 2125 	sjmp	00104$
      00036F                       2126 00122$:
                           00036F  2127 	C$i2c.h$242$1$96 ==.
                                   2128 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2129 	mov	dpl,r7
                           000371  2130 	C$i2c.h$243$1$96 ==.
                           000371  2131 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2132 	ret
                                   2133 ;------------------------------------------------------------
                                   2134 ;Allocation info for local variables in function 'i2c_write_data'
                                   2135 ;------------------------------------------------------------
                                   2136 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2137 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2138 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2139 ;addr                      Allocated to registers r7 
                                   2140 ;i                         Allocated to registers 
                                   2141 ;------------------------------------------------------------
                           000372  2142 	G$i2c_write_data$0$0 ==.
                           000372  2143 	C$i2c.h$246$1$96 ==.
                                   2144 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2145 ;	-----------------------------------------
                                   2146 ;	 function i2c_write_data
                                   2147 ;	-----------------------------------------
      000372                       2148 _i2c_write_data:
      000372 AF 82            [24] 2149 	mov	r7,dpl
                           000374  2150 	C$i2c.h$250$1$98 ==.
                                   2151 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2152 	push	ar7
      000376 12r03r37         [24] 2153 	lcall	_i2c_start
      000379 D0 07            [24] 2154 	pop	ar7
                           00037B  2155 	C$i2c.h$251$1$98 ==.
                                   2156 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2157 	mov	a,#0xFE
      00037D 5F               [12] 2158 	anl	a,r7
      00037E F5 82            [12] 2159 	mov	dpl,a
      000380 12r03r44         [24] 2160 	lcall	_i2c_write
                           000383  2161 	C$i2c.h$252$1$98 ==.
                                   2162 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2163 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2164 	lcall	_i2c_write
                           000389  2165 	C$i2c.h$253$1$98 ==.
                                   2166 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2167 	mov	r7,#0x00
      00038B                       2168 00103$:
      00038B AD*09            [24] 2169 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2170 	mov	r6,#0x00
      00038F 1D               [12] 2171 	dec	r5
      000390 BD FF 01         [24] 2172 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2173 	dec	r6
      000394                       2174 00114$:
      000394 8F 03            [24] 2175 	mov	ar3,r7
      000396 7C 00            [12] 2176 	mov	r4,#0x00
      000398 C3               [12] 2177 	clr	c
      000399 EB               [12] 2178 	mov	a,r3
      00039A 9D               [12] 2179 	subb	a,r5
      00039B EC               [12] 2180 	mov	a,r4
      00039C 64 80            [12] 2181 	xrl	a,#0x80
      00039E 8E F0            [24] 2182 	mov	b,r6
      0003A0 63 F0 80         [24] 2183 	xrl	b,#0x80
      0003A3 95 F0            [12] 2184 	subb	a,b
      0003A5 50 1F            [24] 2185 	jnc	00101$
                           0003A7  2186 	C$i2c.h$254$1$98 ==.
                                   2187 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2188 	mov	a,r7
      0003A8 25*06            [12] 2189 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2190 	mov	r4,a
      0003AB E4               [12] 2191 	clr	a
      0003AC 35*07            [12] 2192 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2193 	mov	r5,a
      0003AF AE*08            [24] 2194 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2195 	mov	dpl,r4
      0003B3 8D 83            [24] 2196 	mov	dph,r5
      0003B5 8E F0            [24] 2197 	mov	b,r6
      0003B7 12r00r00         [24] 2198 	lcall	__gptrget
      0003BA F5 82            [12] 2199 	mov	dpl,a
      0003BC C0 07            [24] 2200 	push	ar7
      0003BE 12r03r44         [24] 2201 	lcall	_i2c_write
      0003C1 D0 07            [24] 2202 	pop	ar7
                           0003C3  2203 	C$i2c.h$253$1$98 ==.
                                   2204 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2205 	inc	r7
      0003C4 80 C5            [24] 2206 	sjmp	00103$
      0003C6                       2207 00101$:
                           0003C6  2208 	C$i2c.h$255$1$98 ==.
                                   2209 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2210 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2211 	mov	r7,#0x00
      0003CA 1E               [12] 2212 	dec	r6
      0003CB BE FF 01         [24] 2213 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2214 	dec	r7
      0003CF                       2215 00116$:
      0003CF EE               [12] 2216 	mov	a,r6
      0003D0 25*06            [12] 2217 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2218 	mov	r6,a
      0003D3 EF               [12] 2219 	mov	a,r7
      0003D4 35*07            [12] 2220 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2221 	mov	r7,a
      0003D7 AD*08            [24] 2222 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2223 	mov	dpl,r6
      0003DB 8F 83            [24] 2224 	mov	dph,r7
      0003DD 8D F0            [24] 2225 	mov	b,r5
      0003DF 12r00r00         [24] 2226 	lcall	__gptrget
      0003E2 F5 82            [12] 2227 	mov	dpl,a
      0003E4 12r03r4D         [24] 2228 	lcall	_i2c_write_and_stop
                           0003E7  2229 	C$i2c.h$256$1$98 ==.
                           0003E7  2230 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2231 	ret
                                   2232 ;------------------------------------------------------------
                                   2233 ;Allocation info for local variables in function 'i2c_read_data'
                                   2234 ;------------------------------------------------------------
                                   2235 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2236 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2237 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2238 ;addr                      Allocated to registers r7 
                                   2239 ;j                         Allocated to registers 
                                   2240 ;------------------------------------------------------------
                           0003E8  2241 	G$i2c_read_data$0$0 ==.
                           0003E8  2242 	C$i2c.h$259$1$98 ==.
                                   2243 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2244 ;	-----------------------------------------
                                   2245 ;	 function i2c_read_data
                                   2246 ;	-----------------------------------------
      0003E8                       2247 _i2c_read_data:
      0003E8 AF 82            [24] 2248 	mov	r7,dpl
                           0003EA  2249 	C$i2c.h$262$1$100 ==.
                                   2250 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2251 	push	ar7
      0003EC 12r03r37         [24] 2252 	lcall	_i2c_start
      0003EF D0 07            [24] 2253 	pop	ar7
                           0003F1  2254 	C$i2c.h$263$1$100 ==.
                                   2255 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2256 	mov	ar6,r7
      0003F3 74 FE            [12] 2257 	mov	a,#0xFE
      0003F5 5E               [12] 2258 	anl	a,r6
      0003F6 F5 82            [12] 2259 	mov	dpl,a
      0003F8 C0 07            [24] 2260 	push	ar7
      0003FA 12r03r44         [24] 2261 	lcall	_i2c_write
                           0003FD  2262 	C$i2c.h$264$1$100 ==.
                                   2263 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2264 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2265 	lcall	_i2c_write_and_stop
                           000403  2266 	C$i2c.h$265$1$100 ==.
                                   2267 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2268 	lcall	_i2c_start
      000406 D0 07            [24] 2269 	pop	ar7
                           000408  2270 	C$i2c.h$266$1$100 ==.
                                   2271 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2272 	mov	a,#0x01
      00040A 4F               [12] 2273 	orl	a,r7
      00040B F5 82            [12] 2274 	mov	dpl,a
      00040D 12r03r44         [24] 2275 	lcall	_i2c_write
                           000410  2276 	C$i2c.h$267$1$100 ==.
                                   2277 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2278 	mov	r7,#0x00
      000412                       2279 00103$:
      000412 AD*0E            [24] 2280 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2281 	mov	r6,#0x00
      000416 1D               [12] 2282 	dec	r5
      000417 BD FF 01         [24] 2283 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2284 	dec	r6
      00041B                       2285 00114$:
      00041B 8F 03            [24] 2286 	mov	ar3,r7
      00041D 7C 00            [12] 2287 	mov	r4,#0x00
      00041F C3               [12] 2288 	clr	c
      000420 EB               [12] 2289 	mov	a,r3
      000421 9D               [12] 2290 	subb	a,r5
      000422 EC               [12] 2291 	mov	a,r4
      000423 64 80            [12] 2292 	xrl	a,#0x80
      000425 8E F0            [24] 2293 	mov	b,r6
      000427 63 F0 80         [24] 2294 	xrl	b,#0x80
      00042A 95 F0            [12] 2295 	subb	a,b
      00042C 50 2E            [24] 2296 	jnc	00101$
                           00042E  2297 	C$i2c.h$269$2$101 ==.
                                   2298 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2299 	setb	_AA
                           000430  2300 	C$i2c.h$270$2$101 ==.
                                   2301 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2302 	mov	a,r7
      000431 25*0B            [12] 2303 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2304 	mov	r4,a
      000434 E4               [12] 2305 	clr	a
      000435 35*0C            [12] 2306 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2307 	mov	r5,a
      000438 AE*0D            [24] 2308 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2309 	push	ar7
      00043C C0 06            [24] 2310 	push	ar6
      00043E C0 05            [24] 2311 	push	ar5
      000440 C0 04            [24] 2312 	push	ar4
      000442 12r03r58         [24] 2313 	lcall	_i2c_read
      000445 AB 82            [24] 2314 	mov	r3,dpl
      000447 D0 04            [24] 2315 	pop	ar4
      000449 D0 05            [24] 2316 	pop	ar5
      00044B D0 06            [24] 2317 	pop	ar6
      00044D D0 07            [24] 2318 	pop	ar7
      00044F 8C 82            [24] 2319 	mov	dpl,r4
      000451 8D 83            [24] 2320 	mov	dph,r5
      000453 8E F0            [24] 2321 	mov	b,r6
      000455 EB               [12] 2322 	mov	a,r3
      000456 12r00r00         [24] 2323 	lcall	__gptrput
                           000459  2324 	C$i2c.h$267$1$100 ==.
                                   2325 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2326 	inc	r7
      00045A 80 B6            [24] 2327 	sjmp	00103$
      00045C                       2328 00101$:
                           00045C  2329 	C$i2c.h$272$1$100 ==.
                                   2330 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2331 	clr	_AA
                           00045E  2332 	C$i2c.h$273$1$100 ==.
                                   2333 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2334 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2335 	mov	r7,#0x00
      000462 1E               [12] 2336 	dec	r6
      000463 BE FF 01         [24] 2337 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2338 	dec	r7
      000467                       2339 00116$:
      000467 EE               [12] 2340 	mov	a,r6
      000468 25*0B            [12] 2341 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2342 	mov	r6,a
      00046B EF               [12] 2343 	mov	a,r7
      00046C 35*0C            [12] 2344 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2345 	mov	r7,a
      00046F AD*0D            [24] 2346 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2347 	push	ar7
      000473 C0 06            [24] 2348 	push	ar6
      000475 C0 05            [24] 2349 	push	ar5
      000477 12r03r61         [24] 2350 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2351 	mov	r4,dpl
      00047C D0 05            [24] 2352 	pop	ar5
      00047E D0 06            [24] 2353 	pop	ar6
      000480 D0 07            [24] 2354 	pop	ar7
      000482 8E 82            [24] 2355 	mov	dpl,r6
      000484 8F 83            [24] 2356 	mov	dph,r7
      000486 8D F0            [24] 2357 	mov	b,r5
      000488 EC               [12] 2358 	mov	a,r4
      000489 12r00r00         [24] 2359 	lcall	__gptrput
                           00048C  2360 	C$i2c.h$274$1$100 ==.
                           00048C  2361 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2362 	ret
                                   2363 ;------------------------------------------------------------
                                   2364 ;Allocation info for local variables in function 'Accel_Init'
                                   2365 ;------------------------------------------------------------
                                   2366 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2367 ;------------------------------------------------------------
                           00048D  2368 	G$Accel_Init$0$0 ==.
                           00048D  2369 	C$i2c.h$283$1$100 ==.
                                   2370 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2371 ;	-----------------------------------------
                                   2372 ;	 function Accel_Init
                                   2373 ;	-----------------------------------------
      00048D                       2374 _Accel_Init:
                           00048D  2375 	C$i2c.h$287$1$103 ==.
                                   2376 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2377 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2378 	C$i2c.h$289$1$103 ==.
                                   2379 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2380 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2381 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2382 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2383 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2384 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2385 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2386 	lcall	_i2c_write_data
                           0004A5  2387 	C$i2c.h$290$1$103 ==.
                                   2388 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2389 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2390 	C$i2c.h$292$1$103 ==.
                                   2391 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2392 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2393 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2394 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2395 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2396 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2397 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2398 	lcall	_i2c_write_data
                           0004BD  2399 	C$i2c.h$293$1$103 ==.
                                   2400 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2401 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2402 	C$i2c.h$294$1$103 ==.
                                   2403 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2404 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2405 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2406 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2407 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2408 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2409 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2410 	lcall	_i2c_write_data
                           0004D5  2411 	C$i2c.h$298$1$103 ==.
                           0004D5  2412 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2413 	ret
                                   2414 ;------------------------------------------------------------
                                   2415 ;Allocation info for local variables in function 'main'
                                   2416 ;------------------------------------------------------------
                           0004D6  2417 	G$main$0$0 ==.
                           0004D6  2418 	C$lab6.c$82$1$103 ==.
                                   2419 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:82: void main(void)
                                   2420 ;	-----------------------------------------
                                   2421 ;	 function main
                                   2422 ;	-----------------------------------------
      0004D6                       2423 _main:
                           0004D6  2424 	C$lab6.c$84$1$123 ==.
                                   2425 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:84: Sys_Init();
      0004D6 12r00r30         [24] 2426 	lcall	_Sys_Init
                           0004D9  2427 	C$lab6.c$85$1$123 ==.
                                   2428 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:85: putchar(' '); //the quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2429 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2430 	lcall	_putchar
                           0004DF  2431 	C$lab6.c$86$1$123 ==.
                                   2432 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:86: Port_Init();
      0004DF 12r12r54         [24] 2433 	lcall	_Port_Init
                           0004E2  2434 	C$lab6.c$87$1$123 ==.
                                   2435 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:87: XBR0_Init();
      0004E2 12r12r84         [24] 2436 	lcall	_XBR0_Init
                           0004E5  2437 	C$lab6.c$88$1$123 ==.
                                   2438 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:88: PCA_Init();
      0004E5 12r12r6C         [24] 2439 	lcall	_PCA_Init
                           0004E8  2440 	C$lab6.c$89$1$123 ==.
                                   2441 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:89: SMB_Init();
      0004E8 12r12r88         [24] 2442 	lcall	_SMB_Init
                           0004EB  2443 	C$lab6.c$90$1$123 ==.
                                   2444 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:90: ADC_Init();
      0004EB 12r12r8E         [24] 2445 	lcall	_ADC_Init
                           0004EE  2446 	C$lab6.c$92$1$123 ==.
                                   2447 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:92: count =0;
      0004EE E4               [12] 2448 	clr	a
      0004EF F5*10            [12] 2449 	mov	_count,a
      0004F1 F5*11            [12] 2450 	mov	(_count + 1),a
                           0004F3  2451 	C$lab6.c$94$1$123 ==.
                                   2452 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:94: RUDDER_PW= PW_CENTER_RUDDER;
      0004F3 85*1A*24         [24] 2453 	mov	_RUDDER_PW,_PW_CENTER_RUDDER
      0004F6 85*1B*25         [24] 2454 	mov	(_RUDDER_PW + 1),(_PW_CENTER_RUDDER + 1)
                           0004F9  2455 	C$lab6.c$95$1$123 ==.
                                   2456 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:95: ANGLE_PW = PW_CENTER_ANGLE;
      0004F9 85*20*28         [24] 2457 	mov	_ANGLE_PW,_PW_CENTER_ANGLE
      0004FC 85*21*29         [24] 2458 	mov	(_ANGLE_PW + 1),(_PW_CENTER_ANGLE + 1)
                           0004FF  2459 	C$lab6.c$96$1$123 ==.
                                   2460 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:96: RTHRUST_PW = PW_NUET_THRUST;
      0004FF 85*14*2C         [24] 2461 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      000502 85*15*2D         [24] 2462 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           000505  2463 	C$lab6.c$97$1$123 ==.
                                   2464 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:97: LTHRUST_PW = PW_NUET_THRUST;
      000505 85*14*2E         [24] 2465 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      000508 85*15*2F         [24] 2466 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           00050B  2467 	C$lab6.c$99$1$123 ==.
                                   2468 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:99: RDR_lo_to_hi = 0xFFFF - RUDDER_PW;
      00050B 14               [12] 2469 	dec	a
      00050C C3               [12] 2470 	clr	c
      00050D 95*24            [12] 2471 	subb	a,_RUDDER_PW
      00050F F5*26            [12] 2472 	mov	_RDR_lo_to_hi,a
      000511 74 FF            [12] 2473 	mov	a,#0xFF
      000513 95*25            [12] 2474 	subb	a,(_RUDDER_PW + 1)
      000515 F5*27            [12] 2475 	mov	(_RDR_lo_to_hi + 1),a
                           000517  2476 	C$lab6.c$100$1$123 ==.
                                   2477 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:100: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      000517 74 FF            [12] 2478 	mov	a,#0xFF
      000519 C3               [12] 2479 	clr	c
      00051A 95*2C            [12] 2480 	subb	a,_RTHRUST_PW
      00051C F5*30            [12] 2481 	mov	_RTRST_lo_to_hi,a
      00051E 74 FF            [12] 2482 	mov	a,#0xFF
      000520 95*2D            [12] 2483 	subb	a,(_RTHRUST_PW + 1)
      000522 F5*31            [12] 2484 	mov	(_RTRST_lo_to_hi + 1),a
                           000524  2485 	C$lab6.c$101$1$123 ==.
                                   2486 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:101: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      000524 74 FF            [12] 2487 	mov	a,#0xFF
      000526 C3               [12] 2488 	clr	c
      000527 95*2E            [12] 2489 	subb	a,_LTHRUST_PW
      000529 F5*32            [12] 2490 	mov	_LTRST_lo_to_hi,a
      00052B 74 FF            [12] 2491 	mov	a,#0xFF
      00052D 95*2F            [12] 2492 	subb	a,(_LTHRUST_PW + 1)
      00052F F5*33            [12] 2493 	mov	(_LTRST_lo_to_hi + 1),a
                           000531  2494 	C$lab6.c$102$1$123 ==.
                                   2495 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:102: AGL_lo_to_hi = 0xFFFF - ANGLE_PW;
      000531 74 FF            [12] 2496 	mov	a,#0xFF
      000533 C3               [12] 2497 	clr	c
      000534 95*28            [12] 2498 	subb	a,_ANGLE_PW
      000536 F5*2A            [12] 2499 	mov	_AGL_lo_to_hi,a
      000538 74 FF            [12] 2500 	mov	a,#0xFF
      00053A 95*29            [12] 2501 	subb	a,(_ANGLE_PW + 1)
      00053C F5*2B            [12] 2502 	mov	(_AGL_lo_to_hi + 1),a
                           00053E  2503 	C$lab6.c$104$1$123 ==.
                                   2504 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:104: PCA0CP0 = RDR_lo_to_hi;
      00053E 85*26 EA         [24] 2505 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      000541 85*27 FA         [24] 2506 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           000544  2507 	C$lab6.c$105$1$123 ==.
                                   2508 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:105: PCA0CP1 = AGL_lo_to_hi;	
      000544 85*2A EB         [24] 2509 	mov	((_PCA0CP1 >> 0) & 0xFF),_AGL_lo_to_hi
      000547 85*2B FB         [24] 2510 	mov	((_PCA0CP1 >> 8) & 0xFF),(_AGL_lo_to_hi + 1)
                           00054A  2511 	C$lab6.c$106$1$123 ==.
                                   2512 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:106: PCA0CP2 = RTRST_lo_to_hi;
      00054A 85*30 EC         [24] 2513 	mov	((_PCA0CP2 >> 0) & 0xFF),_RTRST_lo_to_hi
      00054D 85*31 FC         [24] 2514 	mov	((_PCA0CP2 >> 8) & 0xFF),(_RTRST_lo_to_hi + 1)
                           000550  2515 	C$lab6.c$107$1$123 ==.
                                   2516 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:107: PCA0CP3 = LTRST_lo_to_hi;
      000550 85*32 ED         [24] 2517 	mov	((_PCA0CP3 >> 0) & 0xFF),_LTRST_lo_to_hi
      000553 85*33 FD         [24] 2518 	mov	((_PCA0CP3 >> 8) & 0xFF),(_LTRST_lo_to_hi + 1)
                           000556  2519 	C$lab6.c$109$1$123 ==.
                                   2520 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:109: kpkd();
      000556 12r05rFC         [24] 2521 	lcall	_kpkd
                           000559  2522 	C$lab6.c$113$1$123 ==.
                                   2523 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:113: direction();
      000559 12r07r56         [24] 2524 	lcall	_direction
                           00055C  2525 	C$lab6.c$114$1$123 ==.
                                   2526 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:114: while (1)
      00055C                       2527 00106$:
                           00055C  2528 	C$lab6.c$117$2$124 ==.
                                   2529 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:117: wait();
      00055C 12r12r2D         [24] 2530 	lcall	_wait
                           00055F  2531 	C$lab6.c$118$2$124 ==.
                                   2532 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:118: if ((count +1) % 2 ==0)
      00055F 85*10 82         [24] 2533 	mov	dpl,_count
      000562 85*11 83         [24] 2534 	mov	dph,(_count + 1)
      000565 A3               [24] 2535 	inc	dptr
      000566 75*00 02         [24] 2536 	mov	__modsint_PARM_2,#0x02
      000569 75*01 00         [24] 2537 	mov	(__modsint_PARM_2 + 1),#0x00
      00056C 12r00r00         [24] 2538 	lcall	__modsint
      00056F E5 82            [12] 2539 	mov	a,dpl
      000571 85 83 F0         [24] 2540 	mov	b,dph
      000574 45 F0            [12] 2541 	orl	a,b
      000576 70 03            [24] 2542 	jnz	00102$
                           000578  2543 	C$lab6.c$121$3$125 ==.
                                   2544 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:121: Steering_func();
      000578 12r06rE8         [24] 2545 	lcall	_Steering_func
      00057B                       2546 00102$:
                           00057B  2547 	C$lab6.c$123$2$124 ==.
                                   2548 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:123: if ((count +1) % 8 ==0)
      00057B 85*10 82         [24] 2549 	mov	dpl,_count
      00057E 85*11 83         [24] 2550 	mov	dph,(_count + 1)
      000581 A3               [24] 2551 	inc	dptr
      000582 75*00 08         [24] 2552 	mov	__modsint_PARM_2,#0x08
      000585 75*01 00         [24] 2553 	mov	(__modsint_PARM_2 + 1),#0x00
      000588 12r00r00         [24] 2554 	lcall	__modsint
      00058B E5 82            [12] 2555 	mov	a,dpl
      00058D 85 83 F0         [24] 2556 	mov	b,dph
      000590 45 F0            [12] 2557 	orl	a,b
      000592 70 C8            [24] 2558 	jnz	00106$
                           000594  2559 	C$lab6.c$125$3$126 ==.
                                   2560 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:125: Change_D();
      000594 12r06r48         [24] 2561 	lcall	_Change_D
      000597 80 C3            [24] 2562 	sjmp	00106$
                           000599  2563 	C$lab6.c$129$1$123 ==.
                           000599  2564 	XG$main$0$0 ==.
      000599 22               [24] 2565 	ret
                                   2566 ;------------------------------------------------------------
                                   2567 ;Allocation info for local variables in function 'Calibrate'
                                   2568 ;------------------------------------------------------------
                           00059A  2569 	G$Calibrate$0$0 ==.
                           00059A  2570 	C$lab6.c$131$1$123 ==.
                                   2571 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:131: void Calibrate(void)
                                   2572 ;	-----------------------------------------
                                   2573 ;	 function Calibrate
                                   2574 ;	-----------------------------------------
      00059A                       2575 _Calibrate:
                           00059A  2576 	C$lab6.c$135$1$128 ==.
                                   2577 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:135: Rudder_cal();
      00059A 12r08r08         [24] 2578 	lcall	_Rudder_cal
                           00059D  2579 	C$lab6.c$136$1$128 ==.
                                   2580 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:136: RUDDER_PW= PW_CENTER_RUDDER;
      00059D 85*1A*24         [24] 2581 	mov	_RUDDER_PW,_PW_CENTER_RUDDER
      0005A0 85*1B*25         [24] 2582 	mov	(_RUDDER_PW + 1),(_PW_CENTER_RUDDER + 1)
                           0005A3  2583 	C$lab6.c$137$1$128 ==.
                                   2584 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:137: RDR_lo_to_hi = 0xFFFF - RUDDER_PW;
      0005A3 74 FF            [12] 2585 	mov	a,#0xFF
      0005A5 C3               [12] 2586 	clr	c
      0005A6 95*24            [12] 2587 	subb	a,_RUDDER_PW
      0005A8 F5*26            [12] 2588 	mov	_RDR_lo_to_hi,a
      0005AA 74 FF            [12] 2589 	mov	a,#0xFF
      0005AC 95*25            [12] 2590 	subb	a,(_RUDDER_PW + 1)
      0005AE F5*27            [12] 2591 	mov	(_RDR_lo_to_hi + 1),a
                           0005B0  2592 	C$lab6.c$138$1$128 ==.
                                   2593 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:138: PCA0CP0 = RDR_lo_to_hi;
      0005B0 85*26 EA         [24] 2594 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      0005B3 85*27 FA         [24] 2595 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           0005B6  2596 	C$lab6.c$140$1$128 ==.
                                   2597 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:140: Angle_cal();
      0005B6 12r0ArB5         [24] 2598 	lcall	_Angle_cal
                           0005B9  2599 	C$lab6.c$141$1$128 ==.
                                   2600 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:141: ANGLE_PW = PW_CENTER_ANGLE;
      0005B9 85*20*28         [24] 2601 	mov	_ANGLE_PW,_PW_CENTER_ANGLE
      0005BC 85*21*29         [24] 2602 	mov	(_ANGLE_PW + 1),(_PW_CENTER_ANGLE + 1)
                           0005BF  2603 	C$lab6.c$142$1$128 ==.
                                   2604 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:142: AGL_lo_to_hi = 0xFFFF - ANGLE_PW;
      0005BF 74 FF            [12] 2605 	mov	a,#0xFF
      0005C1 C3               [12] 2606 	clr	c
      0005C2 95*28            [12] 2607 	subb	a,_ANGLE_PW
      0005C4 F5*2A            [12] 2608 	mov	_AGL_lo_to_hi,a
      0005C6 74 FF            [12] 2609 	mov	a,#0xFF
      0005C8 95*29            [12] 2610 	subb	a,(_ANGLE_PW + 1)
      0005CA F5*2B            [12] 2611 	mov	(_AGL_lo_to_hi + 1),a
                           0005CC  2612 	C$lab6.c$143$1$128 ==.
                                   2613 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:143: PCA0CP1 = AGL_lo_to_hi;
      0005CC 85*2A EB         [24] 2614 	mov	((_PCA0CP1 >> 0) & 0xFF),_AGL_lo_to_hi
      0005CF 85*2B FB         [24] 2615 	mov	((_PCA0CP1 >> 8) & 0xFF),(_AGL_lo_to_hi + 1)
                           0005D2  2616 	C$lab6.c$145$1$128 ==.
                                   2617 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:145: Thrust_cal();
      0005D2 12r0Dr70         [24] 2618 	lcall	_Thrust_cal
                           0005D5  2619 	C$lab6.c$146$1$128 ==.
                                   2620 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:146: RTHRUST_PW = PW_NUET_THRUST;
      0005D5 85*14*2C         [24] 2621 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      0005D8 85*15*2D         [24] 2622 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           0005DB  2623 	C$lab6.c$147$1$128 ==.
                                   2624 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:147: LTHRUST_PW = PW_NUET_THRUST;
      0005DB 85*14*2E         [24] 2625 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      0005DE 85*15*2F         [24] 2626 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           0005E1  2627 	C$lab6.c$148$1$128 ==.
                                   2628 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:148: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      0005E1 74 FF            [12] 2629 	mov	a,#0xFF
      0005E3 C3               [12] 2630 	clr	c
      0005E4 95*2C            [12] 2631 	subb	a,_RTHRUST_PW
      0005E6 F5*30            [12] 2632 	mov	_RTRST_lo_to_hi,a
      0005E8 74 FF            [12] 2633 	mov	a,#0xFF
      0005EA 95*2D            [12] 2634 	subb	a,(_RTHRUST_PW + 1)
      0005EC F5*31            [12] 2635 	mov	(_RTRST_lo_to_hi + 1),a
                           0005EE  2636 	C$lab6.c$149$1$128 ==.
                                   2637 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:149: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      0005EE 74 FF            [12] 2638 	mov	a,#0xFF
      0005F0 C3               [12] 2639 	clr	c
      0005F1 95*2E            [12] 2640 	subb	a,_LTHRUST_PW
      0005F3 F5*32            [12] 2641 	mov	_LTRST_lo_to_hi,a
      0005F5 74 FF            [12] 2642 	mov	a,#0xFF
      0005F7 95*2F            [12] 2643 	subb	a,(_LTHRUST_PW + 1)
      0005F9 F5*33            [12] 2644 	mov	(_LTRST_lo_to_hi + 1),a
                           0005FB  2645 	C$lab6.c$150$1$128 ==.
                           0005FB  2646 	XG$Calibrate$0$0 ==.
      0005FB 22               [24] 2647 	ret
                                   2648 ;------------------------------------------------------------
                                   2649 ;Allocation info for local variables in function 'kpkd'
                                   2650 ;------------------------------------------------------------
                           0005FC  2651 	G$kpkd$0$0 ==.
                           0005FC  2652 	C$lab6.c$152$1$128 ==.
                                   2653 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:152: void kpkd(void)
                                   2654 ;	-----------------------------------------
                                   2655 ;	 function kpkd
                                   2656 ;	-----------------------------------------
      0005FC                       2657 _kpkd:
                           0005FC  2658 	C$lab6.c$154$1$130 ==.
                                   2659 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:154: lcd_clear();
      0005FC 12r00rE1         [24] 2660 	lcall	_lcd_clear
                           0005FF  2661 	C$lab6.c$155$1$130 ==.
                                   2662 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:155: lcd_print("Please enter a kp value:\n ");
      0005FF 74r29            [12] 2663 	mov	a,#___str_3
      000601 C0 E0            [24] 2664 	push	acc
      000603 74s00            [12] 2665 	mov	a,#(___str_3 >> 8)
      000605 C0 E0            [24] 2666 	push	acc
      000607 74 80            [12] 2667 	mov	a,#0x80
      000609 C0 E0            [24] 2668 	push	acc
      00060B 12r00r5C         [24] 2669 	lcall	_lcd_print
      00060E 15 81            [12] 2670 	dec	sp
      000610 15 81            [12] 2671 	dec	sp
      000612 15 81            [12] 2672 	dec	sp
                           000614  2673 	C$lab6.c$156$1$130 ==.
                                   2674 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:156: kp = kpd_input(0);
      000614 75 82 00         [24] 2675 	mov	dpl,#0x00
      000617 12r01r99         [24] 2676 	lcall	_kpd_input
      00061A 85 82*39         [24] 2677 	mov	_kp,dpl
      00061D 85 83*3A         [24] 2678 	mov	(_kp + 1),dph
                           000620  2679 	C$lab6.c$157$1$130 ==.
                                   2680 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:157: lcd_clear();
      000620 12r00rE1         [24] 2681 	lcall	_lcd_clear
                           000623  2682 	C$lab6.c$158$1$130 ==.
                                   2683 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:158: lcd_print("Please enter a kd value:\n ");
      000623 74r44            [12] 2684 	mov	a,#___str_4
      000625 C0 E0            [24] 2685 	push	acc
      000627 74s00            [12] 2686 	mov	a,#(___str_4 >> 8)
      000629 C0 E0            [24] 2687 	push	acc
      00062B 74 80            [12] 2688 	mov	a,#0x80
      00062D C0 E0            [24] 2689 	push	acc
      00062F 12r00r5C         [24] 2690 	lcall	_lcd_print
      000632 15 81            [12] 2691 	dec	sp
      000634 15 81            [12] 2692 	dec	sp
      000636 15 81            [12] 2693 	dec	sp
                           000638  2694 	C$lab6.c$159$1$130 ==.
                                   2695 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:159: kd = kpd_input(0);
      000638 75 82 00         [24] 2696 	mov	dpl,#0x00
      00063B 12r01r99         [24] 2697 	lcall	_kpd_input
      00063E 85 82*3B         [24] 2698 	mov	_kd,dpl
      000641 85 83*3C         [24] 2699 	mov	(_kd + 1),dph
                           000644  2700 	C$lab6.c$160$1$130 ==.
                                   2701 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:160: lcd_clear();
      000644 12r00rE1         [24] 2702 	lcall	_lcd_clear
                           000647  2703 	C$lab6.c$161$1$130 ==.
                           000647  2704 	XG$kpkd$0$0 ==.
      000647 22               [24] 2705 	ret
                                   2706 ;------------------------------------------------------------
                                   2707 ;Allocation info for local variables in function 'Change_D'
                                   2708 ;------------------------------------------------------------
                                   2709 ;distance                  Allocated with name '_Change_D_distance_1_132'
                                   2710 ;------------------------------------------------------------
                           000648  2711 	G$Change_D$0$0 ==.
                           000648  2712 	C$lab6.c$164$1$130 ==.
                                   2713 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:164: void Change_D(void)
                                   2714 ;	-----------------------------------------
                                   2715 ;	 function Change_D
                                   2716 ;	-----------------------------------------
      000648                       2717 _Change_D:
                           000648  2718 	C$lab6.c$168$1$132 ==.
                                   2719 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:168: distance = Read_Ranger();
      000648 12r06rC2         [24] 2720 	lcall	_Read_Ranger
      00064B AE 82            [24] 2721 	mov	r6,dpl
      00064D AF 83            [24] 2722 	mov	r7,dph
                           00064F  2723 	C$lab6.c$169$1$132 ==.
                                   2724 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:169: r_data[0] = 0x51;
      00064F 75*36 51         [24] 2725 	mov	_r_data,#0x51
                           000652  2726 	C$lab6.c$170$1$132 ==.
                                   2727 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:170: i2c_write_data(r_addr, 0, r_data, 1);
      000652 75*06r36         [24] 2728 	mov	_i2c_write_data_PARM_3,#_r_data
      000655 75*07 00         [24] 2729 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000658 75*08 40         [24] 2730 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00065B 75*05 00         [24] 2731 	mov	_i2c_write_data_PARM_2,#0x00
      00065E 75*09 01         [24] 2732 	mov	_i2c_write_data_PARM_4,#0x01
      000661 85*38 82         [24] 2733 	mov	dpl,_r_addr
      000664 C0 07            [24] 2734 	push	ar7
      000666 C0 06            [24] 2735 	push	ar6
      000668 12r03r72         [24] 2736 	lcall	_i2c_write_data
      00066B D0 06            [24] 2737 	pop	ar6
      00066D D0 07            [24] 2738 	pop	ar7
                           00066F  2739 	C$lab6.c$171$1$132 ==.
                                   2740 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:171: printf("\r\n%u", distance);
      00066F C0 07            [24] 2741 	push	ar7
      000671 C0 06            [24] 2742 	push	ar6
      000673 C0 06            [24] 2743 	push	ar6
      000675 C0 07            [24] 2744 	push	ar7
      000677 74r5F            [12] 2745 	mov	a,#___str_5
      000679 C0 E0            [24] 2746 	push	acc
      00067B 74s00            [12] 2747 	mov	a,#(___str_5 >> 8)
      00067D C0 E0            [24] 2748 	push	acc
      00067F 74 80            [12] 2749 	mov	a,#0x80
      000681 C0 E0            [24] 2750 	push	acc
      000683 12r00r00         [24] 2751 	lcall	_printf
      000686 E5 81            [12] 2752 	mov	a,sp
      000688 24 FB            [12] 2753 	add	a,#0xfb
      00068A F5 81            [12] 2754 	mov	sp,a
      00068C D0 06            [24] 2755 	pop	ar6
      00068E D0 07            [24] 2756 	pop	ar7
                           000690  2757 	C$lab6.c$173$1$132 ==.
                                   2758 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:173: if (distance < 50)
      000690 C3               [12] 2759 	clr	c
      000691 EE               [12] 2760 	mov	a,r6
      000692 94 32            [12] 2761 	subb	a,#0x32
      000694 EF               [12] 2762 	mov	a,r7
      000695 94 00            [12] 2763 	subb	a,#0x00
      000697 50 28            [24] 2764 	jnc	00103$
                           000699  2765 	C$lab6.c$175$2$133 ==.
                                   2766 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:175: desired_D = (desired_D + 1800) % 3600;
      000699 90r00r50         [24] 2767 	mov	dptr,#_desired_D
      00069C E0               [24] 2768 	movx	a,@dptr
      00069D FE               [12] 2769 	mov	r6,a
      00069E A3               [24] 2770 	inc	dptr
      00069F E0               [24] 2771 	movx	a,@dptr
      0006A0 FF               [12] 2772 	mov	r7,a
      0006A1 74 08            [12] 2773 	mov	a,#0x08
      0006A3 2E               [12] 2774 	add	a,r6
      0006A4 F5 82            [12] 2775 	mov	dpl,a
      0006A6 74 07            [12] 2776 	mov	a,#0x07
      0006A8 3F               [12] 2777 	addc	a,r7
      0006A9 F5 83            [12] 2778 	mov	dph,a
      0006AB 75*00 10         [24] 2779 	mov	__modsint_PARM_2,#0x10
      0006AE 75*01 0E         [24] 2780 	mov	(__modsint_PARM_2 + 1),#0x0E
      0006B1 12r00r00         [24] 2781 	lcall	__modsint
      0006B4 E5 82            [12] 2782 	mov	a,dpl
      0006B6 85 83 F0         [24] 2783 	mov	b,dph
      0006B9 90r00r50         [24] 2784 	mov	dptr,#_desired_D
      0006BC F0               [24] 2785 	movx	@dptr,a
      0006BD E5 F0            [12] 2786 	mov	a,b
      0006BF A3               [24] 2787 	inc	dptr
      0006C0 F0               [24] 2788 	movx	@dptr,a
      0006C1                       2789 00103$:
                           0006C1  2790 	C$lab6.c$177$1$132 ==.
                           0006C1  2791 	XG$Change_D$0$0 ==.
      0006C1 22               [24] 2792 	ret
                                   2793 ;------------------------------------------------------------
                                   2794 ;Allocation info for local variables in function 'Read_Ranger'
                                   2795 ;------------------------------------------------------------
                                   2796 ;read                      Allocated to registers 
                                   2797 ;------------------------------------------------------------
                           0006C2  2798 	G$Read_Ranger$0$0 ==.
                           0006C2  2799 	C$lab6.c$179$1$132 ==.
                                   2800 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:179: unsigned int Read_Ranger(void)
                                   2801 ;	-----------------------------------------
                                   2802 ;	 function Read_Ranger
                                   2803 ;	-----------------------------------------
      0006C2                       2804 _Read_Ranger:
                           0006C2  2805 	C$lab6.c$182$1$135 ==.
                                   2806 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:182: i2c_read_data(r_addr, 2, r_data, 2);
      0006C2 75*0Br36         [24] 2807 	mov	_i2c_read_data_PARM_3,#_r_data
      0006C5 75*0C 00         [24] 2808 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0006C8 75*0D 40         [24] 2809 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0006CB 75*0A 02         [24] 2810 	mov	_i2c_read_data_PARM_2,#0x02
      0006CE 75*0E 02         [24] 2811 	mov	_i2c_read_data_PARM_4,#0x02
      0006D1 85*38 82         [24] 2812 	mov	dpl,_r_addr
      0006D4 12r03rE8         [24] 2813 	lcall	_i2c_read_data
                           0006D7  2814 	C$lab6.c$183$1$135 ==.
                                   2815 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:183: read = (((unsigned int) r_data[0] <<8) | r_data[1]);
      0006D7 AF*36            [24] 2816 	mov	r7,_r_data
      0006D9 7E 00            [12] 2817 	mov	r6,#0x00
      0006DB AC*37            [24] 2818 	mov	r4,(_r_data + 0x0001)
      0006DD 7D 00            [12] 2819 	mov	r5,#0x00
      0006DF EC               [12] 2820 	mov	a,r4
      0006E0 4E               [12] 2821 	orl	a,r6
      0006E1 F5 82            [12] 2822 	mov	dpl,a
      0006E3 ED               [12] 2823 	mov	a,r5
      0006E4 4F               [12] 2824 	orl	a,r7
      0006E5 F5 83            [12] 2825 	mov	dph,a
                           0006E7  2826 	C$lab6.c$184$1$135 ==.
                                   2827 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:184: return read;
                           0006E7  2828 	C$lab6.c$185$1$135 ==.
                           0006E7  2829 	XG$Read_Ranger$0$0 ==.
      0006E7 22               [24] 2830 	ret
                                   2831 ;------------------------------------------------------------
                                   2832 ;Allocation info for local variables in function 'Steering_func'
                                   2833 ;------------------------------------------------------------
                           0006E8  2834 	G$Steering_func$0$0 ==.
                           0006E8  2835 	C$lab6.c$187$1$135 ==.
                                   2836 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:187: void Steering_func(void)    ///FUNCTION TO HOLD ACTIONS FOR STEERING
                                   2837 ;	-----------------------------------------
                                   2838 ;	 function Steering_func
                                   2839 ;	-----------------------------------------
      0006E8                       2840 _Steering_func:
                           0006E8  2841 	C$lab6.c$189$1$137 ==.
                                   2842 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:189: actual_D = ReadCompass();
      0006E8 12r07rE2         [24] 2843 	lcall	_ReadCompass
      0006EB E5 82            [12] 2844 	mov	a,dpl
      0006ED 85 83 F0         [24] 2845 	mov	b,dph
      0006F0 90r00r52         [24] 2846 	mov	dptr,#_actual_D
      0006F3 F0               [24] 2847 	movx	@dptr,a
      0006F4 E5 F0            [12] 2848 	mov	a,b
      0006F6 A3               [24] 2849 	inc	dptr
      0006F7 F0               [24] 2850 	movx	@dptr,a
                           0006F8  2851 	C$lab6.c$190$1$137 ==.
                                   2852 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:190: lcd_clear();
      0006F8 12r00rE1         [24] 2853 	lcall	_lcd_clear
                           0006FB  2854 	C$lab6.c$191$1$137 ==.
                                   2855 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:191: lcd_print("%d", actual_D);
      0006FB 90r00r52         [24] 2856 	mov	dptr,#_actual_D
      0006FE E0               [24] 2857 	movx	a,@dptr
      0006FF C0 E0            [24] 2858 	push	acc
      000701 A3               [24] 2859 	inc	dptr
      000702 E0               [24] 2860 	movx	a,@dptr
      000703 C0 E0            [24] 2861 	push	acc
      000705 74r64            [12] 2862 	mov	a,#___str_6
      000707 C0 E0            [24] 2863 	push	acc
      000709 74s00            [12] 2864 	mov	a,#(___str_6 >> 8)
      00070B C0 E0            [24] 2865 	push	acc
      00070D 74 80            [12] 2866 	mov	a,#0x80
      00070F C0 E0            [24] 2867 	push	acc
      000711 12r00r5C         [24] 2868 	lcall	_lcd_print
      000714 E5 81            [12] 2869 	mov	a,sp
      000716 24 FB            [12] 2870 	add	a,#0xfb
      000718 F5 81            [12] 2871 	mov	sp,a
                           00071A  2872 	C$lab6.c$192$1$137 ==.
                                   2873 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:192: offset = (unsigned int)((actual_D +3600- desired_D ) % 3600);
      00071A 90r00r52         [24] 2874 	mov	dptr,#_actual_D
      00071D E0               [24] 2875 	movx	a,@dptr
      00071E FE               [12] 2876 	mov	r6,a
      00071F A3               [24] 2877 	inc	dptr
      000720 E0               [24] 2878 	movx	a,@dptr
      000721 FF               [12] 2879 	mov	r7,a
      000722 74 10            [12] 2880 	mov	a,#0x10
      000724 2E               [12] 2881 	add	a,r6
      000725 FE               [12] 2882 	mov	r6,a
      000726 74 0E            [12] 2883 	mov	a,#0x0E
      000728 3F               [12] 2884 	addc	a,r7
      000729 FF               [12] 2885 	mov	r7,a
      00072A 90r00r50         [24] 2886 	mov	dptr,#_desired_D
      00072D E0               [24] 2887 	movx	a,@dptr
      00072E FC               [12] 2888 	mov	r4,a
      00072F A3               [24] 2889 	inc	dptr
      000730 E0               [24] 2890 	movx	a,@dptr
      000731 FD               [12] 2891 	mov	r5,a
      000732 EE               [12] 2892 	mov	a,r6
      000733 C3               [12] 2893 	clr	c
      000734 9C               [12] 2894 	subb	a,r4
      000735 F5 82            [12] 2895 	mov	dpl,a
      000737 EF               [12] 2896 	mov	a,r7
      000738 9D               [12] 2897 	subb	a,r5
      000739 F5 83            [12] 2898 	mov	dph,a
      00073B 75*00 10         [24] 2899 	mov	__modsint_PARM_2,#0x10
      00073E 75*01 0E         [24] 2900 	mov	(__modsint_PARM_2 + 1),#0x0E
      000741 12r00r00         [24] 2901 	lcall	__modsint
      000744 AE 82            [24] 2902 	mov	r6,dpl
      000746 AF 83            [24] 2903 	mov	r7,dph
      000748 8E*34            [24] 2904 	mov	_offset,r6
      00074A 8F*35            [24] 2905 	mov	(_offset + 1),r7
                           00074C  2906 	C$lab6.c$193$1$137 ==.
                                   2907 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:193: Steering_Servo(offset);
      00074C 85*34 82         [24] 2908 	mov	dpl,_offset
      00074F 85*35 83         [24] 2909 	mov	dph,(_offset + 1)
      000752 12r10r9F         [24] 2910 	lcall	_Steering_Servo
                           000755  2911 	C$lab6.c$194$1$137 ==.
                           000755  2912 	XG$Steering_func$0$0 ==.
      000755 22               [24] 2913 	ret
                                   2914 ;------------------------------------------------------------
                                   2915 ;Allocation info for local variables in function 'direction'
                                   2916 ;------------------------------------------------------------
                                   2917 ;value                     Allocated to registers r6 r7 
                                   2918 ;------------------------------------------------------------
                           000756  2919 	G$direction$0$0 ==.
                           000756  2920 	C$lab6.c$196$1$137 ==.
                                   2921 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:196: unsigned int direction(void)        ///ADJUSTS THE VALUES OF DIRECTION SO THE DESIRED DIRECTION IS THE CAR'S 'NORTH'
                                   2922 ;	-----------------------------------------
                                   2923 ;	 function direction
                                   2924 ;	-----------------------------------------
      000756                       2925 _direction:
                           000756  2926 	C$lab6.c$199$1$139 ==.
                                   2927 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:199: count =0;
      000756 E4               [12] 2928 	clr	a
      000757 F5*10            [12] 2929 	mov	_count,a
      000759 F5*11            [12] 2930 	mov	(_count + 1),a
                           00075B  2931 	C$lab6.c$200$1$139 ==.
                                   2932 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:200: while (count < 1);
      00075B                       2933 00101$:
      00075B C3               [12] 2934 	clr	c
      00075C E5*10            [12] 2935 	mov	a,_count
      00075E 94 01            [12] 2936 	subb	a,#0x01
      000760 E5*11            [12] 2937 	mov	a,(_count + 1)
      000762 64 80            [12] 2938 	xrl	a,#0x80
      000764 94 80            [12] 2939 	subb	a,#0x80
      000766 40 F3            [24] 2940 	jc	00101$
                           000768  2941 	C$lab6.c$201$1$139 ==.
                                   2942 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:201: lcd_clear();
      000768 12r00rE1         [24] 2943 	lcall	_lcd_clear
                           00076B  2944 	C$lab6.c$202$1$139 ==.
                                   2945 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:202: lcd_print("Calibration:\nHello world!\n012_345_678:\nabc def ghij");
      00076B 74r67            [12] 2946 	mov	a,#___str_7
      00076D C0 E0            [24] 2947 	push	acc
      00076F 74s00            [12] 2948 	mov	a,#(___str_7 >> 8)
      000771 C0 E0            [24] 2949 	push	acc
      000773 74 80            [12] 2950 	mov	a,#0x80
      000775 C0 E0            [24] 2951 	push	acc
      000777 12r00r5C         [24] 2952 	lcall	_lcd_print
      00077A 15 81            [12] 2953 	dec	sp
      00077C 15 81            [12] 2954 	dec	sp
      00077E 15 81            [12] 2955 	dec	sp
                           000780  2956 	C$lab6.c$203$1$139 ==.
                                   2957 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:203: start();
      000780 12r12r1D         [24] 2958 	lcall	_start
                           000783  2959 	C$lab6.c$204$1$139 ==.
                                   2960 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:204: lcd_clear();
      000783 12r00rE1         [24] 2961 	lcall	_lcd_clear
                           000786  2962 	C$lab6.c$205$1$139 ==.
                                   2963 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:205: value = kpd_input(0);
      000786 75 82 00         [24] 2964 	mov	dpl,#0x00
      000789 12r01r99         [24] 2965 	lcall	_kpd_input
      00078C AE 82            [24] 2966 	mov	r6,dpl
      00078E AF 83            [24] 2967 	mov	r7,dph
                           000790  2968 	C$lab6.c$206$1$139 ==.
                                   2969 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:206: lcd_clear();
      000790 C0 07            [24] 2970 	push	ar7
      000792 C0 06            [24] 2971 	push	ar6
      000794 12r00rE1         [24] 2972 	lcall	_lcd_clear
      000797 D0 06            [24] 2973 	pop	ar6
      000799 D0 07            [24] 2974 	pop	ar7
                           00079B  2975 	C$lab6.c$207$1$139 ==.
                                   2976 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:207: lcd_print("\r\nThe desired direction is: %d", value);
      00079B C0 07            [24] 2977 	push	ar7
      00079D C0 06            [24] 2978 	push	ar6
      00079F C0 06            [24] 2979 	push	ar6
      0007A1 C0 07            [24] 2980 	push	ar7
      0007A3 74r9B            [12] 2981 	mov	a,#___str_8
      0007A5 C0 E0            [24] 2982 	push	acc
      0007A7 74s00            [12] 2983 	mov	a,#(___str_8 >> 8)
      0007A9 C0 E0            [24] 2984 	push	acc
      0007AB 74 80            [12] 2985 	mov	a,#0x80
      0007AD C0 E0            [24] 2986 	push	acc
      0007AF 12r00r5C         [24] 2987 	lcall	_lcd_print
      0007B2 E5 81            [12] 2988 	mov	a,sp
      0007B4 24 FB            [12] 2989 	add	a,#0xfb
      0007B6 F5 81            [12] 2990 	mov	sp,a
      0007B8 D0 06            [24] 2991 	pop	ar6
      0007BA D0 07            [24] 2992 	pop	ar7
                           0007BC  2993 	C$lab6.c$208$1$139 ==.
                                   2994 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:208: printf("\r\nThe desired direction is: %d", value);
      0007BC C0 07            [24] 2995 	push	ar7
      0007BE C0 06            [24] 2996 	push	ar6
      0007C0 C0 06            [24] 2997 	push	ar6
      0007C2 C0 07            [24] 2998 	push	ar7
      0007C4 74r9B            [12] 2999 	mov	a,#___str_8
      0007C6 C0 E0            [24] 3000 	push	acc
      0007C8 74s00            [12] 3001 	mov	a,#(___str_8 >> 8)
      0007CA C0 E0            [24] 3002 	push	acc
      0007CC 74 80            [12] 3003 	mov	a,#0x80
      0007CE C0 E0            [24] 3004 	push	acc
      0007D0 12r00r00         [24] 3005 	lcall	_printf
      0007D3 E5 81            [12] 3006 	mov	a,sp
      0007D5 24 FB            [12] 3007 	add	a,#0xfb
      0007D7 F5 81            [12] 3008 	mov	sp,a
      0007D9 D0 06            [24] 3009 	pop	ar6
      0007DB D0 07            [24] 3010 	pop	ar7
                           0007DD  3011 	C$lab6.c$210$1$139 ==.
                                   3012 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:210: return value;
      0007DD 8E 82            [24] 3013 	mov	dpl,r6
      0007DF 8F 83            [24] 3014 	mov	dph,r7
                           0007E1  3015 	C$lab6.c$211$1$139 ==.
                           0007E1  3016 	XG$direction$0$0 ==.
      0007E1 22               [24] 3017 	ret
                                   3018 ;------------------------------------------------------------
                                   3019 ;Allocation info for local variables in function 'ReadCompass'
                                   3020 ;------------------------------------------------------------
                                   3021 ;Data                      Allocated with name '_ReadCompass_Data_1_141'
                                   3022 ;Crange                    Allocated to registers 
                                   3023 ;addr                      Allocated to registers 
                                   3024 ;------------------------------------------------------------
                           0007E2  3025 	G$ReadCompass$0$0 ==.
                           0007E2  3026 	C$lab6.c$213$1$139 ==.
                                   3027 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:213: unsigned int ReadCompass(void)
                                   3028 ;	-----------------------------------------
                                   3029 ;	 function ReadCompass
                                   3030 ;	-----------------------------------------
      0007E2                       3031 _ReadCompass:
                           0007E2  3032 	C$lab6.c$219$1$141 ==.
                                   3033 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:219: i2c_read_data(addr, 2,Data,2);
      0007E2 75*0Br41         [24] 3034 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_1_141
      0007E5 75*0C 00         [24] 3035 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0007E8 75*0D 40         [24] 3036 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0007EB 75*0A 02         [24] 3037 	mov	_i2c_read_data_PARM_2,#0x02
      0007EE 75*0E 02         [24] 3038 	mov	_i2c_read_data_PARM_4,#0x02
      0007F1 75 82 C0         [24] 3039 	mov	dpl,#0xC0
      0007F4 12r03rE8         [24] 3040 	lcall	_i2c_read_data
                           0007F7  3041 	C$lab6.c$220$1$141 ==.
                                   3042 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:220: Crange = ((unsigned int) Data[0] << 8 | Data[1]);
      0007F7 AF*41            [24] 3043 	mov	r7,_ReadCompass_Data_1_141
      0007F9 7E 00            [12] 3044 	mov	r6,#0x00
      0007FB AC*42            [24] 3045 	mov	r4,(_ReadCompass_Data_1_141 + 0x0001)
      0007FD 7D 00            [12] 3046 	mov	r5,#0x00
      0007FF EC               [12] 3047 	mov	a,r4
      000800 4E               [12] 3048 	orl	a,r6
      000801 F5 82            [12] 3049 	mov	dpl,a
      000803 ED               [12] 3050 	mov	a,r5
      000804 4F               [12] 3051 	orl	a,r7
      000805 F5 83            [12] 3052 	mov	dph,a
                           000807  3053 	C$lab6.c$221$1$141 ==.
                                   3054 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:221: return Crange;
                           000807  3055 	C$lab6.c$222$1$141 ==.
                           000807  3056 	XG$ReadCompass$0$0 ==.
      000807 22               [24] 3057 	ret
                                   3058 ;------------------------------------------------------------
                                   3059 ;Allocation info for local variables in function 'Rudder_cal'
                                   3060 ;------------------------------------------------------------
                                   3061 ;st                        Allocated to registers r7 
                                   3062 ;value                     Allocated with name '_Rudder_cal_value_1_143'
                                   3063 ;times                     Allocated with name '_Rudder_cal_times_1_143'
                                   3064 ;------------------------------------------------------------
                           000808  3065 	G$Rudder_cal$0$0 ==.
                           000808  3066 	C$lab6.c$224$1$141 ==.
                                   3067 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:224: void Rudder_cal(void)
                                   3068 ;	-----------------------------------------
                                   3069 ;	 function Rudder_cal
                                   3070 ;	-----------------------------------------
      000808                       3071 _Rudder_cal:
                           000808  3072 	C$lab6.c$227$1$141 ==.
                                   3073 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:227: __xdata int value =0;
      000808 90r00r54         [24] 3074 	mov	dptr,#_Rudder_cal_value_1_143
      00080B E4               [12] 3075 	clr	a
      00080C F0               [24] 3076 	movx	@dptr,a
      00080D A3               [24] 3077 	inc	dptr
      00080E F0               [24] 3078 	movx	@dptr,a
                           00080F  3079 	C$lab6.c$228$1$141 ==.
                                   3080 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:228: __xdata int times =0;
      00080F 90r00r56         [24] 3081 	mov	dptr,#_Rudder_cal_times_1_143
      000812 F0               [24] 3082 	movx	@dptr,a
      000813 A3               [24] 3083 	inc	dptr
      000814 F0               [24] 3084 	movx	@dptr,a
                           000815  3085 	C$lab6.c$229$1$143 ==.
                                   3086 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:229: count =0;
      000815 F5*10            [12] 3087 	mov	_count,a
      000817 F5*11            [12] 3088 	mov	(_count + 1),a
                           000819  3089 	C$lab6.c$230$1$143 ==.
                                   3090 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:230: lcd_clear();
      000819 12r00rE1         [24] 3091 	lcall	_lcd_clear
                           00081C  3092 	C$lab6.c$231$1$143 ==.
                                   3093 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:231: lcd_print("Rudder Calibration");
      00081C 74rBA            [12] 3094 	mov	a,#___str_9
      00081E C0 E0            [24] 3095 	push	acc
      000820 74s00            [12] 3096 	mov	a,#(___str_9 >> 8)
      000822 C0 E0            [24] 3097 	push	acc
      000824 74 80            [12] 3098 	mov	a,#0x80
      000826 C0 E0            [24] 3099 	push	acc
      000828 12r00r5C         [24] 3100 	lcall	_lcd_print
      00082B 15 81            [12] 3101 	dec	sp
      00082D 15 81            [12] 3102 	dec	sp
      00082F 15 81            [12] 3103 	dec	sp
                           000831  3104 	C$lab6.c$232$1$143 ==.
                                   3105 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:232: while (count < 50);
      000831                       3106 00101$:
      000831 C3               [12] 3107 	clr	c
      000832 E5*10            [12] 3108 	mov	a,_count
      000834 94 32            [12] 3109 	subb	a,#0x32
      000836 E5*11            [12] 3110 	mov	a,(_count + 1)
      000838 64 80            [12] 3111 	xrl	a,#0x80
      00083A 94 80            [12] 3112 	subb	a,#0x80
      00083C 40 F3            [24] 3113 	jc	00101$
                           00083E  3114 	C$lab6.c$233$1$143 ==.
                                   3115 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:233: lcd_clear();
      00083E 12r00rE1         [24] 3116 	lcall	_lcd_clear
                           000841  3117 	C$lab6.c$237$2$144 ==.
                                   3118 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:237: count =0;
      000841 E4               [12] 3119 	clr	a
      000842 F5*10            [12] 3120 	mov	_count,a
      000844 F5*11            [12] 3121 	mov	(_count + 1),a
                           000846  3122 	C$lab6.c$238$2$144 ==.
                                   3123 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:238: while (count < 1);
      000846                       3124 00104$:
      000846 C3               [12] 3125 	clr	c
      000847 E5*10            [12] 3126 	mov	a,_count
      000849 94 01            [12] 3127 	subb	a,#0x01
      00084B E5*11            [12] 3128 	mov	a,(_count + 1)
      00084D 64 80            [12] 3129 	xrl	a,#0x80
      00084F 94 80            [12] 3130 	subb	a,#0x80
      000851 40 F3            [24] 3131 	jc	00104$
                           000853  3132 	C$lab6.c$239$2$144 ==.
                                   3133 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:239: lcd_clear();
      000853 12r00rE1         [24] 3134 	lcall	_lcd_clear
                           000856  3135 	C$lab6.c$240$2$144 ==.
                                   3136 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:240: lcd_print("go left: press 1\n go right: press 2\nPress * for next screen");
      000856 74rCD            [12] 3137 	mov	a,#___str_10
      000858 C0 E0            [24] 3138 	push	acc
      00085A 74s00            [12] 3139 	mov	a,#(___str_10 >> 8)
      00085C C0 E0            [24] 3140 	push	acc
      00085E 74 80            [12] 3141 	mov	a,#0x80
      000860 C0 E0            [24] 3142 	push	acc
      000862 12r00r5C         [24] 3143 	lcall	_lcd_print
      000865 15 81            [12] 3144 	dec	sp
      000867 15 81            [12] 3145 	dec	sp
      000869 15 81            [12] 3146 	dec	sp
                           00086B  3147 	C$lab6.c$241$2$144 ==.
                                   3148 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:241: start();
      00086B 12r12r1D         [24] 3149 	lcall	_start
                           00086E  3150 	C$lab6.c$242$2$144 ==.
                                   3151 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:242: lcd_clear();
      00086E 12r00rE1         [24] 3152 	lcall	_lcd_clear
                           000871  3153 	C$lab6.c$243$2$144 ==.
                                   3154 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:243: lcd_print("\n confirm: press 3\n press * to begin");
      000871 74r09            [12] 3155 	mov	a,#___str_11
      000873 C0 E0            [24] 3156 	push	acc
      000875 74s01            [12] 3157 	mov	a,#(___str_11 >> 8)
      000877 C0 E0            [24] 3158 	push	acc
      000879 74 80            [12] 3159 	mov	a,#0x80
      00087B C0 E0            [24] 3160 	push	acc
      00087D 12r00r5C         [24] 3161 	lcall	_lcd_print
      000880 15 81            [12] 3162 	dec	sp
      000882 15 81            [12] 3163 	dec	sp
      000884 15 81            [12] 3164 	dec	sp
                           000886  3165 	C$lab6.c$244$2$144 ==.
                                   3166 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:244: start();
      000886 12r12r1D         [24] 3167 	lcall	_start
                           000889  3168 	C$lab6.c$245$2$144 ==.
                                   3169 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:245: st =0;
      000889 7F 00            [12] 3170 	mov	r7,#0x00
                           00088B  3171 	C$lab6.c$246$5$147 ==.
                                   3172 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:246: while (1)
      00088B                       3173 00146$:
                           00088B  3174 	C$lab6.c$248$3$145 ==.
                                   3175 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:248: printf("\r\n %u",RUDDER_PW);
      00088B C0 07            [24] 3176 	push	ar7
      00088D C0*24            [24] 3177 	push	_RUDDER_PW
      00088F C0*25            [24] 3178 	push	(_RUDDER_PW + 1)
      000891 74r2E            [12] 3179 	mov	a,#___str_12
      000893 C0 E0            [24] 3180 	push	acc
      000895 74s01            [12] 3181 	mov	a,#(___str_12 >> 8)
      000897 C0 E0            [24] 3182 	push	acc
      000899 74 80            [12] 3183 	mov	a,#0x80
      00089B C0 E0            [24] 3184 	push	acc
      00089D 12r00r00         [24] 3185 	lcall	_printf
      0008A0 E5 81            [12] 3186 	mov	a,sp
      0008A2 24 FB            [12] 3187 	add	a,#0xfb
      0008A4 F5 81            [12] 3188 	mov	sp,a
      0008A6 D0 07            [24] 3189 	pop	ar7
                           0008A8  3190 	C$lab6.c$249$3$145 ==.
                                   3191 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:249: RDR_lo_to_hi = 0xFFFF - RUDDER_PW;
      0008A8 74 FF            [12] 3192 	mov	a,#0xFF
      0008AA C3               [12] 3193 	clr	c
      0008AB 95*24            [12] 3194 	subb	a,_RUDDER_PW
      0008AD F5*26            [12] 3195 	mov	_RDR_lo_to_hi,a
      0008AF 74 FF            [12] 3196 	mov	a,#0xFF
      0008B1 95*25            [12] 3197 	subb	a,(_RUDDER_PW + 1)
      0008B3 F5*27            [12] 3198 	mov	(_RDR_lo_to_hi + 1),a
                           0008B5  3199 	C$lab6.c$250$3$145 ==.
                                   3200 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:250: PCA0CP0 = RDR_lo_to_hi;
      0008B5 85*26 EA         [24] 3201 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      0008B8 85*27 FA         [24] 3202 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           0008BB  3203 	C$lab6.c$252$3$145 ==.
                                   3204 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:252: if (times == 0 )
      0008BB 90r00r56         [24] 3205 	mov	dptr,#_Rudder_cal_times_1_143
      0008BE E0               [24] 3206 	movx	a,@dptr
      0008BF FD               [12] 3207 	mov	r5,a
      0008C0 A3               [24] 3208 	inc	dptr
      0008C1 E0               [24] 3209 	movx	a,@dptr
      0008C2 FE               [12] 3210 	mov	r6,a
      0008C3 4D               [12] 3211 	orl	a,r5
      0008C4 60 03            [24] 3212 	jz	00215$
      0008C6 02r09r71         [24] 3213 	ljmp	00143$
      0008C9                       3214 00215$:
                           0008C9  3215 	C$lab6.c$254$4$146 ==.
                                   3216 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:254: if (value ==0)
      0008C9 90r00r54         [24] 3217 	mov	dptr,#_Rudder_cal_value_1_143
      0008CC E0               [24] 3218 	movx	a,@dptr
      0008CD FD               [12] 3219 	mov	r5,a
      0008CE A3               [24] 3220 	inc	dptr
      0008CF E0               [24] 3221 	movx	a,@dptr
      0008D0 FE               [12] 3222 	mov	r6,a
      0008D1 4D               [12] 3223 	orl	a,r5
      0008D2 70 27            [24] 3224 	jnz	00110$
                           0008D4  3225 	C$lab6.c$256$5$147 ==.
                                   3226 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:256: lcd_clear();
      0008D4 C0 07            [24] 3227 	push	ar7
      0008D6 12r00rE1         [24] 3228 	lcall	_lcd_clear
                           0008D9  3229 	C$lab6.c$257$5$147 ==.
                                   3230 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:257: lcd_print("Now calibrating Min_PW\n");
      0008D9 74r34            [12] 3231 	mov	a,#___str_13
      0008DB C0 E0            [24] 3232 	push	acc
      0008DD 74s01            [12] 3233 	mov	a,#(___str_13 >> 8)
      0008DF C0 E0            [24] 3234 	push	acc
      0008E1 74 80            [12] 3235 	mov	a,#0x80
      0008E3 C0 E0            [24] 3236 	push	acc
      0008E5 12r00r5C         [24] 3237 	lcall	_lcd_print
      0008E8 15 81            [12] 3238 	dec	sp
      0008EA 15 81            [12] 3239 	dec	sp
      0008EC 15 81            [12] 3240 	dec	sp
      0008EE D0 07            [24] 3241 	pop	ar7
                           0008F0  3242 	C$lab6.c$258$5$147 ==.
                                   3243 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:258: if (st ==0 ) RUDDER_PW = PW_LEFT_RUDDER;
      0008F0 EF               [12] 3244 	mov	a,r7
      0008F1 70 06            [24] 3245 	jnz	00108$
      0008F3 85*18*24         [24] 3246 	mov	_RUDDER_PW,_PW_LEFT_RUDDER
      0008F6 85*19*25         [24] 3247 	mov	(_RUDDER_PW + 1),(_PW_LEFT_RUDDER + 1)
      0008F9                       3248 00108$:
                           0008F9  3249 	C$lab6.c$259$5$147 ==.
                                   3250 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:259: st =1;
      0008F9 7F 01            [12] 3251 	mov	r7,#0x01
      0008FB                       3252 00110$:
                           0008FB  3253 	C$lab6.c$261$4$146 ==.
                                   3254 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:261: value = kpd_input(1);
      0008FB 75 82 01         [24] 3255 	mov	dpl,#0x01
      0008FE C0 07            [24] 3256 	push	ar7
      000900 12r01r99         [24] 3257 	lcall	_kpd_input
      000903 AD 82            [24] 3258 	mov	r5,dpl
      000905 AE 83            [24] 3259 	mov	r6,dph
      000907 D0 07            [24] 3260 	pop	ar7
      000909 90r00r54         [24] 3261 	mov	dptr,#_Rudder_cal_value_1_143
      00090C ED               [12] 3262 	mov	a,r5
      00090D F0               [24] 3263 	movx	@dptr,a
      00090E EE               [12] 3264 	mov	a,r6
      00090F A3               [24] 3265 	inc	dptr
      000910 F0               [24] 3266 	movx	@dptr,a
                           000911  3267 	C$lab6.c$262$4$146 ==.
                                   3268 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:262: if (value == 1)
      000911 BD 01 12         [24] 3269 	cjne	r5,#0x01,00117$
      000914 BE 00 0F         [24] 3270 	cjne	r6,#0x00,00117$
                           000917  3271 	C$lab6.c$264$5$148 ==.
                                   3272 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:264: RUDDER_PW -= 20;
      000917 E5*24            [12] 3273 	mov	a,_RUDDER_PW
      000919 24 EC            [12] 3274 	add	a,#0xEC
      00091B F5*24            [12] 3275 	mov	_RUDDER_PW,a
      00091D E5*25            [12] 3276 	mov	a,(_RUDDER_PW + 1)
      00091F 34 FF            [12] 3277 	addc	a,#0xFF
      000921 F5*25            [12] 3278 	mov	(_RUDDER_PW + 1),a
      000923 02r08r8B         [24] 3279 	ljmp	00146$
      000926                       3280 00117$:
                           000926  3281 	C$lab6.c$266$4$146 ==.
                                   3282 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:266: else if (value==2)
      000926 90r00r54         [24] 3283 	mov	dptr,#_Rudder_cal_value_1_143
      000929 E0               [24] 3284 	movx	a,@dptr
      00092A FD               [12] 3285 	mov	r5,a
      00092B A3               [24] 3286 	inc	dptr
      00092C E0               [24] 3287 	movx	a,@dptr
      00092D FE               [12] 3288 	mov	r6,a
      00092E BD 02 11         [24] 3289 	cjne	r5,#0x02,00114$
      000931 BE 00 0E         [24] 3290 	cjne	r6,#0x00,00114$
                           000934  3291 	C$lab6.c$268$5$149 ==.
                                   3292 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:268: RUDDER_PW += 20;
      000934 74 14            [12] 3293 	mov	a,#0x14
      000936 25*24            [12] 3294 	add	a,_RUDDER_PW
      000938 F5*24            [12] 3295 	mov	_RUDDER_PW,a
      00093A E4               [12] 3296 	clr	a
      00093B 35*25            [12] 3297 	addc	a,(_RUDDER_PW + 1)
      00093D F5*25            [12] 3298 	mov	(_RUDDER_PW + 1),a
      00093F 02r08r8B         [24] 3299 	ljmp	00146$
      000942                       3300 00114$:
                           000942  3301 	C$lab6.c$270$4$146 ==.
                                   3302 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:270: else if (value == 3)
      000942 90r00r54         [24] 3303 	mov	dptr,#_Rudder_cal_value_1_143
      000945 E0               [24] 3304 	movx	a,@dptr
      000946 FD               [12] 3305 	mov	r5,a
      000947 A3               [24] 3306 	inc	dptr
      000948 E0               [24] 3307 	movx	a,@dptr
      000949 FE               [12] 3308 	mov	r6,a
      00094A BD 03 05         [24] 3309 	cjne	r5,#0x03,00222$
      00094D BE 00 02         [24] 3310 	cjne	r6,#0x00,00222$
      000950 80 03            [24] 3311 	sjmp	00223$
      000952                       3312 00222$:
      000952 02r08r8B         [24] 3313 	ljmp	00146$
      000955                       3314 00223$:
                           000955  3315 	C$lab6.c$272$5$150 ==.
                                   3316 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:272: times++;
      000955 90r00r56         [24] 3317 	mov	dptr,#_Rudder_cal_times_1_143
      000958 E0               [24] 3318 	movx	a,@dptr
      000959 24 01            [12] 3319 	add	a,#0x01
      00095B F0               [24] 3320 	movx	@dptr,a
      00095C A3               [24] 3321 	inc	dptr
      00095D E0               [24] 3322 	movx	a,@dptr
      00095E 34 00            [12] 3323 	addc	a,#0x00
      000960 F0               [24] 3324 	movx	@dptr,a
                           000961  3325 	C$lab6.c$273$5$150 ==.
                                   3326 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:273: value =0;
      000961 90r00r54         [24] 3327 	mov	dptr,#_Rudder_cal_value_1_143
      000964 E4               [12] 3328 	clr	a
      000965 F0               [24] 3329 	movx	@dptr,a
      000966 A3               [24] 3330 	inc	dptr
      000967 F0               [24] 3331 	movx	@dptr,a
                           000968  3332 	C$lab6.c$274$5$150 ==.
                                   3333 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:274: PW_LEFT_RUDDER = RUDDER_PW;
      000968 85*24*18         [24] 3334 	mov	_PW_LEFT_RUDDER,_RUDDER_PW
      00096B 85*25*19         [24] 3335 	mov	(_PW_LEFT_RUDDER + 1),(_RUDDER_PW + 1)
      00096E 02r08r8B         [24] 3336 	ljmp	00146$
      000971                       3337 00143$:
                           000971  3338 	C$lab6.c$277$3$145 ==.
                                   3339 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:277: else if (times ==1)
      000971 90r00r56         [24] 3340 	mov	dptr,#_Rudder_cal_times_1_143
      000974 E0               [24] 3341 	movx	a,@dptr
      000975 FD               [12] 3342 	mov	r5,a
      000976 A3               [24] 3343 	inc	dptr
      000977 E0               [24] 3344 	movx	a,@dptr
      000978 FE               [12] 3345 	mov	r6,a
      000979 BD 01 05         [24] 3346 	cjne	r5,#0x01,00224$
      00097C BE 00 02         [24] 3347 	cjne	r6,#0x00,00224$
      00097F 80 03            [24] 3348 	sjmp	00225$
      000981                       3349 00224$:
      000981 02r0Ar27         [24] 3350 	ljmp	00140$
      000984                       3351 00225$:
                           000984  3352 	C$lab6.c$279$4$151 ==.
                                   3353 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:279: if (value ==0)
      000984 90r00r54         [24] 3354 	mov	dptr,#_Rudder_cal_value_1_143
      000987 E0               [24] 3355 	movx	a,@dptr
      000988 FD               [12] 3356 	mov	r5,a
      000989 A3               [24] 3357 	inc	dptr
      00098A E0               [24] 3358 	movx	a,@dptr
      00098B FE               [12] 3359 	mov	r6,a
      00098C 4D               [12] 3360 	orl	a,r5
      00098D 70 22            [24] 3361 	jnz	00120$
                           00098F  3362 	C$lab6.c$281$5$152 ==.
                                   3363 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:281: lcd_clear();
      00098F C0 07            [24] 3364 	push	ar7
      000991 12r00rE1         [24] 3365 	lcall	_lcd_clear
                           000994  3366 	C$lab6.c$282$5$152 ==.
                                   3367 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:282: lcd_print("Now calibrating Cen_PW");
      000994 74r4C            [12] 3368 	mov	a,#___str_14
      000996 C0 E0            [24] 3369 	push	acc
      000998 74s01            [12] 3370 	mov	a,#(___str_14 >> 8)
      00099A C0 E0            [24] 3371 	push	acc
      00099C 74 80            [12] 3372 	mov	a,#0x80
      00099E C0 E0            [24] 3373 	push	acc
      0009A0 12r00r5C         [24] 3374 	lcall	_lcd_print
      0009A3 15 81            [12] 3375 	dec	sp
      0009A5 15 81            [12] 3376 	dec	sp
      0009A7 15 81            [12] 3377 	dec	sp
      0009A9 D0 07            [24] 3378 	pop	ar7
                           0009AB  3379 	C$lab6.c$283$5$152 ==.
                                   3380 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:283: RUDDER_PW = PW_CENTER_RUDDER;
      0009AB 85*1A*24         [24] 3381 	mov	_RUDDER_PW,_PW_CENTER_RUDDER
      0009AE 85*1B*25         [24] 3382 	mov	(_RUDDER_PW + 1),(_PW_CENTER_RUDDER + 1)
      0009B1                       3383 00120$:
                           0009B1  3384 	C$lab6.c$285$4$151 ==.
                                   3385 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:285: value = kpd_input(1);
      0009B1 75 82 01         [24] 3386 	mov	dpl,#0x01
      0009B4 C0 07            [24] 3387 	push	ar7
      0009B6 12r01r99         [24] 3388 	lcall	_kpd_input
      0009B9 AD 82            [24] 3389 	mov	r5,dpl
      0009BB AE 83            [24] 3390 	mov	r6,dph
      0009BD D0 07            [24] 3391 	pop	ar7
      0009BF 90r00r54         [24] 3392 	mov	dptr,#_Rudder_cal_value_1_143
      0009C2 ED               [12] 3393 	mov	a,r5
      0009C3 F0               [24] 3394 	movx	@dptr,a
      0009C4 EE               [12] 3395 	mov	a,r6
      0009C5 A3               [24] 3396 	inc	dptr
      0009C6 F0               [24] 3397 	movx	@dptr,a
                           0009C7  3398 	C$lab6.c$286$4$151 ==.
                                   3399 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:286: if (value == 1)
      0009C7 BD 01 12         [24] 3400 	cjne	r5,#0x01,00127$
      0009CA BE 00 0F         [24] 3401 	cjne	r6,#0x00,00127$
                           0009CD  3402 	C$lab6.c$288$5$153 ==.
                                   3403 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:288: RUDDER_PW -= 20;
      0009CD E5*24            [12] 3404 	mov	a,_RUDDER_PW
      0009CF 24 EC            [12] 3405 	add	a,#0xEC
      0009D1 F5*24            [12] 3406 	mov	_RUDDER_PW,a
      0009D3 E5*25            [12] 3407 	mov	a,(_RUDDER_PW + 1)
      0009D5 34 FF            [12] 3408 	addc	a,#0xFF
      0009D7 F5*25            [12] 3409 	mov	(_RUDDER_PW + 1),a
      0009D9 02r08r8B         [24] 3410 	ljmp	00146$
      0009DC                       3411 00127$:
                           0009DC  3412 	C$lab6.c$290$4$151 ==.
                                   3413 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:290: else if (value==2)
      0009DC 90r00r54         [24] 3414 	mov	dptr,#_Rudder_cal_value_1_143
      0009DF E0               [24] 3415 	movx	a,@dptr
      0009E0 FD               [12] 3416 	mov	r5,a
      0009E1 A3               [24] 3417 	inc	dptr
      0009E2 E0               [24] 3418 	movx	a,@dptr
      0009E3 FE               [12] 3419 	mov	r6,a
      0009E4 BD 02 11         [24] 3420 	cjne	r5,#0x02,00124$
      0009E7 BE 00 0E         [24] 3421 	cjne	r6,#0x00,00124$
                           0009EA  3422 	C$lab6.c$292$5$154 ==.
                                   3423 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:292: RUDDER_PW += 20;
      0009EA 74 14            [12] 3424 	mov	a,#0x14
      0009EC 25*24            [12] 3425 	add	a,_RUDDER_PW
      0009EE F5*24            [12] 3426 	mov	_RUDDER_PW,a
      0009F0 E4               [12] 3427 	clr	a
      0009F1 35*25            [12] 3428 	addc	a,(_RUDDER_PW + 1)
      0009F3 F5*25            [12] 3429 	mov	(_RUDDER_PW + 1),a
      0009F5 02r08r8B         [24] 3430 	ljmp	00146$
      0009F8                       3431 00124$:
                           0009F8  3432 	C$lab6.c$294$4$151 ==.
                                   3433 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:294: else if (value == 3)
      0009F8 90r00r54         [24] 3434 	mov	dptr,#_Rudder_cal_value_1_143
      0009FB E0               [24] 3435 	movx	a,@dptr
      0009FC FD               [12] 3436 	mov	r5,a
      0009FD A3               [24] 3437 	inc	dptr
      0009FE E0               [24] 3438 	movx	a,@dptr
      0009FF FE               [12] 3439 	mov	r6,a
      000A00 BD 03 05         [24] 3440 	cjne	r5,#0x03,00231$
      000A03 BE 00 02         [24] 3441 	cjne	r6,#0x00,00231$
      000A06 80 03            [24] 3442 	sjmp	00232$
      000A08                       3443 00231$:
      000A08 02r08r8B         [24] 3444 	ljmp	00146$
      000A0B                       3445 00232$:
                           000A0B  3446 	C$lab6.c$296$5$155 ==.
                                   3447 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:296: times++;
      000A0B 90r00r56         [24] 3448 	mov	dptr,#_Rudder_cal_times_1_143
      000A0E E0               [24] 3449 	movx	a,@dptr
      000A0F 24 01            [12] 3450 	add	a,#0x01
      000A11 F0               [24] 3451 	movx	@dptr,a
      000A12 A3               [24] 3452 	inc	dptr
      000A13 E0               [24] 3453 	movx	a,@dptr
      000A14 34 00            [12] 3454 	addc	a,#0x00
      000A16 F0               [24] 3455 	movx	@dptr,a
                           000A17  3456 	C$lab6.c$297$5$155 ==.
                                   3457 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:297: value=0;
      000A17 90r00r54         [24] 3458 	mov	dptr,#_Rudder_cal_value_1_143
      000A1A E4               [12] 3459 	clr	a
      000A1B F0               [24] 3460 	movx	@dptr,a
      000A1C A3               [24] 3461 	inc	dptr
      000A1D F0               [24] 3462 	movx	@dptr,a
                           000A1E  3463 	C$lab6.c$298$5$155 ==.
                                   3464 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:298: PW_CENTER_RUDDER = RUDDER_PW;
      000A1E 85*24*1A         [24] 3465 	mov	_PW_CENTER_RUDDER,_RUDDER_PW
      000A21 85*25*1B         [24] 3466 	mov	(_PW_CENTER_RUDDER + 1),(_RUDDER_PW + 1)
      000A24 02r08r8B         [24] 3467 	ljmp	00146$
      000A27                       3468 00140$:
                           000A27  3469 	C$lab6.c$303$4$156 ==.
                                   3470 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:303: if (value==0)
      000A27 90r00r54         [24] 3471 	mov	dptr,#_Rudder_cal_value_1_143
      000A2A E0               [24] 3472 	movx	a,@dptr
      000A2B FD               [12] 3473 	mov	r5,a
      000A2C A3               [24] 3474 	inc	dptr
      000A2D E0               [24] 3475 	movx	a,@dptr
      000A2E FE               [12] 3476 	mov	r6,a
      000A2F 4D               [12] 3477 	orl	a,r5
      000A30 70 22            [24] 3478 	jnz	00130$
                           000A32  3479 	C$lab6.c$305$5$157 ==.
                                   3480 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:305: lcd_clear();
      000A32 C0 07            [24] 3481 	push	ar7
      000A34 12r00rE1         [24] 3482 	lcall	_lcd_clear
                           000A37  3483 	C$lab6.c$306$5$157 ==.
                                   3484 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:306: lcd_print("Now calibrating Max_PW");
      000A37 74r63            [12] 3485 	mov	a,#___str_15
      000A39 C0 E0            [24] 3486 	push	acc
      000A3B 74s01            [12] 3487 	mov	a,#(___str_15 >> 8)
      000A3D C0 E0            [24] 3488 	push	acc
      000A3F 74 80            [12] 3489 	mov	a,#0x80
      000A41 C0 E0            [24] 3490 	push	acc
      000A43 12r00r5C         [24] 3491 	lcall	_lcd_print
      000A46 15 81            [12] 3492 	dec	sp
      000A48 15 81            [12] 3493 	dec	sp
      000A4A 15 81            [12] 3494 	dec	sp
      000A4C D0 07            [24] 3495 	pop	ar7
                           000A4E  3496 	C$lab6.c$307$5$157 ==.
                                   3497 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:307: RUDDER_PW = PW_RIGHT_RUDDER;
      000A4E 85*1C*24         [24] 3498 	mov	_RUDDER_PW,_PW_RIGHT_RUDDER
      000A51 85*1D*25         [24] 3499 	mov	(_RUDDER_PW + 1),(_PW_RIGHT_RUDDER + 1)
      000A54                       3500 00130$:
                           000A54  3501 	C$lab6.c$309$4$156 ==.
                                   3502 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:309: value = kpd_input(1);
      000A54 75 82 01         [24] 3503 	mov	dpl,#0x01
      000A57 C0 07            [24] 3504 	push	ar7
      000A59 12r01r99         [24] 3505 	lcall	_kpd_input
      000A5C AD 82            [24] 3506 	mov	r5,dpl
      000A5E AE 83            [24] 3507 	mov	r6,dph
      000A60 D0 07            [24] 3508 	pop	ar7
      000A62 90r00r54         [24] 3509 	mov	dptr,#_Rudder_cal_value_1_143
      000A65 ED               [12] 3510 	mov	a,r5
      000A66 F0               [24] 3511 	movx	@dptr,a
      000A67 EE               [12] 3512 	mov	a,r6
      000A68 A3               [24] 3513 	inc	dptr
      000A69 F0               [24] 3514 	movx	@dptr,a
                           000A6A  3515 	C$lab6.c$310$4$156 ==.
                                   3516 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:310: if (value == 1)
      000A6A BD 01 12         [24] 3517 	cjne	r5,#0x01,00137$
      000A6D BE 00 0F         [24] 3518 	cjne	r6,#0x00,00137$
                           000A70  3519 	C$lab6.c$312$5$158 ==.
                                   3520 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:312: RUDDER_PW -= 20;
      000A70 E5*24            [12] 3521 	mov	a,_RUDDER_PW
      000A72 24 EC            [12] 3522 	add	a,#0xEC
      000A74 F5*24            [12] 3523 	mov	_RUDDER_PW,a
      000A76 E5*25            [12] 3524 	mov	a,(_RUDDER_PW + 1)
      000A78 34 FF            [12] 3525 	addc	a,#0xFF
      000A7A F5*25            [12] 3526 	mov	(_RUDDER_PW + 1),a
      000A7C 02r08r8B         [24] 3527 	ljmp	00146$
      000A7F                       3528 00137$:
                           000A7F  3529 	C$lab6.c$314$4$156 ==.
                                   3530 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:314: else if (value==2)
      000A7F 90r00r54         [24] 3531 	mov	dptr,#_Rudder_cal_value_1_143
      000A82 E0               [24] 3532 	movx	a,@dptr
      000A83 FD               [12] 3533 	mov	r5,a
      000A84 A3               [24] 3534 	inc	dptr
      000A85 E0               [24] 3535 	movx	a,@dptr
      000A86 FE               [12] 3536 	mov	r6,a
      000A87 BD 02 11         [24] 3537 	cjne	r5,#0x02,00134$
      000A8A BE 00 0E         [24] 3538 	cjne	r6,#0x00,00134$
                           000A8D  3539 	C$lab6.c$316$5$159 ==.
                                   3540 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:316: RUDDER_PW += 20;
      000A8D 74 14            [12] 3541 	mov	a,#0x14
      000A8F 25*24            [12] 3542 	add	a,_RUDDER_PW
      000A91 F5*24            [12] 3543 	mov	_RUDDER_PW,a
      000A93 E4               [12] 3544 	clr	a
      000A94 35*25            [12] 3545 	addc	a,(_RUDDER_PW + 1)
      000A96 F5*25            [12] 3546 	mov	(_RUDDER_PW + 1),a
      000A98 02r08r8B         [24] 3547 	ljmp	00146$
      000A9B                       3548 00134$:
                           000A9B  3549 	C$lab6.c$318$4$156 ==.
                                   3550 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:318: else if (value == 3)
      000A9B 90r00r54         [24] 3551 	mov	dptr,#_Rudder_cal_value_1_143
      000A9E E0               [24] 3552 	movx	a,@dptr
      000A9F FD               [12] 3553 	mov	r5,a
      000AA0 A3               [24] 3554 	inc	dptr
      000AA1 E0               [24] 3555 	movx	a,@dptr
      000AA2 FE               [12] 3556 	mov	r6,a
      000AA3 BD 03 05         [24] 3557 	cjne	r5,#0x03,00238$
      000AA6 BE 00 02         [24] 3558 	cjne	r6,#0x00,00238$
      000AA9 80 03            [24] 3559 	sjmp	00239$
      000AAB                       3560 00238$:
      000AAB 02r08r8B         [24] 3561 	ljmp	00146$
      000AAE                       3562 00239$:
                           000AAE  3563 	C$lab6.c$320$5$160 ==.
                                   3564 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:320: PW_RIGHT_RUDDER = RUDDER_PW;
      000AAE 85*24*1C         [24] 3565 	mov	_PW_RIGHT_RUDDER,_RUDDER_PW
      000AB1 85*25*1D         [24] 3566 	mov	(_PW_RIGHT_RUDDER + 1),(_RUDDER_PW + 1)
                           000AB4  3567 	C$lab6.c$321$5$160 ==.
                                   3568 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:321: return;
                           000AB4  3569 	C$lab6.c$330$1$143 ==.
                           000AB4  3570 	XG$Rudder_cal$0$0 ==.
      000AB4 22               [24] 3571 	ret
                                   3572 ;------------------------------------------------------------
                                   3573 ;Allocation info for local variables in function 'Angle_cal'
                                   3574 ;------------------------------------------------------------
                                   3575 ;st                        Allocated to registers r7 
                                   3576 ;value                     Allocated with name '_Angle_cal_value_1_162'
                                   3577 ;times                     Allocated with name '_Angle_cal_times_1_162'
                                   3578 ;------------------------------------------------------------
                           000AB5  3579 	G$Angle_cal$0$0 ==.
                           000AB5  3580 	C$lab6.c$332$1$143 ==.
                                   3581 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:332: void Angle_cal(void)
                                   3582 ;	-----------------------------------------
                                   3583 ;	 function Angle_cal
                                   3584 ;	-----------------------------------------
      000AB5                       3585 _Angle_cal:
                           000AB5  3586 	C$lab6.c$335$1$143 ==.
                                   3587 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:335: __xdata int value =0;
      000AB5 90r00r58         [24] 3588 	mov	dptr,#_Angle_cal_value_1_162
      000AB8 E4               [12] 3589 	clr	a
      000AB9 F0               [24] 3590 	movx	@dptr,a
      000ABA A3               [24] 3591 	inc	dptr
      000ABB F0               [24] 3592 	movx	@dptr,a
                           000ABC  3593 	C$lab6.c$336$1$143 ==.
                                   3594 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:336: __xdata int times =0;
      000ABC 90r00r5A         [24] 3595 	mov	dptr,#_Angle_cal_times_1_162
      000ABF F0               [24] 3596 	movx	@dptr,a
      000AC0 A3               [24] 3597 	inc	dptr
      000AC1 F0               [24] 3598 	movx	@dptr,a
                           000AC2  3599 	C$lab6.c$337$1$162 ==.
                                   3600 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:337: count =0;
      000AC2 F5*10            [12] 3601 	mov	_count,a
      000AC4 F5*11            [12] 3602 	mov	(_count + 1),a
                           000AC6  3603 	C$lab6.c$338$1$162 ==.
                                   3604 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:338: lcd_clear();
      000AC6 12r00rE1         [24] 3605 	lcall	_lcd_clear
                           000AC9  3606 	C$lab6.c$339$1$162 ==.
                                   3607 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:339: lcd_print("Angle Calibration");
      000AC9 74r7A            [12] 3608 	mov	a,#___str_16
      000ACB C0 E0            [24] 3609 	push	acc
      000ACD 74s01            [12] 3610 	mov	a,#(___str_16 >> 8)
      000ACF C0 E0            [24] 3611 	push	acc
      000AD1 74 80            [12] 3612 	mov	a,#0x80
      000AD3 C0 E0            [24] 3613 	push	acc
      000AD5 12r00r5C         [24] 3614 	lcall	_lcd_print
      000AD8 15 81            [12] 3615 	dec	sp
      000ADA 15 81            [12] 3616 	dec	sp
      000ADC 15 81            [12] 3617 	dec	sp
                           000ADE  3618 	C$lab6.c$340$1$162 ==.
                                   3619 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:340: while (count < 50);
      000ADE                       3620 00101$:
      000ADE C3               [12] 3621 	clr	c
      000ADF E5*10            [12] 3622 	mov	a,_count
      000AE1 94 32            [12] 3623 	subb	a,#0x32
      000AE3 E5*11            [12] 3624 	mov	a,(_count + 1)
      000AE5 64 80            [12] 3625 	xrl	a,#0x80
      000AE7 94 80            [12] 3626 	subb	a,#0x80
      000AE9 40 F3            [24] 3627 	jc	00101$
                           000AEB  3628 	C$lab6.c$341$1$162 ==.
                                   3629 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:341: lcd_clear();
      000AEB 12r00rE1         [24] 3630 	lcall	_lcd_clear
                           000AEE  3631 	C$lab6.c$344$2$163 ==.
                                   3632 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:344: count = 0;
      000AEE E4               [12] 3633 	clr	a
      000AEF F5*10            [12] 3634 	mov	_count,a
      000AF1 F5*11            [12] 3635 	mov	(_count + 1),a
                           000AF3  3636 	C$lab6.c$345$2$163 ==.
                                   3637 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:345: while (count < 1);
      000AF3                       3638 00104$:
      000AF3 C3               [12] 3639 	clr	c
      000AF4 E5*10            [12] 3640 	mov	a,_count
      000AF6 94 01            [12] 3641 	subb	a,#0x01
      000AF8 E5*11            [12] 3642 	mov	a,(_count + 1)
      000AFA 64 80            [12] 3643 	xrl	a,#0x80
      000AFC 94 80            [12] 3644 	subb	a,#0x80
      000AFE 40 F3            [24] 3645 	jc	00104$
                           000B00  3646 	C$lab6.c$346$2$163 ==.
                                   3647 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:346: lcd_clear();
      000B00 12r00rE1         [24] 3648 	lcall	_lcd_clear
                           000B03  3649 	C$lab6.c$347$2$163 ==.
                                   3650 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:347: lcd_print("go left: press 1\n go right: press 2\nPress * for next screen");
      000B03 74rCD            [12] 3651 	mov	a,#___str_10
      000B05 C0 E0            [24] 3652 	push	acc
      000B07 74s00            [12] 3653 	mov	a,#(___str_10 >> 8)
      000B09 C0 E0            [24] 3654 	push	acc
      000B0B 74 80            [12] 3655 	mov	a,#0x80
      000B0D C0 E0            [24] 3656 	push	acc
      000B0F 12r00r5C         [24] 3657 	lcall	_lcd_print
      000B12 15 81            [12] 3658 	dec	sp
      000B14 15 81            [12] 3659 	dec	sp
      000B16 15 81            [12] 3660 	dec	sp
                           000B18  3661 	C$lab6.c$348$2$163 ==.
                                   3662 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:348: start();
      000B18 12r12r1D         [24] 3663 	lcall	_start
                           000B1B  3664 	C$lab6.c$349$2$163 ==.
                                   3665 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:349: lcd_clear();
      000B1B 12r00rE1         [24] 3666 	lcall	_lcd_clear
                           000B1E  3667 	C$lab6.c$350$2$163 ==.
                                   3668 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:350: lcd_print("\n confirm: press 3\n press * to begin");
      000B1E 74r09            [12] 3669 	mov	a,#___str_11
      000B20 C0 E0            [24] 3670 	push	acc
      000B22 74s01            [12] 3671 	mov	a,#(___str_11 >> 8)
      000B24 C0 E0            [24] 3672 	push	acc
      000B26 74 80            [12] 3673 	mov	a,#0x80
      000B28 C0 E0            [24] 3674 	push	acc
      000B2A 12r00r5C         [24] 3675 	lcall	_lcd_print
      000B2D 15 81            [12] 3676 	dec	sp
      000B2F 15 81            [12] 3677 	dec	sp
      000B31 15 81            [12] 3678 	dec	sp
                           000B33  3679 	C$lab6.c$351$2$163 ==.
                                   3680 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:351: start();
      000B33 12r12r1D         [24] 3681 	lcall	_start
                           000B36  3682 	C$lab6.c$352$2$163 ==.
                                   3683 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:352: st =0;
      000B36 7F 00            [12] 3684 	mov	r7,#0x00
                           000B38  3685 	C$lab6.c$353$5$166 ==.
                                   3686 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:353: while (1)
      000B38                       3687 00150$:
                           000B38  3688 	C$lab6.c$355$3$164 ==.
                                   3689 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:355: printf("\r\n %u",ANGLE_PW);
      000B38 C0 07            [24] 3690 	push	ar7
      000B3A C0*28            [24] 3691 	push	_ANGLE_PW
      000B3C C0*29            [24] 3692 	push	(_ANGLE_PW + 1)
      000B3E 74r2E            [12] 3693 	mov	a,#___str_12
      000B40 C0 E0            [24] 3694 	push	acc
      000B42 74s01            [12] 3695 	mov	a,#(___str_12 >> 8)
      000B44 C0 E0            [24] 3696 	push	acc
      000B46 74 80            [12] 3697 	mov	a,#0x80
      000B48 C0 E0            [24] 3698 	push	acc
      000B4A 12r00r00         [24] 3699 	lcall	_printf
      000B4D E5 81            [12] 3700 	mov	a,sp
      000B4F 24 FB            [12] 3701 	add	a,#0xfb
      000B51 F5 81            [12] 3702 	mov	sp,a
      000B53 D0 07            [24] 3703 	pop	ar7
                           000B55  3704 	C$lab6.c$356$3$164 ==.
                                   3705 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:356: AGL_lo_to_hi = 0xFFFF - ANGLE_PW;
      000B55 74 FF            [12] 3706 	mov	a,#0xFF
      000B57 C3               [12] 3707 	clr	c
      000B58 95*28            [12] 3708 	subb	a,_ANGLE_PW
      000B5A F5*2A            [12] 3709 	mov	_AGL_lo_to_hi,a
      000B5C 74 FF            [12] 3710 	mov	a,#0xFF
      000B5E 95*29            [12] 3711 	subb	a,(_ANGLE_PW + 1)
      000B60 F5*2B            [12] 3712 	mov	(_AGL_lo_to_hi + 1),a
                           000B62  3713 	C$lab6.c$357$3$164 ==.
                                   3714 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:357: PCA0CP1 = AGL_lo_to_hi;
      000B62 85*2A EB         [24] 3715 	mov	((_PCA0CP1 >> 0) & 0xFF),_AGL_lo_to_hi
      000B65 85*2B FB         [24] 3716 	mov	((_PCA0CP1 >> 8) & 0xFF),(_AGL_lo_to_hi + 1)
                           000B68  3717 	C$lab6.c$359$3$164 ==.
                                   3718 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:359: if (times == 0 )
      000B68 90r00r5A         [24] 3719 	mov	dptr,#_Angle_cal_times_1_162
      000B6B E0               [24] 3720 	movx	a,@dptr
      000B6C FD               [12] 3721 	mov	r5,a
      000B6D A3               [24] 3722 	inc	dptr
      000B6E E0               [24] 3723 	movx	a,@dptr
      000B6F FE               [12] 3724 	mov	r6,a
      000B70 4D               [12] 3725 	orl	a,r5
      000B71 60 03            [24] 3726 	jz	00225$
      000B73 02r0Cr20         [24] 3727 	ljmp	00147$
      000B76                       3728 00225$:
                           000B76  3729 	C$lab6.c$361$4$165 ==.
                                   3730 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:361: if (value ==0)
      000B76 90r00r58         [24] 3731 	mov	dptr,#_Angle_cal_value_1_162
      000B79 E0               [24] 3732 	movx	a,@dptr
      000B7A FD               [12] 3733 	mov	r5,a
      000B7B A3               [24] 3734 	inc	dptr
      000B7C E0               [24] 3735 	movx	a,@dptr
      000B7D FE               [12] 3736 	mov	r6,a
      000B7E 4D               [12] 3737 	orl	a,r5
      000B7F 70 27            [24] 3738 	jnz	00110$
                           000B81  3739 	C$lab6.c$363$5$166 ==.
                                   3740 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:363: lcd_clear();
      000B81 C0 07            [24] 3741 	push	ar7
      000B83 12r00rE1         [24] 3742 	lcall	_lcd_clear
                           000B86  3743 	C$lab6.c$364$5$166 ==.
                                   3744 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:364: lcd_print("Now calibrating Min_PW UP ANGLE");
      000B86 74r8C            [12] 3745 	mov	a,#___str_17
      000B88 C0 E0            [24] 3746 	push	acc
      000B8A 74s01            [12] 3747 	mov	a,#(___str_17 >> 8)
      000B8C C0 E0            [24] 3748 	push	acc
      000B8E 74 80            [12] 3749 	mov	a,#0x80
      000B90 C0 E0            [24] 3750 	push	acc
      000B92 12r00r5C         [24] 3751 	lcall	_lcd_print
      000B95 15 81            [12] 3752 	dec	sp
      000B97 15 81            [12] 3753 	dec	sp
      000B99 15 81            [12] 3754 	dec	sp
      000B9B D0 07            [24] 3755 	pop	ar7
                           000B9D  3756 	C$lab6.c$365$5$166 ==.
                                   3757 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:365: if (st == 0) ANGLE_PW = PW_UP_ANGLE;
      000B9D EF               [12] 3758 	mov	a,r7
      000B9E 70 06            [24] 3759 	jnz	00108$
      000BA0 85*1E*28         [24] 3760 	mov	_ANGLE_PW,_PW_UP_ANGLE
      000BA3 85*1F*29         [24] 3761 	mov	(_ANGLE_PW + 1),(_PW_UP_ANGLE + 1)
      000BA6                       3762 00108$:
                           000BA6  3763 	C$lab6.c$366$5$166 ==.
                                   3764 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:366: st =1;
      000BA6 7F 01            [12] 3765 	mov	r7,#0x01
      000BA8                       3766 00110$:
                           000BA8  3767 	C$lab6.c$368$4$165 ==.
                                   3768 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:368: value = kpd_input(1);
      000BA8 75 82 01         [24] 3769 	mov	dpl,#0x01
      000BAB C0 07            [24] 3770 	push	ar7
      000BAD 12r01r99         [24] 3771 	lcall	_kpd_input
      000BB0 AD 82            [24] 3772 	mov	r5,dpl
      000BB2 AE 83            [24] 3773 	mov	r6,dph
      000BB4 D0 07            [24] 3774 	pop	ar7
      000BB6 90r00r58         [24] 3775 	mov	dptr,#_Angle_cal_value_1_162
      000BB9 ED               [12] 3776 	mov	a,r5
      000BBA F0               [24] 3777 	movx	@dptr,a
      000BBB EE               [12] 3778 	mov	a,r6
      000BBC A3               [24] 3779 	inc	dptr
      000BBD F0               [24] 3780 	movx	@dptr,a
                           000BBE  3781 	C$lab6.c$369$4$165 ==.
                                   3782 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:369: if (value == 1)
      000BBE BD 01 12         [24] 3783 	cjne	r5,#0x01,00117$
      000BC1 BE 00 0F         [24] 3784 	cjne	r6,#0x00,00117$
                           000BC4  3785 	C$lab6.c$371$5$167 ==.
                                   3786 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:371: ANGLE_PW -= 30;
      000BC4 E5*28            [12] 3787 	mov	a,_ANGLE_PW
      000BC6 24 E2            [12] 3788 	add	a,#0xE2
      000BC8 F5*28            [12] 3789 	mov	_ANGLE_PW,a
      000BCA E5*29            [12] 3790 	mov	a,(_ANGLE_PW + 1)
      000BCC 34 FF            [12] 3791 	addc	a,#0xFF
      000BCE F5*29            [12] 3792 	mov	(_ANGLE_PW + 1),a
      000BD0 02r0Br38         [24] 3793 	ljmp	00150$
      000BD3                       3794 00117$:
                           000BD3  3795 	C$lab6.c$373$4$165 ==.
                                   3796 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:373: else if (value==2)
      000BD3 90r00r58         [24] 3797 	mov	dptr,#_Angle_cal_value_1_162
      000BD6 E0               [24] 3798 	movx	a,@dptr
      000BD7 FD               [12] 3799 	mov	r5,a
      000BD8 A3               [24] 3800 	inc	dptr
      000BD9 E0               [24] 3801 	movx	a,@dptr
      000BDA FE               [12] 3802 	mov	r6,a
      000BDB BD 02 11         [24] 3803 	cjne	r5,#0x02,00114$
      000BDE BE 00 0E         [24] 3804 	cjne	r6,#0x00,00114$
                           000BE1  3805 	C$lab6.c$375$5$168 ==.
                                   3806 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:375: ANGLE_PW += 30;
      000BE1 74 1E            [12] 3807 	mov	a,#0x1E
      000BE3 25*28            [12] 3808 	add	a,_ANGLE_PW
      000BE5 F5*28            [12] 3809 	mov	_ANGLE_PW,a
      000BE7 E4               [12] 3810 	clr	a
      000BE8 35*29            [12] 3811 	addc	a,(_ANGLE_PW + 1)
      000BEA F5*29            [12] 3812 	mov	(_ANGLE_PW + 1),a
      000BEC 02r0Br38         [24] 3813 	ljmp	00150$
      000BEF                       3814 00114$:
                           000BEF  3815 	C$lab6.c$377$4$165 ==.
                                   3816 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:377: else if (value == 3)
      000BEF 90r00r58         [24] 3817 	mov	dptr,#_Angle_cal_value_1_162
      000BF2 E0               [24] 3818 	movx	a,@dptr
      000BF3 FD               [12] 3819 	mov	r5,a
      000BF4 A3               [24] 3820 	inc	dptr
      000BF5 E0               [24] 3821 	movx	a,@dptr
      000BF6 FE               [12] 3822 	mov	r6,a
      000BF7 BD 03 05         [24] 3823 	cjne	r5,#0x03,00232$
      000BFA BE 00 02         [24] 3824 	cjne	r6,#0x00,00232$
      000BFD 80 03            [24] 3825 	sjmp	00233$
      000BFF                       3826 00232$:
      000BFF 02r0Br38         [24] 3827 	ljmp	00150$
      000C02                       3828 00233$:
                           000C02  3829 	C$lab6.c$379$5$169 ==.
                                   3830 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:379: times++;
      000C02 90r00r5A         [24] 3831 	mov	dptr,#_Angle_cal_times_1_162
      000C05 E0               [24] 3832 	movx	a,@dptr
      000C06 24 01            [12] 3833 	add	a,#0x01
      000C08 F0               [24] 3834 	movx	@dptr,a
      000C09 A3               [24] 3835 	inc	dptr
      000C0A E0               [24] 3836 	movx	a,@dptr
      000C0B 34 00            [12] 3837 	addc	a,#0x00
      000C0D F0               [24] 3838 	movx	@dptr,a
                           000C0E  3839 	C$lab6.c$380$5$169 ==.
                                   3840 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:380: value =0;
      000C0E 90r00r58         [24] 3841 	mov	dptr,#_Angle_cal_value_1_162
      000C11 E4               [12] 3842 	clr	a
      000C12 F0               [24] 3843 	movx	@dptr,a
      000C13 A3               [24] 3844 	inc	dptr
      000C14 F0               [24] 3845 	movx	@dptr,a
                           000C15  3846 	C$lab6.c$381$5$169 ==.
                                   3847 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:381: st=0;
      000C15 7F 00            [12] 3848 	mov	r7,#0x00
                           000C17  3849 	C$lab6.c$382$5$169 ==.
                                   3850 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:382: PW_UP_ANGLE = ANGLE_PW;
      000C17 85*28*1E         [24] 3851 	mov	_PW_UP_ANGLE,_ANGLE_PW
      000C1A 85*29*1F         [24] 3852 	mov	(_PW_UP_ANGLE + 1),(_ANGLE_PW + 1)
      000C1D 02r0Br38         [24] 3853 	ljmp	00150$
      000C20                       3854 00147$:
                           000C20  3855 	C$lab6.c$385$3$164 ==.
                                   3856 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:385: else if (times ==1)
      000C20 90r00r5A         [24] 3857 	mov	dptr,#_Angle_cal_times_1_162
      000C23 E0               [24] 3858 	movx	a,@dptr
      000C24 FD               [12] 3859 	mov	r5,a
      000C25 A3               [24] 3860 	inc	dptr
      000C26 E0               [24] 3861 	movx	a,@dptr
      000C27 FE               [12] 3862 	mov	r6,a
      000C28 BD 01 05         [24] 3863 	cjne	r5,#0x01,00234$
      000C2B BE 00 02         [24] 3864 	cjne	r6,#0x00,00234$
      000C2E 80 03            [24] 3865 	sjmp	00235$
      000C30                       3866 00234$:
      000C30 02r0CrDD         [24] 3867 	ljmp	00144$
      000C33                       3868 00235$:
                           000C33  3869 	C$lab6.c$387$4$170 ==.
                                   3870 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:387: if (value ==0)
      000C33 90r00r58         [24] 3871 	mov	dptr,#_Angle_cal_value_1_162
      000C36 E0               [24] 3872 	movx	a,@dptr
      000C37 FD               [12] 3873 	mov	r5,a
      000C38 A3               [24] 3874 	inc	dptr
      000C39 E0               [24] 3875 	movx	a,@dptr
      000C3A FE               [12] 3876 	mov	r6,a
      000C3B 4D               [12] 3877 	orl	a,r5
      000C3C 70 27            [24] 3878 	jnz	00122$
                           000C3E  3879 	C$lab6.c$389$5$171 ==.
                                   3880 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:389: lcd_clear();
      000C3E C0 07            [24] 3881 	push	ar7
      000C40 12r00rE1         [24] 3882 	lcall	_lcd_clear
                           000C43  3883 	C$lab6.c$390$5$171 ==.
                                   3884 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:390: lcd_print("Now calibrating Cen_PW");
      000C43 74r4C            [12] 3885 	mov	a,#___str_14
      000C45 C0 E0            [24] 3886 	push	acc
      000C47 74s01            [12] 3887 	mov	a,#(___str_14 >> 8)
      000C49 C0 E0            [24] 3888 	push	acc
      000C4B 74 80            [12] 3889 	mov	a,#0x80
      000C4D C0 E0            [24] 3890 	push	acc
      000C4F 12r00r5C         [24] 3891 	lcall	_lcd_print
      000C52 15 81            [12] 3892 	dec	sp
      000C54 15 81            [12] 3893 	dec	sp
      000C56 15 81            [12] 3894 	dec	sp
      000C58 D0 07            [24] 3895 	pop	ar7
                           000C5A  3896 	C$lab6.c$391$5$171 ==.
                                   3897 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:391: if (st == 0) ANGLE_PW = PW_CENTER_ANGLE;
      000C5A EF               [12] 3898 	mov	a,r7
      000C5B 70 06            [24] 3899 	jnz	00120$
      000C5D 85*20*28         [24] 3900 	mov	_ANGLE_PW,_PW_CENTER_ANGLE
      000C60 85*21*29         [24] 3901 	mov	(_ANGLE_PW + 1),(_PW_CENTER_ANGLE + 1)
      000C63                       3902 00120$:
                           000C63  3903 	C$lab6.c$392$5$171 ==.
                                   3904 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:392: st=1;
      000C63 7F 01            [12] 3905 	mov	r7,#0x01
      000C65                       3906 00122$:
                           000C65  3907 	C$lab6.c$394$4$170 ==.
                                   3908 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:394: value = kpd_input(1);
      000C65 75 82 01         [24] 3909 	mov	dpl,#0x01
      000C68 C0 07            [24] 3910 	push	ar7
      000C6A 12r01r99         [24] 3911 	lcall	_kpd_input
      000C6D AD 82            [24] 3912 	mov	r5,dpl
      000C6F AE 83            [24] 3913 	mov	r6,dph
      000C71 D0 07            [24] 3914 	pop	ar7
      000C73 90r00r58         [24] 3915 	mov	dptr,#_Angle_cal_value_1_162
      000C76 ED               [12] 3916 	mov	a,r5
      000C77 F0               [24] 3917 	movx	@dptr,a
      000C78 EE               [12] 3918 	mov	a,r6
      000C79 A3               [24] 3919 	inc	dptr
      000C7A F0               [24] 3920 	movx	@dptr,a
                           000C7B  3921 	C$lab6.c$395$4$170 ==.
                                   3922 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:395: if (value == 1)
      000C7B BD 01 12         [24] 3923 	cjne	r5,#0x01,00129$
      000C7E BE 00 0F         [24] 3924 	cjne	r6,#0x00,00129$
                           000C81  3925 	C$lab6.c$397$5$172 ==.
                                   3926 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:397: ANGLE_PW -= 30;
      000C81 E5*28            [12] 3927 	mov	a,_ANGLE_PW
      000C83 24 E2            [12] 3928 	add	a,#0xE2
      000C85 F5*28            [12] 3929 	mov	_ANGLE_PW,a
      000C87 E5*29            [12] 3930 	mov	a,(_ANGLE_PW + 1)
      000C89 34 FF            [12] 3931 	addc	a,#0xFF
      000C8B F5*29            [12] 3932 	mov	(_ANGLE_PW + 1),a
      000C8D 02r0Br38         [24] 3933 	ljmp	00150$
      000C90                       3934 00129$:
                           000C90  3935 	C$lab6.c$399$4$170 ==.
                                   3936 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:399: else if (value==2)
      000C90 90r00r58         [24] 3937 	mov	dptr,#_Angle_cal_value_1_162
      000C93 E0               [24] 3938 	movx	a,@dptr
      000C94 FD               [12] 3939 	mov	r5,a
      000C95 A3               [24] 3940 	inc	dptr
      000C96 E0               [24] 3941 	movx	a,@dptr
      000C97 FE               [12] 3942 	mov	r6,a
      000C98 BD 02 11         [24] 3943 	cjne	r5,#0x02,00126$
      000C9B BE 00 0E         [24] 3944 	cjne	r6,#0x00,00126$
                           000C9E  3945 	C$lab6.c$401$5$173 ==.
                                   3946 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:401: ANGLE_PW += 30;
      000C9E 74 1E            [12] 3947 	mov	a,#0x1E
      000CA0 25*28            [12] 3948 	add	a,_ANGLE_PW
      000CA2 F5*28            [12] 3949 	mov	_ANGLE_PW,a
      000CA4 E4               [12] 3950 	clr	a
      000CA5 35*29            [12] 3951 	addc	a,(_ANGLE_PW + 1)
      000CA7 F5*29            [12] 3952 	mov	(_ANGLE_PW + 1),a
      000CA9 02r0Br38         [24] 3953 	ljmp	00150$
      000CAC                       3954 00126$:
                           000CAC  3955 	C$lab6.c$403$4$170 ==.
                                   3956 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:403: else if (value == 3)
      000CAC 90r00r58         [24] 3957 	mov	dptr,#_Angle_cal_value_1_162
      000CAF E0               [24] 3958 	movx	a,@dptr
      000CB0 FD               [12] 3959 	mov	r5,a
      000CB1 A3               [24] 3960 	inc	dptr
      000CB2 E0               [24] 3961 	movx	a,@dptr
      000CB3 FE               [12] 3962 	mov	r6,a
      000CB4 BD 03 05         [24] 3963 	cjne	r5,#0x03,00242$
      000CB7 BE 00 02         [24] 3964 	cjne	r6,#0x00,00242$
      000CBA 80 03            [24] 3965 	sjmp	00243$
      000CBC                       3966 00242$:
      000CBC 02r0Br38         [24] 3967 	ljmp	00150$
      000CBF                       3968 00243$:
                           000CBF  3969 	C$lab6.c$405$5$174 ==.
                                   3970 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:405: times++;
      000CBF 90r00r5A         [24] 3971 	mov	dptr,#_Angle_cal_times_1_162
      000CC2 E0               [24] 3972 	movx	a,@dptr
      000CC3 24 01            [12] 3973 	add	a,#0x01
      000CC5 F0               [24] 3974 	movx	@dptr,a
      000CC6 A3               [24] 3975 	inc	dptr
      000CC7 E0               [24] 3976 	movx	a,@dptr
      000CC8 34 00            [12] 3977 	addc	a,#0x00
      000CCA F0               [24] 3978 	movx	@dptr,a
                           000CCB  3979 	C$lab6.c$406$5$174 ==.
                                   3980 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:406: value=0;
      000CCB 90r00r58         [24] 3981 	mov	dptr,#_Angle_cal_value_1_162
      000CCE E4               [12] 3982 	clr	a
      000CCF F0               [24] 3983 	movx	@dptr,a
      000CD0 A3               [24] 3984 	inc	dptr
      000CD1 F0               [24] 3985 	movx	@dptr,a
                           000CD2  3986 	C$lab6.c$407$5$174 ==.
                                   3987 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:407: st=0;
      000CD2 7F 00            [12] 3988 	mov	r7,#0x00
                           000CD4  3989 	C$lab6.c$408$5$174 ==.
                                   3990 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:408: PW_CENTER_ANGLE = ANGLE_PW;
      000CD4 85*28*20         [24] 3991 	mov	_PW_CENTER_ANGLE,_ANGLE_PW
      000CD7 85*29*21         [24] 3992 	mov	(_PW_CENTER_ANGLE + 1),(_ANGLE_PW + 1)
      000CDA 02r0Br38         [24] 3993 	ljmp	00150$
      000CDD                       3994 00144$:
                           000CDD  3995 	C$lab6.c$413$4$175 ==.
                                   3996 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:413: if (value==0)
      000CDD 90r00r58         [24] 3997 	mov	dptr,#_Angle_cal_value_1_162
      000CE0 E0               [24] 3998 	movx	a,@dptr
      000CE1 FD               [12] 3999 	mov	r5,a
      000CE2 A3               [24] 4000 	inc	dptr
      000CE3 E0               [24] 4001 	movx	a,@dptr
      000CE4 FE               [12] 4002 	mov	r6,a
      000CE5 4D               [12] 4003 	orl	a,r5
      000CE6 70 27            [24] 4004 	jnz	00134$
                           000CE8  4005 	C$lab6.c$415$5$176 ==.
                                   4006 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:415: lcd_clear();
      000CE8 C0 07            [24] 4007 	push	ar7
      000CEA 12r00rE1         [24] 4008 	lcall	_lcd_clear
                           000CED  4009 	C$lab6.c$416$5$176 ==.
                                   4010 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:416: lcd_print("Now calibrating Max_PW DOWN ANGLE");
      000CED 74rAC            [12] 4011 	mov	a,#___str_18
      000CEF C0 E0            [24] 4012 	push	acc
      000CF1 74s01            [12] 4013 	mov	a,#(___str_18 >> 8)
      000CF3 C0 E0            [24] 4014 	push	acc
      000CF5 74 80            [12] 4015 	mov	a,#0x80
      000CF7 C0 E0            [24] 4016 	push	acc
      000CF9 12r00r5C         [24] 4017 	lcall	_lcd_print
      000CFC 15 81            [12] 4018 	dec	sp
      000CFE 15 81            [12] 4019 	dec	sp
      000D00 15 81            [12] 4020 	dec	sp
      000D02 D0 07            [24] 4021 	pop	ar7
                           000D04  4022 	C$lab6.c$417$5$176 ==.
                                   4023 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:417: if (st == 0) ANGLE_PW = PW_DOWN_ANGLE;
      000D04 EF               [12] 4024 	mov	a,r7
      000D05 70 06            [24] 4025 	jnz	00132$
      000D07 85*22*28         [24] 4026 	mov	_ANGLE_PW,_PW_DOWN_ANGLE
      000D0A 85*23*29         [24] 4027 	mov	(_ANGLE_PW + 1),(_PW_DOWN_ANGLE + 1)
      000D0D                       4028 00132$:
                           000D0D  4029 	C$lab6.c$418$5$176 ==.
                                   4030 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:418: st=1;
      000D0D 7F 01            [12] 4031 	mov	r7,#0x01
      000D0F                       4032 00134$:
                           000D0F  4033 	C$lab6.c$420$4$175 ==.
                                   4034 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:420: value = kpd_input(1);
      000D0F 75 82 01         [24] 4035 	mov	dpl,#0x01
      000D12 C0 07            [24] 4036 	push	ar7
      000D14 12r01r99         [24] 4037 	lcall	_kpd_input
      000D17 AD 82            [24] 4038 	mov	r5,dpl
      000D19 AE 83            [24] 4039 	mov	r6,dph
      000D1B D0 07            [24] 4040 	pop	ar7
      000D1D 90r00r58         [24] 4041 	mov	dptr,#_Angle_cal_value_1_162
      000D20 ED               [12] 4042 	mov	a,r5
      000D21 F0               [24] 4043 	movx	@dptr,a
      000D22 EE               [12] 4044 	mov	a,r6
      000D23 A3               [24] 4045 	inc	dptr
      000D24 F0               [24] 4046 	movx	@dptr,a
                           000D25  4047 	C$lab6.c$421$4$175 ==.
                                   4048 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:421: if (value == 1)
      000D25 BD 01 12         [24] 4049 	cjne	r5,#0x01,00141$
      000D28 BE 00 0F         [24] 4050 	cjne	r6,#0x00,00141$
                           000D2B  4051 	C$lab6.c$423$5$177 ==.
                                   4052 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:423: ANGLE_PW -= 30;
      000D2B E5*28            [12] 4053 	mov	a,_ANGLE_PW
      000D2D 24 E2            [12] 4054 	add	a,#0xE2
      000D2F F5*28            [12] 4055 	mov	_ANGLE_PW,a
      000D31 E5*29            [12] 4056 	mov	a,(_ANGLE_PW + 1)
      000D33 34 FF            [12] 4057 	addc	a,#0xFF
      000D35 F5*29            [12] 4058 	mov	(_ANGLE_PW + 1),a
      000D37 02r0Br38         [24] 4059 	ljmp	00150$
      000D3A                       4060 00141$:
                           000D3A  4061 	C$lab6.c$425$4$175 ==.
                                   4062 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:425: else if (value==2)
      000D3A 90r00r58         [24] 4063 	mov	dptr,#_Angle_cal_value_1_162
      000D3D E0               [24] 4064 	movx	a,@dptr
      000D3E FD               [12] 4065 	mov	r5,a
      000D3F A3               [24] 4066 	inc	dptr
      000D40 E0               [24] 4067 	movx	a,@dptr
      000D41 FE               [12] 4068 	mov	r6,a
      000D42 BD 02 11         [24] 4069 	cjne	r5,#0x02,00138$
      000D45 BE 00 0E         [24] 4070 	cjne	r6,#0x00,00138$
                           000D48  4071 	C$lab6.c$427$5$178 ==.
                                   4072 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:427: ANGLE_PW += 30;
      000D48 74 1E            [12] 4073 	mov	a,#0x1E
      000D4A 25*28            [12] 4074 	add	a,_ANGLE_PW
      000D4C F5*28            [12] 4075 	mov	_ANGLE_PW,a
      000D4E E4               [12] 4076 	clr	a
      000D4F 35*29            [12] 4077 	addc	a,(_ANGLE_PW + 1)
      000D51 F5*29            [12] 4078 	mov	(_ANGLE_PW + 1),a
      000D53 02r0Br38         [24] 4079 	ljmp	00150$
      000D56                       4080 00138$:
                           000D56  4081 	C$lab6.c$429$4$175 ==.
                                   4082 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:429: else if (value == 3)
      000D56 90r00r58         [24] 4083 	mov	dptr,#_Angle_cal_value_1_162
      000D59 E0               [24] 4084 	movx	a,@dptr
      000D5A FD               [12] 4085 	mov	r5,a
      000D5B A3               [24] 4086 	inc	dptr
      000D5C E0               [24] 4087 	movx	a,@dptr
      000D5D FE               [12] 4088 	mov	r6,a
      000D5E BD 03 05         [24] 4089 	cjne	r5,#0x03,00250$
      000D61 BE 00 02         [24] 4090 	cjne	r6,#0x00,00250$
      000D64 80 03            [24] 4091 	sjmp	00251$
      000D66                       4092 00250$:
      000D66 02r0Br38         [24] 4093 	ljmp	00150$
      000D69                       4094 00251$:
                           000D69  4095 	C$lab6.c$431$5$179 ==.
                                   4096 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:431: PW_DOWN_ANGLE = ANGLE_PW;
      000D69 85*28*22         [24] 4097 	mov	_PW_DOWN_ANGLE,_ANGLE_PW
      000D6C 85*29*23         [24] 4098 	mov	(_PW_DOWN_ANGLE + 1),(_ANGLE_PW + 1)
                           000D6F  4099 	C$lab6.c$432$5$179 ==.
                                   4100 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:432: return;
                           000D6F  4101 	C$lab6.c$437$1$162 ==.
                           000D6F  4102 	XG$Angle_cal$0$0 ==.
      000D6F 22               [24] 4103 	ret
                                   4104 ;------------------------------------------------------------
                                   4105 ;Allocation info for local variables in function 'Thrust_cal'
                                   4106 ;------------------------------------------------------------
                                   4107 ;st                        Allocated to registers r7 
                                   4108 ;value                     Allocated with name '_Thrust_cal_value_1_181'
                                   4109 ;times                     Allocated with name '_Thrust_cal_times_1_181'
                                   4110 ;------------------------------------------------------------
                           000D70  4111 	G$Thrust_cal$0$0 ==.
                           000D70  4112 	C$lab6.c$439$1$162 ==.
                                   4113 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:439: void Thrust_cal(void)
                                   4114 ;	-----------------------------------------
                                   4115 ;	 function Thrust_cal
                                   4116 ;	-----------------------------------------
      000D70                       4117 _Thrust_cal:
                           000D70  4118 	C$lab6.c$442$1$162 ==.
                                   4119 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:442: __xdata int value =0;
      000D70 90r00r5C         [24] 4120 	mov	dptr,#_Thrust_cal_value_1_181
      000D73 E4               [12] 4121 	clr	a
      000D74 F0               [24] 4122 	movx	@dptr,a
      000D75 A3               [24] 4123 	inc	dptr
      000D76 F0               [24] 4124 	movx	@dptr,a
                           000D77  4125 	C$lab6.c$444$1$181 ==.
                                   4126 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:444: count =0;
      000D77 F5*10            [12] 4127 	mov	_count,a
      000D79 F5*11            [12] 4128 	mov	(_count + 1),a
                           000D7B  4129 	C$lab6.c$445$1$181 ==.
                                   4130 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:445: lcd_clear();
      000D7B 12r00rE1         [24] 4131 	lcall	_lcd_clear
                           000D7E  4132 	C$lab6.c$446$1$181 ==.
                                   4133 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:446: lcd_print("Thrust Calibration");
      000D7E 74rCE            [12] 4134 	mov	a,#___str_19
      000D80 C0 E0            [24] 4135 	push	acc
      000D82 74s01            [12] 4136 	mov	a,#(___str_19 >> 8)
      000D84 C0 E0            [24] 4137 	push	acc
      000D86 74 80            [12] 4138 	mov	a,#0x80
      000D88 C0 E0            [24] 4139 	push	acc
      000D8A 12r00r5C         [24] 4140 	lcall	_lcd_print
      000D8D 15 81            [12] 4141 	dec	sp
      000D8F 15 81            [12] 4142 	dec	sp
      000D91 15 81            [12] 4143 	dec	sp
                           000D93  4144 	C$lab6.c$447$1$181 ==.
                                   4145 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:447: while (count < 50);
      000D93                       4146 00101$:
      000D93 C3               [12] 4147 	clr	c
      000D94 E5*10            [12] 4148 	mov	a,_count
      000D96 94 32            [12] 4149 	subb	a,#0x32
      000D98 E5*11            [12] 4150 	mov	a,(_count + 1)
      000D9A 64 80            [12] 4151 	xrl	a,#0x80
      000D9C 94 80            [12] 4152 	subb	a,#0x80
      000D9E 40 F3            [24] 4153 	jc	00101$
                           000DA0  4154 	C$lab6.c$448$1$181 ==.
                                   4155 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:448: lcd_clear();
      000DA0 12r00rE1         [24] 4156 	lcall	_lcd_clear
                           000DA3  4157 	C$lab6.c$452$2$182 ==.
                                   4158 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:452: count = 0;
      000DA3 E4               [12] 4159 	clr	a
      000DA4 F5*10            [12] 4160 	mov	_count,a
      000DA6 F5*11            [12] 4161 	mov	(_count + 1),a
                           000DA8  4162 	C$lab6.c$453$2$182 ==.
                                   4163 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:453: while (count < 1);
      000DA8                       4164 00104$:
      000DA8 C3               [12] 4165 	clr	c
      000DA9 E5*10            [12] 4166 	mov	a,_count
      000DAB 94 01            [12] 4167 	subb	a,#0x01
      000DAD E5*11            [12] 4168 	mov	a,(_count + 1)
      000DAF 64 80            [12] 4169 	xrl	a,#0x80
      000DB1 94 80            [12] 4170 	subb	a,#0x80
      000DB3 40 F3            [24] 4171 	jc	00104$
                           000DB5  4172 	C$lab6.c$454$2$182 ==.
                                   4173 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:454: lcd_clear();
      000DB5 12r00rE1         [24] 4174 	lcall	_lcd_clear
                           000DB8  4175 	C$lab6.c$455$2$182 ==.
                                   4176 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:455: lcd_print("go left: press 1\n go right: press 2\nPress * for next screen");
      000DB8 74rCD            [12] 4177 	mov	a,#___str_10
      000DBA C0 E0            [24] 4178 	push	acc
      000DBC 74s00            [12] 4179 	mov	a,#(___str_10 >> 8)
      000DBE C0 E0            [24] 4180 	push	acc
      000DC0 74 80            [12] 4181 	mov	a,#0x80
      000DC2 C0 E0            [24] 4182 	push	acc
      000DC4 12r00r5C         [24] 4183 	lcall	_lcd_print
      000DC7 15 81            [12] 4184 	dec	sp
      000DC9 15 81            [12] 4185 	dec	sp
      000DCB 15 81            [12] 4186 	dec	sp
                           000DCD  4187 	C$lab6.c$456$2$182 ==.
                                   4188 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:456: start();
      000DCD 12r12r1D         [24] 4189 	lcall	_start
                           000DD0  4190 	C$lab6.c$457$2$182 ==.
                                   4191 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:457: lcd_clear();
      000DD0 12r00rE1         [24] 4192 	lcall	_lcd_clear
                           000DD3  4193 	C$lab6.c$458$2$182 ==.
                                   4194 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:458: lcd_print("\n confirm: press 3\n press * to begin");
      000DD3 74r09            [12] 4195 	mov	a,#___str_11
      000DD5 C0 E0            [24] 4196 	push	acc
      000DD7 74s01            [12] 4197 	mov	a,#(___str_11 >> 8)
      000DD9 C0 E0            [24] 4198 	push	acc
      000DDB 74 80            [12] 4199 	mov	a,#0x80
      000DDD C0 E0            [24] 4200 	push	acc
      000DDF 12r00r5C         [24] 4201 	lcall	_lcd_print
      000DE2 15 81            [12] 4202 	dec	sp
      000DE4 15 81            [12] 4203 	dec	sp
      000DE6 15 81            [12] 4204 	dec	sp
                           000DE8  4205 	C$lab6.c$459$2$182 ==.
                                   4206 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:459: start();
      000DE8 12r12r1D         [24] 4207 	lcall	_start
                           000DEB  4208 	C$lab6.c$460$2$182 ==.
                                   4209 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:460: st =0;
      000DEB 7F 00            [12] 4210 	mov	r7,#0x00
                           000DED  4211 	C$lab6.c$461$2$182 ==.
                                   4212 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:461: times=0;
      000DED 90r00r5E         [24] 4213 	mov	dptr,#_Thrust_cal_times_1_181
      000DF0 E4               [12] 4214 	clr	a
      000DF1 F0               [24] 4215 	movx	@dptr,a
      000DF2 A3               [24] 4216 	inc	dptr
      000DF3 F0               [24] 4217 	movx	@dptr,a
                           000DF4  4218 	C$lab6.c$462$5$185 ==.
                                   4219 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:462: while (1)
      000DF4                       4220 00153$:
                           000DF4  4221 	C$lab6.c$464$3$183 ==.
                                   4222 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:464: printf("\r\n %u",RTHRUST_PW);
      000DF4 C0 07            [24] 4223 	push	ar7
      000DF6 C0*2C            [24] 4224 	push	_RTHRUST_PW
      000DF8 C0*2D            [24] 4225 	push	(_RTHRUST_PW + 1)
      000DFA 74r2E            [12] 4226 	mov	a,#___str_12
      000DFC C0 E0            [24] 4227 	push	acc
      000DFE 74s01            [12] 4228 	mov	a,#(___str_12 >> 8)
      000E00 C0 E0            [24] 4229 	push	acc
      000E02 74 80            [12] 4230 	mov	a,#0x80
      000E04 C0 E0            [24] 4231 	push	acc
      000E06 12r00r00         [24] 4232 	lcall	_printf
      000E09 E5 81            [12] 4233 	mov	a,sp
      000E0B 24 FB            [12] 4234 	add	a,#0xfb
      000E0D F5 81            [12] 4235 	mov	sp,a
      000E0F D0 07            [24] 4236 	pop	ar7
                           000E11  4237 	C$lab6.c$465$3$183 ==.
                                   4238 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:465: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      000E11 74 FF            [12] 4239 	mov	a,#0xFF
      000E13 C3               [12] 4240 	clr	c
      000E14 95*2C            [12] 4241 	subb	a,_RTHRUST_PW
      000E16 F5*30            [12] 4242 	mov	_RTRST_lo_to_hi,a
      000E18 74 FF            [12] 4243 	mov	a,#0xFF
      000E1A 95*2D            [12] 4244 	subb	a,(_RTHRUST_PW + 1)
      000E1C F5*31            [12] 4245 	mov	(_RTRST_lo_to_hi + 1),a
                           000E1E  4246 	C$lab6.c$466$3$183 ==.
                                   4247 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:466: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      000E1E 74 FF            [12] 4248 	mov	a,#0xFF
      000E20 C3               [12] 4249 	clr	c
      000E21 95*2E            [12] 4250 	subb	a,_LTHRUST_PW
      000E23 F5*32            [12] 4251 	mov	_LTRST_lo_to_hi,a
      000E25 74 FF            [12] 4252 	mov	a,#0xFF
      000E27 95*2F            [12] 4253 	subb	a,(_LTHRUST_PW + 1)
      000E29 F5*33            [12] 4254 	mov	(_LTRST_lo_to_hi + 1),a
                           000E2B  4255 	C$lab6.c$467$3$183 ==.
                                   4256 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:467: PCA0CP2 = RTRST_lo_to_hi;
      000E2B 85*30 EC         [24] 4257 	mov	((_PCA0CP2 >> 0) & 0xFF),_RTRST_lo_to_hi
      000E2E 85*31 FC         [24] 4258 	mov	((_PCA0CP2 >> 8) & 0xFF),(_RTRST_lo_to_hi + 1)
                           000E31  4259 	C$lab6.c$468$3$183 ==.
                                   4260 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:468: PCA0CP3 = LTRST_lo_to_hi;
      000E31 85*32 ED         [24] 4261 	mov	((_PCA0CP3 >> 0) & 0xFF),_LTRST_lo_to_hi
      000E34 85*33 FD         [24] 4262 	mov	((_PCA0CP3 >> 8) & 0xFF),(_LTRST_lo_to_hi + 1)
                           000E37  4263 	C$lab6.c$472$3$183 ==.
                                   4264 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:472: if (times == 0 )
      000E37 90r00r5E         [24] 4265 	mov	dptr,#_Thrust_cal_times_1_181
      000E3A E0               [24] 4266 	movx	a,@dptr
      000E3B FD               [12] 4267 	mov	r5,a
      000E3C A3               [24] 4268 	inc	dptr
      000E3D E0               [24] 4269 	movx	a,@dptr
      000E3E FE               [12] 4270 	mov	r6,a
      000E3F 4D               [12] 4271 	orl	a,r5
      000E40 60 03            [24] 4272 	jz	00231$
      000E42 02r0Fr0C         [24] 4273 	ljmp	00150$
      000E45                       4274 00231$:
                           000E45  4275 	C$lab6.c$474$4$184 ==.
                                   4276 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:474: if (value ==0)
      000E45 90r00r5C         [24] 4277 	mov	dptr,#_Thrust_cal_value_1_181
      000E48 E0               [24] 4278 	movx	a,@dptr
      000E49 FD               [12] 4279 	mov	r5,a
      000E4A A3               [24] 4280 	inc	dptr
      000E4B E0               [24] 4281 	movx	a,@dptr
      000E4C FE               [12] 4282 	mov	r6,a
      000E4D 4D               [12] 4283 	orl	a,r5
      000E4E 70 2D            [24] 4284 	jnz	00110$
                           000E50  4285 	C$lab6.c$476$5$185 ==.
                                   4286 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:476: lcd_clear();
      000E50 C0 07            [24] 4287 	push	ar7
      000E52 12r00rE1         [24] 4288 	lcall	_lcd_clear
                           000E55  4289 	C$lab6.c$477$5$185 ==.
                                   4290 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:477: lcd_print("Now calibrating Min_PW");
      000E55 74rE1            [12] 4291 	mov	a,#___str_20
      000E57 C0 E0            [24] 4292 	push	acc
      000E59 74s01            [12] 4293 	mov	a,#(___str_20 >> 8)
      000E5B C0 E0            [24] 4294 	push	acc
      000E5D 74 80            [12] 4295 	mov	a,#0x80
      000E5F C0 E0            [24] 4296 	push	acc
      000E61 12r00r5C         [24] 4297 	lcall	_lcd_print
      000E64 15 81            [12] 4298 	dec	sp
      000E66 15 81            [12] 4299 	dec	sp
      000E68 15 81            [12] 4300 	dec	sp
      000E6A D0 07            [24] 4301 	pop	ar7
                           000E6C  4302 	C$lab6.c$478$5$185 ==.
                                   4303 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:478: if (st ==0)
      000E6C EF               [12] 4304 	mov	a,r7
      000E6D 70 0C            [24] 4305 	jnz	00108$
                           000E6F  4306 	C$lab6.c$480$6$186 ==.
                                   4307 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:480: RTHRUST_PW = PW_MIN_THRUST;
      000E6F 85*12*2C         [24] 4308 	mov	_RTHRUST_PW,_PW_MIN_THRUST
      000E72 85*13*2D         [24] 4309 	mov	(_RTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
                           000E75  4310 	C$lab6.c$481$6$186 ==.
                                   4311 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:481: LTHRUST_PW = PW_MIN_THRUST;
      000E75 85*12*2E         [24] 4312 	mov	_LTHRUST_PW,_PW_MIN_THRUST
      000E78 85*13*2F         [24] 4313 	mov	(_LTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
      000E7B                       4314 00108$:
                           000E7B  4315 	C$lab6.c$483$5$185 ==.
                                   4316 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:483: st =1;
      000E7B 7F 01            [12] 4317 	mov	r7,#0x01
      000E7D                       4318 00110$:
                           000E7D  4319 	C$lab6.c$485$4$184 ==.
                                   4320 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:485: value = kpd_input(1);
      000E7D 75 82 01         [24] 4321 	mov	dpl,#0x01
      000E80 C0 07            [24] 4322 	push	ar7
      000E82 12r01r99         [24] 4323 	lcall	_kpd_input
      000E85 AD 82            [24] 4324 	mov	r5,dpl
      000E87 AE 83            [24] 4325 	mov	r6,dph
      000E89 D0 07            [24] 4326 	pop	ar7
      000E8B 90r00r5C         [24] 4327 	mov	dptr,#_Thrust_cal_value_1_181
      000E8E ED               [12] 4328 	mov	a,r5
      000E8F F0               [24] 4329 	movx	@dptr,a
      000E90 EE               [12] 4330 	mov	a,r6
      000E91 A3               [24] 4331 	inc	dptr
      000E92 F0               [24] 4332 	movx	@dptr,a
                           000E93  4333 	C$lab6.c$486$4$184 ==.
                                   4334 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:486: if (value == 1)
      000E93 BD 01 1D         [24] 4335 	cjne	r5,#0x01,00117$
      000E96 BE 00 1A         [24] 4336 	cjne	r6,#0x00,00117$
                           000E99  4337 	C$lab6.c$488$5$187 ==.
                                   4338 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:488: RTHRUST_PW -= 30;
      000E99 E5*2C            [12] 4339 	mov	a,_RTHRUST_PW
      000E9B 24 E2            [12] 4340 	add	a,#0xE2
      000E9D F5*2C            [12] 4341 	mov	_RTHRUST_PW,a
      000E9F E5*2D            [12] 4342 	mov	a,(_RTHRUST_PW + 1)
      000EA1 34 FF            [12] 4343 	addc	a,#0xFF
      000EA3 F5*2D            [12] 4344 	mov	(_RTHRUST_PW + 1),a
                           000EA5  4345 	C$lab6.c$489$5$187 ==.
                                   4346 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:489: LTHRUST_PW += 30;
      000EA5 74 1E            [12] 4347 	mov	a,#0x1E
      000EA7 25*2E            [12] 4348 	add	a,_LTHRUST_PW
      000EA9 F5*2E            [12] 4349 	mov	_LTHRUST_PW,a
      000EAB E4               [12] 4350 	clr	a
      000EAC 35*2F            [12] 4351 	addc	a,(_LTHRUST_PW + 1)
      000EAE F5*2F            [12] 4352 	mov	(_LTHRUST_PW + 1),a
      000EB0 02r0DrF4         [24] 4353 	ljmp	00153$
      000EB3                       4354 00117$:
                           000EB3  4355 	C$lab6.c$491$4$184 ==.
                                   4356 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:491: else if (value==2)
      000EB3 90r00r5C         [24] 4357 	mov	dptr,#_Thrust_cal_value_1_181
      000EB6 E0               [24] 4358 	movx	a,@dptr
      000EB7 FD               [12] 4359 	mov	r5,a
      000EB8 A3               [24] 4360 	inc	dptr
      000EB9 E0               [24] 4361 	movx	a,@dptr
      000EBA FE               [12] 4362 	mov	r6,a
      000EBB BD 02 1D         [24] 4363 	cjne	r5,#0x02,00114$
      000EBE BE 00 1A         [24] 4364 	cjne	r6,#0x00,00114$
                           000EC1  4365 	C$lab6.c$493$5$188 ==.
                                   4366 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:493: RTHRUST_PW += 30;
      000EC1 74 1E            [12] 4367 	mov	a,#0x1E
      000EC3 25*2C            [12] 4368 	add	a,_RTHRUST_PW
      000EC5 F5*2C            [12] 4369 	mov	_RTHRUST_PW,a
      000EC7 E4               [12] 4370 	clr	a
      000EC8 35*2D            [12] 4371 	addc	a,(_RTHRUST_PW + 1)
      000ECA F5*2D            [12] 4372 	mov	(_RTHRUST_PW + 1),a
                           000ECC  4373 	C$lab6.c$494$5$188 ==.
                                   4374 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:494: LTHRUST_PW -= 30;
      000ECC E5*2E            [12] 4375 	mov	a,_LTHRUST_PW
      000ECE 24 E2            [12] 4376 	add	a,#0xE2
      000ED0 F5*2E            [12] 4377 	mov	_LTHRUST_PW,a
      000ED2 E5*2F            [12] 4378 	mov	a,(_LTHRUST_PW + 1)
      000ED4 34 FF            [12] 4379 	addc	a,#0xFF
      000ED6 F5*2F            [12] 4380 	mov	(_LTHRUST_PW + 1),a
      000ED8 02r0DrF4         [24] 4381 	ljmp	00153$
      000EDB                       4382 00114$:
                           000EDB  4383 	C$lab6.c$496$4$184 ==.
                                   4384 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:496: else if (value == 3)
      000EDB 90r00r5C         [24] 4385 	mov	dptr,#_Thrust_cal_value_1_181
      000EDE E0               [24] 4386 	movx	a,@dptr
      000EDF FD               [12] 4387 	mov	r5,a
      000EE0 A3               [24] 4388 	inc	dptr
      000EE1 E0               [24] 4389 	movx	a,@dptr
      000EE2 FE               [12] 4390 	mov	r6,a
      000EE3 BD 03 05         [24] 4391 	cjne	r5,#0x03,00238$
      000EE6 BE 00 02         [24] 4392 	cjne	r6,#0x00,00238$
      000EE9 80 03            [24] 4393 	sjmp	00239$
      000EEB                       4394 00238$:
      000EEB 02r0DrF4         [24] 4395 	ljmp	00153$
      000EEE                       4396 00239$:
                           000EEE  4397 	C$lab6.c$498$5$189 ==.
                                   4398 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:498: times++;
      000EEE 90r00r5E         [24] 4399 	mov	dptr,#_Thrust_cal_times_1_181
      000EF1 E0               [24] 4400 	movx	a,@dptr
      000EF2 24 01            [12] 4401 	add	a,#0x01
      000EF4 F0               [24] 4402 	movx	@dptr,a
      000EF5 A3               [24] 4403 	inc	dptr
      000EF6 E0               [24] 4404 	movx	a,@dptr
      000EF7 34 00            [12] 4405 	addc	a,#0x00
      000EF9 F0               [24] 4406 	movx	@dptr,a
                           000EFA  4407 	C$lab6.c$499$5$189 ==.
                                   4408 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:499: value =0;
      000EFA 90r00r5C         [24] 4409 	mov	dptr,#_Thrust_cal_value_1_181
      000EFD E4               [12] 4410 	clr	a
      000EFE F0               [24] 4411 	movx	@dptr,a
      000EFF A3               [24] 4412 	inc	dptr
      000F00 F0               [24] 4413 	movx	@dptr,a
                           000F01  4414 	C$lab6.c$500$5$189 ==.
                                   4415 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:500: st=0;
      000F01 7F 00            [12] 4416 	mov	r7,#0x00
                           000F03  4417 	C$lab6.c$501$5$189 ==.
                                   4418 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:501: PW_MIN_THRUST = RTHRUST_PW;
      000F03 85*2C*12         [24] 4419 	mov	_PW_MIN_THRUST,_RTHRUST_PW
      000F06 85*2D*13         [24] 4420 	mov	(_PW_MIN_THRUST + 1),(_RTHRUST_PW + 1)
      000F09 02r0DrF4         [24] 4421 	ljmp	00153$
      000F0C                       4422 00150$:
                           000F0C  4423 	C$lab6.c$505$3$183 ==.
                                   4424 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:505: else if (times ==1)
      000F0C 90r00r5E         [24] 4425 	mov	dptr,#_Thrust_cal_times_1_181
      000F0F E0               [24] 4426 	movx	a,@dptr
      000F10 FD               [12] 4427 	mov	r5,a
      000F11 A3               [24] 4428 	inc	dptr
      000F12 E0               [24] 4429 	movx	a,@dptr
      000F13 FE               [12] 4430 	mov	r6,a
      000F14 BD 01 05         [24] 4431 	cjne	r5,#0x01,00240$
      000F17 BE 00 02         [24] 4432 	cjne	r6,#0x00,00240$
      000F1A 80 03            [24] 4433 	sjmp	00241$
      000F1C                       4434 00240$:
      000F1C 02r0FrE6         [24] 4435 	ljmp	00147$
      000F1F                       4436 00241$:
                           000F1F  4437 	C$lab6.c$507$4$190 ==.
                                   4438 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:507: if (value ==0)
      000F1F 90r00r5C         [24] 4439 	mov	dptr,#_Thrust_cal_value_1_181
      000F22 E0               [24] 4440 	movx	a,@dptr
      000F23 FD               [12] 4441 	mov	r5,a
      000F24 A3               [24] 4442 	inc	dptr
      000F25 E0               [24] 4443 	movx	a,@dptr
      000F26 FE               [12] 4444 	mov	r6,a
      000F27 4D               [12] 4445 	orl	a,r5
      000F28 70 2D            [24] 4446 	jnz	00122$
                           000F2A  4447 	C$lab6.c$509$5$191 ==.
                                   4448 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:509: lcd_clear();
      000F2A C0 07            [24] 4449 	push	ar7
      000F2C 12r00rE1         [24] 4450 	lcall	_lcd_clear
                           000F2F  4451 	C$lab6.c$510$5$191 ==.
                                   4452 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:510: lcd_print("Now calibrating Min_PW");
      000F2F 74rE1            [12] 4453 	mov	a,#___str_20
      000F31 C0 E0            [24] 4454 	push	acc
      000F33 74s01            [12] 4455 	mov	a,#(___str_20 >> 8)
      000F35 C0 E0            [24] 4456 	push	acc
      000F37 74 80            [12] 4457 	mov	a,#0x80
      000F39 C0 E0            [24] 4458 	push	acc
      000F3B 12r00r5C         [24] 4459 	lcall	_lcd_print
      000F3E 15 81            [12] 4460 	dec	sp
      000F40 15 81            [12] 4461 	dec	sp
      000F42 15 81            [12] 4462 	dec	sp
      000F44 D0 07            [24] 4463 	pop	ar7
                           000F46  4464 	C$lab6.c$511$5$191 ==.
                                   4465 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:511: if (st ==0)
      000F46 EF               [12] 4466 	mov	a,r7
      000F47 70 0C            [24] 4467 	jnz	00120$
                           000F49  4468 	C$lab6.c$513$6$192 ==.
                                   4469 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:513: RTHRUST_PW = PW_NUET_THRUST;
      000F49 85*14*2C         [24] 4470 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      000F4C 85*15*2D         [24] 4471 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           000F4F  4472 	C$lab6.c$514$6$192 ==.
                                   4473 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:514: LTHRUST_PW = PW_NUET_THRUST;
      000F4F 85*14*2E         [24] 4474 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      000F52 85*15*2F         [24] 4475 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
      000F55                       4476 00120$:
                           000F55  4477 	C$lab6.c$516$5$191 ==.
                                   4478 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:516: st =1;
      000F55 7F 01            [12] 4479 	mov	r7,#0x01
      000F57                       4480 00122$:
                           000F57  4481 	C$lab6.c$518$4$190 ==.
                                   4482 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:518: value = kpd_input(1);
      000F57 75 82 01         [24] 4483 	mov	dpl,#0x01
      000F5A C0 07            [24] 4484 	push	ar7
      000F5C 12r01r99         [24] 4485 	lcall	_kpd_input
      000F5F AD 82            [24] 4486 	mov	r5,dpl
      000F61 AE 83            [24] 4487 	mov	r6,dph
      000F63 D0 07            [24] 4488 	pop	ar7
      000F65 90r00r5C         [24] 4489 	mov	dptr,#_Thrust_cal_value_1_181
      000F68 ED               [12] 4490 	mov	a,r5
      000F69 F0               [24] 4491 	movx	@dptr,a
      000F6A EE               [12] 4492 	mov	a,r6
      000F6B A3               [24] 4493 	inc	dptr
      000F6C F0               [24] 4494 	movx	@dptr,a
                           000F6D  4495 	C$lab6.c$519$4$190 ==.
                                   4496 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:519: if (value == 1)
      000F6D BD 01 1D         [24] 4497 	cjne	r5,#0x01,00129$
      000F70 BE 00 1A         [24] 4498 	cjne	r6,#0x00,00129$
                           000F73  4499 	C$lab6.c$521$5$193 ==.
                                   4500 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:521: RTHRUST_PW -= 30;
      000F73 E5*2C            [12] 4501 	mov	a,_RTHRUST_PW
      000F75 24 E2            [12] 4502 	add	a,#0xE2
      000F77 F5*2C            [12] 4503 	mov	_RTHRUST_PW,a
      000F79 E5*2D            [12] 4504 	mov	a,(_RTHRUST_PW + 1)
      000F7B 34 FF            [12] 4505 	addc	a,#0xFF
      000F7D F5*2D            [12] 4506 	mov	(_RTHRUST_PW + 1),a
                           000F7F  4507 	C$lab6.c$522$5$193 ==.
                                   4508 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:522: LTHRUST_PW += 30;
      000F7F 74 1E            [12] 4509 	mov	a,#0x1E
      000F81 25*2E            [12] 4510 	add	a,_LTHRUST_PW
      000F83 F5*2E            [12] 4511 	mov	_LTHRUST_PW,a
      000F85 E4               [12] 4512 	clr	a
      000F86 35*2F            [12] 4513 	addc	a,(_LTHRUST_PW + 1)
      000F88 F5*2F            [12] 4514 	mov	(_LTHRUST_PW + 1),a
      000F8A 02r0DrF4         [24] 4515 	ljmp	00153$
      000F8D                       4516 00129$:
                           000F8D  4517 	C$lab6.c$524$4$190 ==.
                                   4518 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:524: else if (value==2)
      000F8D 90r00r5C         [24] 4519 	mov	dptr,#_Thrust_cal_value_1_181
      000F90 E0               [24] 4520 	movx	a,@dptr
      000F91 FD               [12] 4521 	mov	r5,a
      000F92 A3               [24] 4522 	inc	dptr
      000F93 E0               [24] 4523 	movx	a,@dptr
      000F94 FE               [12] 4524 	mov	r6,a
      000F95 BD 02 1D         [24] 4525 	cjne	r5,#0x02,00126$
      000F98 BE 00 1A         [24] 4526 	cjne	r6,#0x00,00126$
                           000F9B  4527 	C$lab6.c$526$5$194 ==.
                                   4528 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:526: RTHRUST_PW += 30;
      000F9B 74 1E            [12] 4529 	mov	a,#0x1E
      000F9D 25*2C            [12] 4530 	add	a,_RTHRUST_PW
      000F9F F5*2C            [12] 4531 	mov	_RTHRUST_PW,a
      000FA1 E4               [12] 4532 	clr	a
      000FA2 35*2D            [12] 4533 	addc	a,(_RTHRUST_PW + 1)
      000FA4 F5*2D            [12] 4534 	mov	(_RTHRUST_PW + 1),a
                           000FA6  4535 	C$lab6.c$527$5$194 ==.
                                   4536 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:527: LTHRUST_PW -= 30;
      000FA6 E5*2E            [12] 4537 	mov	a,_LTHRUST_PW
      000FA8 24 E2            [12] 4538 	add	a,#0xE2
      000FAA F5*2E            [12] 4539 	mov	_LTHRUST_PW,a
      000FAC E5*2F            [12] 4540 	mov	a,(_LTHRUST_PW + 1)
      000FAE 34 FF            [12] 4541 	addc	a,#0xFF
      000FB0 F5*2F            [12] 4542 	mov	(_LTHRUST_PW + 1),a
      000FB2 02r0DrF4         [24] 4543 	ljmp	00153$
      000FB5                       4544 00126$:
                           000FB5  4545 	C$lab6.c$529$4$190 ==.
                                   4546 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:529: else if (value == 3)
      000FB5 90r00r5C         [24] 4547 	mov	dptr,#_Thrust_cal_value_1_181
      000FB8 E0               [24] 4548 	movx	a,@dptr
      000FB9 FD               [12] 4549 	mov	r5,a
      000FBA A3               [24] 4550 	inc	dptr
      000FBB E0               [24] 4551 	movx	a,@dptr
      000FBC FE               [12] 4552 	mov	r6,a
      000FBD BD 03 05         [24] 4553 	cjne	r5,#0x03,00248$
      000FC0 BE 00 02         [24] 4554 	cjne	r6,#0x00,00248$
      000FC3 80 03            [24] 4555 	sjmp	00249$
      000FC5                       4556 00248$:
      000FC5 02r0DrF4         [24] 4557 	ljmp	00153$
      000FC8                       4558 00249$:
                           000FC8  4559 	C$lab6.c$531$5$195 ==.
                                   4560 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:531: times++;
      000FC8 90r00r5E         [24] 4561 	mov	dptr,#_Thrust_cal_times_1_181
      000FCB E0               [24] 4562 	movx	a,@dptr
      000FCC 24 01            [12] 4563 	add	a,#0x01
      000FCE F0               [24] 4564 	movx	@dptr,a
      000FCF A3               [24] 4565 	inc	dptr
      000FD0 E0               [24] 4566 	movx	a,@dptr
      000FD1 34 00            [12] 4567 	addc	a,#0x00
      000FD3 F0               [24] 4568 	movx	@dptr,a
                           000FD4  4569 	C$lab6.c$532$5$195 ==.
                                   4570 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:532: value =0;
      000FD4 90r00r5C         [24] 4571 	mov	dptr,#_Thrust_cal_value_1_181
      000FD7 E4               [12] 4572 	clr	a
      000FD8 F0               [24] 4573 	movx	@dptr,a
      000FD9 A3               [24] 4574 	inc	dptr
      000FDA F0               [24] 4575 	movx	@dptr,a
                           000FDB  4576 	C$lab6.c$533$5$195 ==.
                                   4577 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:533: st=0;
      000FDB 7F 00            [12] 4578 	mov	r7,#0x00
                           000FDD  4579 	C$lab6.c$534$5$195 ==.
                                   4580 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:534: PW_NUET_THRUST = RTHRUST_PW;
      000FDD 85*2C*14         [24] 4581 	mov	_PW_NUET_THRUST,_RTHRUST_PW
      000FE0 85*2D*15         [24] 4582 	mov	(_PW_NUET_THRUST + 1),(_RTHRUST_PW + 1)
      000FE3 02r0DrF4         [24] 4583 	ljmp	00153$
      000FE6                       4584 00147$:
                           000FE6  4585 	C$lab6.c$537$3$183 ==.
                                   4586 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:537: else if(times == 2)
      000FE6 90r00r5E         [24] 4587 	mov	dptr,#_Thrust_cal_times_1_181
      000FE9 E0               [24] 4588 	movx	a,@dptr
      000FEA FD               [12] 4589 	mov	r5,a
      000FEB A3               [24] 4590 	inc	dptr
      000FEC E0               [24] 4591 	movx	a,@dptr
      000FED FE               [12] 4592 	mov	r6,a
      000FEE BD 02 05         [24] 4593 	cjne	r5,#0x02,00250$
      000FF1 BE 00 02         [24] 4594 	cjne	r6,#0x00,00250$
      000FF4 80 03            [24] 4595 	sjmp	00251$
      000FF6                       4596 00250$:
      000FF6 02r10r9E         [24] 4597 	ljmp	00144$
      000FF9                       4598 00251$:
                           000FF9  4599 	C$lab6.c$539$4$196 ==.
                                   4600 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:539: if (value==0)
      000FF9 90r00r5C         [24] 4601 	mov	dptr,#_Thrust_cal_value_1_181
      000FFC E0               [24] 4602 	movx	a,@dptr
      000FFD FD               [12] 4603 	mov	r5,a
      000FFE A3               [24] 4604 	inc	dptr
      000FFF E0               [24] 4605 	movx	a,@dptr
      001000 FE               [12] 4606 	mov	r6,a
      001001 4D               [12] 4607 	orl	a,r5
      001002 70 2B            [24] 4608 	jnz	00134$
                           001004  4609 	C$lab6.c$541$5$197 ==.
                                   4610 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:541: lcd_clear();
      001004 C0 07            [24] 4611 	push	ar7
      001006 12r00rE1         [24] 4612 	lcall	_lcd_clear
                           001009  4613 	C$lab6.c$542$5$197 ==.
                                   4614 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:542: lcd_print("Now calibrating Max_PW");
      001009 74r63            [12] 4615 	mov	a,#___str_15
      00100B C0 E0            [24] 4616 	push	acc
      00100D 74s01            [12] 4617 	mov	a,#(___str_15 >> 8)
      00100F C0 E0            [24] 4618 	push	acc
      001011 74 80            [12] 4619 	mov	a,#0x80
      001013 C0 E0            [24] 4620 	push	acc
      001015 12r00r5C         [24] 4621 	lcall	_lcd_print
      001018 15 81            [12] 4622 	dec	sp
      00101A 15 81            [12] 4623 	dec	sp
      00101C 15 81            [12] 4624 	dec	sp
      00101E D0 07            [24] 4625 	pop	ar7
                           001020  4626 	C$lab6.c$543$5$197 ==.
                                   4627 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:543: if (st == 0)
      001020 EF               [12] 4628 	mov	a,r7
      001021 70 0C            [24] 4629 	jnz	00134$
                           001023  4630 	C$lab6.c$545$6$198 ==.
                                   4631 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:545: RTHRUST_PW = PW_MAX_THRUST;
      001023 85*16*2C         [24] 4632 	mov	_RTHRUST_PW,_PW_MAX_THRUST
      001026 85*17*2D         [24] 4633 	mov	(_RTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
                           001029  4634 	C$lab6.c$546$6$198 ==.
                                   4635 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:546: LTHRUST_PW = PW_MAX_THRUST;
      001029 85*16*2E         [24] 4636 	mov	_LTHRUST_PW,_PW_MAX_THRUST
      00102C 85*17*2F         [24] 4637 	mov	(_LTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
      00102F                       4638 00134$:
                           00102F  4639 	C$lab6.c$550$4$196 ==.
                                   4640 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:550: value = kpd_input(1);
      00102F 75 82 01         [24] 4641 	mov	dpl,#0x01
      001032 C0 07            [24] 4642 	push	ar7
      001034 12r01r99         [24] 4643 	lcall	_kpd_input
      001037 AD 82            [24] 4644 	mov	r5,dpl
      001039 AE 83            [24] 4645 	mov	r6,dph
      00103B D0 07            [24] 4646 	pop	ar7
      00103D 90r00r5C         [24] 4647 	mov	dptr,#_Thrust_cal_value_1_181
      001040 ED               [12] 4648 	mov	a,r5
      001041 F0               [24] 4649 	movx	@dptr,a
      001042 EE               [12] 4650 	mov	a,r6
      001043 A3               [24] 4651 	inc	dptr
      001044 F0               [24] 4652 	movx	@dptr,a
                           001045  4653 	C$lab6.c$551$4$196 ==.
                                   4654 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:551: if (value == 1)
      001045 BD 01 12         [24] 4655 	cjne	r5,#0x01,00141$
      001048 BE 00 0F         [24] 4656 	cjne	r6,#0x00,00141$
                           00104B  4657 	C$lab6.c$553$5$199 ==.
                                   4658 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:553: RTHRUST_PW -= 30;
      00104B E5*2C            [12] 4659 	mov	a,_RTHRUST_PW
      00104D 24 E2            [12] 4660 	add	a,#0xE2
      00104F F5*2C            [12] 4661 	mov	_RTHRUST_PW,a
      001051 E5*2D            [12] 4662 	mov	a,(_RTHRUST_PW + 1)
      001053 34 FF            [12] 4663 	addc	a,#0xFF
      001055 F5*2D            [12] 4664 	mov	(_RTHRUST_PW + 1),a
      001057 02r0DrF4         [24] 4665 	ljmp	00153$
      00105A                       4666 00141$:
                           00105A  4667 	C$lab6.c$555$4$196 ==.
                                   4668 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:555: else if (value==2)
      00105A 90r00r5C         [24] 4669 	mov	dptr,#_Thrust_cal_value_1_181
      00105D E0               [24] 4670 	movx	a,@dptr
      00105E FD               [12] 4671 	mov	r5,a
      00105F A3               [24] 4672 	inc	dptr
      001060 E0               [24] 4673 	movx	a,@dptr
      001061 FE               [12] 4674 	mov	r6,a
      001062 BD 02 11         [24] 4675 	cjne	r5,#0x02,00138$
      001065 BE 00 0E         [24] 4676 	cjne	r6,#0x00,00138$
                           001068  4677 	C$lab6.c$557$5$200 ==.
                                   4678 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:557: RTHRUST_PW += 30;
      001068 74 1E            [12] 4679 	mov	a,#0x1E
      00106A 25*2C            [12] 4680 	add	a,_RTHRUST_PW
      00106C F5*2C            [12] 4681 	mov	_RTHRUST_PW,a
      00106E E4               [12] 4682 	clr	a
      00106F 35*2D            [12] 4683 	addc	a,(_RTHRUST_PW + 1)
      001071 F5*2D            [12] 4684 	mov	(_RTHRUST_PW + 1),a
      001073 02r0DrF4         [24] 4685 	ljmp	00153$
      001076                       4686 00138$:
                           001076  4687 	C$lab6.c$559$4$196 ==.
                                   4688 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:559: else if (value == 3)
      001076 90r00r5C         [24] 4689 	mov	dptr,#_Thrust_cal_value_1_181
      001079 E0               [24] 4690 	movx	a,@dptr
      00107A FD               [12] 4691 	mov	r5,a
      00107B A3               [24] 4692 	inc	dptr
      00107C E0               [24] 4693 	movx	a,@dptr
      00107D FE               [12] 4694 	mov	r6,a
      00107E BD 03 05         [24] 4695 	cjne	r5,#0x03,00258$
      001081 BE 00 02         [24] 4696 	cjne	r6,#0x00,00258$
      001084 80 03            [24] 4697 	sjmp	00259$
      001086                       4698 00258$:
      001086 02r0DrF4         [24] 4699 	ljmp	00153$
      001089                       4700 00259$:
                           001089  4701 	C$lab6.c$561$5$201 ==.
                                   4702 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:561: PW_MAX_THRUST = RTHRUST_PW;
      001089 85*2C*16         [24] 4703 	mov	_PW_MAX_THRUST,_RTHRUST_PW
      00108C 85*2D*17         [24] 4704 	mov	(_PW_MAX_THRUST + 1),(_RTHRUST_PW + 1)
                           00108F  4705 	C$lab6.c$562$5$201 ==.
                                   4706 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:562: LTHRUST_PW =PW_NUET_THRUST;
      00108F 85*14*2E         [24] 4707 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      001092 85*15*2F         [24] 4708 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           001095  4709 	C$lab6.c$563$5$201 ==.
                                   4710 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:563: RTHRUST_PW =PW_NUET_THRUST;
      001095 85*14*2C         [24] 4711 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      001098 85*15*2D         [24] 4712 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
      00109B 02r0DrF4         [24] 4713 	ljmp	00153$
      00109E                       4714 00144$:
                           00109E  4715 	C$lab6.c$566$3$183 ==.
                                   4716 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:566: else return;
                           00109E  4717 	C$lab6.c$569$1$181 ==.
                           00109E  4718 	XG$Thrust_cal$0$0 ==.
      00109E 22               [24] 4719 	ret
                                   4720 ;------------------------------------------------------------
                                   4721 ;Allocation info for local variables in function 'Steering_Servo'
                                   4722 ;------------------------------------------------------------
                                   4723 ;direction                 Allocated to registers r6 r7 
                                   4724 ;------------------------------------------------------------
                           00109F  4725 	G$Steering_Servo$0$0 ==.
                           00109F  4726 	C$lab6.c$572$1$181 ==.
                                   4727 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:572: void Steering_Servo(unsigned int direction)
                                   4728 ;	-----------------------------------------
                                   4729 ;	 function Steering_Servo
                                   4730 ;	-----------------------------------------
      00109F                       4731 _Steering_Servo:
      00109F AE 82            [24] 4732 	mov	r6,dpl
      0010A1 AF 83            [24] 4733 	mov	r7,dph
                           0010A3  4734 	C$lab6.c$578$1$203 ==.
                                   4735 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:578: if (direction > 3500 || direction < 100)
      0010A3 C3               [12] 4736 	clr	c
      0010A4 74 AC            [12] 4737 	mov	a,#0xAC
      0010A6 9E               [12] 4738 	subb	a,r6
      0010A7 74 0D            [12] 4739 	mov	a,#0x0D
      0010A9 9F               [12] 4740 	subb	a,r7
      0010AA 40 08            [24] 4741 	jc	00104$
      0010AC EE               [12] 4742 	mov	a,r6
      0010AD 94 64            [12] 4743 	subb	a,#0x64
      0010AF EF               [12] 4744 	mov	a,r7
      0010B0 94 00            [12] 4745 	subb	a,#0x00
      0010B2 50 09            [24] 4746 	jnc	00105$
      0010B4                       4747 00104$:
                           0010B4  4748 	C$lab6.c$580$2$204 ==.
                                   4749 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:580: error =0;
      0010B4 90r00r00         [24] 4750 	mov	dptr,#_error
      0010B7 E4               [12] 4751 	clr	a
      0010B8 F0               [24] 4752 	movx	@dptr,a
      0010B9 A3               [24] 4753 	inc	dptr
      0010BA F0               [24] 4754 	movx	@dptr,a
      0010BB 80 33            [24] 4755 	sjmp	00106$
      0010BD                       4756 00105$:
                           0010BD  4757 	C$lab6.c$582$1$203 ==.
                                   4758 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:582: else if (direction > 1800)
      0010BD C3               [12] 4759 	clr	c
      0010BE 74 08            [12] 4760 	mov	a,#0x08
      0010C0 9E               [12] 4761 	subb	a,r6
      0010C1 74 07            [12] 4762 	mov	a,#0x07
      0010C3 9F               [12] 4763 	subb	a,r7
      0010C4 50 13            [24] 4764 	jnc	00102$
                           0010C6  4765 	C$lab6.c$584$2$205 ==.
                                   4766 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:584: error = (3600 - (int) direction);
      0010C6 8E 04            [24] 4767 	mov	ar4,r6
      0010C8 8F 05            [24] 4768 	mov	ar5,r7
      0010CA 90r00r00         [24] 4769 	mov	dptr,#_error
      0010CD 74 10            [12] 4770 	mov	a,#0x10
      0010CF C3               [12] 4771 	clr	c
      0010D0 9C               [12] 4772 	subb	a,r4
      0010D1 F0               [24] 4773 	movx	@dptr,a
      0010D2 74 0E            [12] 4774 	mov	a,#0x0E
      0010D4 9D               [12] 4775 	subb	a,r5
      0010D5 A3               [24] 4776 	inc	dptr
      0010D6 F0               [24] 4777 	movx	@dptr,a
      0010D7 80 17            [24] 4778 	sjmp	00106$
      0010D9                       4779 00102$:
                           0010D9  4780 	C$lab6.c$588$1$203 ==.
                                   4781 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:588: error = -1* direction;
      0010D9 8E*00            [24] 4782 	mov	__mulint_PARM_2,r6
      0010DB 8F*01            [24] 4783 	mov	(__mulint_PARM_2 + 1),r7
      0010DD 90 FF FF         [24] 4784 	mov	dptr,#0xFFFF
      0010E0 12r00r00         [24] 4785 	lcall	__mulint
      0010E3 E5 82            [12] 4786 	mov	a,dpl
      0010E5 85 83 F0         [24] 4787 	mov	b,dph
      0010E8 90r00r00         [24] 4788 	mov	dptr,#_error
      0010EB F0               [24] 4789 	movx	@dptr,a
      0010EC E5 F0            [12] 4790 	mov	a,b
      0010EE A3               [24] 4791 	inc	dptr
      0010EF F0               [24] 4792 	movx	@dptr,a
      0010F0                       4793 00106$:
                           0010F0  4794 	C$lab6.c$591$1$203 ==.
                                   4795 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:591: RUDDER_PW  = PW_CENTER_RUDDER + (int) (((int) kp* (int) error) - (int) kd * ((int)old_error -(int) error));
      0010F0 90r00r00         [24] 4796 	mov	dptr,#_error
      0010F3 E0               [24] 4797 	movx	a,@dptr
      0010F4 FE               [12] 4798 	mov	r6,a
      0010F5 A3               [24] 4799 	inc	dptr
      0010F6 E0               [24] 4800 	movx	a,@dptr
      0010F7 FF               [12] 4801 	mov	r7,a
      0010F8 8E*00            [24] 4802 	mov	__mulint_PARM_2,r6
      0010FA 8F*01            [24] 4803 	mov	(__mulint_PARM_2 + 1),r7
      0010FC 85*39 82         [24] 4804 	mov	dpl,_kp
      0010FF 85*3A 83         [24] 4805 	mov	dph,(_kp + 1)
      001102 C0 07            [24] 4806 	push	ar7
      001104 C0 06            [24] 4807 	push	ar6
      001106 12r00r00         [24] 4808 	lcall	__mulint
      001109 AC 82            [24] 4809 	mov	r4,dpl
      00110B AD 83            [24] 4810 	mov	r5,dph
      00110D D0 06            [24] 4811 	pop	ar6
      00110F D0 07            [24] 4812 	pop	ar7
      001111 90r00r02         [24] 4813 	mov	dptr,#_old_error
      001114 E0               [24] 4814 	movx	a,@dptr
      001115 FA               [12] 4815 	mov	r2,a
      001116 A3               [24] 4816 	inc	dptr
      001117 E0               [24] 4817 	movx	a,@dptr
      001118 FB               [12] 4818 	mov	r3,a
      001119 EA               [12] 4819 	mov	a,r2
      00111A C3               [12] 4820 	clr	c
      00111B 9E               [12] 4821 	subb	a,r6
      00111C F5*00            [12] 4822 	mov	__mulint_PARM_2,a
      00111E EB               [12] 4823 	mov	a,r3
      00111F 9F               [12] 4824 	subb	a,r7
      001120 F5*01            [12] 4825 	mov	(__mulint_PARM_2 + 1),a
      001122 85*3B 82         [24] 4826 	mov	dpl,_kd
      001125 85*3C 83         [24] 4827 	mov	dph,(_kd + 1)
      001128 C0 07            [24] 4828 	push	ar7
      00112A C0 06            [24] 4829 	push	ar6
      00112C C0 05            [24] 4830 	push	ar5
      00112E C0 04            [24] 4831 	push	ar4
      001130 12r00r00         [24] 4832 	lcall	__mulint
      001133 AA 82            [24] 4833 	mov	r2,dpl
      001135 AB 83            [24] 4834 	mov	r3,dph
      001137 D0 04            [24] 4835 	pop	ar4
      001139 D0 05            [24] 4836 	pop	ar5
      00113B D0 06            [24] 4837 	pop	ar6
      00113D D0 07            [24] 4838 	pop	ar7
      00113F EC               [12] 4839 	mov	a,r4
      001140 C3               [12] 4840 	clr	c
      001141 9A               [12] 4841 	subb	a,r2
      001142 FC               [12] 4842 	mov	r4,a
      001143 ED               [12] 4843 	mov	a,r5
      001144 9B               [12] 4844 	subb	a,r3
      001145 FD               [12] 4845 	mov	r5,a
      001146 8C 02            [24] 4846 	mov	ar2,r4
      001148 8D 03            [24] 4847 	mov	ar3,r5
      00114A EA               [12] 4848 	mov	a,r2
      00114B 25*1A            [12] 4849 	add	a,_PW_CENTER_RUDDER
      00114D F5*24            [12] 4850 	mov	_RUDDER_PW,a
      00114F EB               [12] 4851 	mov	a,r3
      001150 35*1B            [12] 4852 	addc	a,(_PW_CENTER_RUDDER + 1)
      001152 F5*25            [12] 4853 	mov	(_RUDDER_PW + 1),a
                           001154  4854 	C$lab6.c$593$1$203 ==.
                                   4855 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:593: RTHRUST_PW = PW_NUET_THRUST   + (int) -1* (((int) kp* (int) error) - (int) kd * ((int)old_error -(int) error));
      001154 C3               [12] 4856 	clr	c
      001155 E4               [12] 4857 	clr	a
      001156 9C               [12] 4858 	subb	a,r4
      001157 FC               [12] 4859 	mov	r4,a
      001158 E4               [12] 4860 	clr	a
      001159 9D               [12] 4861 	subb	a,r5
      00115A FD               [12] 4862 	mov	r5,a
      00115B EC               [12] 4863 	mov	a,r4
      00115C 25*14            [12] 4864 	add	a,_PW_NUET_THRUST
      00115E F5*2C            [12] 4865 	mov	_RTHRUST_PW,a
      001160 ED               [12] 4866 	mov	a,r5
      001161 35*15            [12] 4867 	addc	a,(_PW_NUET_THRUST + 1)
      001163 F5*2D            [12] 4868 	mov	(_RTHRUST_PW + 1),a
                           001165  4869 	C$lab6.c$595$1$203 ==.
                                   4870 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:595: LTHRUST_PW = PW_NUET_THRUST   + (int) (((int) kp* (int) error) - (int) kd * ((int)old_error -(int) error));
      001165 EA               [12] 4871 	mov	a,r2
      001166 25*14            [12] 4872 	add	a,_PW_NUET_THRUST
      001168 F5*2E            [12] 4873 	mov	_LTHRUST_PW,a
      00116A EB               [12] 4874 	mov	a,r3
      00116B 35*15            [12] 4875 	addc	a,(_PW_NUET_THRUST + 1)
      00116D F5*2F            [12] 4876 	mov	(_LTHRUST_PW + 1),a
                           00116F  4877 	C$lab6.c$597$1$203 ==.
                                   4878 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:597: old_error=error;
      00116F 90r00r02         [24] 4879 	mov	dptr,#_old_error
      001172 EE               [12] 4880 	mov	a,r6
      001173 F0               [24] 4881 	movx	@dptr,a
      001174 EF               [12] 4882 	mov	a,r7
      001175 A3               [24] 4883 	inc	dptr
      001176 F0               [24] 4884 	movx	@dptr,a
                           001177  4885 	C$lab6.c$600$1$203 ==.
                                   4886 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:600: if (RUDDER_PW >= PW_RIGHT_RUDDER)
      001177 C3               [12] 4887 	clr	c
      001178 E5*24            [12] 4888 	mov	a,_RUDDER_PW
      00117A 95*1C            [12] 4889 	subb	a,_PW_RIGHT_RUDDER
      00117C E5*25            [12] 4890 	mov	a,(_RUDDER_PW + 1)
      00117E 95*1D            [12] 4891 	subb	a,(_PW_RIGHT_RUDDER + 1)
      001180 40 08            [24] 4892 	jc	00111$
                           001182  4893 	C$lab6.c$602$2$207 ==.
                                   4894 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:602: RUDDER_PW = PW_RIGHT_RUDDER;
      001182 85*1C*24         [24] 4895 	mov	_RUDDER_PW,_PW_RIGHT_RUDDER
      001185 85*1D*25         [24] 4896 	mov	(_RUDDER_PW + 1),(_PW_RIGHT_RUDDER + 1)
      001188 80 11            [24] 4897 	sjmp	00112$
      00118A                       4898 00111$:
                           00118A  4899 	C$lab6.c$604$1$203 ==.
                                   4900 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:604: else if(RUDDER_PW <= PW_LEFT_RUDDER)
      00118A C3               [12] 4901 	clr	c
      00118B E5*18            [12] 4902 	mov	a,_PW_LEFT_RUDDER
      00118D 95*24            [12] 4903 	subb	a,_RUDDER_PW
      00118F E5*19            [12] 4904 	mov	a,(_PW_LEFT_RUDDER + 1)
      001191 95*25            [12] 4905 	subb	a,(_RUDDER_PW + 1)
      001193 40 06            [24] 4906 	jc	00112$
                           001195  4907 	C$lab6.c$606$2$208 ==.
                                   4908 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:606: RUDDER_PW = PW_LEFT_RUDDER;
      001195 85*18*24         [24] 4909 	mov	_RUDDER_PW,_PW_LEFT_RUDDER
      001198 85*19*25         [24] 4910 	mov	(_RUDDER_PW + 1),(_PW_LEFT_RUDDER + 1)
      00119B                       4911 00112$:
                           00119B  4912 	C$lab6.c$609$1$203 ==.
                                   4913 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:609: if (RTHRUST_PW >= PW_MAX_THRUST)
      00119B C3               [12] 4914 	clr	c
      00119C E5*2C            [12] 4915 	mov	a,_RTHRUST_PW
      00119E 95*16            [12] 4916 	subb	a,_PW_MAX_THRUST
      0011A0 E5*2D            [12] 4917 	mov	a,(_RTHRUST_PW + 1)
      0011A2 95*17            [12] 4918 	subb	a,(_PW_MAX_THRUST + 1)
      0011A4 40 08            [24] 4919 	jc	00116$
                           0011A6  4920 	C$lab6.c$611$2$209 ==.
                                   4921 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:611: RTHRUST_PW = PW_MAX_THRUST;
      0011A6 85*16*2C         [24] 4922 	mov	_RTHRUST_PW,_PW_MAX_THRUST
      0011A9 85*17*2D         [24] 4923 	mov	(_RTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
      0011AC 80 11            [24] 4924 	sjmp	00117$
      0011AE                       4925 00116$:
                           0011AE  4926 	C$lab6.c$613$1$203 ==.
                                   4927 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:613: else if (RTHRUST_PW <=  PW_MIN_THRUST)
      0011AE C3               [12] 4928 	clr	c
      0011AF E5*12            [12] 4929 	mov	a,_PW_MIN_THRUST
      0011B1 95*2C            [12] 4930 	subb	a,_RTHRUST_PW
      0011B3 E5*13            [12] 4931 	mov	a,(_PW_MIN_THRUST + 1)
      0011B5 95*2D            [12] 4932 	subb	a,(_RTHRUST_PW + 1)
      0011B7 40 06            [24] 4933 	jc	00117$
                           0011B9  4934 	C$lab6.c$615$2$210 ==.
                                   4935 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:615: RTHRUST_PW = PW_MIN_THRUST;
      0011B9 85*12*2C         [24] 4936 	mov	_RTHRUST_PW,_PW_MIN_THRUST
      0011BC 85*13*2D         [24] 4937 	mov	(_RTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
      0011BF                       4938 00117$:
                           0011BF  4939 	C$lab6.c$617$1$203 ==.
                                   4940 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:617: if (LTHRUST_PW >= PW_MAX_THRUST)
      0011BF C3               [12] 4941 	clr	c
      0011C0 E5*2E            [12] 4942 	mov	a,_LTHRUST_PW
      0011C2 95*16            [12] 4943 	subb	a,_PW_MAX_THRUST
      0011C4 E5*2F            [12] 4944 	mov	a,(_LTHRUST_PW + 1)
      0011C6 95*17            [12] 4945 	subb	a,(_PW_MAX_THRUST + 1)
      0011C8 40 08            [24] 4946 	jc	00121$
                           0011CA  4947 	C$lab6.c$619$2$211 ==.
                                   4948 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:619: LTHRUST_PW = PW_MAX_THRUST;
      0011CA 85*16*2E         [24] 4949 	mov	_LTHRUST_PW,_PW_MAX_THRUST
      0011CD 85*17*2F         [24] 4950 	mov	(_LTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
      0011D0 80 11            [24] 4951 	sjmp	00122$
      0011D2                       4952 00121$:
                           0011D2  4953 	C$lab6.c$621$1$203 ==.
                                   4954 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:621: else if(LTHRUST_PW <= PW_MIN_THRUST)
      0011D2 C3               [12] 4955 	clr	c
      0011D3 E5*12            [12] 4956 	mov	a,_PW_MIN_THRUST
      0011D5 95*2E            [12] 4957 	subb	a,_LTHRUST_PW
      0011D7 E5*13            [12] 4958 	mov	a,(_PW_MIN_THRUST + 1)
      0011D9 95*2F            [12] 4959 	subb	a,(_LTHRUST_PW + 1)
      0011DB 40 06            [24] 4960 	jc	00122$
                           0011DD  4961 	C$lab6.c$623$2$212 ==.
                                   4962 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:623: LTHRUST_PW = PW_MIN_THRUST;
      0011DD 85*12*2E         [24] 4963 	mov	_LTHRUST_PW,_PW_MIN_THRUST
      0011E0 85*13*2F         [24] 4964 	mov	(_LTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
      0011E3                       4965 00122$:
                           0011E3  4966 	C$lab6.c$626$1$203 ==.
                                   4967 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:626: RDR_lo_to_hi = 0xFFFF - RUDDER_PW ;
      0011E3 74 FF            [12] 4968 	mov	a,#0xFF
      0011E5 C3               [12] 4969 	clr	c
      0011E6 95*24            [12] 4970 	subb	a,_RUDDER_PW
      0011E8 F5*26            [12] 4971 	mov	_RDR_lo_to_hi,a
      0011EA 74 FF            [12] 4972 	mov	a,#0xFF
      0011EC 95*25            [12] 4973 	subb	a,(_RUDDER_PW + 1)
      0011EE F5*27            [12] 4974 	mov	(_RDR_lo_to_hi + 1),a
                           0011F0  4975 	C$lab6.c$627$1$203 ==.
                                   4976 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:627: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      0011F0 74 FF            [12] 4977 	mov	a,#0xFF
      0011F2 C3               [12] 4978 	clr	c
      0011F3 95*2C            [12] 4979 	subb	a,_RTHRUST_PW
      0011F5 F5*30            [12] 4980 	mov	_RTRST_lo_to_hi,a
      0011F7 74 FF            [12] 4981 	mov	a,#0xFF
      0011F9 95*2D            [12] 4982 	subb	a,(_RTHRUST_PW + 1)
      0011FB F5*31            [12] 4983 	mov	(_RTRST_lo_to_hi + 1),a
                           0011FD  4984 	C$lab6.c$628$1$203 ==.
                                   4985 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:628: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      0011FD 74 FF            [12] 4986 	mov	a,#0xFF
      0011FF C3               [12] 4987 	clr	c
      001200 95*2E            [12] 4988 	subb	a,_LTHRUST_PW
      001202 F5*32            [12] 4989 	mov	_LTRST_lo_to_hi,a
      001204 74 FF            [12] 4990 	mov	a,#0xFF
      001206 95*2F            [12] 4991 	subb	a,(_LTHRUST_PW + 1)
      001208 F5*33            [12] 4992 	mov	(_LTRST_lo_to_hi + 1),a
                           00120A  4993 	C$lab6.c$630$1$203 ==.
                                   4994 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:630: PCA0CP0 = RDR_lo_to_hi;
      00120A 85*26 EA         [24] 4995 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      00120D 85*27 FA         [24] 4996 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           001210  4997 	C$lab6.c$631$1$203 ==.
                                   4998 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:631: PCA0CP2 = RTRST_lo_to_hi;
      001210 85*30 EC         [24] 4999 	mov	((_PCA0CP2 >> 0) & 0xFF),_RTRST_lo_to_hi
      001213 85*31 FC         [24] 5000 	mov	((_PCA0CP2 >> 8) & 0xFF),(_RTRST_lo_to_hi + 1)
                           001216  5001 	C$lab6.c$632$1$203 ==.
                                   5002 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:632: PCA0CP3 = LTRST_lo_to_hi;
      001216 85*32 ED         [24] 5003 	mov	((_PCA0CP3 >> 0) & 0xFF),_LTRST_lo_to_hi
      001219 85*33 FD         [24] 5004 	mov	((_PCA0CP3 >> 8) & 0xFF),(_LTRST_lo_to_hi + 1)
                           00121C  5005 	C$lab6.c$633$1$203 ==.
                           00121C  5006 	XG$Steering_Servo$0$0 ==.
      00121C 22               [24] 5007 	ret
                                   5008 ;------------------------------------------------------------
                                   5009 ;Allocation info for local variables in function 'start'
                                   5010 ;------------------------------------------------------------
                           00121D  5011 	G$start$0$0 ==.
                           00121D  5012 	C$lab6.c$635$1$203 ==.
                                   5013 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:635: void start(void)            ///WAITS UNTIL '*' IS ENTERED
                                   5014 ;	-----------------------------------------
                                   5015 ;	 function start
                                   5016 ;	-----------------------------------------
      00121D                       5017 _start:
                           00121D  5018 	C$lab6.c$637$1$214 ==.
                                   5019 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:637: while (read_keypad() != '*') wait();
      00121D                       5020 00101$:
      00121D 12r01r1A         [24] 5021 	lcall	_read_keypad
      001220 AF 82            [24] 5022 	mov	r7,dpl
      001222 BF 2A 02         [24] 5023 	cjne	r7,#0x2A,00112$
      001225 80 05            [24] 5024 	sjmp	00104$
      001227                       5025 00112$:
      001227 12r12r2D         [24] 5026 	lcall	_wait
      00122A 80 F1            [24] 5027 	sjmp	00101$
      00122C                       5028 00104$:
                           00122C  5029 	C$lab6.c$638$1$214 ==.
                           00122C  5030 	XG$start$0$0 ==.
      00122C 22               [24] 5031 	ret
                                   5032 ;------------------------------------------------------------
                                   5033 ;Allocation info for local variables in function 'wait'
                                   5034 ;------------------------------------------------------------
                                   5035 ;old_count                 Allocated with name '_wait_old_count_1_216'
                                   5036 ;------------------------------------------------------------
                           00122D  5037 	G$wait$0$0 ==.
                           00122D  5038 	C$lab6.c$642$1$214 ==.
                                   5039 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:642: void wait(void)
                                   5040 ;	-----------------------------------------
                                   5041 ;	 function wait
                                   5042 ;	-----------------------------------------
      00122D                       5043 _wait:
                           00122D  5044 	C$lab6.c$644$1$216 ==.
                                   5045 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:644: __xdata int old_count = count+1;
      00122D 90r00r60         [24] 5046 	mov	dptr,#_wait_old_count_1_216
      001230 74 01            [12] 5047 	mov	a,#0x01
      001232 25*10            [12] 5048 	add	a,_count
      001234 F0               [24] 5049 	movx	@dptr,a
      001235 E4               [12] 5050 	clr	a
      001236 35*11            [12] 5051 	addc	a,(_count + 1)
      001238 A3               [24] 5052 	inc	dptr
      001239 F0               [24] 5053 	movx	@dptr,a
                           00123A  5054 	C$lab6.c$645$1$216 ==.
                                   5055 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:645: while (old_count> count);
      00123A 90r00r60         [24] 5056 	mov	dptr,#_wait_old_count_1_216
      00123D E0               [24] 5057 	movx	a,@dptr
      00123E FE               [12] 5058 	mov	r6,a
      00123F A3               [24] 5059 	inc	dptr
      001240 E0               [24] 5060 	movx	a,@dptr
      001241 FF               [12] 5061 	mov	r7,a
      001242                       5062 00101$:
      001242 C3               [12] 5063 	clr	c
      001243 E5*10            [12] 5064 	mov	a,_count
      001245 9E               [12] 5065 	subb	a,r6
      001246 E5*11            [12] 5066 	mov	a,(_count + 1)
      001248 64 80            [12] 5067 	xrl	a,#0x80
      00124A 8F F0            [24] 5068 	mov	b,r7
      00124C 63 F0 80         [24] 5069 	xrl	b,#0x80
      00124F 95 F0            [12] 5070 	subb	a,b
      001251 40 EF            [24] 5071 	jc	00101$
                           001253  5072 	C$lab6.c$646$1$216 ==.
                           001253  5073 	XG$wait$0$0 ==.
      001253 22               [24] 5074 	ret
                                   5075 ;------------------------------------------------------------
                                   5076 ;Allocation info for local variables in function 'Port_Init'
                                   5077 ;------------------------------------------------------------
                           001254  5078 	G$Port_Init$0$0 ==.
                           001254  5079 	C$lab6.c$648$1$216 ==.
                                   5080 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:648: void Port_Init(void)
                                   5081 ;	-----------------------------------------
                                   5082 ;	 function Port_Init
                                   5083 ;	-----------------------------------------
      001254                       5084 _Port_Init:
                           001254  5085 	C$lab6.c$650$1$218 ==.
                                   5086 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:650: P0MDOUT &= ~0x32;
      001254 AF A4            [24] 5087 	mov	r7,_P0MDOUT
      001256 74 CD            [12] 5088 	mov	a,#0xCD
      001258 5F               [12] 5089 	anl	a,r7
      001259 F5 A4            [12] 5090 	mov	_P0MDOUT,a
                           00125B  5091 	C$lab6.c$652$1$218 ==.
                                   5092 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:652: P1MDIN  &= ~0x20;
      00125B AF BD            [24] 5093 	mov	r7,_P1MDIN
      00125D 74 DF            [12] 5094 	mov	a,#0xDF
      00125F 5F               [12] 5095 	anl	a,r7
      001260 F5 BD            [12] 5096 	mov	_P1MDIN,a
                           001262  5097 	C$lab6.c$654$1$218 ==.
                                   5098 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:654: P1MDOUT |= 0x0F;
      001262 43 A5 0F         [24] 5099 	orl	_P1MDOUT,#0x0F
                           001265  5100 	C$lab6.c$655$1$218 ==.
                                   5101 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:655: P1MDOUT &= 0x20;
      001265 53 A5 20         [24] 5102 	anl	_P1MDOUT,#0x20
                           001268  5103 	C$lab6.c$657$1$218 ==.
                                   5104 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:657: P1 		 = 0x20;
      001268 75 90 20         [24] 5105 	mov	_P1,#0x20
                           00126B  5106 	C$lab6.c$660$1$218 ==.
                           00126B  5107 	XG$Port_Init$0$0 ==.
      00126B 22               [24] 5108 	ret
                                   5109 ;------------------------------------------------------------
                                   5110 ;Allocation info for local variables in function 'PCA_Init'
                                   5111 ;------------------------------------------------------------
                           00126C  5112 	G$PCA_Init$0$0 ==.
                           00126C  5113 	C$lab6.c$662$1$218 ==.
                                   5114 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:662: void PCA_Init(void)
                                   5115 ;	-----------------------------------------
                                   5116 ;	 function PCA_Init
                                   5117 ;	-----------------------------------------
      00126C                       5118 _PCA_Init:
                           00126C  5119 	C$lab6.c$664$1$220 ==.
                                   5120 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:664: PCA0MD   = 0x81;
      00126C 75 D9 81         [24] 5121 	mov	_PCA0MD,#0x81
                           00126F  5122 	C$lab6.c$665$1$220 ==.
                                   5123 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:665: PCA0CPM0 = 0xC2;    //CCM0 in 16-bit compare mode FOR STEERING
      00126F 75 DA C2         [24] 5124 	mov	_PCA0CPM0,#0xC2
                           001272  5125 	C$lab6.c$666$1$220 ==.
                                   5126 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:666: PCA0CPM1 = 0xC2;
      001272 75 DB C2         [24] 5127 	mov	_PCA0CPM1,#0xC2
                           001275  5128 	C$lab6.c$667$1$220 ==.
                                   5129 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:667: PCA0CPM2 = 0xC2;    //CCM2 in 16-bit compare mode FOR MOTOR
      001275 75 DC C2         [24] 5130 	mov	_PCA0CPM2,#0xC2
                           001278  5131 	C$lab6.c$668$1$220 ==.
                                   5132 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:668: PCA0CPM3 = 0XC2;
      001278 75 DD C2         [24] 5133 	mov	_PCA0CPM3,#0xC2
                           00127B  5134 	C$lab6.c$669$1$220 ==.
                                   5135 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:669: PCA0CN 	 = 0x40;    //Enable PCA counter
      00127B 75 D8 40         [24] 5136 	mov	_PCA0CN,#0x40
                           00127E  5137 	C$lab6.c$670$1$220 ==.
                                   5138 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:670: EIE1    |= 0x08;    //Enable PCA interrupt
      00127E 43 E6 08         [24] 5139 	orl	_EIE1,#0x08
                           001281  5140 	C$lab6.c$671$1$220 ==.
                                   5141 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:671: EA       = 1   ;    //Enable global interrupts
      001281 D2 AF            [12] 5142 	setb	_EA
                           001283  5143 	C$lab6.c$672$1$220 ==.
                           001283  5144 	XG$PCA_Init$0$0 ==.
      001283 22               [24] 5145 	ret
                                   5146 ;------------------------------------------------------------
                                   5147 ;Allocation info for local variables in function 'XBR0_Init'
                                   5148 ;------------------------------------------------------------
                           001284  5149 	G$XBR0_Init$0$0 ==.
                           001284  5150 	C$lab6.c$675$1$220 ==.
                                   5151 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:675: void XBR0_Init(void)
                                   5152 ;	-----------------------------------------
                                   5153 ;	 function XBR0_Init
                                   5154 ;	-----------------------------------------
      001284                       5155 _XBR0_Init:
                           001284  5156 	C$lab6.c$677$1$222 ==.
                                   5157 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:677: XBR0 = 0x27;
      001284 75 E1 27         [24] 5158 	mov	_XBR0,#0x27
                           001287  5159 	C$lab6.c$678$1$222 ==.
                           001287  5160 	XG$XBR0_Init$0$0 ==.
      001287 22               [24] 5161 	ret
                                   5162 ;------------------------------------------------------------
                                   5163 ;Allocation info for local variables in function 'SMB_Init'
                                   5164 ;------------------------------------------------------------
                           001288  5165 	G$SMB_Init$0$0 ==.
                           001288  5166 	C$lab6.c$680$1$222 ==.
                                   5167 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:680: void SMB_Init(void)
                                   5168 ;	-----------------------------------------
                                   5169 ;	 function SMB_Init
                                   5170 ;	-----------------------------------------
      001288                       5171 _SMB_Init:
                           001288  5172 	C$lab6.c$682$1$224 ==.
                                   5173 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:682: SMB0CR =0x93;
      001288 75 CF 93         [24] 5174 	mov	_SMB0CR,#0x93
                           00128B  5175 	C$lab6.c$683$1$224 ==.
                                   5176 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:683: ENSMB =1;
      00128B D2 C6            [12] 5177 	setb	_ENSMB
                           00128D  5178 	C$lab6.c$684$1$224 ==.
                           00128D  5179 	XG$SMB_Init$0$0 ==.
      00128D 22               [24] 5180 	ret
                                   5181 ;------------------------------------------------------------
                                   5182 ;Allocation info for local variables in function 'ADC_Init'
                                   5183 ;------------------------------------------------------------
                           00128E  5184 	G$ADC_Init$0$0 ==.
                           00128E  5185 	C$lab6.c$686$1$224 ==.
                                   5186 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:686: void ADC_Init(void)								/////SETS ADC 
                                   5187 ;	-----------------------------------------
                                   5188 ;	 function ADC_Init
                                   5189 ;	-----------------------------------------
      00128E                       5190 _ADC_Init:
                           00128E  5191 	C$lab6.c$688$1$226 ==.
                                   5192 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:688: REF0CN = 0x03;
      00128E 75 D1 03         [24] 5193 	mov	_REF0CN,#0x03
                           001291  5194 	C$lab6.c$689$1$226 ==.
                                   5195 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:689: ADC1CN = 0x80;
      001291 75 AA 80         [24] 5196 	mov	_ADC1CN,#0x80
                           001294  5197 	C$lab6.c$690$1$226 ==.
                                   5198 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:690: ADC1CF |= 0x01;
      001294 43 AB 01         [24] 5199 	orl	_ADC1CF,#0x01
                           001297  5200 	C$lab6.c$691$1$226 ==.
                           001297  5201 	XG$ADC_Init$0$0 ==.
      001297 22               [24] 5202 	ret
                                   5203 ;------------------------------------------------------------
                                   5204 ;Allocation info for local variables in function 'PCA_ISR'
                                   5205 ;------------------------------------------------------------
                           001298  5206 	G$PCA_ISR$0$0 ==.
                           001298  5207 	C$lab6.c$693$1$226 ==.
                                   5208 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:693: void PCA_ISR ( void ) __interrupt 9
                                   5209 ;	-----------------------------------------
                                   5210 ;	 function PCA_ISR
                                   5211 ;	-----------------------------------------
      001298                       5212 _PCA_ISR:
      001298 C0 E0            [24] 5213 	push	acc
      00129A C0 D0            [24] 5214 	push	psw
                           00129C  5215 	C$lab6.c$696$1$228 ==.
                                   5216 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:696: if (CF)
                           00129C  5217 	C$lab6.c$698$2$229 ==.
                                   5218 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:698: CF =0;
      00129C 10 DF 02         [24] 5219 	jbc	_CF,00108$
      00129F 80 0E            [24] 5220 	sjmp	00102$
      0012A1                       5221 00108$:
                           0012A1  5222 	C$lab6.c$699$2$229 ==.
                                   5223 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:699: PCA0 = PCA_START;
      0012A1 75 E9 00         [24] 5224 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0012A4 75 F9 70         [24] 5225 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           0012A7  5226 	C$lab6.c$700$2$229 ==.
                                   5227 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:700: count++;
      0012A7 05*10            [12] 5228 	inc	_count
      0012A9 E4               [12] 5229 	clr	a
      0012AA B5*10 02         [24] 5230 	cjne	a,_count,00109$
      0012AD 05*11            [12] 5231 	inc	(_count + 1)
      0012AF                       5232 00109$:
      0012AF                       5233 00102$:
                           0012AF  5234 	C$lab6.c$705$1$228 ==.
                                   5235 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:705: PCA0CN &= 0xC0;
      0012AF 53 D8 C0         [24] 5236 	anl	_PCA0CN,#0xC0
      0012B2 D0 D0            [24] 5237 	pop	psw
      0012B4 D0 E0            [24] 5238 	pop	acc
                           0012B6  5239 	C$lab6.c$706$1$228 ==.
                           0012B6  5240 	XG$PCA_ISR$0$0 ==.
      0012B6 32               [24] 5241 	reti
                                   5242 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   5243 ;	eliminated unneeded push/pop dpl
                                   5244 ;	eliminated unneeded push/pop dph
                                   5245 ;	eliminated unneeded push/pop b
                                   5246 	.area CSEG    (CODE)
                                   5247 	.area CONST   (CODE)
                           000000  5248 Flab6$__str_0$0$0 == .
      000000                       5249 ___str_0:
      000000 0A                    5250 	.db 0x0A
      000001 54 79 70 65 20 64 69  5251 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    5252 	.db 0x00
                           000016  5253 Flab6$__str_1$0$0 == .
      000016                       5254 ___str_1:
      000016 20 20 20 20 20 25 63  5255 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    5256 	.db 0x00
                           000026  5257 Flab6$__str_2$0$0 == .
      000026                       5258 ___str_2:
      000026 25 63                 5259 	.ascii "%c"
      000028 00                    5260 	.db 0x00
                           000029  5261 Flab6$__str_3$0$0 == .
      000029                       5262 ___str_3:
      000029 50 6C 65 61 73 65 20  5263 	.ascii "Please enter a kp value:"
             65 6E 74 65 72 20 61
             20 6B 70 20 76 61 6C
             75 65 3A
      000041 0A                    5264 	.db 0x0A
      000042 20                    5265 	.ascii " "
      000043 00                    5266 	.db 0x00
                           000044  5267 Flab6$__str_4$0$0 == .
      000044                       5268 ___str_4:
      000044 50 6C 65 61 73 65 20  5269 	.ascii "Please enter a kd value:"
             65 6E 74 65 72 20 61
             20 6B 64 20 76 61 6C
             75 65 3A
      00005C 0A                    5270 	.db 0x0A
      00005D 20                    5271 	.ascii " "
      00005E 00                    5272 	.db 0x00
                           00005F  5273 Flab6$__str_5$0$0 == .
      00005F                       5274 ___str_5:
      00005F 0D                    5275 	.db 0x0D
      000060 0A                    5276 	.db 0x0A
      000061 25 75                 5277 	.ascii "%u"
      000063 00                    5278 	.db 0x00
                           000064  5279 Flab6$__str_6$0$0 == .
      000064                       5280 ___str_6:
      000064 25 64                 5281 	.ascii "%d"
      000066 00                    5282 	.db 0x00
                           000067  5283 Flab6$__str_7$0$0 == .
      000067                       5284 ___str_7:
      000067 43 61 6C 69 62 72 61  5285 	.ascii "Calibration:"
             74 69 6F 6E 3A
      000073 0A                    5286 	.db 0x0A
      000074 48 65 6C 6C 6F 20 77  5287 	.ascii "Hello world!"
             6F 72 6C 64 21
      000080 0A                    5288 	.db 0x0A
      000081 30 31 32 5F 33 34 35  5289 	.ascii "012_345_678:"
             5F 36 37 38 3A
      00008D 0A                    5290 	.db 0x0A
      00008E 61 62 63 20 64 65 66  5291 	.ascii "abc def ghij"
             20 67 68 69 6A
      00009A 00                    5292 	.db 0x00
                           00009B  5293 Flab6$__str_8$0$0 == .
      00009B                       5294 ___str_8:
      00009B 0D                    5295 	.db 0x0D
      00009C 0A                    5296 	.db 0x0A
      00009D 54 68 65 20 64 65 73  5297 	.ascii "The desired direction is: %d"
             69 72 65 64 20 64 69
             72 65 63 74 69 6F 6E
             20 69 73 3A 20 25 64
      0000B9 00                    5298 	.db 0x00
                           0000BA  5299 Flab6$__str_9$0$0 == .
      0000BA                       5300 ___str_9:
      0000BA 52 75 64 64 65 72 20  5301 	.ascii "Rudder Calibration"
             43 61 6C 69 62 72 61
             74 69 6F 6E
      0000CC 00                    5302 	.db 0x00
                           0000CD  5303 Flab6$__str_10$0$0 == .
      0000CD                       5304 ___str_10:
      0000CD 67 6F 20 6C 65 66 74  5305 	.ascii "go left: press 1"
             3A 20 70 72 65 73 73
             20 31
      0000DD 0A                    5306 	.db 0x0A
      0000DE 20 67 6F 20 72 69 67  5307 	.ascii " go right: press 2"
             68 74 3A 20 70 72 65
             73 73 20 32
      0000F0 0A                    5308 	.db 0x0A
      0000F1 50 72 65 73 73 20 2A  5309 	.ascii "Press * for next screen"
             20 66 6F 72 20 6E 65
             78 74 20 73 63 72 65
             65 6E
      000108 00                    5310 	.db 0x00
                           000109  5311 Flab6$__str_11$0$0 == .
      000109                       5312 ___str_11:
      000109 0A                    5313 	.db 0x0A
      00010A 20 63 6F 6E 66 69 72  5314 	.ascii " confirm: press 3"
             6D 3A 20 70 72 65 73
             73 20 33
      00011B 0A                    5315 	.db 0x0A
      00011C 20 70 72 65 73 73 20  5316 	.ascii " press * to begin"
             2A 20 74 6F 20 62 65
             67 69 6E
      00012D 00                    5317 	.db 0x00
                           00012E  5318 Flab6$__str_12$0$0 == .
      00012E                       5319 ___str_12:
      00012E 0D                    5320 	.db 0x0D
      00012F 0A                    5321 	.db 0x0A
      000130 20 25 75              5322 	.ascii " %u"
      000133 00                    5323 	.db 0x00
                           000134  5324 Flab6$__str_13$0$0 == .
      000134                       5325 ___str_13:
      000134 4E 6F 77 20 63 61 6C  5326 	.ascii "Now calibrating Min_PW"
             69 62 72 61 74 69 6E
             67 20 4D 69 6E 5F 50
             57
      00014A 0A                    5327 	.db 0x0A
      00014B 00                    5328 	.db 0x00
                           00014C  5329 Flab6$__str_14$0$0 == .
      00014C                       5330 ___str_14:
      00014C 4E 6F 77 20 63 61 6C  5331 	.ascii "Now calibrating Cen_PW"
             69 62 72 61 74 69 6E
             67 20 43 65 6E 5F 50
             57
      000162 00                    5332 	.db 0x00
                           000163  5333 Flab6$__str_15$0$0 == .
      000163                       5334 ___str_15:
      000163 4E 6F 77 20 63 61 6C  5335 	.ascii "Now calibrating Max_PW"
             69 62 72 61 74 69 6E
             67 20 4D 61 78 5F 50
             57
      000179 00                    5336 	.db 0x00
                           00017A  5337 Flab6$__str_16$0$0 == .
      00017A                       5338 ___str_16:
      00017A 41 6E 67 6C 65 20 43  5339 	.ascii "Angle Calibration"
             61 6C 69 62 72 61 74
             69 6F 6E
      00018B 00                    5340 	.db 0x00
                           00018C  5341 Flab6$__str_17$0$0 == .
      00018C                       5342 ___str_17:
      00018C 4E 6F 77 20 63 61 6C  5343 	.ascii "Now calibrating Min_PW UP ANGLE"
             69 62 72 61 74 69 6E
             67 20 4D 69 6E 5F 50
             57 20 55 50 20 41 4E
             47 4C 45
      0001AB 00                    5344 	.db 0x00
                           0001AC  5345 Flab6$__str_18$0$0 == .
      0001AC                       5346 ___str_18:
      0001AC 4E 6F 77 20 63 61 6C  5347 	.ascii "Now calibrating Max_PW DOWN ANGLE"
             69 62 72 61 74 69 6E
             67 20 4D 61 78 5F 50
             57 20 44 4F 57 4E 20
             41 4E 47 4C 45
      0001CD 00                    5348 	.db 0x00
                           0001CE  5349 Flab6$__str_19$0$0 == .
      0001CE                       5350 ___str_19:
      0001CE 54 68 72 75 73 74 20  5351 	.ascii "Thrust Calibration"
             43 61 6C 69 62 72 61
             74 69 6F 6E
      0001E0 00                    5352 	.db 0x00
                           0001E1  5353 Flab6$__str_20$0$0 == .
      0001E1                       5354 ___str_20:
      0001E1 4E 6F 77 20 63 61 6C  5355 	.ascii "Now calibrating Min_PW"
             69 62 72 61 74 69 6E
             67 20 4D 69 6E 5F 50
             57
      0001F7 00                    5356 	.db 0x00
                                   5357 	.area XINIT   (CODE)
                           000000  5358 Flab6$__xinit_error$0$0 == .
      000000                       5359 __xinit__error:
      000000 00 00                 5360 	.byte #0x00,#0x00	;  0
                           000002  5361 Flab6$__xinit_old_error$0$0 == .
      000002                       5362 __xinit__old_error:
      000002 00 00                 5363 	.byte #0x00,#0x00	;  0
                                   5364 	.area CABS    (ABS,CODE)
