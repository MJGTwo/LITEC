                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Fri Apr 24 16:37:43 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module lab6
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _PCA_ISR
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _vsprintf
                                     20 	.globl _printf
                                     21 	.globl _BUS_SCL
                                     22 	.globl _BUS_TOE
                                     23 	.globl _BUS_FTE
                                     24 	.globl _BUS_AA
                                     25 	.globl _BUS_INT
                                     26 	.globl _BUS_STOP
                                     27 	.globl _BUS_START
                                     28 	.globl _BUS_EN
                                     29 	.globl _BUS_BUSY
                                     30 	.globl _SPIF
                                     31 	.globl _WCOL
                                     32 	.globl _MODF
                                     33 	.globl _RXOVRN
                                     34 	.globl _TXBSY
                                     35 	.globl _SLVSEL
                                     36 	.globl _MSTEN
                                     37 	.globl _SPIEN
                                     38 	.globl _AD0EN
                                     39 	.globl _ADCEN
                                     40 	.globl _AD0TM
                                     41 	.globl _ADCTM
                                     42 	.globl _AD0INT
                                     43 	.globl _ADCINT
                                     44 	.globl _AD0BUSY
                                     45 	.globl _ADBUSY
                                     46 	.globl _AD0CM1
                                     47 	.globl _ADSTM1
                                     48 	.globl _AD0CM0
                                     49 	.globl _ADSTM0
                                     50 	.globl _AD0WINT
                                     51 	.globl _ADWINT
                                     52 	.globl _AD0LJST
                                     53 	.globl _ADLJST
                                     54 	.globl _CF
                                     55 	.globl _CR
                                     56 	.globl _CCF4
                                     57 	.globl _CCF3
                                     58 	.globl _CCF2
                                     59 	.globl _CCF1
                                     60 	.globl _CCF0
                                     61 	.globl _CY
                                     62 	.globl _AC
                                     63 	.globl _F0
                                     64 	.globl _RS1
                                     65 	.globl _RS0
                                     66 	.globl _OV
                                     67 	.globl _F1
                                     68 	.globl _P
                                     69 	.globl _TF2
                                     70 	.globl _EXF2
                                     71 	.globl _RCLK
                                     72 	.globl _TCLK
                                     73 	.globl _EXEN2
                                     74 	.globl _TR2
                                     75 	.globl _CT2
                                     76 	.globl _CPRL2
                                     77 	.globl _BUSY
                                     78 	.globl _ENSMB
                                     79 	.globl _STA
                                     80 	.globl _STO
                                     81 	.globl _SI
                                     82 	.globl _AA
                                     83 	.globl _SMBFTE
                                     84 	.globl _SMBTOE
                                     85 	.globl _PT2
                                     86 	.globl _PS
                                     87 	.globl _PS0
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _P3_7
                                     93 	.globl _P3_6
                                     94 	.globl _P3_5
                                     95 	.globl _P3_4
                                     96 	.globl _P3_3
                                     97 	.globl _P3_2
                                     98 	.globl _P3_1
                                     99 	.globl _P3_0
                                    100 	.globl _EA
                                    101 	.globl _ET2
                                    102 	.globl _ES
                                    103 	.globl _ES0
                                    104 	.globl _ET1
                                    105 	.globl _EX1
                                    106 	.globl _ET0
                                    107 	.globl _EX0
                                    108 	.globl _P2_7
                                    109 	.globl _P2_6
                                    110 	.globl _P2_5
                                    111 	.globl _P2_4
                                    112 	.globl _P2_3
                                    113 	.globl _P2_2
                                    114 	.globl _P2_1
                                    115 	.globl _P2_0
                                    116 	.globl _S0MODE
                                    117 	.globl _SM00
                                    118 	.globl _SM0
                                    119 	.globl _SM10
                                    120 	.globl _SM1
                                    121 	.globl _MCE0
                                    122 	.globl _SM20
                                    123 	.globl _SM2
                                    124 	.globl _REN0
                                    125 	.globl _REN
                                    126 	.globl _TB80
                                    127 	.globl _TB8
                                    128 	.globl _RB80
                                    129 	.globl _RB8
                                    130 	.globl _TI0
                                    131 	.globl _TI
                                    132 	.globl _RI0
                                    133 	.globl _RI
                                    134 	.globl _P1_7
                                    135 	.globl _P1_6
                                    136 	.globl _P1_5
                                    137 	.globl _P1_4
                                    138 	.globl _P1_3
                                    139 	.globl _P1_2
                                    140 	.globl _P1_1
                                    141 	.globl _P1_0
                                    142 	.globl _TF1
                                    143 	.globl _TR1
                                    144 	.globl _TF0
                                    145 	.globl _TR0
                                    146 	.globl _IE1
                                    147 	.globl _IT1
                                    148 	.globl _IE0
                                    149 	.globl _IT0
                                    150 	.globl _P0_7
                                    151 	.globl _P0_6
                                    152 	.globl _P0_5
                                    153 	.globl _P0_4
                                    154 	.globl _P0_3
                                    155 	.globl _P0_2
                                    156 	.globl _P0_1
                                    157 	.globl _P0_0
                                    158 	.globl _PCA0CP4
                                    159 	.globl _PCA0CP3
                                    160 	.globl _PCA0CP2
                                    161 	.globl _PCA0CP1
                                    162 	.globl _PCA0CP0
                                    163 	.globl _PCA0
                                    164 	.globl _DAC1
                                    165 	.globl _DAC0
                                    166 	.globl _ADC0LT
                                    167 	.globl _ADC0GT
                                    168 	.globl _ADC0
                                    169 	.globl _RCAP4
                                    170 	.globl _TMR4
                                    171 	.globl _TMR3RL
                                    172 	.globl _TMR3
                                    173 	.globl _RCAP2
                                    174 	.globl _TMR2
                                    175 	.globl _TMR1
                                    176 	.globl _TMR0
                                    177 	.globl _WDTCN
                                    178 	.globl _PCA0CPH4
                                    179 	.globl _PCA0CPH3
                                    180 	.globl _PCA0CPH2
                                    181 	.globl _PCA0CPH1
                                    182 	.globl _PCA0CPH0
                                    183 	.globl _PCA0H
                                    184 	.globl _SPI0CN
                                    185 	.globl _EIP2
                                    186 	.globl _EIP1
                                    187 	.globl _TH4
                                    188 	.globl _TL4
                                    189 	.globl _SADDR1
                                    190 	.globl _SBUF1
                                    191 	.globl _SCON1
                                    192 	.globl _B
                                    193 	.globl _RSTSRC
                                    194 	.globl _PCA0CPL4
                                    195 	.globl _PCA0CPL3
                                    196 	.globl _PCA0CPL2
                                    197 	.globl _PCA0CPL1
                                    198 	.globl _PCA0CPL0
                                    199 	.globl _PCA0L
                                    200 	.globl _ADC0CN
                                    201 	.globl _EIE2
                                    202 	.globl _EIE1
                                    203 	.globl _RCAP4H
                                    204 	.globl _RCAP4L
                                    205 	.globl _XBR2
                                    206 	.globl _XBR1
                                    207 	.globl _XBR0
                                    208 	.globl _ACC
                                    209 	.globl _PCA0CPM4
                                    210 	.globl _PCA0CPM3
                                    211 	.globl _PCA0CPM2
                                    212 	.globl _PCA0CPM1
                                    213 	.globl _PCA0CPM0
                                    214 	.globl _PCA0MD
                                    215 	.globl _PCA0CN
                                    216 	.globl _DAC1CN
                                    217 	.globl _DAC1H
                                    218 	.globl _DAC1L
                                    219 	.globl _DAC0CN
                                    220 	.globl _DAC0H
                                    221 	.globl _DAC0L
                                    222 	.globl _REF0CN
                                    223 	.globl _PSW
                                    224 	.globl _SMB0CR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T4CON
                                    230 	.globl _T2CON
                                    231 	.globl _ADC0LTH
                                    232 	.globl _ADC0LTL
                                    233 	.globl _ADC0GTH
                                    234 	.globl _ADC0GTL
                                    235 	.globl _SMB0ADR
                                    236 	.globl _SMB0DAT
                                    237 	.globl _SMB0STA
                                    238 	.globl _SMB0CN
                                    239 	.globl _ADC0H
                                    240 	.globl _ADC0L
                                    241 	.globl _P1MDIN
                                    242 	.globl _ADC0CF
                                    243 	.globl _AMX0SL
                                    244 	.globl _AMX0CF
                                    245 	.globl _SADEN0
                                    246 	.globl _IP
                                    247 	.globl _FLACL
                                    248 	.globl _FLSCL
                                    249 	.globl _P74OUT
                                    250 	.globl _OSCICN
                                    251 	.globl _OSCXCN
                                    252 	.globl _P3
                                    253 	.globl __XPAGE
                                    254 	.globl _EMI0CN
                                    255 	.globl _SADEN1
                                    256 	.globl _P3IF
                                    257 	.globl _AMX1SL
                                    258 	.globl _ADC1CF
                                    259 	.globl _ADC1CN
                                    260 	.globl _SADDR0
                                    261 	.globl _IE
                                    262 	.globl _P3MDOUT
                                    263 	.globl _PRT3CF
                                    264 	.globl _P2MDOUT
                                    265 	.globl _PRT2CF
                                    266 	.globl _P1MDOUT
                                    267 	.globl _PRT1CF
                                    268 	.globl _P0MDOUT
                                    269 	.globl _PRT0CF
                                    270 	.globl _EMI0CF
                                    271 	.globl _EMI0TC
                                    272 	.globl _P2
                                    273 	.globl _CPT1CN
                                    274 	.globl _CPT0CN
                                    275 	.globl _SPI0CKR
                                    276 	.globl _ADC1
                                    277 	.globl _SPI0DAT
                                    278 	.globl _SPI0CFG
                                    279 	.globl _SBUF0
                                    280 	.globl _SBUF
                                    281 	.globl _SCON0
                                    282 	.globl _SCON
                                    283 	.globl _P7
                                    284 	.globl _TMR3H
                                    285 	.globl _TMR3L
                                    286 	.globl _TMR3RLH
                                    287 	.globl _TMR3RLL
                                    288 	.globl _TMR3CN
                                    289 	.globl _P1
                                    290 	.globl _PSCTL
                                    291 	.globl _CKCON
                                    292 	.globl _TH1
                                    293 	.globl _TH0
                                    294 	.globl _TL1
                                    295 	.globl _TL0
                                    296 	.globl _TMOD
                                    297 	.globl _TCON
                                    298 	.globl _PCON
                                    299 	.globl _P6
                                    300 	.globl _P5
                                    301 	.globl _P4
                                    302 	.globl _DPH
                                    303 	.globl _DPL
                                    304 	.globl _SP
                                    305 	.globl _P0
                                    306 	.globl _dratio
                                    307 	.globl _ratio
                                    308 	.globl _kd
                                    309 	.globl _kp
                                    310 	.globl _r_data
                                    311 	.globl _old_error
                                    312 	.globl _error
                                    313 	.globl _offset
                                    314 	.globl _actual_D
                                    315 	.globl _desired_D
                                    316 	.globl _LTRST_lo_to_hi
                                    317 	.globl _RTRST_lo_to_hi
                                    318 	.globl _LTHRUST_PW
                                    319 	.globl _RTHRUST_PW
                                    320 	.globl _AGL_lo_to_hi
                                    321 	.globl _ANGLE_PW
                                    322 	.globl _RDR_lo_to_hi
                                    323 	.globl _RUDDER_PW
                                    324 	.globl _PW_DOWN_ANGLE
                                    325 	.globl _PW_CENTER_ANGLE
                                    326 	.globl _PW_UP_ANGLE
                                    327 	.globl _PW_RIGHT_RUDDER
                                    328 	.globl _PW_CENTER_RUDDER
                                    329 	.globl _PW_LEFT_RUDDER
                                    330 	.globl _PW_MAX_THRUST
                                    331 	.globl _PW_NUET_THRUST
                                    332 	.globl _PW_MIN_THRUST
                                    333 	.globl _count
                                    334 	.globl _i2c_read_data_PARM_4
                                    335 	.globl _i2c_read_data_PARM_3
                                    336 	.globl _i2c_read_data_PARM_2
                                    337 	.globl _i2c_write_data_PARM_4
                                    338 	.globl _i2c_write_data_PARM_3
                                    339 	.globl _i2c_write_data_PARM_2
                                    340 	.globl _putchar
                                    341 	.globl _getchar
                                    342 	.globl _lcd_print
                                    343 	.globl _lcd_clear
                                    344 	.globl _kpd_input
                                    345 	.globl _delay_time
                                    346 	.globl _i2c_start
                                    347 	.globl _i2c_write
                                    348 	.globl _i2c_write_and_stop
                                    349 	.globl _i2c_read
                                    350 	.globl _i2c_read_and_stop
                                    351 	.globl _i2c_write_data
                                    352 	.globl _i2c_read_data
                                    353 	.globl _Accel_Init
                                    354 	.globl _Calibrate
                                    355 	.globl _kpkd
                                    356 	.globl _Change_D
                                    357 	.globl _Read_Ranger
                                    358 	.globl _Steering_func
                                    359 	.globl _direction
                                    360 	.globl _ReadCompass
                                    361 	.globl _Rudder_cal
                                    362 	.globl _Angle_cal
                                    363 	.globl _Thrust_cal
                                    364 	.globl _Steering_Servo
                                    365 	.globl _start
                                    366 	.globl _wait
                                    367 	.globl _Port_Init
                                    368 	.globl _PCA_Init
                                    369 	.globl _XBR0_Init
                                    370 	.globl _SMB_Init
                                    371 	.globl _ADC_Init
                                    372 ;--------------------------------------------------------
                                    373 ; special function registers
                                    374 ;--------------------------------------------------------
                                    375 	.area RSEG    (ABS,DATA)
      000000                        376 	.org 0x0000
                           000080   377 G$P0$0$0 == 0x0080
                           000080   378 _P0	=	0x0080
                           000081   379 G$SP$0$0 == 0x0081
                           000081   380 _SP	=	0x0081
                           000082   381 G$DPL$0$0 == 0x0082
                           000082   382 _DPL	=	0x0082
                           000083   383 G$DPH$0$0 == 0x0083
                           000083   384 _DPH	=	0x0083
                           000084   385 G$P4$0$0 == 0x0084
                           000084   386 _P4	=	0x0084
                           000085   387 G$P5$0$0 == 0x0085
                           000085   388 _P5	=	0x0085
                           000086   389 G$P6$0$0 == 0x0086
                           000086   390 _P6	=	0x0086
                           000087   391 G$PCON$0$0 == 0x0087
                           000087   392 _PCON	=	0x0087
                           000088   393 G$TCON$0$0 == 0x0088
                           000088   394 _TCON	=	0x0088
                           000089   395 G$TMOD$0$0 == 0x0089
                           000089   396 _TMOD	=	0x0089
                           00008A   397 G$TL0$0$0 == 0x008a
                           00008A   398 _TL0	=	0x008a
                           00008B   399 G$TL1$0$0 == 0x008b
                           00008B   400 _TL1	=	0x008b
                           00008C   401 G$TH0$0$0 == 0x008c
                           00008C   402 _TH0	=	0x008c
                           00008D   403 G$TH1$0$0 == 0x008d
                           00008D   404 _TH1	=	0x008d
                           00008E   405 G$CKCON$0$0 == 0x008e
                           00008E   406 _CKCON	=	0x008e
                           00008F   407 G$PSCTL$0$0 == 0x008f
                           00008F   408 _PSCTL	=	0x008f
                           000090   409 G$P1$0$0 == 0x0090
                           000090   410 _P1	=	0x0090
                           000091   411 G$TMR3CN$0$0 == 0x0091
                           000091   412 _TMR3CN	=	0x0091
                           000092   413 G$TMR3RLL$0$0 == 0x0092
                           000092   414 _TMR3RLL	=	0x0092
                           000093   415 G$TMR3RLH$0$0 == 0x0093
                           000093   416 _TMR3RLH	=	0x0093
                           000094   417 G$TMR3L$0$0 == 0x0094
                           000094   418 _TMR3L	=	0x0094
                           000095   419 G$TMR3H$0$0 == 0x0095
                           000095   420 _TMR3H	=	0x0095
                           000096   421 G$P7$0$0 == 0x0096
                           000096   422 _P7	=	0x0096
                           000098   423 G$SCON$0$0 == 0x0098
                           000098   424 _SCON	=	0x0098
                           000098   425 G$SCON0$0$0 == 0x0098
                           000098   426 _SCON0	=	0x0098
                           000099   427 G$SBUF$0$0 == 0x0099
                           000099   428 _SBUF	=	0x0099
                           000099   429 G$SBUF0$0$0 == 0x0099
                           000099   430 _SBUF0	=	0x0099
                           00009A   431 G$SPI0CFG$0$0 == 0x009a
                           00009A   432 _SPI0CFG	=	0x009a
                           00009B   433 G$SPI0DAT$0$0 == 0x009b
                           00009B   434 _SPI0DAT	=	0x009b
                           00009C   435 G$ADC1$0$0 == 0x009c
                           00009C   436 _ADC1	=	0x009c
                           00009D   437 G$SPI0CKR$0$0 == 0x009d
                           00009D   438 _SPI0CKR	=	0x009d
                           00009E   439 G$CPT0CN$0$0 == 0x009e
                           00009E   440 _CPT0CN	=	0x009e
                           00009F   441 G$CPT1CN$0$0 == 0x009f
                           00009F   442 _CPT1CN	=	0x009f
                           0000A0   443 G$P2$0$0 == 0x00a0
                           0000A0   444 _P2	=	0x00a0
                           0000A1   445 G$EMI0TC$0$0 == 0x00a1
                           0000A1   446 _EMI0TC	=	0x00a1
                           0000A3   447 G$EMI0CF$0$0 == 0x00a3
                           0000A3   448 _EMI0CF	=	0x00a3
                           0000A4   449 G$PRT0CF$0$0 == 0x00a4
                           0000A4   450 _PRT0CF	=	0x00a4
                           0000A4   451 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   452 _P0MDOUT	=	0x00a4
                           0000A5   453 G$PRT1CF$0$0 == 0x00a5
                           0000A5   454 _PRT1CF	=	0x00a5
                           0000A5   455 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   456 _P1MDOUT	=	0x00a5
                           0000A6   457 G$PRT2CF$0$0 == 0x00a6
                           0000A6   458 _PRT2CF	=	0x00a6
                           0000A6   459 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   460 _P2MDOUT	=	0x00a6
                           0000A7   461 G$PRT3CF$0$0 == 0x00a7
                           0000A7   462 _PRT3CF	=	0x00a7
                           0000A7   463 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   464 _P3MDOUT	=	0x00a7
                           0000A8   465 G$IE$0$0 == 0x00a8
                           0000A8   466 _IE	=	0x00a8
                           0000A9   467 G$SADDR0$0$0 == 0x00a9
                           0000A9   468 _SADDR0	=	0x00a9
                           0000AA   469 G$ADC1CN$0$0 == 0x00aa
                           0000AA   470 _ADC1CN	=	0x00aa
                           0000AB   471 G$ADC1CF$0$0 == 0x00ab
                           0000AB   472 _ADC1CF	=	0x00ab
                           0000AC   473 G$AMX1SL$0$0 == 0x00ac
                           0000AC   474 _AMX1SL	=	0x00ac
                           0000AD   475 G$P3IF$0$0 == 0x00ad
                           0000AD   476 _P3IF	=	0x00ad
                           0000AE   477 G$SADEN1$0$0 == 0x00ae
                           0000AE   478 _SADEN1	=	0x00ae
                           0000AF   479 G$EMI0CN$0$0 == 0x00af
                           0000AF   480 _EMI0CN	=	0x00af
                           0000AF   481 G$_XPAGE$0$0 == 0x00af
                           0000AF   482 __XPAGE	=	0x00af
                           0000B0   483 G$P3$0$0 == 0x00b0
                           0000B0   484 _P3	=	0x00b0
                           0000B1   485 G$OSCXCN$0$0 == 0x00b1
                           0000B1   486 _OSCXCN	=	0x00b1
                           0000B2   487 G$OSCICN$0$0 == 0x00b2
                           0000B2   488 _OSCICN	=	0x00b2
                           0000B5   489 G$P74OUT$0$0 == 0x00b5
                           0000B5   490 _P74OUT	=	0x00b5
                           0000B6   491 G$FLSCL$0$0 == 0x00b6
                           0000B6   492 _FLSCL	=	0x00b6
                           0000B7   493 G$FLACL$0$0 == 0x00b7
                           0000B7   494 _FLACL	=	0x00b7
                           0000B8   495 G$IP$0$0 == 0x00b8
                           0000B8   496 _IP	=	0x00b8
                           0000B9   497 G$SADEN0$0$0 == 0x00b9
                           0000B9   498 _SADEN0	=	0x00b9
                           0000BA   499 G$AMX0CF$0$0 == 0x00ba
                           0000BA   500 _AMX0CF	=	0x00ba
                           0000BB   501 G$AMX0SL$0$0 == 0x00bb
                           0000BB   502 _AMX0SL	=	0x00bb
                           0000BC   503 G$ADC0CF$0$0 == 0x00bc
                           0000BC   504 _ADC0CF	=	0x00bc
                           0000BD   505 G$P1MDIN$0$0 == 0x00bd
                           0000BD   506 _P1MDIN	=	0x00bd
                           0000BE   507 G$ADC0L$0$0 == 0x00be
                           0000BE   508 _ADC0L	=	0x00be
                           0000BF   509 G$ADC0H$0$0 == 0x00bf
                           0000BF   510 _ADC0H	=	0x00bf
                           0000C0   511 G$SMB0CN$0$0 == 0x00c0
                           0000C0   512 _SMB0CN	=	0x00c0
                           0000C1   513 G$SMB0STA$0$0 == 0x00c1
                           0000C1   514 _SMB0STA	=	0x00c1
                           0000C2   515 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   516 _SMB0DAT	=	0x00c2
                           0000C3   517 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   518 _SMB0ADR	=	0x00c3
                           0000C4   519 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   520 _ADC0GTL	=	0x00c4
                           0000C5   521 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   522 _ADC0GTH	=	0x00c5
                           0000C6   523 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   524 _ADC0LTL	=	0x00c6
                           0000C7   525 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   526 _ADC0LTH	=	0x00c7
                           0000C8   527 G$T2CON$0$0 == 0x00c8
                           0000C8   528 _T2CON	=	0x00c8
                           0000C9   529 G$T4CON$0$0 == 0x00c9
                           0000C9   530 _T4CON	=	0x00c9
                           0000CA   531 G$RCAP2L$0$0 == 0x00ca
                           0000CA   532 _RCAP2L	=	0x00ca
                           0000CB   533 G$RCAP2H$0$0 == 0x00cb
                           0000CB   534 _RCAP2H	=	0x00cb
                           0000CC   535 G$TL2$0$0 == 0x00cc
                           0000CC   536 _TL2	=	0x00cc
                           0000CD   537 G$TH2$0$0 == 0x00cd
                           0000CD   538 _TH2	=	0x00cd
                           0000CF   539 G$SMB0CR$0$0 == 0x00cf
                           0000CF   540 _SMB0CR	=	0x00cf
                           0000D0   541 G$PSW$0$0 == 0x00d0
                           0000D0   542 _PSW	=	0x00d0
                           0000D1   543 G$REF0CN$0$0 == 0x00d1
                           0000D1   544 _REF0CN	=	0x00d1
                           0000D2   545 G$DAC0L$0$0 == 0x00d2
                           0000D2   546 _DAC0L	=	0x00d2
                           0000D3   547 G$DAC0H$0$0 == 0x00d3
                           0000D3   548 _DAC0H	=	0x00d3
                           0000D4   549 G$DAC0CN$0$0 == 0x00d4
                           0000D4   550 _DAC0CN	=	0x00d4
                           0000D5   551 G$DAC1L$0$0 == 0x00d5
                           0000D5   552 _DAC1L	=	0x00d5
                           0000D6   553 G$DAC1H$0$0 == 0x00d6
                           0000D6   554 _DAC1H	=	0x00d6
                           0000D7   555 G$DAC1CN$0$0 == 0x00d7
                           0000D7   556 _DAC1CN	=	0x00d7
                           0000D8   557 G$PCA0CN$0$0 == 0x00d8
                           0000D8   558 _PCA0CN	=	0x00d8
                           0000D9   559 G$PCA0MD$0$0 == 0x00d9
                           0000D9   560 _PCA0MD	=	0x00d9
                           0000DA   561 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   562 _PCA0CPM0	=	0x00da
                           0000DB   563 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   564 _PCA0CPM1	=	0x00db
                           0000DC   565 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   566 _PCA0CPM2	=	0x00dc
                           0000DD   567 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   568 _PCA0CPM3	=	0x00dd
                           0000DE   569 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   570 _PCA0CPM4	=	0x00de
                           0000E0   571 G$ACC$0$0 == 0x00e0
                           0000E0   572 _ACC	=	0x00e0
                           0000E1   573 G$XBR0$0$0 == 0x00e1
                           0000E1   574 _XBR0	=	0x00e1
                           0000E2   575 G$XBR1$0$0 == 0x00e2
                           0000E2   576 _XBR1	=	0x00e2
                           0000E3   577 G$XBR2$0$0 == 0x00e3
                           0000E3   578 _XBR2	=	0x00e3
                           0000E4   579 G$RCAP4L$0$0 == 0x00e4
                           0000E4   580 _RCAP4L	=	0x00e4
                           0000E5   581 G$RCAP4H$0$0 == 0x00e5
                           0000E5   582 _RCAP4H	=	0x00e5
                           0000E6   583 G$EIE1$0$0 == 0x00e6
                           0000E6   584 _EIE1	=	0x00e6
                           0000E7   585 G$EIE2$0$0 == 0x00e7
                           0000E7   586 _EIE2	=	0x00e7
                           0000E8   587 G$ADC0CN$0$0 == 0x00e8
                           0000E8   588 _ADC0CN	=	0x00e8
                           0000E9   589 G$PCA0L$0$0 == 0x00e9
                           0000E9   590 _PCA0L	=	0x00e9
                           0000EA   591 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   592 _PCA0CPL0	=	0x00ea
                           0000EB   593 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   594 _PCA0CPL1	=	0x00eb
                           0000EC   595 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   596 _PCA0CPL2	=	0x00ec
                           0000ED   597 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   598 _PCA0CPL3	=	0x00ed
                           0000EE   599 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   600 _PCA0CPL4	=	0x00ee
                           0000EF   601 G$RSTSRC$0$0 == 0x00ef
                           0000EF   602 _RSTSRC	=	0x00ef
                           0000F0   603 G$B$0$0 == 0x00f0
                           0000F0   604 _B	=	0x00f0
                           0000F1   605 G$SCON1$0$0 == 0x00f1
                           0000F1   606 _SCON1	=	0x00f1
                           0000F2   607 G$SBUF1$0$0 == 0x00f2
                           0000F2   608 _SBUF1	=	0x00f2
                           0000F3   609 G$SADDR1$0$0 == 0x00f3
                           0000F3   610 _SADDR1	=	0x00f3
                           0000F4   611 G$TL4$0$0 == 0x00f4
                           0000F4   612 _TL4	=	0x00f4
                           0000F5   613 G$TH4$0$0 == 0x00f5
                           0000F5   614 _TH4	=	0x00f5
                           0000F6   615 G$EIP1$0$0 == 0x00f6
                           0000F6   616 _EIP1	=	0x00f6
                           0000F7   617 G$EIP2$0$0 == 0x00f7
                           0000F7   618 _EIP2	=	0x00f7
                           0000F8   619 G$SPI0CN$0$0 == 0x00f8
                           0000F8   620 _SPI0CN	=	0x00f8
                           0000F9   621 G$PCA0H$0$0 == 0x00f9
                           0000F9   622 _PCA0H	=	0x00f9
                           0000FA   623 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   624 _PCA0CPH0	=	0x00fa
                           0000FB   625 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   626 _PCA0CPH1	=	0x00fb
                           0000FC   627 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   628 _PCA0CPH2	=	0x00fc
                           0000FD   629 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   630 _PCA0CPH3	=	0x00fd
                           0000FE   631 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   632 _PCA0CPH4	=	0x00fe
                           0000FF   633 G$WDTCN$0$0 == 0x00ff
                           0000FF   634 _WDTCN	=	0x00ff
                           008C8A   635 G$TMR0$0$0 == 0x8c8a
                           008C8A   636 _TMR0	=	0x8c8a
                           008D8B   637 G$TMR1$0$0 == 0x8d8b
                           008D8B   638 _TMR1	=	0x8d8b
                           00CDCC   639 G$TMR2$0$0 == 0xcdcc
                           00CDCC   640 _TMR2	=	0xcdcc
                           00CBCA   641 G$RCAP2$0$0 == 0xcbca
                           00CBCA   642 _RCAP2	=	0xcbca
                           009594   643 G$TMR3$0$0 == 0x9594
                           009594   644 _TMR3	=	0x9594
                           009392   645 G$TMR3RL$0$0 == 0x9392
                           009392   646 _TMR3RL	=	0x9392
                           00F5F4   647 G$TMR4$0$0 == 0xf5f4
                           00F5F4   648 _TMR4	=	0xf5f4
                           00E5E4   649 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   650 _RCAP4	=	0xe5e4
                           00BFBE   651 G$ADC0$0$0 == 0xbfbe
                           00BFBE   652 _ADC0	=	0xbfbe
                           00C5C4   653 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   654 _ADC0GT	=	0xc5c4
                           00C7C6   655 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   656 _ADC0LT	=	0xc7c6
                           00D3D2   657 G$DAC0$0$0 == 0xd3d2
                           00D3D2   658 _DAC0	=	0xd3d2
                           00D6D5   659 G$DAC1$0$0 == 0xd6d5
                           00D6D5   660 _DAC1	=	0xd6d5
                           00F9E9   661 G$PCA0$0$0 == 0xf9e9
                           00F9E9   662 _PCA0	=	0xf9e9
                           00FAEA   663 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   664 _PCA0CP0	=	0xfaea
                           00FBEB   665 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   666 _PCA0CP1	=	0xfbeb
                           00FCEC   667 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   668 _PCA0CP2	=	0xfcec
                           00FDED   669 G$PCA0CP3$0$0 == 0xfded
                           00FDED   670 _PCA0CP3	=	0xfded
                           00FEEE   671 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   672 _PCA0CP4	=	0xfeee
                                    673 ;--------------------------------------------------------
                                    674 ; special function bits
                                    675 ;--------------------------------------------------------
                                    676 	.area RSEG    (ABS,DATA)
      000000                        677 	.org 0x0000
                           000080   678 G$P0_0$0$0 == 0x0080
                           000080   679 _P0_0	=	0x0080
                           000081   680 G$P0_1$0$0 == 0x0081
                           000081   681 _P0_1	=	0x0081
                           000082   682 G$P0_2$0$0 == 0x0082
                           000082   683 _P0_2	=	0x0082
                           000083   684 G$P0_3$0$0 == 0x0083
                           000083   685 _P0_3	=	0x0083
                           000084   686 G$P0_4$0$0 == 0x0084
                           000084   687 _P0_4	=	0x0084
                           000085   688 G$P0_5$0$0 == 0x0085
                           000085   689 _P0_5	=	0x0085
                           000086   690 G$P0_6$0$0 == 0x0086
                           000086   691 _P0_6	=	0x0086
                           000087   692 G$P0_7$0$0 == 0x0087
                           000087   693 _P0_7	=	0x0087
                           000088   694 G$IT0$0$0 == 0x0088
                           000088   695 _IT0	=	0x0088
                           000089   696 G$IE0$0$0 == 0x0089
                           000089   697 _IE0	=	0x0089
                           00008A   698 G$IT1$0$0 == 0x008a
                           00008A   699 _IT1	=	0x008a
                           00008B   700 G$IE1$0$0 == 0x008b
                           00008B   701 _IE1	=	0x008b
                           00008C   702 G$TR0$0$0 == 0x008c
                           00008C   703 _TR0	=	0x008c
                           00008D   704 G$TF0$0$0 == 0x008d
                           00008D   705 _TF0	=	0x008d
                           00008E   706 G$TR1$0$0 == 0x008e
                           00008E   707 _TR1	=	0x008e
                           00008F   708 G$TF1$0$0 == 0x008f
                           00008F   709 _TF1	=	0x008f
                           000090   710 G$P1_0$0$0 == 0x0090
                           000090   711 _P1_0	=	0x0090
                           000091   712 G$P1_1$0$0 == 0x0091
                           000091   713 _P1_1	=	0x0091
                           000092   714 G$P1_2$0$0 == 0x0092
                           000092   715 _P1_2	=	0x0092
                           000093   716 G$P1_3$0$0 == 0x0093
                           000093   717 _P1_3	=	0x0093
                           000094   718 G$P1_4$0$0 == 0x0094
                           000094   719 _P1_4	=	0x0094
                           000095   720 G$P1_5$0$0 == 0x0095
                           000095   721 _P1_5	=	0x0095
                           000096   722 G$P1_6$0$0 == 0x0096
                           000096   723 _P1_6	=	0x0096
                           000097   724 G$P1_7$0$0 == 0x0097
                           000097   725 _P1_7	=	0x0097
                           000098   726 G$RI$0$0 == 0x0098
                           000098   727 _RI	=	0x0098
                           000098   728 G$RI0$0$0 == 0x0098
                           000098   729 _RI0	=	0x0098
                           000099   730 G$TI$0$0 == 0x0099
                           000099   731 _TI	=	0x0099
                           000099   732 G$TI0$0$0 == 0x0099
                           000099   733 _TI0	=	0x0099
                           00009A   734 G$RB8$0$0 == 0x009a
                           00009A   735 _RB8	=	0x009a
                           00009A   736 G$RB80$0$0 == 0x009a
                           00009A   737 _RB80	=	0x009a
                           00009B   738 G$TB8$0$0 == 0x009b
                           00009B   739 _TB8	=	0x009b
                           00009B   740 G$TB80$0$0 == 0x009b
                           00009B   741 _TB80	=	0x009b
                           00009C   742 G$REN$0$0 == 0x009c
                           00009C   743 _REN	=	0x009c
                           00009C   744 G$REN0$0$0 == 0x009c
                           00009C   745 _REN0	=	0x009c
                           00009D   746 G$SM2$0$0 == 0x009d
                           00009D   747 _SM2	=	0x009d
                           00009D   748 G$SM20$0$0 == 0x009d
                           00009D   749 _SM20	=	0x009d
                           00009D   750 G$MCE0$0$0 == 0x009d
                           00009D   751 _MCE0	=	0x009d
                           00009E   752 G$SM1$0$0 == 0x009e
                           00009E   753 _SM1	=	0x009e
                           00009E   754 G$SM10$0$0 == 0x009e
                           00009E   755 _SM10	=	0x009e
                           00009F   756 G$SM0$0$0 == 0x009f
                           00009F   757 _SM0	=	0x009f
                           00009F   758 G$SM00$0$0 == 0x009f
                           00009F   759 _SM00	=	0x009f
                           00009F   760 G$S0MODE$0$0 == 0x009f
                           00009F   761 _S0MODE	=	0x009f
                           0000A0   762 G$P2_0$0$0 == 0x00a0
                           0000A0   763 _P2_0	=	0x00a0
                           0000A1   764 G$P2_1$0$0 == 0x00a1
                           0000A1   765 _P2_1	=	0x00a1
                           0000A2   766 G$P2_2$0$0 == 0x00a2
                           0000A2   767 _P2_2	=	0x00a2
                           0000A3   768 G$P2_3$0$0 == 0x00a3
                           0000A3   769 _P2_3	=	0x00a3
                           0000A4   770 G$P2_4$0$0 == 0x00a4
                           0000A4   771 _P2_4	=	0x00a4
                           0000A5   772 G$P2_5$0$0 == 0x00a5
                           0000A5   773 _P2_5	=	0x00a5
                           0000A6   774 G$P2_6$0$0 == 0x00a6
                           0000A6   775 _P2_6	=	0x00a6
                           0000A7   776 G$P2_7$0$0 == 0x00a7
                           0000A7   777 _P2_7	=	0x00a7
                           0000A8   778 G$EX0$0$0 == 0x00a8
                           0000A8   779 _EX0	=	0x00a8
                           0000A9   780 G$ET0$0$0 == 0x00a9
                           0000A9   781 _ET0	=	0x00a9
                           0000AA   782 G$EX1$0$0 == 0x00aa
                           0000AA   783 _EX1	=	0x00aa
                           0000AB   784 G$ET1$0$0 == 0x00ab
                           0000AB   785 _ET1	=	0x00ab
                           0000AC   786 G$ES0$0$0 == 0x00ac
                           0000AC   787 _ES0	=	0x00ac
                           0000AC   788 G$ES$0$0 == 0x00ac
                           0000AC   789 _ES	=	0x00ac
                           0000AD   790 G$ET2$0$0 == 0x00ad
                           0000AD   791 _ET2	=	0x00ad
                           0000AF   792 G$EA$0$0 == 0x00af
                           0000AF   793 _EA	=	0x00af
                           0000B0   794 G$P3_0$0$0 == 0x00b0
                           0000B0   795 _P3_0	=	0x00b0
                           0000B1   796 G$P3_1$0$0 == 0x00b1
                           0000B1   797 _P3_1	=	0x00b1
                           0000B2   798 G$P3_2$0$0 == 0x00b2
                           0000B2   799 _P3_2	=	0x00b2
                           0000B3   800 G$P3_3$0$0 == 0x00b3
                           0000B3   801 _P3_3	=	0x00b3
                           0000B4   802 G$P3_4$0$0 == 0x00b4
                           0000B4   803 _P3_4	=	0x00b4
                           0000B5   804 G$P3_5$0$0 == 0x00b5
                           0000B5   805 _P3_5	=	0x00b5
                           0000B6   806 G$P3_6$0$0 == 0x00b6
                           0000B6   807 _P3_6	=	0x00b6
                           0000B7   808 G$P3_7$0$0 == 0x00b7
                           0000B7   809 _P3_7	=	0x00b7
                           0000B8   810 G$PX0$0$0 == 0x00b8
                           0000B8   811 _PX0	=	0x00b8
                           0000B9   812 G$PT0$0$0 == 0x00b9
                           0000B9   813 _PT0	=	0x00b9
                           0000BA   814 G$PX1$0$0 == 0x00ba
                           0000BA   815 _PX1	=	0x00ba
                           0000BB   816 G$PT1$0$0 == 0x00bb
                           0000BB   817 _PT1	=	0x00bb
                           0000BC   818 G$PS0$0$0 == 0x00bc
                           0000BC   819 _PS0	=	0x00bc
                           0000BC   820 G$PS$0$0 == 0x00bc
                           0000BC   821 _PS	=	0x00bc
                           0000BD   822 G$PT2$0$0 == 0x00bd
                           0000BD   823 _PT2	=	0x00bd
                           0000C0   824 G$SMBTOE$0$0 == 0x00c0
                           0000C0   825 _SMBTOE	=	0x00c0
                           0000C1   826 G$SMBFTE$0$0 == 0x00c1
                           0000C1   827 _SMBFTE	=	0x00c1
                           0000C2   828 G$AA$0$0 == 0x00c2
                           0000C2   829 _AA	=	0x00c2
                           0000C3   830 G$SI$0$0 == 0x00c3
                           0000C3   831 _SI	=	0x00c3
                           0000C4   832 G$STO$0$0 == 0x00c4
                           0000C4   833 _STO	=	0x00c4
                           0000C5   834 G$STA$0$0 == 0x00c5
                           0000C5   835 _STA	=	0x00c5
                           0000C6   836 G$ENSMB$0$0 == 0x00c6
                           0000C6   837 _ENSMB	=	0x00c6
                           0000C7   838 G$BUSY$0$0 == 0x00c7
                           0000C7   839 _BUSY	=	0x00c7
                           0000C8   840 G$CPRL2$0$0 == 0x00c8
                           0000C8   841 _CPRL2	=	0x00c8
                           0000C9   842 G$CT2$0$0 == 0x00c9
                           0000C9   843 _CT2	=	0x00c9
                           0000CA   844 G$TR2$0$0 == 0x00ca
                           0000CA   845 _TR2	=	0x00ca
                           0000CB   846 G$EXEN2$0$0 == 0x00cb
                           0000CB   847 _EXEN2	=	0x00cb
                           0000CC   848 G$TCLK$0$0 == 0x00cc
                           0000CC   849 _TCLK	=	0x00cc
                           0000CD   850 G$RCLK$0$0 == 0x00cd
                           0000CD   851 _RCLK	=	0x00cd
                           0000CE   852 G$EXF2$0$0 == 0x00ce
                           0000CE   853 _EXF2	=	0x00ce
                           0000CF   854 G$TF2$0$0 == 0x00cf
                           0000CF   855 _TF2	=	0x00cf
                           0000D0   856 G$P$0$0 == 0x00d0
                           0000D0   857 _P	=	0x00d0
                           0000D1   858 G$F1$0$0 == 0x00d1
                           0000D1   859 _F1	=	0x00d1
                           0000D2   860 G$OV$0$0 == 0x00d2
                           0000D2   861 _OV	=	0x00d2
                           0000D3   862 G$RS0$0$0 == 0x00d3
                           0000D3   863 _RS0	=	0x00d3
                           0000D4   864 G$RS1$0$0 == 0x00d4
                           0000D4   865 _RS1	=	0x00d4
                           0000D5   866 G$F0$0$0 == 0x00d5
                           0000D5   867 _F0	=	0x00d5
                           0000D6   868 G$AC$0$0 == 0x00d6
                           0000D6   869 _AC	=	0x00d6
                           0000D7   870 G$CY$0$0 == 0x00d7
                           0000D7   871 _CY	=	0x00d7
                           0000D8   872 G$CCF0$0$0 == 0x00d8
                           0000D8   873 _CCF0	=	0x00d8
                           0000D9   874 G$CCF1$0$0 == 0x00d9
                           0000D9   875 _CCF1	=	0x00d9
                           0000DA   876 G$CCF2$0$0 == 0x00da
                           0000DA   877 _CCF2	=	0x00da
                           0000DB   878 G$CCF3$0$0 == 0x00db
                           0000DB   879 _CCF3	=	0x00db
                           0000DC   880 G$CCF4$0$0 == 0x00dc
                           0000DC   881 _CCF4	=	0x00dc
                           0000DE   882 G$CR$0$0 == 0x00de
                           0000DE   883 _CR	=	0x00de
                           0000DF   884 G$CF$0$0 == 0x00df
                           0000DF   885 _CF	=	0x00df
                           0000E8   886 G$ADLJST$0$0 == 0x00e8
                           0000E8   887 _ADLJST	=	0x00e8
                           0000E8   888 G$AD0LJST$0$0 == 0x00e8
                           0000E8   889 _AD0LJST	=	0x00e8
                           0000E9   890 G$ADWINT$0$0 == 0x00e9
                           0000E9   891 _ADWINT	=	0x00e9
                           0000E9   892 G$AD0WINT$0$0 == 0x00e9
                           0000E9   893 _AD0WINT	=	0x00e9
                           0000EA   894 G$ADSTM0$0$0 == 0x00ea
                           0000EA   895 _ADSTM0	=	0x00ea
                           0000EA   896 G$AD0CM0$0$0 == 0x00ea
                           0000EA   897 _AD0CM0	=	0x00ea
                           0000EB   898 G$ADSTM1$0$0 == 0x00eb
                           0000EB   899 _ADSTM1	=	0x00eb
                           0000EB   900 G$AD0CM1$0$0 == 0x00eb
                           0000EB   901 _AD0CM1	=	0x00eb
                           0000EC   902 G$ADBUSY$0$0 == 0x00ec
                           0000EC   903 _ADBUSY	=	0x00ec
                           0000EC   904 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   905 _AD0BUSY	=	0x00ec
                           0000ED   906 G$ADCINT$0$0 == 0x00ed
                           0000ED   907 _ADCINT	=	0x00ed
                           0000ED   908 G$AD0INT$0$0 == 0x00ed
                           0000ED   909 _AD0INT	=	0x00ed
                           0000EE   910 G$ADCTM$0$0 == 0x00ee
                           0000EE   911 _ADCTM	=	0x00ee
                           0000EE   912 G$AD0TM$0$0 == 0x00ee
                           0000EE   913 _AD0TM	=	0x00ee
                           0000EF   914 G$ADCEN$0$0 == 0x00ef
                           0000EF   915 _ADCEN	=	0x00ef
                           0000EF   916 G$AD0EN$0$0 == 0x00ef
                           0000EF   917 _AD0EN	=	0x00ef
                           0000F8   918 G$SPIEN$0$0 == 0x00f8
                           0000F8   919 _SPIEN	=	0x00f8
                           0000F9   920 G$MSTEN$0$0 == 0x00f9
                           0000F9   921 _MSTEN	=	0x00f9
                           0000FA   922 G$SLVSEL$0$0 == 0x00fa
                           0000FA   923 _SLVSEL	=	0x00fa
                           0000FB   924 G$TXBSY$0$0 == 0x00fb
                           0000FB   925 _TXBSY	=	0x00fb
                           0000FC   926 G$RXOVRN$0$0 == 0x00fc
                           0000FC   927 _RXOVRN	=	0x00fc
                           0000FD   928 G$MODF$0$0 == 0x00fd
                           0000FD   929 _MODF	=	0x00fd
                           0000FE   930 G$WCOL$0$0 == 0x00fe
                           0000FE   931 _WCOL	=	0x00fe
                           0000FF   932 G$SPIF$0$0 == 0x00ff
                           0000FF   933 _SPIF	=	0x00ff
                           0000C7   934 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   935 _BUS_BUSY	=	0x00c7
                           0000C6   936 G$BUS_EN$0$0 == 0x00c6
                           0000C6   937 _BUS_EN	=	0x00c6
                           0000C5   938 G$BUS_START$0$0 == 0x00c5
                           0000C5   939 _BUS_START	=	0x00c5
                           0000C4   940 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   941 _BUS_STOP	=	0x00c4
                           0000C3   942 G$BUS_INT$0$0 == 0x00c3
                           0000C3   943 _BUS_INT	=	0x00c3
                           0000C2   944 G$BUS_AA$0$0 == 0x00c2
                           0000C2   945 _BUS_AA	=	0x00c2
                           0000C1   946 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   947 _BUS_FTE	=	0x00c1
                           0000C0   948 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   949 _BUS_TOE	=	0x00c0
                           000083   950 G$BUS_SCL$0$0 == 0x0083
                           000083   951 _BUS_SCL	=	0x0083
                                    952 ;--------------------------------------------------------
                                    953 ; overlayable register banks
                                    954 ;--------------------------------------------------------
                                    955 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        956 	.ds 8
                                    957 ;--------------------------------------------------------
                                    958 ; internal ram data
                                    959 ;--------------------------------------------------------
                                    960 	.area DSEG    (DATA)
                           000000   961 Llab6.lcd_clear$NumBytes$1$77==.
      000000                        962 _lcd_clear_NumBytes_1_77:
      000000                        963 	.ds 1
                           000001   964 Llab6.lcd_clear$Cmd$1$77==.
      000001                        965 _lcd_clear_Cmd_1_77:
      000001                        966 	.ds 2
                           000003   967 Llab6.read_keypad$Data$1$78==.
      000003                        968 _read_keypad_Data_1_78:
      000003                        969 	.ds 2
                           000005   970 Llab6.i2c_write_data$start_reg$1$97==.
      000005                        971 _i2c_write_data_PARM_2:
      000005                        972 	.ds 1
                           000006   973 Llab6.i2c_write_data$buffer$1$97==.
      000006                        974 _i2c_write_data_PARM_3:
      000006                        975 	.ds 3
                           000009   976 Llab6.i2c_write_data$num_bytes$1$97==.
      000009                        977 _i2c_write_data_PARM_4:
      000009                        978 	.ds 1
                           00000A   979 Llab6.i2c_read_data$start_reg$1$99==.
      00000A                        980 _i2c_read_data_PARM_2:
      00000A                        981 	.ds 1
                           00000B   982 Llab6.i2c_read_data$buffer$1$99==.
      00000B                        983 _i2c_read_data_PARM_3:
      00000B                        984 	.ds 3
                           00000E   985 Llab6.i2c_read_data$num_bytes$1$99==.
      00000E                        986 _i2c_read_data_PARM_4:
      00000E                        987 	.ds 1
                           00000F   988 Llab6.Accel_Init$Data2$1$103==.
      00000F                        989 _Accel_Init_Data2_1_103:
      00000F                        990 	.ds 1
                           000010   991 G$count$0$0==.
      000010                        992 _count::
      000010                        993 	.ds 2
                           000012   994 G$PW_MIN_THRUST$0$0==.
      000012                        995 _PW_MIN_THRUST::
      000012                        996 	.ds 2
                           000014   997 G$PW_NUET_THRUST$0$0==.
      000014                        998 _PW_NUET_THRUST::
      000014                        999 	.ds 2
                           000016  1000 G$PW_MAX_THRUST$0$0==.
      000016                       1001 _PW_MAX_THRUST::
      000016                       1002 	.ds 2
                           000018  1003 G$PW_LEFT_RUDDER$0$0==.
      000018                       1004 _PW_LEFT_RUDDER::
      000018                       1005 	.ds 2
                           00001A  1006 G$PW_CENTER_RUDDER$0$0==.
      00001A                       1007 _PW_CENTER_RUDDER::
      00001A                       1008 	.ds 2
                           00001C  1009 G$PW_RIGHT_RUDDER$0$0==.
      00001C                       1010 _PW_RIGHT_RUDDER::
      00001C                       1011 	.ds 2
                           00001E  1012 G$PW_UP_ANGLE$0$0==.
      00001E                       1013 _PW_UP_ANGLE::
      00001E                       1014 	.ds 2
                           000020  1015 G$PW_CENTER_ANGLE$0$0==.
      000020                       1016 _PW_CENTER_ANGLE::
      000020                       1017 	.ds 2
                           000022  1018 G$PW_DOWN_ANGLE$0$0==.
      000022                       1019 _PW_DOWN_ANGLE::
      000022                       1020 	.ds 2
                           000024  1021 G$RUDDER_PW$0$0==.
      000024                       1022 _RUDDER_PW::
      000024                       1023 	.ds 2
                           000026  1024 G$RDR_lo_to_hi$0$0==.
      000026                       1025 _RDR_lo_to_hi::
      000026                       1026 	.ds 2
                           000028  1027 G$ANGLE_PW$0$0==.
      000028                       1028 _ANGLE_PW::
      000028                       1029 	.ds 2
                           00002A  1030 G$AGL_lo_to_hi$0$0==.
      00002A                       1031 _AGL_lo_to_hi::
      00002A                       1032 	.ds 2
                           00002C  1033 G$RTHRUST_PW$0$0==.
      00002C                       1034 _RTHRUST_PW::
      00002C                       1035 	.ds 2
                           00002E  1036 G$LTHRUST_PW$0$0==.
      00002E                       1037 _LTHRUST_PW::
      00002E                       1038 	.ds 2
                           000030  1039 G$RTRST_lo_to_hi$0$0==.
      000030                       1040 _RTRST_lo_to_hi::
      000030                       1041 	.ds 2
                           000032  1042 G$LTRST_lo_to_hi$0$0==.
      000032                       1043 _LTRST_lo_to_hi::
      000032                       1044 	.ds 2
                           000034  1045 G$desired_D$0$0==.
      000034                       1046 _desired_D::
      000034                       1047 	.ds 2
                           000036  1048 G$actual_D$0$0==.
      000036                       1049 _actual_D::
      000036                       1050 	.ds 2
                           000038  1051 G$offset$0$0==.
      000038                       1052 _offset::
      000038                       1053 	.ds 2
                           00003A  1054 G$error$0$0==.
      00003A                       1055 _error::
      00003A                       1056 	.ds 2
                           00003C  1057 G$old_error$0$0==.
      00003C                       1058 _old_error::
      00003C                       1059 	.ds 2
                           00003E  1060 G$r_data$0$0==.
      00003E                       1061 _r_data::
      00003E                       1062 	.ds 2
                           000040  1063 G$kp$0$0==.
      000040                       1064 _kp::
      000040                       1065 	.ds 2
                           000042  1066 G$kd$0$0==.
      000042                       1067 _kd::
      000042                       1068 	.ds 2
                           000044  1069 G$ratio$0$0==.
      000044                       1070 _ratio::
      000044                       1071 	.ds 2
                           000046  1072 G$dratio$0$0==.
      000046                       1073 _dratio::
      000046                       1074 	.ds 2
                           000048  1075 Llab6.ReadCompass$Data$1$141==.
      000048                       1076 _ReadCompass_Data_1_141:
      000048                       1077 	.ds 2
                                   1078 ;--------------------------------------------------------
                                   1079 ; overlayable items in internal ram 
                                   1080 ;--------------------------------------------------------
                                   1081 	.area	OSEG    (OVR,DATA)
                                   1082 	.area	OSEG    (OVR,DATA)
                                   1083 	.area	OSEG    (OVR,DATA)
                                   1084 	.area	OSEG    (OVR,DATA)
                                   1085 	.area	OSEG    (OVR,DATA)
                                   1086 	.area	OSEG    (OVR,DATA)
                                   1087 	.area	OSEG    (OVR,DATA)
                                   1088 	.area	OSEG    (OVR,DATA)
                                   1089 ;--------------------------------------------------------
                                   1090 ; Stack segment in internal ram 
                                   1091 ;--------------------------------------------------------
                                   1092 	.area	SSEG
      000000                       1093 __start__stack:
      000000                       1094 	.ds	1
                                   1095 
                                   1096 ;--------------------------------------------------------
                                   1097 ; indirectly addressable internal ram data
                                   1098 ;--------------------------------------------------------
                                   1099 	.area ISEG    (DATA)
                                   1100 ;--------------------------------------------------------
                                   1101 ; absolute internal ram data
                                   1102 ;--------------------------------------------------------
                                   1103 	.area IABS    (ABS,DATA)
                                   1104 	.area IABS    (ABS,DATA)
                                   1105 ;--------------------------------------------------------
                                   1106 ; bit data
                                   1107 ;--------------------------------------------------------
                                   1108 	.area BSEG    (BIT)
                                   1109 ;--------------------------------------------------------
                                   1110 ; paged external ram data
                                   1111 ;--------------------------------------------------------
                                   1112 	.area PSEG    (PAG,XDATA)
                                   1113 ;--------------------------------------------------------
                                   1114 ; external ram data
                                   1115 ;--------------------------------------------------------
                                   1116 	.area XSEG    (XDATA)
                           000000  1117 Llab6.lcd_print$text$1$73==.
      000000                       1118 _lcd_print_text_1_73:
      000000                       1119 	.ds 80
                                   1120 ;--------------------------------------------------------
                                   1121 ; absolute external ram data
                                   1122 ;--------------------------------------------------------
                                   1123 	.area XABS    (ABS,XDATA)
                                   1124 ;--------------------------------------------------------
                                   1125 ; external initialized ram data
                                   1126 ;--------------------------------------------------------
                                   1127 	.area XISEG   (XDATA)
                                   1128 	.area HOME    (CODE)
                                   1129 	.area GSINIT0 (CODE)
                                   1130 	.area GSINIT1 (CODE)
                                   1131 	.area GSINIT2 (CODE)
                                   1132 	.area GSINIT3 (CODE)
                                   1133 	.area GSINIT4 (CODE)
                                   1134 	.area GSINIT5 (CODE)
                                   1135 	.area GSINIT  (CODE)
                                   1136 	.area GSFINAL (CODE)
                                   1137 	.area CSEG    (CODE)
                                   1138 ;--------------------------------------------------------
                                   1139 ; interrupt vector 
                                   1140 ;--------------------------------------------------------
                                   1141 	.area HOME    (CODE)
      000000                       1142 __interrupt_vect:
      000000 02r00r00         [24] 1143 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1144 	reti
      000004                       1145 	.ds	7
      00000B 32               [24] 1146 	reti
      00000C                       1147 	.ds	7
      000013 32               [24] 1148 	reti
      000014                       1149 	.ds	7
      00001B 32               [24] 1150 	reti
      00001C                       1151 	.ds	7
      000023 32               [24] 1152 	reti
      000024                       1153 	.ds	7
      00002B 32               [24] 1154 	reti
      00002C                       1155 	.ds	7
      000033 32               [24] 1156 	reti
      000034                       1157 	.ds	7
      00003B 32               [24] 1158 	reti
      00003C                       1159 	.ds	7
      000043 32               [24] 1160 	reti
      000044                       1161 	.ds	7
      00004B 02r11r1A         [24] 1162 	ljmp	_PCA_ISR
                                   1163 ;--------------------------------------------------------
                                   1164 ; global & static initialisations
                                   1165 ;--------------------------------------------------------
                                   1166 	.area HOME    (CODE)
                                   1167 	.area GSINIT  (CODE)
                                   1168 	.area GSFINAL (CODE)
                                   1169 	.area GSINIT  (CODE)
                                   1170 	.globl __sdcc_gsinit_startup
                                   1171 	.globl __sdcc_program_startup
                                   1172 	.globl __start__stack
                                   1173 	.globl __mcs51_genXINIT
                                   1174 	.globl __mcs51_genXRAMCLEAR
                                   1175 	.globl __mcs51_genRAMCLEAR
                           000000  1176 	C$lab6.c$45$1$224 ==.
                                   1177 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:45: int count=0;
      000000 E4               [12] 1178 	clr	a
      000001 F5*10            [12] 1179 	mov	_count,a
      000003 F5*11            [12] 1180 	mov	(_count + 1),a
                           000005  1181 	C$lab6.c$46$1$224 ==.
                                   1182 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:46: unsigned int PW_MIN_THRUST = 2000;
      000005 75*12 D0         [24] 1183 	mov	_PW_MIN_THRUST,#0xD0
      000008 75*13 07         [24] 1184 	mov	(_PW_MIN_THRUST + 1),#0x07
                           00000B  1185 	C$lab6.c$47$1$224 ==.
                                   1186 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:47: unsigned int PW_NUET_THRUST = 2750;
      00000B 75*14 BE         [24] 1187 	mov	_PW_NUET_THRUST,#0xBE
      00000E 75*15 0A         [24] 1188 	mov	(_PW_NUET_THRUST + 1),#0x0A
                           000011  1189 	C$lab6.c$48$1$224 ==.
                                   1190 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:48: unsigned int PW_MAX_THRUST = 3500;
      000011 75*16 AC         [24] 1191 	mov	_PW_MAX_THRUST,#0xAC
      000014 75*17 0D         [24] 1192 	mov	(_PW_MAX_THRUST + 1),#0x0D
                           000017  1193 	C$lab6.c$50$1$224 ==.
                                   1194 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:50: unsigned int PW_LEFT_RUDDER = 2000;
      000017 75*18 D0         [24] 1195 	mov	_PW_LEFT_RUDDER,#0xD0
      00001A 75*19 07         [24] 1196 	mov	(_PW_LEFT_RUDDER + 1),#0x07
                           00001D  1197 	C$lab6.c$51$1$224 ==.
                                   1198 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:51: unsigned int PW_CENTER_RUDDER = 2750;
      00001D 75*1A BE         [24] 1199 	mov	_PW_CENTER_RUDDER,#0xBE
      000020 75*1B 0A         [24] 1200 	mov	(_PW_CENTER_RUDDER + 1),#0x0A
                           000023  1201 	C$lab6.c$52$1$224 ==.
                                   1202 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:52: unsigned int PW_RIGHT_RUDDER = 3500;
      000023 75*1C AC         [24] 1203 	mov	_PW_RIGHT_RUDDER,#0xAC
      000026 75*1D 0D         [24] 1204 	mov	(_PW_RIGHT_RUDDER + 1),#0x0D
                           000029  1205 	C$lab6.c$54$1$224 ==.
                                   1206 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:54: unsigned int PW_UP_ANGLE = 2880;
      000029 75*1E 40         [24] 1207 	mov	_PW_UP_ANGLE,#0x40
      00002C 75*1F 0B         [24] 1208 	mov	(_PW_UP_ANGLE + 1),#0x0B
                           00002F  1209 	C$lab6.c$55$1$224 ==.
                                   1210 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:55: unsigned int PW_CENTER_ANGLE = 3530;
      00002F 75*20 CA         [24] 1211 	mov	_PW_CENTER_ANGLE,#0xCA
      000032 75*21 0D         [24] 1212 	mov	(_PW_CENTER_ANGLE + 1),#0x0D
                           000035  1213 	C$lab6.c$56$1$224 ==.
                                   1214 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:56: unsigned int PW_DOWN_ANGLE = 4180;
      000035 75*22 54         [24] 1215 	mov	_PW_DOWN_ANGLE,#0x54
      000038 75*23 10         [24] 1216 	mov	(_PW_DOWN_ANGLE + 1),#0x10
                           00003B  1217 	C$lab6.c$71$1$224 ==.
                                   1218 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:71: int error =0;
      00003B F5*3A            [12] 1219 	mov	_error,a
      00003D F5*3B            [12] 1220 	mov	(_error + 1),a
                           00003F  1221 	C$lab6.c$72$1$224 ==.
                                   1222 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:72: int old_error =0;
      00003F F5*3C            [12] 1223 	mov	_old_error,a
      000041 F5*3D            [12] 1224 	mov	(_old_error + 1),a
                                   1225 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1226 	ljmp	__sdcc_program_startup
                                   1227 ;--------------------------------------------------------
                                   1228 ; Home
                                   1229 ;--------------------------------------------------------
                                   1230 	.area HOME    (CODE)
                                   1231 	.area HOME    (CODE)
      00004E                       1232 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1233 	ljmp	_main
                                   1234 ;	return from main will return to caller
                                   1235 ;--------------------------------------------------------
                                   1236 ; code
                                   1237 ;--------------------------------------------------------
                                   1238 	.area CSEG    (CODE)
                                   1239 ;------------------------------------------------------------
                                   1240 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1241 ;------------------------------------------------------------
                                   1242 ;i                         Allocated to registers 
                                   1243 ;------------------------------------------------------------
                           000000  1244 	G$SYSCLK_Init$0$0 ==.
                           000000  1245 	C$c8051_SDCC.h$42$0$0 ==.
                                   1246 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1247 ;	-----------------------------------------
                                   1248 ;	 function SYSCLK_Init
                                   1249 ;	-----------------------------------------
      000000                       1250 _SYSCLK_Init:
                           000007  1251 	ar7 = 0x07
                           000006  1252 	ar6 = 0x06
                           000005  1253 	ar5 = 0x05
                           000004  1254 	ar4 = 0x04
                           000003  1255 	ar3 = 0x03
                           000002  1256 	ar2 = 0x02
                           000001  1257 	ar1 = 0x01
                           000000  1258 	ar0 = 0x00
                           000000  1259 	C$c8051_SDCC.h$46$1$31 ==.
                                   1260 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1261 	mov	_OSCXCN,#0x67
                           000003  1262 	C$c8051_SDCC.h$49$1$31 ==.
                                   1263 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1264 	mov	r6,#0x00
      000005 7F 01            [12] 1265 	mov	r7,#0x01
      000007                       1266 00107$:
      000007 1E               [12] 1267 	dec	r6
      000008 BE FF 01         [24] 1268 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1269 	dec	r7
      00000C                       1270 00121$:
      00000C EE               [12] 1271 	mov	a,r6
      00000D 4F               [12] 1272 	orl	a,r7
      00000E 70 F7            [24] 1273 	jnz	00107$
                           000010  1274 	C$c8051_SDCC.h$51$1$31 ==.
                                   1275 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1276 00102$:
      000010 E5 B1            [12] 1277 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1278 	jnb	acc.7,00102$
                           000015  1279 	C$c8051_SDCC.h$53$1$31 ==.
                                   1280 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1281 	mov	_OSCICN,#0x88
                           000018  1282 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1283 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1284 	ret
                                   1285 ;------------------------------------------------------------
                                   1286 ;Allocation info for local variables in function 'UART0_Init'
                                   1287 ;------------------------------------------------------------
                           000019  1288 	G$UART0_Init$0$0 ==.
                           000019  1289 	C$c8051_SDCC.h$64$1$31 ==.
                                   1290 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1291 ;	-----------------------------------------
                                   1292 ;	 function UART0_Init
                                   1293 ;	-----------------------------------------
      000019                       1294 _UART0_Init:
                           000019  1295 	C$c8051_SDCC.h$66$1$33 ==.
                                   1296 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1297 	mov	_SCON0,#0x50
                           00001C  1298 	C$c8051_SDCC.h$67$1$33 ==.
                                   1299 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1300 	mov	_TMOD,#0x20
                           00001F  1301 	C$c8051_SDCC.h$68$1$33 ==.
                                   1302 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1303 	mov	_TH1,#0xDC
                           000022  1304 	C$c8051_SDCC.h$69$1$33 ==.
                                   1305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1306 	setb	_TR1
                           000024  1307 	C$c8051_SDCC.h$70$1$33 ==.
                                   1308 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1309 	orl	_CKCON,#0x10
                           000027  1310 	C$c8051_SDCC.h$71$1$33 ==.
                                   1311 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1312 	orl	_PCON,#0x80
                           00002A  1313 	C$c8051_SDCC.h$73$1$33 ==.
                                   1314 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1315 	setb	_TI0
                           00002C  1316 	C$c8051_SDCC.h$74$1$33 ==.
                                   1317 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1318 	orl	_P0MDOUT,#0x01
                           00002F  1319 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1320 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1321 	ret
                                   1322 ;------------------------------------------------------------
                                   1323 ;Allocation info for local variables in function 'Sys_Init'
                                   1324 ;------------------------------------------------------------
                           000030  1325 	G$Sys_Init$0$0 ==.
                           000030  1326 	C$c8051_SDCC.h$83$1$33 ==.
                                   1327 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1328 ;	-----------------------------------------
                                   1329 ;	 function Sys_Init
                                   1330 ;	-----------------------------------------
      000030                       1331 _Sys_Init:
                           000030  1332 	C$c8051_SDCC.h$85$1$35 ==.
                                   1333 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1334 	mov	_WDTCN,#0xDE
                           000033  1335 	C$c8051_SDCC.h$86$1$35 ==.
                                   1336 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1337 	mov	_WDTCN,#0xAD
                           000036  1338 	C$c8051_SDCC.h$88$1$35 ==.
                                   1339 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1340 	lcall	_SYSCLK_Init
                           000039  1341 	C$c8051_SDCC.h$89$1$35 ==.
                                   1342 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1343 	lcall	_UART0_Init
                           00003C  1344 	C$c8051_SDCC.h$91$1$35 ==.
                                   1345 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1346 	orl	_XBR0,#0x04
                           00003F  1347 	C$c8051_SDCC.h$92$1$35 ==.
                                   1348 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1349 	orl	_XBR2,#0x40
                           000042  1350 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1351 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1352 	ret
                                   1353 ;------------------------------------------------------------
                                   1354 ;Allocation info for local variables in function 'putchar'
                                   1355 ;------------------------------------------------------------
                                   1356 ;c                         Allocated to registers r7 
                                   1357 ;------------------------------------------------------------
                           000043  1358 	G$putchar$0$0 ==.
                           000043  1359 	C$c8051_SDCC.h$98$1$35 ==.
                                   1360 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1361 ;	-----------------------------------------
                                   1362 ;	 function putchar
                                   1363 ;	-----------------------------------------
      000043                       1364 _putchar:
      000043 AF 82            [24] 1365 	mov	r7,dpl
                           000045  1366 	C$c8051_SDCC.h$100$1$37 ==.
                                   1367 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1368 00101$:
                           000045  1369 	C$c8051_SDCC.h$101$1$37 ==.
                                   1370 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1371 	jbc	_TI0,00112$
      000048 80 FB            [24] 1372 	sjmp	00101$
      00004A                       1373 00112$:
                           00004A  1374 	C$c8051_SDCC.h$102$1$37 ==.
                                   1375 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1376 	mov	_SBUF0,r7
                           00004C  1377 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1378 	XG$putchar$0$0 ==.
      00004C 22               [24] 1379 	ret
                                   1380 ;------------------------------------------------------------
                                   1381 ;Allocation info for local variables in function 'getchar'
                                   1382 ;------------------------------------------------------------
                                   1383 ;c                         Allocated to registers 
                                   1384 ;------------------------------------------------------------
                           00004D  1385 	G$getchar$0$0 ==.
                           00004D  1386 	C$c8051_SDCC.h$108$1$37 ==.
                                   1387 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1388 ;	-----------------------------------------
                                   1389 ;	 function getchar
                                   1390 ;	-----------------------------------------
      00004D                       1391 _getchar:
                           00004D  1392 	C$c8051_SDCC.h$111$1$39 ==.
                                   1393 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1394 00101$:
                           00004D  1395 	C$c8051_SDCC.h$112$1$39 ==.
                                   1396 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1397 	jbc	_RI0,00112$
      000050 80 FB            [24] 1398 	sjmp	00101$
      000052                       1399 00112$:
                           000052  1400 	C$c8051_SDCC.h$113$1$39 ==.
                                   1401 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1402 	mov	dpl,_SBUF0
                           000055  1403 	C$c8051_SDCC.h$114$1$39 ==.
                                   1404 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1405 	lcall	_putchar
                           000058  1406 	C$c8051_SDCC.h$115$1$39 ==.
                                   1407 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1408 	mov	dpl,_SBUF0
                           00005B  1409 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1410 	XG$getchar$0$0 ==.
      00005B 22               [24] 1411 	ret
                                   1412 ;------------------------------------------------------------
                                   1413 ;Allocation info for local variables in function 'lcd_print'
                                   1414 ;------------------------------------------------------------
                                   1415 ;fmt                       Allocated to stack - _bp -5
                                   1416 ;len                       Allocated to registers r6 
                                   1417 ;i                         Allocated to registers 
                                   1418 ;ap                        Allocated to registers 
                                   1419 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1420 ;------------------------------------------------------------
                           00005C  1421 	G$lcd_print$0$0 ==.
                           00005C  1422 	C$i2c.h$81$1$39 ==.
                                   1423 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1424 ;	-----------------------------------------
                                   1425 ;	 function lcd_print
                                   1426 ;	-----------------------------------------
      00005C                       1427 _lcd_print:
      00005C C0*00            [24] 1428 	push	_bp
      00005E 85 81*00         [24] 1429 	mov	_bp,sp
                           000061  1430 	C$i2c.h$87$1$73 ==.
                                   1431 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1432 	mov	a,_bp
      000063 24 FB            [12] 1433 	add	a,#0xfb
      000065 F8               [12] 1434 	mov	r0,a
      000066 86 82            [24] 1435 	mov	dpl,@r0
      000068 08               [12] 1436 	inc	r0
      000069 86 83            [24] 1437 	mov	dph,@r0
      00006B 08               [12] 1438 	inc	r0
      00006C 86 F0            [24] 1439 	mov	b,@r0
      00006E 12r00r00         [24] 1440 	lcall	_strlen
      000071 E5 82            [12] 1441 	mov	a,dpl
      000073 85 83 F0         [24] 1442 	mov	b,dph
      000076 45 F0            [12] 1443 	orl	a,b
      000078 70 02            [24] 1444 	jnz	00102$
      00007A 80 62            [24] 1445 	sjmp	00109$
      00007C                       1446 00102$:
                           00007C  1447 	C$i2c.h$89$2$74 ==.
                                   1448 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1449 	mov	a,_bp
      00007E 24 FB            [12] 1450 	add	a,#0xFB
      000080 FF               [12] 1451 	mov	r7,a
      000081 8F*00            [24] 1452 	mov	_vsprintf_PARM_3,r7
                           000083  1453 	C$i2c.h$90$1$73 ==.
                                   1454 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1455 	mov	a,_bp
      000085 24 FB            [12] 1456 	add	a,#0xfb
      000087 F8               [12] 1457 	mov	r0,a
      000088 86*00            [24] 1458 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1459 	inc	r0
      00008B 86*01            [24] 1460 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1461 	inc	r0
      00008E 86*02            [24] 1462 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1463 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1464 	mov	b,#0x00
      000096 12r00r00         [24] 1465 	lcall	_vsprintf
                           000099  1466 	C$i2c.h$93$1$73 ==.
                                   1467 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1468 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1469 	mov	b,#0x00
      00009F 12r00r00         [24] 1470 	lcall	_strlen
      0000A2 AE 82            [24] 1471 	mov	r6,dpl
                           0000A4  1472 	C$i2c.h$94$1$73 ==.
                                   1473 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1474 	mov	r7,#0x00
      0000A6                       1475 00107$:
      0000A6 C3               [12] 1476 	clr	c
      0000A7 EF               [12] 1477 	mov	a,r7
      0000A8 9E               [12] 1478 	subb	a,r6
      0000A9 50 1F            [24] 1479 	jnc	00105$
                           0000AB  1480 	C$i2c.h$96$2$76 ==.
                                   1481 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1482 	mov	a,r7
      0000AC 24r00            [12] 1483 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1484 	mov	dpl,a
      0000B0 E4               [12] 1485 	clr	a
      0000B1 34s00            [12] 1486 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1487 	mov	dph,a
      0000B5 E0               [24] 1488 	movx	a,@dptr
      0000B6 FD               [12] 1489 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1490 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1491 	mov	a,r7
      0000BB 24r00            [12] 1492 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1493 	mov	dpl,a
      0000BF E4               [12] 1494 	clr	a
      0000C0 34s00            [12] 1495 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1496 	mov	dph,a
      0000C4 74 0D            [12] 1497 	mov	a,#0x0D
      0000C6 F0               [24] 1498 	movx	@dptr,a
      0000C7                       1499 00108$:
                           0000C7  1500 	C$i2c.h$94$1$73 ==.
                                   1501 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1502 	inc	r7
      0000C8 80 DC            [24] 1503 	sjmp	00107$
      0000CA                       1504 00105$:
                           0000CA  1505 	C$i2c.h$99$1$73 ==.
                                   1506 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1507 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1508 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1509 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1510 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1511 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1512 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1513 	lcall	_i2c_write_data
      0000DE                       1514 00109$:
      0000DE D0*00            [24] 1515 	pop	_bp
                           0000E0  1516 	C$i2c.h$100$1$73 ==.
                           0000E0  1517 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1518 	ret
                                   1519 ;------------------------------------------------------------
                                   1520 ;Allocation info for local variables in function 'lcd_clear'
                                   1521 ;------------------------------------------------------------
                                   1522 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1523 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1524 ;------------------------------------------------------------
                           0000E1  1525 	G$lcd_clear$0$0 ==.
                           0000E1  1526 	C$i2c.h$103$1$73 ==.
                                   1527 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1528 ;	-----------------------------------------
                                   1529 ;	 function lcd_clear
                                   1530 ;	-----------------------------------------
      0000E1                       1531 _lcd_clear:
                           0000E1  1532 	C$i2c.h$105$1$73 ==.
                                   1533 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1534 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1535 	C$i2c.h$107$1$77 ==.
                                   1536 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1537 00101$:
      0000E4 74 C0            [12] 1538 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1539 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1540 	jc	00103$
      0000EA 75*0Br00         [24] 1541 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1542 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1543 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1544 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1545 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1546 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1547 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1548 	sjmp	00101$
      000101                       1549 00103$:
                           000101  1550 	C$i2c.h$109$1$77 ==.
                                   1551 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1552 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1553 	C$i2c.h$110$1$77 ==.
                                   1554 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1555 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1556 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1557 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1558 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1559 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1560 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1561 	lcall	_i2c_write_data
                           000119  1562 	C$i2c.h$111$1$77 ==.
                           000119  1563 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1564 	ret
                                   1565 ;------------------------------------------------------------
                                   1566 ;Allocation info for local variables in function 'read_keypad'
                                   1567 ;------------------------------------------------------------
                                   1568 ;i                         Allocated to registers r7 
                                   1569 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1570 ;------------------------------------------------------------
                           00011A  1571 	G$read_keypad$0$0 ==.
                           00011A  1572 	C$i2c.h$114$1$77 ==.
                                   1573 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1574 ;	-----------------------------------------
                                   1575 ;	 function read_keypad
                                   1576 ;	-----------------------------------------
      00011A                       1577 _read_keypad:
                           00011A  1578 	C$i2c.h$118$1$78 ==.
                                   1579 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1580 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1581 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1582 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1583 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1584 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1585 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1586 	lcall	_i2c_read_data
                           00012F  1587 	C$i2c.h$119$1$78 ==.
                                   1588 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1589 	mov	a,#0xFF
      000131 B5*03 05         [24] 1590 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1591 	mov	dpl,#0x00
      000137 80 5F            [24] 1592 	sjmp	00116$
      000139                       1593 00102$:
                           000139  1594 	C$i2c.h$121$1$78 ==.
                                   1595 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1596 	mov	r7,#0x00
      00013B 8F 06            [24] 1597 	mov	ar6,r7
      00013D                       1598 00114$:
                           00013D  1599 	C$i2c.h$123$2$79 ==.
                                   1600 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1601 	mov	b,r6
      00013F 05 F0            [12] 1602 	inc	b
      000141 7C 01            [12] 1603 	mov	r4,#0x01
      000143 7D 00            [12] 1604 	mov	r5,#0x00
      000145 80 06            [24] 1605 	sjmp	00145$
      000147                       1606 00144$:
      000147 EC               [12] 1607 	mov	a,r4
      000148 2C               [12] 1608 	add	a,r4
      000149 FC               [12] 1609 	mov	r4,a
      00014A ED               [12] 1610 	mov	a,r5
      00014B 33               [12] 1611 	rlc	a
      00014C FD               [12] 1612 	mov	r5,a
      00014D                       1613 00145$:
      00014D D5 F0 F7         [24] 1614 	djnz	b,00144$
      000150 AA*03            [24] 1615 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1616 	mov	r3,#0x00
      000154 EA               [12] 1617 	mov	a,r2
      000155 52 04            [12] 1618 	anl	ar4,a
      000157 EB               [12] 1619 	mov	a,r3
      000158 52 05            [12] 1620 	anl	ar5,a
      00015A EC               [12] 1621 	mov	a,r4
      00015B 4D               [12] 1622 	orl	a,r5
      00015C 60 07            [24] 1623 	jz	00115$
                           00015E  1624 	C$i2c.h$124$2$79 ==.
                                   1625 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1626 	mov	a,#0x31
      000160 2F               [12] 1627 	add	a,r7
      000161 F5 82            [12] 1628 	mov	dpl,a
      000163 80 33            [24] 1629 	sjmp	00116$
      000165                       1630 00115$:
                           000165  1631 	C$i2c.h$121$1$78 ==.
                                   1632 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1633 	inc	r6
      000166 8E 07            [24] 1634 	mov	ar7,r6
      000168 BE 08 00         [24] 1635 	cjne	r6,#0x08,00147$
      00016B                       1636 00147$:
      00016B 40 D0            [24] 1637 	jc	00114$
                           00016D  1638 	C$i2c.h$127$1$78 ==.
                                   1639 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1640 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1641 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1642 	mov	dpl,#0x39
      000175 80 21            [24] 1643 	sjmp	00116$
      000177                       1644 00107$:
                           000177  1645 	C$i2c.h$129$1$78 ==.
                                   1646 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1647 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1648 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1649 	mov	dpl,#0x2A
      00017F 80 17            [24] 1650 	sjmp	00116$
      000181                       1651 00109$:
                           000181  1652 	C$i2c.h$131$1$78 ==.
                                   1653 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1654 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1655 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1656 	mov	dpl,#0x30
      000189 80 0D            [24] 1657 	sjmp	00116$
      00018B                       1658 00111$:
                           00018B  1659 	C$i2c.h$133$1$78 ==.
                                   1660 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1661 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1662 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1663 	mov	dpl,#0x23
      000193 80 03            [24] 1664 	sjmp	00116$
      000195                       1665 00113$:
                           000195  1666 	C$i2c.h$135$1$78 ==.
                                   1667 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1668 	mov	dpl,#0xFF
      000198                       1669 00116$:
                           000198  1670 	C$i2c.h$136$1$78 ==.
                           000198  1671 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1672 	ret
                                   1673 ;------------------------------------------------------------
                                   1674 ;Allocation info for local variables in function 'kpd_input'
                                   1675 ;------------------------------------------------------------
                                   1676 ;mode                      Allocated to registers r7 
                                   1677 ;sum                       Allocated to registers r5 r6 
                                   1678 ;key                       Allocated to registers r3 
                                   1679 ;i                         Allocated to registers 
                                   1680 ;------------------------------------------------------------
                           000199  1681 	G$kpd_input$0$0 ==.
                           000199  1682 	C$i2c.h$148$1$78 ==.
                                   1683 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1684 ;	-----------------------------------------
                                   1685 ;	 function kpd_input
                                   1686 ;	-----------------------------------------
      000199                       1687 _kpd_input:
      000199 AF 82            [24] 1688 	mov	r7,dpl
                           00019B  1689 	C$i2c.h$153$1$81 ==.
                                   1690 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1691 	C$i2c.h$156$1$81 ==.
                                   1692 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1693 	clr	a
      00019C FD               [12] 1694 	mov	r5,a
      00019D FE               [12] 1695 	mov	r6,a
      00019E EF               [12] 1696 	mov	a,r7
      00019F 70 1D            [24] 1697 	jnz	00102$
      0001A1 C0 06            [24] 1698 	push	ar6
      0001A3 C0 05            [24] 1699 	push	ar5
      0001A5 74r00            [12] 1700 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1701 	push	acc
      0001A9 74s00            [12] 1702 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1703 	push	acc
      0001AD 74 80            [12] 1704 	mov	a,#0x80
      0001AF C0 E0            [24] 1705 	push	acc
      0001B1 12r00r5C         [24] 1706 	lcall	_lcd_print
      0001B4 15 81            [12] 1707 	dec	sp
      0001B6 15 81            [12] 1708 	dec	sp
      0001B8 15 81            [12] 1709 	dec	sp
      0001BA D0 05            [24] 1710 	pop	ar5
      0001BC D0 06            [24] 1711 	pop	ar6
      0001BE                       1712 00102$:
                           0001BE  1713 	C$i2c.h$158$1$81 ==.
                                   1714 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1715 	push	ar6
      0001C0 C0 05            [24] 1716 	push	ar5
      0001C2 74 08            [12] 1717 	mov	a,#0x08
      0001C4 C0 E0            [24] 1718 	push	acc
      0001C6 E4               [12] 1719 	clr	a
      0001C7 C0 E0            [24] 1720 	push	acc
      0001C9 74 08            [12] 1721 	mov	a,#0x08
      0001CB C0 E0            [24] 1722 	push	acc
      0001CD E4               [12] 1723 	clr	a
      0001CE C0 E0            [24] 1724 	push	acc
      0001D0 74 08            [12] 1725 	mov	a,#0x08
      0001D2 C0 E0            [24] 1726 	push	acc
      0001D4 E4               [12] 1727 	clr	a
      0001D5 C0 E0            [24] 1728 	push	acc
      0001D7 74 08            [12] 1729 	mov	a,#0x08
      0001D9 C0 E0            [24] 1730 	push	acc
      0001DB E4               [12] 1731 	clr	a
      0001DC C0 E0            [24] 1732 	push	acc
      0001DE 74 08            [12] 1733 	mov	a,#0x08
      0001E0 C0 E0            [24] 1734 	push	acc
      0001E2 E4               [12] 1735 	clr	a
      0001E3 C0 E0            [24] 1736 	push	acc
      0001E5 74r16            [12] 1737 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1738 	push	acc
      0001E9 74s00            [12] 1739 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1740 	push	acc
      0001ED 74 80            [12] 1741 	mov	a,#0x80
      0001EF C0 E0            [24] 1742 	push	acc
      0001F1 12r00r5C         [24] 1743 	lcall	_lcd_print
      0001F4 E5 81            [12] 1744 	mov	a,sp
      0001F6 24 F3            [12] 1745 	add	a,#0xf3
      0001F8 F5 81            [12] 1746 	mov	sp,a
                           0001FA  1747 	C$i2c.h$160$1$81 ==.
                                   1748 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1749 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1750 	mov	b,#0x07
      000200 E4               [12] 1751 	clr	a
      000201 12r03r0D         [24] 1752 	lcall	_delay_time
      000204 D0 05            [24] 1753 	pop	ar5
      000206 D0 06            [24] 1754 	pop	ar6
                           000208  1755 	C$i2c.h$164$1$81 ==.
                                   1756 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1757 	mov	r7,#0x00
                           00020A  1758 	C$i2c.h$166$3$84 ==.
                                   1759 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1760 00104$:
      00020A C0 07            [24] 1761 	push	ar7
      00020C C0 06            [24] 1762 	push	ar6
      00020E C0 05            [24] 1763 	push	ar5
      000210 12r01r1A         [24] 1764 	lcall	_read_keypad
      000213 AC 82            [24] 1765 	mov	r4,dpl
      000215 D0 05            [24] 1766 	pop	ar5
      000217 D0 06            [24] 1767 	pop	ar6
      000219 D0 07            [24] 1768 	pop	ar7
      00021B 8C 03            [24] 1769 	mov	ar3,r4
      00021D BC FF 02         [24] 1770 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1771 	sjmp	00105$
      000222                       1772 00146$:
      000222 BB 2A 17         [24] 1773 	cjne	r3,#0x2A,00106$
      000225                       1774 00105$:
      000225 90 27 10         [24] 1775 	mov	dptr,#0x2710
      000228 E4               [12] 1776 	clr	a
      000229 F5 F0            [12] 1777 	mov	b,a
      00022B C0 07            [24] 1778 	push	ar7
      00022D C0 06            [24] 1779 	push	ar6
      00022F C0 05            [24] 1780 	push	ar5
      000231 12r03r0D         [24] 1781 	lcall	_delay_time
      000234 D0 05            [24] 1782 	pop	ar5
      000236 D0 06            [24] 1783 	pop	ar6
      000238 D0 07            [24] 1784 	pop	ar7
      00023A 80 CE            [24] 1785 	sjmp	00104$
      00023C                       1786 00106$:
                           00023C  1787 	C$i2c.h$167$2$82 ==.
                                   1788 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1789 	cjne	r3,#0x23,00114$
                           00023F  1790 	C$i2c.h$169$3$83 ==.
                                   1791 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1792 00107$:
      00023F C0 06            [24] 1793 	push	ar6
      000241 C0 05            [24] 1794 	push	ar5
      000243 12r01r1A         [24] 1795 	lcall	_read_keypad
      000246 AC 82            [24] 1796 	mov	r4,dpl
      000248 D0 05            [24] 1797 	pop	ar5
      00024A D0 06            [24] 1798 	pop	ar6
      00024C BC 23 13         [24] 1799 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1800 	mov	dptr,#0x2710
      000252 E4               [12] 1801 	clr	a
      000253 F5 F0            [12] 1802 	mov	b,a
      000255 C0 06            [24] 1803 	push	ar6
      000257 C0 05            [24] 1804 	push	ar5
      000259 12r03r0D         [24] 1805 	lcall	_delay_time
      00025C D0 05            [24] 1806 	pop	ar5
      00025E D0 06            [24] 1807 	pop	ar6
      000260 80 DD            [24] 1808 	sjmp	00107$
      000262                       1809 00109$:
                           000262  1810 	C$i2c.h$170$3$83 ==.
                                   1811 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1812 	mov	dpl,r5
      000264 8E 83            [24] 1813 	mov	dph,r6
      000266 02r03r0C         [24] 1814 	ljmp	00119$
      000269                       1815 00114$:
                           000269  1816 	C$i2c.h$174$3$84 ==.
                                   1817 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1818 	mov	a,r3
      00026A FA               [12] 1819 	mov	r2,a
      00026B 33               [12] 1820 	rlc	a
      00026C 95 E0            [12] 1821 	subb	a,acc
      00026E FC               [12] 1822 	mov	r4,a
      00026F C0 07            [24] 1823 	push	ar7
      000271 C0 06            [24] 1824 	push	ar6
      000273 C0 05            [24] 1825 	push	ar5
      000275 C0 04            [24] 1826 	push	ar4
      000277 C0 03            [24] 1827 	push	ar3
      000279 C0 02            [24] 1828 	push	ar2
      00027B C0 02            [24] 1829 	push	ar2
      00027D C0 04            [24] 1830 	push	ar4
      00027F 74r26            [12] 1831 	mov	a,#___str_2
      000281 C0 E0            [24] 1832 	push	acc
      000283 74s00            [12] 1833 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1834 	push	acc
      000287 74 80            [12] 1835 	mov	a,#0x80
      000289 C0 E0            [24] 1836 	push	acc
      00028B 12r00r5C         [24] 1837 	lcall	_lcd_print
      00028E E5 81            [12] 1838 	mov	a,sp
      000290 24 FB            [12] 1839 	add	a,#0xfb
      000292 F5 81            [12] 1840 	mov	sp,a
      000294 D0 02            [24] 1841 	pop	ar2
      000296 D0 03            [24] 1842 	pop	ar3
      000298 D0 04            [24] 1843 	pop	ar4
      00029A D0 05            [24] 1844 	pop	ar5
      00029C D0 06            [24] 1845 	pop	ar6
                           00029E  1846 	C$i2c.h$175$1$81 ==.
                                   1847 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1848 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1849 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1850 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1851 	push	ar4
      0002A7 C0 03            [24] 1852 	push	ar3
      0002A9 C0 02            [24] 1853 	push	ar2
      0002AB 12r00r00         [24] 1854 	lcall	__mulint
      0002AE A8 82            [24] 1855 	mov	r0,dpl
      0002B0 A9 83            [24] 1856 	mov	r1,dph
      0002B2 D0 02            [24] 1857 	pop	ar2
      0002B4 D0 03            [24] 1858 	pop	ar3
      0002B6 D0 04            [24] 1859 	pop	ar4
      0002B8 D0 07            [24] 1860 	pop	ar7
      0002BA EA               [12] 1861 	mov	a,r2
      0002BB 28               [12] 1862 	add	a,r0
      0002BC F8               [12] 1863 	mov	r0,a
      0002BD EC               [12] 1864 	mov	a,r4
      0002BE 39               [12] 1865 	addc	a,r1
      0002BF F9               [12] 1866 	mov	r1,a
      0002C0 E8               [12] 1867 	mov	a,r0
      0002C1 24 D0            [12] 1868 	add	a,#0xD0
      0002C3 FD               [12] 1869 	mov	r5,a
      0002C4 E9               [12] 1870 	mov	a,r1
      0002C5 34 FF            [12] 1871 	addc	a,#0xFF
      0002C7 FE               [12] 1872 	mov	r6,a
                           0002C8  1873 	C$i2c.h$176$3$84 ==.
                                   1874 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1875 00110$:
      0002C8 C0 07            [24] 1876 	push	ar7
      0002CA C0 06            [24] 1877 	push	ar6
      0002CC C0 05            [24] 1878 	push	ar5
      0002CE C0 03            [24] 1879 	push	ar3
      0002D0 12r01r1A         [24] 1880 	lcall	_read_keypad
      0002D3 AC 82            [24] 1881 	mov	r4,dpl
      0002D5 D0 03            [24] 1882 	pop	ar3
      0002D7 D0 05            [24] 1883 	pop	ar5
      0002D9 D0 06            [24] 1884 	pop	ar6
      0002DB D0 07            [24] 1885 	pop	ar7
      0002DD EC               [12] 1886 	mov	a,r4
      0002DE B5 03 1B         [24] 1887 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1888 	mov	dptr,#0x2710
      0002E4 E4               [12] 1889 	clr	a
      0002E5 F5 F0            [12] 1890 	mov	b,a
      0002E7 C0 07            [24] 1891 	push	ar7
      0002E9 C0 06            [24] 1892 	push	ar6
      0002EB C0 05            [24] 1893 	push	ar5
      0002ED C0 03            [24] 1894 	push	ar3
      0002EF 12r03r0D         [24] 1895 	lcall	_delay_time
      0002F2 D0 03            [24] 1896 	pop	ar3
      0002F4 D0 05            [24] 1897 	pop	ar5
      0002F6 D0 06            [24] 1898 	pop	ar6
      0002F8 D0 07            [24] 1899 	pop	ar7
      0002FA 80 CC            [24] 1900 	sjmp	00110$
      0002FC                       1901 00118$:
                           0002FC  1902 	C$i2c.h$164$1$81 ==.
                                   1903 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1904 	inc	r7
      0002FD C3               [12] 1905 	clr	c
      0002FE EF               [12] 1906 	mov	a,r7
      0002FF 64 80            [12] 1907 	xrl	a,#0x80
      000301 94 85            [12] 1908 	subb	a,#0x85
      000303 50 03            [24] 1909 	jnc	00155$
      000305 02r02r0A         [24] 1910 	ljmp	00104$
      000308                       1911 00155$:
                           000308  1912 	C$i2c.h$179$1$81 ==.
                                   1913 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1914 	mov	dpl,r5
      00030A 8E 83            [24] 1915 	mov	dph,r6
      00030C                       1916 00119$:
                           00030C  1917 	C$i2c.h$180$1$81 ==.
                           00030C  1918 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1919 	ret
                                   1920 ;------------------------------------------------------------
                                   1921 ;Allocation info for local variables in function 'delay_time'
                                   1922 ;------------------------------------------------------------
                                   1923 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1924 ;index                     Allocated to registers 
                                   1925 ;------------------------------------------------------------
                           00030D  1926 	G$delay_time$0$0 ==.
                           00030D  1927 	C$i2c.h$189$1$81 ==.
                                   1928 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1929 ;	-----------------------------------------
                                   1930 ;	 function delay_time
                                   1931 ;	-----------------------------------------
      00030D                       1932 _delay_time:
      00030D AC 82            [24] 1933 	mov	r4,dpl
      00030F AD 83            [24] 1934 	mov	r5,dph
      000311 AE F0            [24] 1935 	mov	r6,b
      000313 FF               [12] 1936 	mov	r7,a
                           000314  1937 	C$i2c.h$192$1$86 ==.
                                   1938 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1939 	mov	r0,#0x00
      000316 79 00            [12] 1940 	mov	r1,#0x00
      000318 7A 00            [12] 1941 	mov	r2,#0x00
      00031A 7B 00            [12] 1942 	mov	r3,#0x00
      00031C                       1943 00103$:
      00031C C3               [12] 1944 	clr	c
      00031D E8               [12] 1945 	mov	a,r0
      00031E 9C               [12] 1946 	subb	a,r4
      00031F E9               [12] 1947 	mov	a,r1
      000320 9D               [12] 1948 	subb	a,r5
      000321 EA               [12] 1949 	mov	a,r2
      000322 9E               [12] 1950 	subb	a,r6
      000323 EB               [12] 1951 	mov	a,r3
      000324 9F               [12] 1952 	subb	a,r7
      000325 50 0F            [24] 1953 	jnc	00105$
      000327 08               [12] 1954 	inc	r0
      000328 B8 00 09         [24] 1955 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1956 	inc	r1
      00032C B9 00 05         [24] 1957 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1958 	inc	r2
      000330 BA 00 E9         [24] 1959 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1960 	inc	r3
      000334                       1961 00115$:
      000334 80 E6            [24] 1962 	sjmp	00103$
      000336                       1963 00105$:
                           000336  1964 	C$i2c.h$193$1$86 ==.
                           000336  1965 	XG$delay_time$0$0 ==.
      000336 22               [24] 1966 	ret
                                   1967 ;------------------------------------------------------------
                                   1968 ;Allocation info for local variables in function 'i2c_start'
                                   1969 ;------------------------------------------------------------
                           000337  1970 	G$i2c_start$0$0 ==.
                           000337  1971 	C$i2c.h$196$1$86 ==.
                                   1972 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1973 ;	-----------------------------------------
                                   1974 ;	 function i2c_start
                                   1975 ;	-----------------------------------------
      000337                       1976 _i2c_start:
                           000337  1977 	C$i2c.h$198$1$88 ==.
                                   1978 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1979 00101$:
      000337 20 C7 FD         [24] 1980 	jb	_BUSY,00101$
                           00033A  1981 	C$i2c.h$199$1$88 ==.
                                   1982 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1983 	setb	_STA
                           00033C  1984 	C$i2c.h$200$1$88 ==.
                                   1985 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1986 00104$:
      00033C 30 C3 FD         [24] 1987 	jnb	_SI,00104$
                           00033F  1988 	C$i2c.h$201$1$88 ==.
                                   1989 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1990 	clr	_STA
                           000341  1991 	C$i2c.h$202$1$88 ==.
                                   1992 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1993 	clr	_SI
                           000343  1994 	C$i2c.h$203$1$88 ==.
                           000343  1995 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1996 	ret
                                   1997 ;------------------------------------------------------------
                                   1998 ;Allocation info for local variables in function 'i2c_write'
                                   1999 ;------------------------------------------------------------
                                   2000 ;output_data               Allocated to registers 
                                   2001 ;------------------------------------------------------------
                           000344  2002 	G$i2c_write$0$0 ==.
                           000344  2003 	C$i2c.h$206$1$88 ==.
                                   2004 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   2005 ;	-----------------------------------------
                                   2006 ;	 function i2c_write
                                   2007 ;	-----------------------------------------
      000344                       2008 _i2c_write:
      000344 85 82 C2         [24] 2009 	mov	_SMB0DAT,dpl
                           000347  2010 	C$i2c.h$209$1$90 ==.
                                   2011 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       2012 00101$:
                           000347  2013 	C$i2c.h$210$1$90 ==.
                                   2014 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 2015 	jbc	_SI,00112$
      00034A 80 FB            [24] 2016 	sjmp	00101$
      00034C                       2017 00112$:
                           00034C  2018 	C$i2c.h$211$1$90 ==.
                           00034C  2019 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 2020 	ret
                                   2021 ;------------------------------------------------------------
                                   2022 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2023 ;------------------------------------------------------------
                                   2024 ;output_data               Allocated to registers 
                                   2025 ;------------------------------------------------------------
                           00034D  2026 	G$i2c_write_and_stop$0$0 ==.
                           00034D  2027 	C$i2c.h$214$1$90 ==.
                                   2028 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2029 ;	-----------------------------------------
                                   2030 ;	 function i2c_write_and_stop
                                   2031 ;	-----------------------------------------
      00034D                       2032 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2033 	mov	_SMB0DAT,dpl
                           000350  2034 	C$i2c.h$217$1$92 ==.
                                   2035 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2036 	setb	_STO
                           000352  2037 	C$i2c.h$218$1$92 ==.
                                   2038 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2039 00101$:
                           000352  2040 	C$i2c.h$219$1$92 ==.
                                   2041 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2042 	jbc	_SI,00112$
      000355 80 FB            [24] 2043 	sjmp	00101$
      000357                       2044 00112$:
                           000357  2045 	C$i2c.h$220$1$92 ==.
                           000357  2046 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2047 	ret
                                   2048 ;------------------------------------------------------------
                                   2049 ;Allocation info for local variables in function 'i2c_read'
                                   2050 ;------------------------------------------------------------
                                   2051 ;input_data                Allocated to registers 
                                   2052 ;------------------------------------------------------------
                           000358  2053 	G$i2c_read$0$0 ==.
                           000358  2054 	C$i2c.h$223$1$92 ==.
                                   2055 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2056 ;	-----------------------------------------
                                   2057 ;	 function i2c_read
                                   2058 ;	-----------------------------------------
      000358                       2059 _i2c_read:
                           000358  2060 	C$i2c.h$226$1$94 ==.
                                   2061 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2062 00101$:
      000358 30 C3 FD         [24] 2063 	jnb	_SI,00101$
                           00035B  2064 	C$i2c.h$227$1$94 ==.
                                   2065 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2066 	mov	dpl,_SMB0DAT
                           00035E  2067 	C$i2c.h$228$1$94 ==.
                                   2068 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2069 	clr	_SI
                           000360  2070 	C$i2c.h$229$1$94 ==.
                                   2071 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2072 	C$i2c.h$230$1$94 ==.
                           000360  2073 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2074 	ret
                                   2075 ;------------------------------------------------------------
                                   2076 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2077 ;------------------------------------------------------------
                                   2078 ;input_data                Allocated to registers r7 
                                   2079 ;------------------------------------------------------------
                           000361  2080 	G$i2c_read_and_stop$0$0 ==.
                           000361  2081 	C$i2c.h$233$1$94 ==.
                                   2082 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2083 ;	-----------------------------------------
                                   2084 ;	 function i2c_read_and_stop
                                   2085 ;	-----------------------------------------
      000361                       2086 _i2c_read_and_stop:
                           000361  2087 	C$i2c.h$236$1$96 ==.
                                   2088 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2089 00101$:
      000361 30 C3 FD         [24] 2090 	jnb	_SI,00101$
                           000364  2091 	C$i2c.h$237$1$96 ==.
                                   2092 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2093 	mov	r7,_SMB0DAT
                           000366  2094 	C$i2c.h$238$1$96 ==.
                                   2095 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2096 	clr	_SI
                           000368  2097 	C$i2c.h$239$1$96 ==.
                                   2098 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2099 	setb	_STO
                           00036A  2100 	C$i2c.h$240$1$96 ==.
                                   2101 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2102 00104$:
                           00036A  2103 	C$i2c.h$241$1$96 ==.
                                   2104 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2105 	jbc	_SI,00122$
      00036D 80 FB            [24] 2106 	sjmp	00104$
      00036F                       2107 00122$:
                           00036F  2108 	C$i2c.h$242$1$96 ==.
                                   2109 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2110 	mov	dpl,r7
                           000371  2111 	C$i2c.h$243$1$96 ==.
                           000371  2112 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2113 	ret
                                   2114 ;------------------------------------------------------------
                                   2115 ;Allocation info for local variables in function 'i2c_write_data'
                                   2116 ;------------------------------------------------------------
                                   2117 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2118 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2119 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2120 ;addr                      Allocated to registers r7 
                                   2121 ;i                         Allocated to registers 
                                   2122 ;------------------------------------------------------------
                           000372  2123 	G$i2c_write_data$0$0 ==.
                           000372  2124 	C$i2c.h$246$1$96 ==.
                                   2125 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2126 ;	-----------------------------------------
                                   2127 ;	 function i2c_write_data
                                   2128 ;	-----------------------------------------
      000372                       2129 _i2c_write_data:
      000372 AF 82            [24] 2130 	mov	r7,dpl
                           000374  2131 	C$i2c.h$250$1$98 ==.
                                   2132 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2133 	push	ar7
      000376 12r03r37         [24] 2134 	lcall	_i2c_start
      000379 D0 07            [24] 2135 	pop	ar7
                           00037B  2136 	C$i2c.h$251$1$98 ==.
                                   2137 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2138 	mov	a,#0xFE
      00037D 5F               [12] 2139 	anl	a,r7
      00037E F5 82            [12] 2140 	mov	dpl,a
      000380 12r03r44         [24] 2141 	lcall	_i2c_write
                           000383  2142 	C$i2c.h$252$1$98 ==.
                                   2143 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2144 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2145 	lcall	_i2c_write
                           000389  2146 	C$i2c.h$253$1$98 ==.
                                   2147 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2148 	mov	r7,#0x00
      00038B                       2149 00103$:
      00038B AD*09            [24] 2150 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2151 	mov	r6,#0x00
      00038F 1D               [12] 2152 	dec	r5
      000390 BD FF 01         [24] 2153 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2154 	dec	r6
      000394                       2155 00114$:
      000394 8F 03            [24] 2156 	mov	ar3,r7
      000396 7C 00            [12] 2157 	mov	r4,#0x00
      000398 C3               [12] 2158 	clr	c
      000399 EB               [12] 2159 	mov	a,r3
      00039A 9D               [12] 2160 	subb	a,r5
      00039B EC               [12] 2161 	mov	a,r4
      00039C 64 80            [12] 2162 	xrl	a,#0x80
      00039E 8E F0            [24] 2163 	mov	b,r6
      0003A0 63 F0 80         [24] 2164 	xrl	b,#0x80
      0003A3 95 F0            [12] 2165 	subb	a,b
      0003A5 50 1F            [24] 2166 	jnc	00101$
                           0003A7  2167 	C$i2c.h$254$1$98 ==.
                                   2168 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2169 	mov	a,r7
      0003A8 25*06            [12] 2170 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2171 	mov	r4,a
      0003AB E4               [12] 2172 	clr	a
      0003AC 35*07            [12] 2173 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2174 	mov	r5,a
      0003AF AE*08            [24] 2175 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2176 	mov	dpl,r4
      0003B3 8D 83            [24] 2177 	mov	dph,r5
      0003B5 8E F0            [24] 2178 	mov	b,r6
      0003B7 12r00r00         [24] 2179 	lcall	__gptrget
      0003BA F5 82            [12] 2180 	mov	dpl,a
      0003BC C0 07            [24] 2181 	push	ar7
      0003BE 12r03r44         [24] 2182 	lcall	_i2c_write
      0003C1 D0 07            [24] 2183 	pop	ar7
                           0003C3  2184 	C$i2c.h$253$1$98 ==.
                                   2185 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2186 	inc	r7
      0003C4 80 C5            [24] 2187 	sjmp	00103$
      0003C6                       2188 00101$:
                           0003C6  2189 	C$i2c.h$255$1$98 ==.
                                   2190 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2191 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2192 	mov	r7,#0x00
      0003CA 1E               [12] 2193 	dec	r6
      0003CB BE FF 01         [24] 2194 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2195 	dec	r7
      0003CF                       2196 00116$:
      0003CF EE               [12] 2197 	mov	a,r6
      0003D0 25*06            [12] 2198 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2199 	mov	r6,a
      0003D3 EF               [12] 2200 	mov	a,r7
      0003D4 35*07            [12] 2201 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2202 	mov	r7,a
      0003D7 AD*08            [24] 2203 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2204 	mov	dpl,r6
      0003DB 8F 83            [24] 2205 	mov	dph,r7
      0003DD 8D F0            [24] 2206 	mov	b,r5
      0003DF 12r00r00         [24] 2207 	lcall	__gptrget
      0003E2 F5 82            [12] 2208 	mov	dpl,a
      0003E4 12r03r4D         [24] 2209 	lcall	_i2c_write_and_stop
                           0003E7  2210 	C$i2c.h$256$1$98 ==.
                           0003E7  2211 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2212 	ret
                                   2213 ;------------------------------------------------------------
                                   2214 ;Allocation info for local variables in function 'i2c_read_data'
                                   2215 ;------------------------------------------------------------
                                   2216 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2217 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2218 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2219 ;addr                      Allocated to registers r7 
                                   2220 ;j                         Allocated to registers 
                                   2221 ;------------------------------------------------------------
                           0003E8  2222 	G$i2c_read_data$0$0 ==.
                           0003E8  2223 	C$i2c.h$259$1$98 ==.
                                   2224 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2225 ;	-----------------------------------------
                                   2226 ;	 function i2c_read_data
                                   2227 ;	-----------------------------------------
      0003E8                       2228 _i2c_read_data:
      0003E8 AF 82            [24] 2229 	mov	r7,dpl
                           0003EA  2230 	C$i2c.h$262$1$100 ==.
                                   2231 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2232 	push	ar7
      0003EC 12r03r37         [24] 2233 	lcall	_i2c_start
      0003EF D0 07            [24] 2234 	pop	ar7
                           0003F1  2235 	C$i2c.h$263$1$100 ==.
                                   2236 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2237 	mov	ar6,r7
      0003F3 74 FE            [12] 2238 	mov	a,#0xFE
      0003F5 5E               [12] 2239 	anl	a,r6
      0003F6 F5 82            [12] 2240 	mov	dpl,a
      0003F8 C0 07            [24] 2241 	push	ar7
      0003FA 12r03r44         [24] 2242 	lcall	_i2c_write
                           0003FD  2243 	C$i2c.h$264$1$100 ==.
                                   2244 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2245 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2246 	lcall	_i2c_write_and_stop
                           000403  2247 	C$i2c.h$265$1$100 ==.
                                   2248 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2249 	lcall	_i2c_start
      000406 D0 07            [24] 2250 	pop	ar7
                           000408  2251 	C$i2c.h$266$1$100 ==.
                                   2252 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2253 	mov	a,#0x01
      00040A 4F               [12] 2254 	orl	a,r7
      00040B F5 82            [12] 2255 	mov	dpl,a
      00040D 12r03r44         [24] 2256 	lcall	_i2c_write
                           000410  2257 	C$i2c.h$267$1$100 ==.
                                   2258 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2259 	mov	r7,#0x00
      000412                       2260 00103$:
      000412 AD*0E            [24] 2261 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2262 	mov	r6,#0x00
      000416 1D               [12] 2263 	dec	r5
      000417 BD FF 01         [24] 2264 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2265 	dec	r6
      00041B                       2266 00114$:
      00041B 8F 03            [24] 2267 	mov	ar3,r7
      00041D 7C 00            [12] 2268 	mov	r4,#0x00
      00041F C3               [12] 2269 	clr	c
      000420 EB               [12] 2270 	mov	a,r3
      000421 9D               [12] 2271 	subb	a,r5
      000422 EC               [12] 2272 	mov	a,r4
      000423 64 80            [12] 2273 	xrl	a,#0x80
      000425 8E F0            [24] 2274 	mov	b,r6
      000427 63 F0 80         [24] 2275 	xrl	b,#0x80
      00042A 95 F0            [12] 2276 	subb	a,b
      00042C 50 2E            [24] 2277 	jnc	00101$
                           00042E  2278 	C$i2c.h$269$2$101 ==.
                                   2279 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2280 	setb	_AA
                           000430  2281 	C$i2c.h$270$2$101 ==.
                                   2282 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2283 	mov	a,r7
      000431 25*0B            [12] 2284 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2285 	mov	r4,a
      000434 E4               [12] 2286 	clr	a
      000435 35*0C            [12] 2287 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2288 	mov	r5,a
      000438 AE*0D            [24] 2289 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2290 	push	ar7
      00043C C0 06            [24] 2291 	push	ar6
      00043E C0 05            [24] 2292 	push	ar5
      000440 C0 04            [24] 2293 	push	ar4
      000442 12r03r58         [24] 2294 	lcall	_i2c_read
      000445 AB 82            [24] 2295 	mov	r3,dpl
      000447 D0 04            [24] 2296 	pop	ar4
      000449 D0 05            [24] 2297 	pop	ar5
      00044B D0 06            [24] 2298 	pop	ar6
      00044D D0 07            [24] 2299 	pop	ar7
      00044F 8C 82            [24] 2300 	mov	dpl,r4
      000451 8D 83            [24] 2301 	mov	dph,r5
      000453 8E F0            [24] 2302 	mov	b,r6
      000455 EB               [12] 2303 	mov	a,r3
      000456 12r00r00         [24] 2304 	lcall	__gptrput
                           000459  2305 	C$i2c.h$267$1$100 ==.
                                   2306 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2307 	inc	r7
      00045A 80 B6            [24] 2308 	sjmp	00103$
      00045C                       2309 00101$:
                           00045C  2310 	C$i2c.h$272$1$100 ==.
                                   2311 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2312 	clr	_AA
                           00045E  2313 	C$i2c.h$273$1$100 ==.
                                   2314 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2315 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2316 	mov	r7,#0x00
      000462 1E               [12] 2317 	dec	r6
      000463 BE FF 01         [24] 2318 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2319 	dec	r7
      000467                       2320 00116$:
      000467 EE               [12] 2321 	mov	a,r6
      000468 25*0B            [12] 2322 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2323 	mov	r6,a
      00046B EF               [12] 2324 	mov	a,r7
      00046C 35*0C            [12] 2325 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2326 	mov	r7,a
      00046F AD*0D            [24] 2327 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2328 	push	ar7
      000473 C0 06            [24] 2329 	push	ar6
      000475 C0 05            [24] 2330 	push	ar5
      000477 12r03r61         [24] 2331 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2332 	mov	r4,dpl
      00047C D0 05            [24] 2333 	pop	ar5
      00047E D0 06            [24] 2334 	pop	ar6
      000480 D0 07            [24] 2335 	pop	ar7
      000482 8E 82            [24] 2336 	mov	dpl,r6
      000484 8F 83            [24] 2337 	mov	dph,r7
      000486 8D F0            [24] 2338 	mov	b,r5
      000488 EC               [12] 2339 	mov	a,r4
      000489 12r00r00         [24] 2340 	lcall	__gptrput
                           00048C  2341 	C$i2c.h$274$1$100 ==.
                           00048C  2342 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2343 	ret
                                   2344 ;------------------------------------------------------------
                                   2345 ;Allocation info for local variables in function 'Accel_Init'
                                   2346 ;------------------------------------------------------------
                                   2347 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2348 ;------------------------------------------------------------
                           00048D  2349 	G$Accel_Init$0$0 ==.
                           00048D  2350 	C$i2c.h$283$1$100 ==.
                                   2351 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2352 ;	-----------------------------------------
                                   2353 ;	 function Accel_Init
                                   2354 ;	-----------------------------------------
      00048D                       2355 _Accel_Init:
                           00048D  2356 	C$i2c.h$287$1$103 ==.
                                   2357 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2358 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2359 	C$i2c.h$289$1$103 ==.
                                   2360 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2361 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2362 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2363 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2364 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2365 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2366 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2367 	lcall	_i2c_write_data
                           0004A5  2368 	C$i2c.h$290$1$103 ==.
                                   2369 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2370 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2371 	C$i2c.h$292$1$103 ==.
                                   2372 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2373 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2374 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2375 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2376 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2377 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2378 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2379 	lcall	_i2c_write_data
                           0004BD  2380 	C$i2c.h$293$1$103 ==.
                                   2381 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2382 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2383 	C$i2c.h$294$1$103 ==.
                                   2384 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2385 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2386 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2387 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2388 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2389 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2390 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2391 	lcall	_i2c_write_data
                           0004D5  2392 	C$i2c.h$298$1$103 ==.
                           0004D5  2393 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2394 	ret
                                   2395 ;------------------------------------------------------------
                                   2396 ;Allocation info for local variables in function 'main'
                                   2397 ;------------------------------------------------------------
                           0004D6  2398 	G$main$0$0 ==.
                           0004D6  2399 	C$lab6.c$81$1$103 ==.
                                   2400 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:81: void main(void)
                                   2401 ;	-----------------------------------------
                                   2402 ;	 function main
                                   2403 ;	-----------------------------------------
      0004D6                       2404 _main:
                           0004D6  2405 	C$lab6.c$83$1$123 ==.
                                   2406 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:83: Sys_Init();
      0004D6 12r00r30         [24] 2407 	lcall	_Sys_Init
                           0004D9  2408 	C$lab6.c$84$1$123 ==.
                                   2409 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:84: putchar(' '); //the quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2410 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2411 	lcall	_putchar
                           0004DF  2412 	C$lab6.c$85$1$123 ==.
                                   2413 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:85: Port_Init();
      0004DF 12r10rD6         [24] 2414 	lcall	_Port_Init
                           0004E2  2415 	C$lab6.c$86$1$123 ==.
                                   2416 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:86: XBR0_Init();
      0004E2 12r11r06         [24] 2417 	lcall	_XBR0_Init
                           0004E5  2418 	C$lab6.c$87$1$123 ==.
                                   2419 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:87: PCA_Init();
      0004E5 12r10rEE         [24] 2420 	lcall	_PCA_Init
                           0004E8  2421 	C$lab6.c$88$1$123 ==.
                                   2422 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:88: SMB_Init();
      0004E8 12r11r0A         [24] 2423 	lcall	_SMB_Init
                           0004EB  2424 	C$lab6.c$89$1$123 ==.
                                   2425 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:89: ADC_Init();
      0004EB 12r11r10         [24] 2426 	lcall	_ADC_Init
                           0004EE  2427 	C$lab6.c$91$1$123 ==.
                                   2428 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:91: count =0;
      0004EE E4               [12] 2429 	clr	a
      0004EF F5*10            [12] 2430 	mov	_count,a
      0004F1 F5*11            [12] 2431 	mov	(_count + 1),a
                           0004F3  2432 	C$lab6.c$93$1$123 ==.
                                   2433 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:93: RUDDER_PW= PW_CENTER_RUDDER;
      0004F3 85*1A*24         [24] 2434 	mov	_RUDDER_PW,_PW_CENTER_RUDDER
      0004F6 85*1B*25         [24] 2435 	mov	(_RUDDER_PW + 1),(_PW_CENTER_RUDDER + 1)
                           0004F9  2436 	C$lab6.c$94$1$123 ==.
                                   2437 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:94: ANGLE_PW = PW_CENTER_ANGLE;
      0004F9 85*20*28         [24] 2438 	mov	_ANGLE_PW,_PW_CENTER_ANGLE
      0004FC 85*21*29         [24] 2439 	mov	(_ANGLE_PW + 1),(_PW_CENTER_ANGLE + 1)
                           0004FF  2440 	C$lab6.c$95$1$123 ==.
                                   2441 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:95: RTHRUST_PW = PW_NUET_THRUST;
      0004FF 85*14*2C         [24] 2442 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      000502 85*15*2D         [24] 2443 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           000505  2444 	C$lab6.c$96$1$123 ==.
                                   2445 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:96: LTHRUST_PW = PW_NUET_THRUST;
      000505 85*14*2E         [24] 2446 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      000508 85*15*2F         [24] 2447 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           00050B  2448 	C$lab6.c$98$1$123 ==.
                                   2449 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:98: RDR_lo_to_hi = 0xFFFF - RUDDER_PW;
      00050B 14               [12] 2450 	dec	a
      00050C C3               [12] 2451 	clr	c
      00050D 95*24            [12] 2452 	subb	a,_RUDDER_PW
      00050F F5*26            [12] 2453 	mov	_RDR_lo_to_hi,a
      000511 74 FF            [12] 2454 	mov	a,#0xFF
      000513 95*25            [12] 2455 	subb	a,(_RUDDER_PW + 1)
      000515 F5*27            [12] 2456 	mov	(_RDR_lo_to_hi + 1),a
                           000517  2457 	C$lab6.c$99$1$123 ==.
                                   2458 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:99: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      000517 74 FF            [12] 2459 	mov	a,#0xFF
      000519 C3               [12] 2460 	clr	c
      00051A 95*2C            [12] 2461 	subb	a,_RTHRUST_PW
      00051C F5*30            [12] 2462 	mov	_RTRST_lo_to_hi,a
      00051E 74 FF            [12] 2463 	mov	a,#0xFF
      000520 95*2D            [12] 2464 	subb	a,(_RTHRUST_PW + 1)
      000522 F5*31            [12] 2465 	mov	(_RTRST_lo_to_hi + 1),a
                           000524  2466 	C$lab6.c$100$1$123 ==.
                                   2467 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:100: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      000524 74 FF            [12] 2468 	mov	a,#0xFF
      000526 C3               [12] 2469 	clr	c
      000527 95*2E            [12] 2470 	subb	a,_LTHRUST_PW
      000529 F5*32            [12] 2471 	mov	_LTRST_lo_to_hi,a
      00052B 74 FF            [12] 2472 	mov	a,#0xFF
      00052D 95*2F            [12] 2473 	subb	a,(_LTHRUST_PW + 1)
      00052F F5*33            [12] 2474 	mov	(_LTRST_lo_to_hi + 1),a
                           000531  2475 	C$lab6.c$101$1$123 ==.
                                   2476 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:101: AGL_lo_to_hi = 0xFFFF - ANGLE_PW;
      000531 74 FF            [12] 2477 	mov	a,#0xFF
      000533 C3               [12] 2478 	clr	c
      000534 95*28            [12] 2479 	subb	a,_ANGLE_PW
      000536 F5*2A            [12] 2480 	mov	_AGL_lo_to_hi,a
      000538 74 FF            [12] 2481 	mov	a,#0xFF
      00053A 95*29            [12] 2482 	subb	a,(_ANGLE_PW + 1)
      00053C F5*2B            [12] 2483 	mov	(_AGL_lo_to_hi + 1),a
                           00053E  2484 	C$lab6.c$103$1$123 ==.
                                   2485 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:103: PCA0CP0 = RDR_lo_to_hi;
      00053E 85*26 EA         [24] 2486 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      000541 85*27 FA         [24] 2487 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           000544  2488 	C$lab6.c$104$1$123 ==.
                                   2489 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:104: PCA0CP1 = AGL_lo_to_hi;	
      000544 85*2A EB         [24] 2490 	mov	((_PCA0CP1 >> 0) & 0xFF),_AGL_lo_to_hi
      000547 85*2B FB         [24] 2491 	mov	((_PCA0CP1 >> 8) & 0xFF),(_AGL_lo_to_hi + 1)
                           00054A  2492 	C$lab6.c$105$1$123 ==.
                                   2493 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:105: PCA0CP2 = RTRST_lo_to_hi;
      00054A 85*30 EC         [24] 2494 	mov	((_PCA0CP2 >> 0) & 0xFF),_RTRST_lo_to_hi
      00054D 85*31 FC         [24] 2495 	mov	((_PCA0CP2 >> 8) & 0xFF),(_RTRST_lo_to_hi + 1)
                           000550  2496 	C$lab6.c$106$1$123 ==.
                                   2497 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:106: PCA0CP3 = LTRST_lo_to_hi;
      000550 85*32 ED         [24] 2498 	mov	((_PCA0CP3 >> 0) & 0xFF),_LTRST_lo_to_hi
      000553 85*33 FD         [24] 2499 	mov	((_PCA0CP3 >> 8) & 0xFF),(_LTRST_lo_to_hi + 1)
                           000556  2500 	C$lab6.c$107$1$123 ==.
                                   2501 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:107: kpkd();
      000556 12r05rD6         [24] 2502 	lcall	_kpkd
                           000559  2503 	C$lab6.c$109$1$123 ==.
                                   2504 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:109: Calibrate();
      000559 12r05r74         [24] 2505 	lcall	_Calibrate
                           00055C  2506 	C$lab6.c$112$1$123 ==.
                                   2507 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:112: while (1)
      00055C                       2508 00104$:
                           00055C  2509 	C$lab6.c$114$2$124 ==.
                                   2510 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:114: wait();
      00055C 12r10rBB         [24] 2511 	lcall	_wait
                           00055F  2512 	C$lab6.c$115$2$124 ==.
                                   2513 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:115: if (count +1 % 2 ==0)
      00055F 74 01            [12] 2514 	mov	a,#0x01
      000561 25*10            [12] 2515 	add	a,_count
      000563 FE               [12] 2516 	mov	r6,a
      000564 E4               [12] 2517 	clr	a
      000565 35*11            [12] 2518 	addc	a,(_count + 1)
      000567 FF               [12] 2519 	mov	r7,a
      000568 4E               [12] 2520 	orl	a,r6
      000569 70 03            [24] 2521 	jnz	00102$
                           00056B  2522 	C$lab6.c$117$3$125 ==.
                                   2523 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:117: Steering_func();
      00056B 12r06r84         [24] 2524 	lcall	_Steering_func
      00056E                       2525 00102$:
                           00056E  2526 	C$lab6.c$119$2$124 ==.
                                   2527 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:119: Change_D();
      00056E 12r06r22         [24] 2528 	lcall	_Change_D
      000571 80 E9            [24] 2529 	sjmp	00104$
                           000573  2530 	C$lab6.c$123$1$123 ==.
                           000573  2531 	XG$main$0$0 ==.
      000573 22               [24] 2532 	ret
                                   2533 ;------------------------------------------------------------
                                   2534 ;Allocation info for local variables in function 'Calibrate'
                                   2535 ;------------------------------------------------------------
                           000574  2536 	G$Calibrate$0$0 ==.
                           000574  2537 	C$lab6.c$125$1$123 ==.
                                   2538 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:125: void Calibrate(void)
                                   2539 ;	-----------------------------------------
                                   2540 ;	 function Calibrate
                                   2541 ;	-----------------------------------------
      000574                       2542 _Calibrate:
                           000574  2543 	C$lab6.c$129$1$127 ==.
                                   2544 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:129: Rudder_cal();
      000574 12r07r6F         [24] 2545 	lcall	_Rudder_cal
                           000577  2546 	C$lab6.c$130$1$127 ==.
                                   2547 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:130: RUDDER_PW= PW_CENTER_RUDDER;
      000577 85*1A*24         [24] 2548 	mov	_RUDDER_PW,_PW_CENTER_RUDDER
      00057A 85*1B*25         [24] 2549 	mov	(_RUDDER_PW + 1),(_PW_CENTER_RUDDER + 1)
                           00057D  2550 	C$lab6.c$131$1$127 ==.
                                   2551 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:131: RDR_lo_to_hi = 0xFFFF - RUDDER_PW;
      00057D 74 FF            [12] 2552 	mov	a,#0xFF
      00057F C3               [12] 2553 	clr	c
      000580 95*24            [12] 2554 	subb	a,_RUDDER_PW
      000582 F5*26            [12] 2555 	mov	_RDR_lo_to_hi,a
      000584 74 FF            [12] 2556 	mov	a,#0xFF
      000586 95*25            [12] 2557 	subb	a,(_RUDDER_PW + 1)
      000588 F5*27            [12] 2558 	mov	(_RDR_lo_to_hi + 1),a
                           00058A  2559 	C$lab6.c$132$1$127 ==.
                                   2560 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:132: PCA0CP0 = RDR_lo_to_hi;
      00058A 85*26 EA         [24] 2561 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      00058D 85*27 FA         [24] 2562 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           000590  2563 	C$lab6.c$134$1$127 ==.
                                   2564 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:134: Angle_cal();
      000590 12r0Ar04         [24] 2565 	lcall	_Angle_cal
                           000593  2566 	C$lab6.c$135$1$127 ==.
                                   2567 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:135: ANGLE_PW = PW_CENTER_ANGLE;
      000593 85*20*28         [24] 2568 	mov	_ANGLE_PW,_PW_CENTER_ANGLE
      000596 85*21*29         [24] 2569 	mov	(_ANGLE_PW + 1),(_PW_CENTER_ANGLE + 1)
                           000599  2570 	C$lab6.c$136$1$127 ==.
                                   2571 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:136: AGL_lo_to_hi = 0xFFFF - ANGLE_PW;
      000599 74 FF            [12] 2572 	mov	a,#0xFF
      00059B C3               [12] 2573 	clr	c
      00059C 95*28            [12] 2574 	subb	a,_ANGLE_PW
      00059E F5*2A            [12] 2575 	mov	_AGL_lo_to_hi,a
      0005A0 74 FF            [12] 2576 	mov	a,#0xFF
      0005A2 95*29            [12] 2577 	subb	a,(_ANGLE_PW + 1)
      0005A4 F5*2B            [12] 2578 	mov	(_AGL_lo_to_hi + 1),a
                           0005A6  2579 	C$lab6.c$137$1$127 ==.
                                   2580 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:137: PCA0CP1 = AGL_lo_to_hi;
      0005A6 85*2A EB         [24] 2581 	mov	((_PCA0CP1 >> 0) & 0xFF),_AGL_lo_to_hi
      0005A9 85*2B FB         [24] 2582 	mov	((_PCA0CP1 >> 8) & 0xFF),(_AGL_lo_to_hi + 1)
                           0005AC  2583 	C$lab6.c$139$1$127 ==.
                                   2584 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:139: Thrust_cal();
      0005AC 12r0Cr99         [24] 2585 	lcall	_Thrust_cal
                           0005AF  2586 	C$lab6.c$140$1$127 ==.
                                   2587 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:140: RTHRUST_PW = PW_NUET_THRUST;
      0005AF 85*14*2C         [24] 2588 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      0005B2 85*15*2D         [24] 2589 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           0005B5  2590 	C$lab6.c$141$1$127 ==.
                                   2591 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:141: LTHRUST_PW = PW_NUET_THRUST;
      0005B5 85*14*2E         [24] 2592 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      0005B8 85*15*2F         [24] 2593 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           0005BB  2594 	C$lab6.c$142$1$127 ==.
                                   2595 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:142: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      0005BB 74 FF            [12] 2596 	mov	a,#0xFF
      0005BD C3               [12] 2597 	clr	c
      0005BE 95*2C            [12] 2598 	subb	a,_RTHRUST_PW
      0005C0 F5*30            [12] 2599 	mov	_RTRST_lo_to_hi,a
      0005C2 74 FF            [12] 2600 	mov	a,#0xFF
      0005C4 95*2D            [12] 2601 	subb	a,(_RTHRUST_PW + 1)
      0005C6 F5*31            [12] 2602 	mov	(_RTRST_lo_to_hi + 1),a
                           0005C8  2603 	C$lab6.c$143$1$127 ==.
                                   2604 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:143: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      0005C8 74 FF            [12] 2605 	mov	a,#0xFF
      0005CA C3               [12] 2606 	clr	c
      0005CB 95*2E            [12] 2607 	subb	a,_LTHRUST_PW
      0005CD F5*32            [12] 2608 	mov	_LTRST_lo_to_hi,a
      0005CF 74 FF            [12] 2609 	mov	a,#0xFF
      0005D1 95*2F            [12] 2610 	subb	a,(_LTHRUST_PW + 1)
      0005D3 F5*33            [12] 2611 	mov	(_LTRST_lo_to_hi + 1),a
                           0005D5  2612 	C$lab6.c$144$1$127 ==.
                           0005D5  2613 	XG$Calibrate$0$0 ==.
      0005D5 22               [24] 2614 	ret
                                   2615 ;------------------------------------------------------------
                                   2616 ;Allocation info for local variables in function 'kpkd'
                                   2617 ;------------------------------------------------------------
                           0005D6  2618 	G$kpkd$0$0 ==.
                           0005D6  2619 	C$lab6.c$146$1$127 ==.
                                   2620 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:146: void kpkd(void)
                                   2621 ;	-----------------------------------------
                                   2622 ;	 function kpkd
                                   2623 ;	-----------------------------------------
      0005D6                       2624 _kpkd:
                           0005D6  2625 	C$lab6.c$148$1$129 ==.
                                   2626 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:148: lcd_clear();
      0005D6 12r00rE1         [24] 2627 	lcall	_lcd_clear
                           0005D9  2628 	C$lab6.c$149$1$129 ==.
                                   2629 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:149: lcd_print("Please enter a kp value:\n ");
      0005D9 74r29            [12] 2630 	mov	a,#___str_3
      0005DB C0 E0            [24] 2631 	push	acc
      0005DD 74s00            [12] 2632 	mov	a,#(___str_3 >> 8)
      0005DF C0 E0            [24] 2633 	push	acc
      0005E1 74 80            [12] 2634 	mov	a,#0x80
      0005E3 C0 E0            [24] 2635 	push	acc
      0005E5 12r00r5C         [24] 2636 	lcall	_lcd_print
      0005E8 15 81            [12] 2637 	dec	sp
      0005EA 15 81            [12] 2638 	dec	sp
      0005EC 15 81            [12] 2639 	dec	sp
                           0005EE  2640 	C$lab6.c$150$1$129 ==.
                                   2641 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:150: kp = kpd_input(0);
      0005EE 75 82 00         [24] 2642 	mov	dpl,#0x00
      0005F1 12r01r99         [24] 2643 	lcall	_kpd_input
      0005F4 85 82*40         [24] 2644 	mov	_kp,dpl
      0005F7 85 83*41         [24] 2645 	mov	(_kp + 1),dph
                           0005FA  2646 	C$lab6.c$151$1$129 ==.
                                   2647 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:151: lcd_clear();
      0005FA 12r00rE1         [24] 2648 	lcall	_lcd_clear
                           0005FD  2649 	C$lab6.c$152$1$129 ==.
                                   2650 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:152: lcd_print("Please enter a kd value:\n ");
      0005FD 74r44            [12] 2651 	mov	a,#___str_4
      0005FF C0 E0            [24] 2652 	push	acc
      000601 74s00            [12] 2653 	mov	a,#(___str_4 >> 8)
      000603 C0 E0            [24] 2654 	push	acc
      000605 74 80            [12] 2655 	mov	a,#0x80
      000607 C0 E0            [24] 2656 	push	acc
      000609 12r00r5C         [24] 2657 	lcall	_lcd_print
      00060C 15 81            [12] 2658 	dec	sp
      00060E 15 81            [12] 2659 	dec	sp
      000610 15 81            [12] 2660 	dec	sp
                           000612  2661 	C$lab6.c$153$1$129 ==.
                                   2662 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:153: kd = kpd_input(0);
      000612 75 82 00         [24] 2663 	mov	dpl,#0x00
      000615 12r01r99         [24] 2664 	lcall	_kpd_input
      000618 85 82*42         [24] 2665 	mov	_kd,dpl
      00061B 85 83*43         [24] 2666 	mov	(_kd + 1),dph
                           00061E  2667 	C$lab6.c$154$1$129 ==.
                                   2668 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:154: lcd_clear();
      00061E 12r00rE1         [24] 2669 	lcall	_lcd_clear
                           000621  2670 	C$lab6.c$155$1$129 ==.
                           000621  2671 	XG$kpkd$0$0 ==.
      000621 22               [24] 2672 	ret
                                   2673 ;------------------------------------------------------------
                                   2674 ;Allocation info for local variables in function 'Change_D'
                                   2675 ;------------------------------------------------------------
                                   2676 ;distance                  Allocated to registers r6 r7 
                                   2677 ;------------------------------------------------------------
                           000622  2678 	G$Change_D$0$0 ==.
                           000622  2679 	C$lab6.c$158$1$129 ==.
                                   2680 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:158: void Change_D(void)
                                   2681 ;	-----------------------------------------
                                   2682 ;	 function Change_D
                                   2683 ;	-----------------------------------------
      000622                       2684 _Change_D:
                           000622  2685 	C$lab6.c$160$1$129 ==.
                                   2686 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:160: unsigned int distance=100;
      000622 7E 64            [12] 2687 	mov	r6,#0x64
      000624 7F 00            [12] 2688 	mov	r7,#0x00
                           000626  2689 	C$lab6.c$161$1$131 ==.
                                   2690 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:161: if (count +1 % 4 == 0)
      000626 74 01            [12] 2691 	mov	a,#0x01
      000628 25*10            [12] 2692 	add	a,_count
      00062A FC               [12] 2693 	mov	r4,a
      00062B E4               [12] 2694 	clr	a
      00062C 35*11            [12] 2695 	addc	a,(_count + 1)
      00062E FD               [12] 2696 	mov	r5,a
      00062F 4C               [12] 2697 	orl	a,r4
      000630 70 07            [24] 2698 	jnz	00102$
                           000632  2699 	C$lab6.c$163$2$132 ==.
                                   2700 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:163: distance = Read_Ranger();
      000632 12r06r5E         [24] 2701 	lcall	_Read_Ranger
      000635 AE 82            [24] 2702 	mov	r6,dpl
      000637 AF 83            [24] 2703 	mov	r7,dph
      000639                       2704 00102$:
                           000639  2705 	C$lab6.c$165$1$131 ==.
                                   2706 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:165: if (distance < 50)
      000639 C3               [12] 2707 	clr	c
      00063A EE               [12] 2708 	mov	a,r6
      00063B 94 32            [12] 2709 	subb	a,#0x32
      00063D EF               [12] 2710 	mov	a,r7
      00063E 94 00            [12] 2711 	subb	a,#0x00
      000640 50 1B            [24] 2712 	jnc	00105$
                           000642  2713 	C$lab6.c$167$2$133 ==.
                                   2714 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:167: desired_D = (desired_D + 1800) % 3600;
      000642 74 08            [12] 2715 	mov	a,#0x08
      000644 25*34            [12] 2716 	add	a,_desired_D
      000646 F5 82            [12] 2717 	mov	dpl,a
      000648 74 07            [12] 2718 	mov	a,#0x07
      00064A 35*35            [12] 2719 	addc	a,(_desired_D + 1)
      00064C F5 83            [12] 2720 	mov	dph,a
      00064E 75*00 10         [24] 2721 	mov	__modsint_PARM_2,#0x10
      000651 75*01 0E         [24] 2722 	mov	(__modsint_PARM_2 + 1),#0x0E
      000654 12r00r00         [24] 2723 	lcall	__modsint
      000657 85 82*34         [24] 2724 	mov	_desired_D,dpl
      00065A 85 83*35         [24] 2725 	mov	(_desired_D + 1),dph
      00065D                       2726 00105$:
                           00065D  2727 	C$lab6.c$169$1$131 ==.
                           00065D  2728 	XG$Change_D$0$0 ==.
      00065D 22               [24] 2729 	ret
                                   2730 ;------------------------------------------------------------
                                   2731 ;Allocation info for local variables in function 'Read_Ranger'
                                   2732 ;------------------------------------------------------------
                                   2733 ;r_addr                    Allocated to registers 
                                   2734 ;read                      Allocated to registers 
                                   2735 ;------------------------------------------------------------
                           00065E  2736 	G$Read_Ranger$0$0 ==.
                           00065E  2737 	C$lab6.c$171$1$131 ==.
                                   2738 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:171: unsigned int Read_Ranger(void)
                                   2739 ;	-----------------------------------------
                                   2740 ;	 function Read_Ranger
                                   2741 ;	-----------------------------------------
      00065E                       2742 _Read_Ranger:
                           00065E  2743 	C$lab6.c$177$1$135 ==.
                                   2744 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:177: i2c_read_data(r_addr, 2, r_data, 2);
      00065E 75*0Br3E         [24] 2745 	mov	_i2c_read_data_PARM_3,#_r_data
      000661 75*0C 00         [24] 2746 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000664 75*0D 40         [24] 2747 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000667 75*0A 02         [24] 2748 	mov	_i2c_read_data_PARM_2,#0x02
      00066A 75*0E 02         [24] 2749 	mov	_i2c_read_data_PARM_4,#0x02
      00066D 75 82 E0         [24] 2750 	mov	dpl,#0xE0
      000670 12r03rE8         [24] 2751 	lcall	_i2c_read_data
                           000673  2752 	C$lab6.c$178$1$135 ==.
                                   2753 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:178: read = (((unsigned int) r_data[0] <<8) | r_data[1]);
      000673 AF*3E            [24] 2754 	mov	r7,_r_data
      000675 7E 00            [12] 2755 	mov	r6,#0x00
      000677 AC*3F            [24] 2756 	mov	r4,(_r_data + 0x0001)
      000679 7D 00            [12] 2757 	mov	r5,#0x00
      00067B EC               [12] 2758 	mov	a,r4
      00067C 4E               [12] 2759 	orl	a,r6
      00067D F5 82            [12] 2760 	mov	dpl,a
      00067F ED               [12] 2761 	mov	a,r5
      000680 4F               [12] 2762 	orl	a,r7
      000681 F5 83            [12] 2763 	mov	dph,a
                           000683  2764 	C$lab6.c$179$1$135 ==.
                                   2765 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:179: return read;
                           000683  2766 	C$lab6.c$180$1$135 ==.
                           000683  2767 	XG$Read_Ranger$0$0 ==.
      000683 22               [24] 2768 	ret
                                   2769 ;------------------------------------------------------------
                                   2770 ;Allocation info for local variables in function 'Steering_func'
                                   2771 ;------------------------------------------------------------
                           000684  2772 	G$Steering_func$0$0 ==.
                           000684  2773 	C$lab6.c$182$1$135 ==.
                                   2774 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:182: void Steering_func(void)    ///FUNCTION TO HOLD ACTIONS FOR STEERING
                                   2775 ;	-----------------------------------------
                                   2776 ;	 function Steering_func
                                   2777 ;	-----------------------------------------
      000684                       2778 _Steering_func:
                           000684  2779 	C$lab6.c$184$1$137 ==.
                                   2780 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:184: actual_D = ReadCompass();
      000684 12r07r49         [24] 2781 	lcall	_ReadCompass
      000687 85 82*36         [24] 2782 	mov	_actual_D,dpl
      00068A 85 83*37         [24] 2783 	mov	(_actual_D + 1),dph
                           00068D  2784 	C$lab6.c$185$1$137 ==.
                                   2785 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:185: offset = (unsigned int)((actual_D +3600- desired_D ) % 3600);
      00068D 74 10            [12] 2786 	mov	a,#0x10
      00068F 25*36            [12] 2787 	add	a,_actual_D
      000691 FE               [12] 2788 	mov	r6,a
      000692 74 0E            [12] 2789 	mov	a,#0x0E
      000694 35*37            [12] 2790 	addc	a,(_actual_D + 1)
      000696 FF               [12] 2791 	mov	r7,a
      000697 EE               [12] 2792 	mov	a,r6
      000698 C3               [12] 2793 	clr	c
      000699 95*34            [12] 2794 	subb	a,_desired_D
      00069B F5 82            [12] 2795 	mov	dpl,a
      00069D EF               [12] 2796 	mov	a,r7
      00069E 95*35            [12] 2797 	subb	a,(_desired_D + 1)
      0006A0 F5 83            [12] 2798 	mov	dph,a
      0006A2 75*00 10         [24] 2799 	mov	__modsint_PARM_2,#0x10
      0006A5 75*01 0E         [24] 2800 	mov	(__modsint_PARM_2 + 1),#0x0E
      0006A8 12r00r00         [24] 2801 	lcall	__modsint
      0006AB AE 82            [24] 2802 	mov	r6,dpl
      0006AD AF 83            [24] 2803 	mov	r7,dph
      0006AF 8E*38            [24] 2804 	mov	_offset,r6
      0006B1 8F*39            [24] 2805 	mov	(_offset + 1),r7
                           0006B3  2806 	C$lab6.c$186$1$137 ==.
                                   2807 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:186: Steering_Servo(offset);
      0006B3 85*38 82         [24] 2808 	mov	dpl,_offset
      0006B6 85*39 83         [24] 2809 	mov	dph,(_offset + 1)
      0006B9 12r0Fr80         [24] 2810 	lcall	_Steering_Servo
                           0006BC  2811 	C$lab6.c$188$1$137 ==.
                           0006BC  2812 	XG$Steering_func$0$0 ==.
      0006BC 22               [24] 2813 	ret
                                   2814 ;------------------------------------------------------------
                                   2815 ;Allocation info for local variables in function 'direction'
                                   2816 ;------------------------------------------------------------
                                   2817 ;value                     Allocated to registers r6 r7 
                                   2818 ;------------------------------------------------------------
                           0006BD  2819 	G$direction$0$0 ==.
                           0006BD  2820 	C$lab6.c$190$1$137 ==.
                                   2821 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:190: unsigned int direction(void)        ///ADJUSTS THE VALUES OF DIRECTION SO THE DESIRED DIRECTION IS THE CAR'S 'NORTH'
                                   2822 ;	-----------------------------------------
                                   2823 ;	 function direction
                                   2824 ;	-----------------------------------------
      0006BD                       2825 _direction:
                           0006BD  2826 	C$lab6.c$193$1$139 ==.
                                   2827 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:193: count =0;
      0006BD E4               [12] 2828 	clr	a
      0006BE F5*10            [12] 2829 	mov	_count,a
      0006C0 F5*11            [12] 2830 	mov	(_count + 1),a
                           0006C2  2831 	C$lab6.c$194$1$139 ==.
                                   2832 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:194: while (count < 1);
      0006C2                       2833 00101$:
      0006C2 C3               [12] 2834 	clr	c
      0006C3 E5*10            [12] 2835 	mov	a,_count
      0006C5 94 01            [12] 2836 	subb	a,#0x01
      0006C7 E5*11            [12] 2837 	mov	a,(_count + 1)
      0006C9 64 80            [12] 2838 	xrl	a,#0x80
      0006CB 94 80            [12] 2839 	subb	a,#0x80
      0006CD 40 F3            [24] 2840 	jc	00101$
                           0006CF  2841 	C$lab6.c$195$1$139 ==.
                                   2842 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:195: lcd_clear();
      0006CF 12r00rE1         [24] 2843 	lcall	_lcd_clear
                           0006D2  2844 	C$lab6.c$196$1$139 ==.
                                   2845 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:196: lcd_print("Calibration:\nHello world!\n012_345_678:\nabc def ghij");
      0006D2 74r5F            [12] 2846 	mov	a,#___str_5
      0006D4 C0 E0            [24] 2847 	push	acc
      0006D6 74s00            [12] 2848 	mov	a,#(___str_5 >> 8)
      0006D8 C0 E0            [24] 2849 	push	acc
      0006DA 74 80            [12] 2850 	mov	a,#0x80
      0006DC C0 E0            [24] 2851 	push	acc
      0006DE 12r00r5C         [24] 2852 	lcall	_lcd_print
      0006E1 15 81            [12] 2853 	dec	sp
      0006E3 15 81            [12] 2854 	dec	sp
      0006E5 15 81            [12] 2855 	dec	sp
                           0006E7  2856 	C$lab6.c$197$1$139 ==.
                                   2857 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:197: start();
      0006E7 12r10rAB         [24] 2858 	lcall	_start
                           0006EA  2859 	C$lab6.c$198$1$139 ==.
                                   2860 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:198: lcd_clear();
      0006EA 12r00rE1         [24] 2861 	lcall	_lcd_clear
                           0006ED  2862 	C$lab6.c$199$1$139 ==.
                                   2863 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:199: value = kpd_input(0);
      0006ED 75 82 00         [24] 2864 	mov	dpl,#0x00
      0006F0 12r01r99         [24] 2865 	lcall	_kpd_input
      0006F3 AE 82            [24] 2866 	mov	r6,dpl
      0006F5 AF 83            [24] 2867 	mov	r7,dph
                           0006F7  2868 	C$lab6.c$200$1$139 ==.
                                   2869 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:200: lcd_clear();
      0006F7 C0 07            [24] 2870 	push	ar7
      0006F9 C0 06            [24] 2871 	push	ar6
      0006FB 12r00rE1         [24] 2872 	lcall	_lcd_clear
      0006FE D0 06            [24] 2873 	pop	ar6
      000700 D0 07            [24] 2874 	pop	ar7
                           000702  2875 	C$lab6.c$201$1$139 ==.
                                   2876 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:201: lcd_print("\r\nThe desired direction is: %d", value);
      000702 C0 07            [24] 2877 	push	ar7
      000704 C0 06            [24] 2878 	push	ar6
      000706 C0 06            [24] 2879 	push	ar6
      000708 C0 07            [24] 2880 	push	ar7
      00070A 74r93            [12] 2881 	mov	a,#___str_6
      00070C C0 E0            [24] 2882 	push	acc
      00070E 74s00            [12] 2883 	mov	a,#(___str_6 >> 8)
      000710 C0 E0            [24] 2884 	push	acc
      000712 74 80            [12] 2885 	mov	a,#0x80
      000714 C0 E0            [24] 2886 	push	acc
      000716 12r00r5C         [24] 2887 	lcall	_lcd_print
      000719 E5 81            [12] 2888 	mov	a,sp
      00071B 24 FB            [12] 2889 	add	a,#0xfb
      00071D F5 81            [12] 2890 	mov	sp,a
      00071F D0 06            [24] 2891 	pop	ar6
      000721 D0 07            [24] 2892 	pop	ar7
                           000723  2893 	C$lab6.c$202$1$139 ==.
                                   2894 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:202: printf("\r\nThe desired direction is: %d", value);
      000723 C0 07            [24] 2895 	push	ar7
      000725 C0 06            [24] 2896 	push	ar6
      000727 C0 06            [24] 2897 	push	ar6
      000729 C0 07            [24] 2898 	push	ar7
      00072B 74r93            [12] 2899 	mov	a,#___str_6
      00072D C0 E0            [24] 2900 	push	acc
      00072F 74s00            [12] 2901 	mov	a,#(___str_6 >> 8)
      000731 C0 E0            [24] 2902 	push	acc
      000733 74 80            [12] 2903 	mov	a,#0x80
      000735 C0 E0            [24] 2904 	push	acc
      000737 12r00r00         [24] 2905 	lcall	_printf
      00073A E5 81            [12] 2906 	mov	a,sp
      00073C 24 FB            [12] 2907 	add	a,#0xfb
      00073E F5 81            [12] 2908 	mov	sp,a
      000740 D0 06            [24] 2909 	pop	ar6
      000742 D0 07            [24] 2910 	pop	ar7
                           000744  2911 	C$lab6.c$204$1$139 ==.
                                   2912 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:204: return value;
      000744 8E 82            [24] 2913 	mov	dpl,r6
      000746 8F 83            [24] 2914 	mov	dph,r7
                           000748  2915 	C$lab6.c$206$1$139 ==.
                           000748  2916 	XG$direction$0$0 ==.
      000748 22               [24] 2917 	ret
                                   2918 ;------------------------------------------------------------
                                   2919 ;Allocation info for local variables in function 'ReadCompass'
                                   2920 ;------------------------------------------------------------
                                   2921 ;Data                      Allocated with name '_ReadCompass_Data_1_141'
                                   2922 ;Crange                    Allocated to registers 
                                   2923 ;addr                      Allocated to registers 
                                   2924 ;------------------------------------------------------------
                           000749  2925 	G$ReadCompass$0$0 ==.
                           000749  2926 	C$lab6.c$208$1$139 ==.
                                   2927 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:208: unsigned int ReadCompass(void)
                                   2928 ;	-----------------------------------------
                                   2929 ;	 function ReadCompass
                                   2930 ;	-----------------------------------------
      000749                       2931 _ReadCompass:
                           000749  2932 	C$lab6.c$214$1$141 ==.
                                   2933 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:214: i2c_read_data(addr, 2,Data,2);
      000749 75*0Br48         [24] 2934 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_1_141
      00074C 75*0C 00         [24] 2935 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00074F 75*0D 40         [24] 2936 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000752 75*0A 02         [24] 2937 	mov	_i2c_read_data_PARM_2,#0x02
      000755 75*0E 02         [24] 2938 	mov	_i2c_read_data_PARM_4,#0x02
      000758 75 82 C0         [24] 2939 	mov	dpl,#0xC0
      00075B 12r03rE8         [24] 2940 	lcall	_i2c_read_data
                           00075E  2941 	C$lab6.c$215$1$141 ==.
                                   2942 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:215: Crange = ((unsigned int) Data[0] << 8 | Data[1]);
      00075E AF*48            [24] 2943 	mov	r7,_ReadCompass_Data_1_141
      000760 7E 00            [12] 2944 	mov	r6,#0x00
      000762 AC*49            [24] 2945 	mov	r4,(_ReadCompass_Data_1_141 + 0x0001)
      000764 7D 00            [12] 2946 	mov	r5,#0x00
      000766 EC               [12] 2947 	mov	a,r4
      000767 4E               [12] 2948 	orl	a,r6
      000768 F5 82            [12] 2949 	mov	dpl,a
      00076A ED               [12] 2950 	mov	a,r5
      00076B 4F               [12] 2951 	orl	a,r7
      00076C F5 83            [12] 2952 	mov	dph,a
                           00076E  2953 	C$lab6.c$216$1$141 ==.
                                   2954 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:216: return Crange;
                           00076E  2955 	C$lab6.c$217$1$141 ==.
                           00076E  2956 	XG$ReadCompass$0$0 ==.
      00076E 22               [24] 2957 	ret
                                   2958 ;------------------------------------------------------------
                                   2959 ;Allocation info for local variables in function 'Rudder_cal'
                                   2960 ;------------------------------------------------------------
                                   2961 ;st                        Allocated to registers r3 
                                   2962 ;value                     Allocated to registers r6 r7 
                                   2963 ;times                     Allocated to registers r4 r5 
                                   2964 ;------------------------------------------------------------
                           00076F  2965 	G$Rudder_cal$0$0 ==.
                           00076F  2966 	C$lab6.c$219$1$141 ==.
                                   2967 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:219: void Rudder_cal(void)
                                   2968 ;	-----------------------------------------
                                   2969 ;	 function Rudder_cal
                                   2970 ;	-----------------------------------------
      00076F                       2971 _Rudder_cal:
                           00076F  2972 	C$lab6.c$222$1$141 ==.
                                   2973 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:222: int value =0;
                           00076F  2974 	C$lab6.c$223$1$141 ==.
                                   2975 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:223: int times =0;
                           00076F  2976 	C$lab6.c$224$1$143 ==.
                                   2977 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:224: count =0;
      00076F E4               [12] 2978 	clr	a
      000770 FE               [12] 2979 	mov	r6,a
      000771 FF               [12] 2980 	mov	r7,a
      000772 FC               [12] 2981 	mov	r4,a
      000773 FD               [12] 2982 	mov	r5,a
      000774 F5*10            [12] 2983 	mov	_count,a
      000776 F5*11            [12] 2984 	mov	(_count + 1),a
                           000778  2985 	C$lab6.c$225$1$143 ==.
                                   2986 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:225: lcd_clear();
      000778 C0 07            [24] 2987 	push	ar7
      00077A C0 06            [24] 2988 	push	ar6
      00077C C0 05            [24] 2989 	push	ar5
      00077E C0 04            [24] 2990 	push	ar4
      000780 12r00rE1         [24] 2991 	lcall	_lcd_clear
                           000783  2992 	C$lab6.c$226$1$143 ==.
                                   2993 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:226: lcd_print("Rudder Calibration");
      000783 74rB2            [12] 2994 	mov	a,#___str_7
      000785 C0 E0            [24] 2995 	push	acc
      000787 74s00            [12] 2996 	mov	a,#(___str_7 >> 8)
      000789 C0 E0            [24] 2997 	push	acc
      00078B 74 80            [12] 2998 	mov	a,#0x80
      00078D C0 E0            [24] 2999 	push	acc
      00078F 12r00r5C         [24] 3000 	lcall	_lcd_print
      000792 15 81            [12] 3001 	dec	sp
      000794 15 81            [12] 3002 	dec	sp
      000796 15 81            [12] 3003 	dec	sp
      000798 D0 04            [24] 3004 	pop	ar4
      00079A D0 05            [24] 3005 	pop	ar5
      00079C D0 06            [24] 3006 	pop	ar6
      00079E D0 07            [24] 3007 	pop	ar7
                           0007A0  3008 	C$lab6.c$227$1$143 ==.
                                   3009 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:227: while (count < 50);
      0007A0                       3010 00101$:
      0007A0 C3               [12] 3011 	clr	c
      0007A1 E5*10            [12] 3012 	mov	a,_count
      0007A3 94 32            [12] 3013 	subb	a,#0x32
      0007A5 E5*11            [12] 3014 	mov	a,(_count + 1)
      0007A7 64 80            [12] 3015 	xrl	a,#0x80
      0007A9 94 80            [12] 3016 	subb	a,#0x80
      0007AB 40 F3            [24] 3017 	jc	00101$
                           0007AD  3018 	C$lab6.c$228$1$143 ==.
                                   3019 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:228: lcd_clear();
      0007AD C0 07            [24] 3020 	push	ar7
      0007AF C0 06            [24] 3021 	push	ar6
      0007B1 C0 05            [24] 3022 	push	ar5
      0007B3 C0 04            [24] 3023 	push	ar4
      0007B5 12r00rE1         [24] 3024 	lcall	_lcd_clear
      0007B8 D0 04            [24] 3025 	pop	ar4
      0007BA D0 05            [24] 3026 	pop	ar5
      0007BC D0 06            [24] 3027 	pop	ar6
      0007BE D0 07            [24] 3028 	pop	ar7
                           0007C0  3029 	C$lab6.c$232$2$144 ==.
                                   3030 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:232: count =0;
      0007C0 E4               [12] 3031 	clr	a
      0007C1 F5*10            [12] 3032 	mov	_count,a
      0007C3 F5*11            [12] 3033 	mov	(_count + 1),a
                           0007C5  3034 	C$lab6.c$233$2$144 ==.
                                   3035 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:233: while (count < 1);
      0007C5                       3036 00104$:
      0007C5 C3               [12] 3037 	clr	c
      0007C6 E5*10            [12] 3038 	mov	a,_count
      0007C8 94 01            [12] 3039 	subb	a,#0x01
      0007CA E5*11            [12] 3040 	mov	a,(_count + 1)
      0007CC 64 80            [12] 3041 	xrl	a,#0x80
      0007CE 94 80            [12] 3042 	subb	a,#0x80
      0007D0 40 F3            [24] 3043 	jc	00104$
                           0007D2  3044 	C$lab6.c$234$2$144 ==.
                                   3045 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:234: lcd_clear();
      0007D2 C0 07            [24] 3046 	push	ar7
      0007D4 C0 06            [24] 3047 	push	ar6
      0007D6 C0 05            [24] 3048 	push	ar5
      0007D8 C0 04            [24] 3049 	push	ar4
      0007DA 12r00rE1         [24] 3050 	lcall	_lcd_clear
                           0007DD  3051 	C$lab6.c$235$2$144 ==.
                                   3052 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:235: lcd_print("go left: press 1\n go right: press 2\nPress * for next screen");
      0007DD 74rC5            [12] 3053 	mov	a,#___str_8
      0007DF C0 E0            [24] 3054 	push	acc
      0007E1 74s00            [12] 3055 	mov	a,#(___str_8 >> 8)
      0007E3 C0 E0            [24] 3056 	push	acc
      0007E5 74 80            [12] 3057 	mov	a,#0x80
      0007E7 C0 E0            [24] 3058 	push	acc
      0007E9 12r00r5C         [24] 3059 	lcall	_lcd_print
      0007EC 15 81            [12] 3060 	dec	sp
      0007EE 15 81            [12] 3061 	dec	sp
      0007F0 15 81            [12] 3062 	dec	sp
                           0007F2  3063 	C$lab6.c$236$2$144 ==.
                                   3064 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:236: start();
      0007F2 12r10rAB         [24] 3065 	lcall	_start
                           0007F5  3066 	C$lab6.c$237$2$144 ==.
                                   3067 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:237: lcd_clear();
      0007F5 12r00rE1         [24] 3068 	lcall	_lcd_clear
                           0007F8  3069 	C$lab6.c$238$2$144 ==.
                                   3070 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:238: lcd_print("\n confirm: press 3\n press * to begin");
      0007F8 74r01            [12] 3071 	mov	a,#___str_9
      0007FA C0 E0            [24] 3072 	push	acc
      0007FC 74s01            [12] 3073 	mov	a,#(___str_9 >> 8)
      0007FE C0 E0            [24] 3074 	push	acc
      000800 74 80            [12] 3075 	mov	a,#0x80
      000802 C0 E0            [24] 3076 	push	acc
      000804 12r00r5C         [24] 3077 	lcall	_lcd_print
      000807 15 81            [12] 3078 	dec	sp
      000809 15 81            [12] 3079 	dec	sp
      00080B 15 81            [12] 3080 	dec	sp
                           00080D  3081 	C$lab6.c$239$2$144 ==.
                                   3082 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:239: start();
      00080D 12r10rAB         [24] 3083 	lcall	_start
      000810 D0 04            [24] 3084 	pop	ar4
      000812 D0 05            [24] 3085 	pop	ar5
      000814 D0 06            [24] 3086 	pop	ar6
      000816 D0 07            [24] 3087 	pop	ar7
                           000818  3088 	C$lab6.c$240$2$144 ==.
                                   3089 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:240: st =0;
      000818 7B 00            [12] 3090 	mov	r3,#0x00
                           00081A  3091 	C$lab6.c$241$5$147 ==.
                                   3092 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:241: while (1)
      00081A                       3093 00146$:
                           00081A  3094 	C$lab6.c$243$3$145 ==.
                                   3095 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:243: printf("\r\n %u",RUDDER_PW);
      00081A C0 07            [24] 3096 	push	ar7
      00081C C0 06            [24] 3097 	push	ar6
      00081E C0 05            [24] 3098 	push	ar5
      000820 C0 04            [24] 3099 	push	ar4
      000822 C0 03            [24] 3100 	push	ar3
      000824 C0*24            [24] 3101 	push	_RUDDER_PW
      000826 C0*25            [24] 3102 	push	(_RUDDER_PW + 1)
      000828 74r26            [12] 3103 	mov	a,#___str_10
      00082A C0 E0            [24] 3104 	push	acc
      00082C 74s01            [12] 3105 	mov	a,#(___str_10 >> 8)
      00082E C0 E0            [24] 3106 	push	acc
      000830 74 80            [12] 3107 	mov	a,#0x80
      000832 C0 E0            [24] 3108 	push	acc
      000834 12r00r00         [24] 3109 	lcall	_printf
      000837 E5 81            [12] 3110 	mov	a,sp
      000839 24 FB            [12] 3111 	add	a,#0xfb
      00083B F5 81            [12] 3112 	mov	sp,a
      00083D D0 03            [24] 3113 	pop	ar3
      00083F D0 04            [24] 3114 	pop	ar4
      000841 D0 05            [24] 3115 	pop	ar5
      000843 D0 06            [24] 3116 	pop	ar6
      000845 D0 07            [24] 3117 	pop	ar7
                           000847  3118 	C$lab6.c$244$3$145 ==.
                                   3119 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:244: RDR_lo_to_hi = 0xFFFF - RUDDER_PW;
      000847 74 FF            [12] 3120 	mov	a,#0xFF
      000849 C3               [12] 3121 	clr	c
      00084A 95*24            [12] 3122 	subb	a,_RUDDER_PW
      00084C F5*26            [12] 3123 	mov	_RDR_lo_to_hi,a
      00084E 74 FF            [12] 3124 	mov	a,#0xFF
      000850 95*25            [12] 3125 	subb	a,(_RUDDER_PW + 1)
      000852 F5*27            [12] 3126 	mov	(_RDR_lo_to_hi + 1),a
                           000854  3127 	C$lab6.c$245$3$145 ==.
                                   3128 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:245: PCA0CP0 = RDR_lo_to_hi;
      000854 85*26 EA         [24] 3129 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      000857 85*27 FA         [24] 3130 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           00085A  3131 	C$lab6.c$247$3$145 ==.
                                   3132 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:247: if (times == 0 )
      00085A EC               [12] 3133 	mov	a,r4
      00085B 4D               [12] 3134 	orl	a,r5
      00085C 60 03            [24] 3135 	jz	00215$
      00085E 02r08rF0         [24] 3136 	ljmp	00143$
      000861                       3137 00215$:
                           000861  3138 	C$lab6.c$249$4$146 ==.
                                   3139 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:249: if (value ==0)
      000861 EE               [12] 3140 	mov	a,r6
      000862 4F               [12] 3141 	orl	a,r7
      000863 70 2F            [24] 3142 	jnz	00110$
                           000865  3143 	C$lab6.c$251$5$147 ==.
                                   3144 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:251: lcd_clear();
      000865 C0 05            [24] 3145 	push	ar5
      000867 C0 04            [24] 3146 	push	ar4
      000869 C0 03            [24] 3147 	push	ar3
      00086B 12r00rE1         [24] 3148 	lcall	_lcd_clear
                           00086E  3149 	C$lab6.c$252$5$147 ==.
                                   3150 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:252: lcd_print("Now calibrating Min_PW\n");
      00086E 74r2C            [12] 3151 	mov	a,#___str_11
      000870 C0 E0            [24] 3152 	push	acc
      000872 74s01            [12] 3153 	mov	a,#(___str_11 >> 8)
      000874 C0 E0            [24] 3154 	push	acc
      000876 74 80            [12] 3155 	mov	a,#0x80
      000878 C0 E0            [24] 3156 	push	acc
      00087A 12r00r5C         [24] 3157 	lcall	_lcd_print
      00087D 15 81            [12] 3158 	dec	sp
      00087F 15 81            [12] 3159 	dec	sp
      000881 15 81            [12] 3160 	dec	sp
      000883 D0 03            [24] 3161 	pop	ar3
      000885 D0 04            [24] 3162 	pop	ar4
      000887 D0 05            [24] 3163 	pop	ar5
                           000889  3164 	C$lab6.c$253$5$147 ==.
                                   3165 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:253: if (st ==0 ) RUDDER_PW = PW_LEFT_RUDDER;
      000889 EB               [12] 3166 	mov	a,r3
      00088A 70 06            [24] 3167 	jnz	00108$
      00088C 85*18*24         [24] 3168 	mov	_RUDDER_PW,_PW_LEFT_RUDDER
      00088F 85*19*25         [24] 3169 	mov	(_RUDDER_PW + 1),(_PW_LEFT_RUDDER + 1)
      000892                       3170 00108$:
                           000892  3171 	C$lab6.c$254$5$147 ==.
                                   3172 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:254: st =1;
      000892 7B 01            [12] 3173 	mov	r3,#0x01
      000894                       3174 00110$:
                           000894  3175 	C$lab6.c$256$4$146 ==.
                                   3176 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:256: value = kpd_input(1);
      000894 75 82 01         [24] 3177 	mov	dpl,#0x01
      000897 C0 05            [24] 3178 	push	ar5
      000899 C0 04            [24] 3179 	push	ar4
      00089B C0 03            [24] 3180 	push	ar3
      00089D 12r01r99         [24] 3181 	lcall	_kpd_input
      0008A0 AE 82            [24] 3182 	mov	r6,dpl
      0008A2 AF 83            [24] 3183 	mov	r7,dph
      0008A4 D0 03            [24] 3184 	pop	ar3
      0008A6 D0 04            [24] 3185 	pop	ar4
      0008A8 D0 05            [24] 3186 	pop	ar5
                           0008AA  3187 	C$lab6.c$257$4$146 ==.
                                   3188 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:257: if (value == 1)
      0008AA BE 01 12         [24] 3189 	cjne	r6,#0x01,00117$
      0008AD BF 00 0F         [24] 3190 	cjne	r7,#0x00,00117$
                           0008B0  3191 	C$lab6.c$259$5$148 ==.
                                   3192 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:259: RUDDER_PW -= 20;
      0008B0 E5*24            [12] 3193 	mov	a,_RUDDER_PW
      0008B2 24 EC            [12] 3194 	add	a,#0xEC
      0008B4 F5*24            [12] 3195 	mov	_RUDDER_PW,a
      0008B6 E5*25            [12] 3196 	mov	a,(_RUDDER_PW + 1)
      0008B8 34 FF            [12] 3197 	addc	a,#0xFF
      0008BA F5*25            [12] 3198 	mov	(_RUDDER_PW + 1),a
      0008BC 02r08r1A         [24] 3199 	ljmp	00146$
      0008BF                       3200 00117$:
                           0008BF  3201 	C$lab6.c$261$4$146 ==.
                                   3202 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:261: else if (value==2)
      0008BF BE 02 11         [24] 3203 	cjne	r6,#0x02,00114$
      0008C2 BF 00 0E         [24] 3204 	cjne	r7,#0x00,00114$
                           0008C5  3205 	C$lab6.c$263$5$149 ==.
                                   3206 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:263: RUDDER_PW += 20;
      0008C5 74 14            [12] 3207 	mov	a,#0x14
      0008C7 25*24            [12] 3208 	add	a,_RUDDER_PW
      0008C9 F5*24            [12] 3209 	mov	_RUDDER_PW,a
      0008CB E4               [12] 3210 	clr	a
      0008CC 35*25            [12] 3211 	addc	a,(_RUDDER_PW + 1)
      0008CE F5*25            [12] 3212 	mov	(_RUDDER_PW + 1),a
      0008D0 02r08r1A         [24] 3213 	ljmp	00146$
      0008D3                       3214 00114$:
                           0008D3  3215 	C$lab6.c$265$4$146 ==.
                                   3216 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:265: else if (value == 3)
      0008D3 BE 03 05         [24] 3217 	cjne	r6,#0x03,00222$
      0008D6 BF 00 02         [24] 3218 	cjne	r7,#0x00,00222$
      0008D9 80 03            [24] 3219 	sjmp	00223$
      0008DB                       3220 00222$:
      0008DB 02r08r1A         [24] 3221 	ljmp	00146$
      0008DE                       3222 00223$:
                           0008DE  3223 	C$lab6.c$267$5$150 ==.
                                   3224 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:267: times++;
      0008DE 0C               [12] 3225 	inc	r4
      0008DF BC 00 01         [24] 3226 	cjne	r4,#0x00,00224$
      0008E2 0D               [12] 3227 	inc	r5
      0008E3                       3228 00224$:
                           0008E3  3229 	C$lab6.c$268$5$150 ==.
                                   3230 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:268: value =0;
      0008E3 7E 00            [12] 3231 	mov	r6,#0x00
      0008E5 7F 00            [12] 3232 	mov	r7,#0x00
                           0008E7  3233 	C$lab6.c$269$5$150 ==.
                                   3234 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:269: PW_LEFT_RUDDER = RUDDER_PW;
      0008E7 85*24*18         [24] 3235 	mov	_PW_LEFT_RUDDER,_RUDDER_PW
      0008EA 85*25*19         [24] 3236 	mov	(_PW_LEFT_RUDDER + 1),(_RUDDER_PW + 1)
      0008ED 02r08r1A         [24] 3237 	ljmp	00146$
      0008F0                       3238 00143$:
                           0008F0  3239 	C$lab6.c$272$3$145 ==.
                                   3240 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:272: else if (times ==1)
      0008F0 BC 01 05         [24] 3241 	cjne	r4,#0x01,00225$
      0008F3 BD 00 02         [24] 3242 	cjne	r5,#0x00,00225$
      0008F6 80 03            [24] 3243 	sjmp	00226$
      0008F8                       3244 00225$:
      0008F8 02r09r85         [24] 3245 	ljmp	00140$
      0008FB                       3246 00226$:
                           0008FB  3247 	C$lab6.c$274$4$151 ==.
                                   3248 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:274: if (value ==0)
      0008FB EE               [12] 3249 	mov	a,r6
      0008FC 4F               [12] 3250 	orl	a,r7
      0008FD 70 2A            [24] 3251 	jnz	00120$
                           0008FF  3252 	C$lab6.c$276$5$152 ==.
                                   3253 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:276: lcd_clear();
      0008FF C0 05            [24] 3254 	push	ar5
      000901 C0 04            [24] 3255 	push	ar4
      000903 C0 03            [24] 3256 	push	ar3
      000905 12r00rE1         [24] 3257 	lcall	_lcd_clear
                           000908  3258 	C$lab6.c$277$5$152 ==.
                                   3259 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:277: lcd_print("Now calibrating Cen_PW");
      000908 74r44            [12] 3260 	mov	a,#___str_12
      00090A C0 E0            [24] 3261 	push	acc
      00090C 74s01            [12] 3262 	mov	a,#(___str_12 >> 8)
      00090E C0 E0            [24] 3263 	push	acc
      000910 74 80            [12] 3264 	mov	a,#0x80
      000912 C0 E0            [24] 3265 	push	acc
      000914 12r00r5C         [24] 3266 	lcall	_lcd_print
      000917 15 81            [12] 3267 	dec	sp
      000919 15 81            [12] 3268 	dec	sp
      00091B 15 81            [12] 3269 	dec	sp
      00091D D0 03            [24] 3270 	pop	ar3
      00091F D0 04            [24] 3271 	pop	ar4
      000921 D0 05            [24] 3272 	pop	ar5
                           000923  3273 	C$lab6.c$278$5$152 ==.
                                   3274 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:278: RUDDER_PW = PW_CENTER_RUDDER;
      000923 85*1A*24         [24] 3275 	mov	_RUDDER_PW,_PW_CENTER_RUDDER
      000926 85*1B*25         [24] 3276 	mov	(_RUDDER_PW + 1),(_PW_CENTER_RUDDER + 1)
      000929                       3277 00120$:
                           000929  3278 	C$lab6.c$280$4$151 ==.
                                   3279 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:280: value = kpd_input(1);
      000929 75 82 01         [24] 3280 	mov	dpl,#0x01
      00092C C0 05            [24] 3281 	push	ar5
      00092E C0 04            [24] 3282 	push	ar4
      000930 C0 03            [24] 3283 	push	ar3
      000932 12r01r99         [24] 3284 	lcall	_kpd_input
      000935 AE 82            [24] 3285 	mov	r6,dpl
      000937 AF 83            [24] 3286 	mov	r7,dph
      000939 D0 03            [24] 3287 	pop	ar3
      00093B D0 04            [24] 3288 	pop	ar4
      00093D D0 05            [24] 3289 	pop	ar5
                           00093F  3290 	C$lab6.c$281$4$151 ==.
                                   3291 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:281: if (value == 1)
      00093F BE 01 12         [24] 3292 	cjne	r6,#0x01,00127$
      000942 BF 00 0F         [24] 3293 	cjne	r7,#0x00,00127$
                           000945  3294 	C$lab6.c$283$5$153 ==.
                                   3295 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:283: RUDDER_PW -= 20;
      000945 E5*24            [12] 3296 	mov	a,_RUDDER_PW
      000947 24 EC            [12] 3297 	add	a,#0xEC
      000949 F5*24            [12] 3298 	mov	_RUDDER_PW,a
      00094B E5*25            [12] 3299 	mov	a,(_RUDDER_PW + 1)
      00094D 34 FF            [12] 3300 	addc	a,#0xFF
      00094F F5*25            [12] 3301 	mov	(_RUDDER_PW + 1),a
      000951 02r08r1A         [24] 3302 	ljmp	00146$
      000954                       3303 00127$:
                           000954  3304 	C$lab6.c$285$4$151 ==.
                                   3305 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:285: else if (value==2)
      000954 BE 02 11         [24] 3306 	cjne	r6,#0x02,00124$
      000957 BF 00 0E         [24] 3307 	cjne	r7,#0x00,00124$
                           00095A  3308 	C$lab6.c$287$5$154 ==.
                                   3309 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:287: RUDDER_PW += 20;
      00095A 74 14            [12] 3310 	mov	a,#0x14
      00095C 25*24            [12] 3311 	add	a,_RUDDER_PW
      00095E F5*24            [12] 3312 	mov	_RUDDER_PW,a
      000960 E4               [12] 3313 	clr	a
      000961 35*25            [12] 3314 	addc	a,(_RUDDER_PW + 1)
      000963 F5*25            [12] 3315 	mov	(_RUDDER_PW + 1),a
      000965 02r08r1A         [24] 3316 	ljmp	00146$
      000968                       3317 00124$:
                           000968  3318 	C$lab6.c$289$4$151 ==.
                                   3319 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:289: else if (value == 3)
      000968 BE 03 05         [24] 3320 	cjne	r6,#0x03,00232$
      00096B BF 00 02         [24] 3321 	cjne	r7,#0x00,00232$
      00096E 80 03            [24] 3322 	sjmp	00233$
      000970                       3323 00232$:
      000970 02r08r1A         [24] 3324 	ljmp	00146$
      000973                       3325 00233$:
                           000973  3326 	C$lab6.c$291$5$155 ==.
                                   3327 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:291: times++;
      000973 0C               [12] 3328 	inc	r4
      000974 BC 00 01         [24] 3329 	cjne	r4,#0x00,00234$
      000977 0D               [12] 3330 	inc	r5
      000978                       3331 00234$:
                           000978  3332 	C$lab6.c$292$5$155 ==.
                                   3333 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:292: value=0;
      000978 7E 00            [12] 3334 	mov	r6,#0x00
      00097A 7F 00            [12] 3335 	mov	r7,#0x00
                           00097C  3336 	C$lab6.c$293$5$155 ==.
                                   3337 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:293: PW_CENTER_RUDDER = RUDDER_PW;
      00097C 85*24*1A         [24] 3338 	mov	_PW_CENTER_RUDDER,_RUDDER_PW
      00097F 85*25*1B         [24] 3339 	mov	(_PW_CENTER_RUDDER + 1),(_RUDDER_PW + 1)
      000982 02r08r1A         [24] 3340 	ljmp	00146$
      000985                       3341 00140$:
                           000985  3342 	C$lab6.c$298$4$156 ==.
                                   3343 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:298: if (value==0)
      000985 EE               [12] 3344 	mov	a,r6
      000986 4F               [12] 3345 	orl	a,r7
      000987 70 2A            [24] 3346 	jnz	00130$
                           000989  3347 	C$lab6.c$300$5$157 ==.
                                   3348 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:300: lcd_clear();
      000989 C0 05            [24] 3349 	push	ar5
      00098B C0 04            [24] 3350 	push	ar4
      00098D C0 03            [24] 3351 	push	ar3
      00098F 12r00rE1         [24] 3352 	lcall	_lcd_clear
                           000992  3353 	C$lab6.c$301$5$157 ==.
                                   3354 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:301: lcd_print("Now calibrating Max_PW");
      000992 74r5B            [12] 3355 	mov	a,#___str_13
      000994 C0 E0            [24] 3356 	push	acc
      000996 74s01            [12] 3357 	mov	a,#(___str_13 >> 8)
      000998 C0 E0            [24] 3358 	push	acc
      00099A 74 80            [12] 3359 	mov	a,#0x80
      00099C C0 E0            [24] 3360 	push	acc
      00099E 12r00r5C         [24] 3361 	lcall	_lcd_print
      0009A1 15 81            [12] 3362 	dec	sp
      0009A3 15 81            [12] 3363 	dec	sp
      0009A5 15 81            [12] 3364 	dec	sp
      0009A7 D0 03            [24] 3365 	pop	ar3
      0009A9 D0 04            [24] 3366 	pop	ar4
      0009AB D0 05            [24] 3367 	pop	ar5
                           0009AD  3368 	C$lab6.c$302$5$157 ==.
                                   3369 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:302: RUDDER_PW = PW_RIGHT_RUDDER;
      0009AD 85*1C*24         [24] 3370 	mov	_RUDDER_PW,_PW_RIGHT_RUDDER
      0009B0 85*1D*25         [24] 3371 	mov	(_RUDDER_PW + 1),(_PW_RIGHT_RUDDER + 1)
      0009B3                       3372 00130$:
                           0009B3  3373 	C$lab6.c$304$4$156 ==.
                                   3374 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:304: value = kpd_input(1);
      0009B3 75 82 01         [24] 3375 	mov	dpl,#0x01
      0009B6 C0 05            [24] 3376 	push	ar5
      0009B8 C0 04            [24] 3377 	push	ar4
      0009BA C0 03            [24] 3378 	push	ar3
      0009BC 12r01r99         [24] 3379 	lcall	_kpd_input
      0009BF AE 82            [24] 3380 	mov	r6,dpl
      0009C1 AF 83            [24] 3381 	mov	r7,dph
      0009C3 D0 03            [24] 3382 	pop	ar3
      0009C5 D0 04            [24] 3383 	pop	ar4
      0009C7 D0 05            [24] 3384 	pop	ar5
                           0009C9  3385 	C$lab6.c$305$4$156 ==.
                                   3386 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:305: if (value == 1)
      0009C9 BE 01 12         [24] 3387 	cjne	r6,#0x01,00137$
      0009CC BF 00 0F         [24] 3388 	cjne	r7,#0x00,00137$
                           0009CF  3389 	C$lab6.c$307$5$158 ==.
                                   3390 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:307: RUDDER_PW -= 20;
      0009CF E5*24            [12] 3391 	mov	a,_RUDDER_PW
      0009D1 24 EC            [12] 3392 	add	a,#0xEC
      0009D3 F5*24            [12] 3393 	mov	_RUDDER_PW,a
      0009D5 E5*25            [12] 3394 	mov	a,(_RUDDER_PW + 1)
      0009D7 34 FF            [12] 3395 	addc	a,#0xFF
      0009D9 F5*25            [12] 3396 	mov	(_RUDDER_PW + 1),a
      0009DB 02r08r1A         [24] 3397 	ljmp	00146$
      0009DE                       3398 00137$:
                           0009DE  3399 	C$lab6.c$309$4$156 ==.
                                   3400 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:309: else if (value==2)
      0009DE BE 02 11         [24] 3401 	cjne	r6,#0x02,00134$
      0009E1 BF 00 0E         [24] 3402 	cjne	r7,#0x00,00134$
                           0009E4  3403 	C$lab6.c$311$5$159 ==.
                                   3404 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:311: RUDDER_PW += 20;
      0009E4 74 14            [12] 3405 	mov	a,#0x14
      0009E6 25*24            [12] 3406 	add	a,_RUDDER_PW
      0009E8 F5*24            [12] 3407 	mov	_RUDDER_PW,a
      0009EA E4               [12] 3408 	clr	a
      0009EB 35*25            [12] 3409 	addc	a,(_RUDDER_PW + 1)
      0009ED F5*25            [12] 3410 	mov	(_RUDDER_PW + 1),a
      0009EF 02r08r1A         [24] 3411 	ljmp	00146$
      0009F2                       3412 00134$:
                           0009F2  3413 	C$lab6.c$313$4$156 ==.
                                   3414 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:313: else if (value == 3)
      0009F2 BE 03 05         [24] 3415 	cjne	r6,#0x03,00240$
      0009F5 BF 00 02         [24] 3416 	cjne	r7,#0x00,00240$
      0009F8 80 03            [24] 3417 	sjmp	00241$
      0009FA                       3418 00240$:
      0009FA 02r08r1A         [24] 3419 	ljmp	00146$
      0009FD                       3420 00241$:
                           0009FD  3421 	C$lab6.c$315$5$160 ==.
                                   3422 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:315: PW_RIGHT_RUDDER = RUDDER_PW;
      0009FD 85*24*1C         [24] 3423 	mov	_PW_RIGHT_RUDDER,_RUDDER_PW
      000A00 85*25*1D         [24] 3424 	mov	(_PW_RIGHT_RUDDER + 1),(_RUDDER_PW + 1)
                           000A03  3425 	C$lab6.c$316$5$160 ==.
                                   3426 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:316: return;
                           000A03  3427 	C$lab6.c$325$1$143 ==.
                           000A03  3428 	XG$Rudder_cal$0$0 ==.
      000A03 22               [24] 3429 	ret
                                   3430 ;------------------------------------------------------------
                                   3431 ;Allocation info for local variables in function 'Angle_cal'
                                   3432 ;------------------------------------------------------------
                                   3433 ;st                        Allocated to registers r3 
                                   3434 ;value                     Allocated to registers r6 r7 
                                   3435 ;times                     Allocated to registers r4 r5 
                                   3436 ;------------------------------------------------------------
                           000A04  3437 	G$Angle_cal$0$0 ==.
                           000A04  3438 	C$lab6.c$327$1$143 ==.
                                   3439 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:327: void Angle_cal(void)
                                   3440 ;	-----------------------------------------
                                   3441 ;	 function Angle_cal
                                   3442 ;	-----------------------------------------
      000A04                       3443 _Angle_cal:
                           000A04  3444 	C$lab6.c$330$1$143 ==.
                                   3445 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:330: int value =0;
                           000A04  3446 	C$lab6.c$331$1$143 ==.
                                   3447 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:331: int times =0;
                           000A04  3448 	C$lab6.c$332$1$162 ==.
                                   3449 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:332: count =0;
      000A04 E4               [12] 3450 	clr	a
      000A05 FE               [12] 3451 	mov	r6,a
      000A06 FF               [12] 3452 	mov	r7,a
      000A07 FC               [12] 3453 	mov	r4,a
      000A08 FD               [12] 3454 	mov	r5,a
      000A09 F5*10            [12] 3455 	mov	_count,a
      000A0B F5*11            [12] 3456 	mov	(_count + 1),a
                           000A0D  3457 	C$lab6.c$333$1$162 ==.
                                   3458 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:333: lcd_clear();
      000A0D C0 07            [24] 3459 	push	ar7
      000A0F C0 06            [24] 3460 	push	ar6
      000A11 C0 05            [24] 3461 	push	ar5
      000A13 C0 04            [24] 3462 	push	ar4
      000A15 12r00rE1         [24] 3463 	lcall	_lcd_clear
                           000A18  3464 	C$lab6.c$334$1$162 ==.
                                   3465 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:334: lcd_print("Angle Calibration");
      000A18 74r72            [12] 3466 	mov	a,#___str_14
      000A1A C0 E0            [24] 3467 	push	acc
      000A1C 74s01            [12] 3468 	mov	a,#(___str_14 >> 8)
      000A1E C0 E0            [24] 3469 	push	acc
      000A20 74 80            [12] 3470 	mov	a,#0x80
      000A22 C0 E0            [24] 3471 	push	acc
      000A24 12r00r5C         [24] 3472 	lcall	_lcd_print
      000A27 15 81            [12] 3473 	dec	sp
      000A29 15 81            [12] 3474 	dec	sp
      000A2B 15 81            [12] 3475 	dec	sp
      000A2D D0 04            [24] 3476 	pop	ar4
      000A2F D0 05            [24] 3477 	pop	ar5
      000A31 D0 06            [24] 3478 	pop	ar6
      000A33 D0 07            [24] 3479 	pop	ar7
                           000A35  3480 	C$lab6.c$335$1$162 ==.
                                   3481 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:335: while (count < 50);
      000A35                       3482 00101$:
      000A35 C3               [12] 3483 	clr	c
      000A36 E5*10            [12] 3484 	mov	a,_count
      000A38 94 32            [12] 3485 	subb	a,#0x32
      000A3A E5*11            [12] 3486 	mov	a,(_count + 1)
      000A3C 64 80            [12] 3487 	xrl	a,#0x80
      000A3E 94 80            [12] 3488 	subb	a,#0x80
      000A40 40 F3            [24] 3489 	jc	00101$
                           000A42  3490 	C$lab6.c$336$1$162 ==.
                                   3491 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:336: lcd_clear();
      000A42 C0 07            [24] 3492 	push	ar7
      000A44 C0 06            [24] 3493 	push	ar6
      000A46 C0 05            [24] 3494 	push	ar5
      000A48 C0 04            [24] 3495 	push	ar4
      000A4A 12r00rE1         [24] 3496 	lcall	_lcd_clear
      000A4D D0 04            [24] 3497 	pop	ar4
      000A4F D0 05            [24] 3498 	pop	ar5
      000A51 D0 06            [24] 3499 	pop	ar6
      000A53 D0 07            [24] 3500 	pop	ar7
                           000A55  3501 	C$lab6.c$339$2$163 ==.
                                   3502 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:339: count = 0;
      000A55 E4               [12] 3503 	clr	a
      000A56 F5*10            [12] 3504 	mov	_count,a
      000A58 F5*11            [12] 3505 	mov	(_count + 1),a
                           000A5A  3506 	C$lab6.c$340$2$163 ==.
                                   3507 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:340: while (count < 1);
      000A5A                       3508 00104$:
      000A5A C3               [12] 3509 	clr	c
      000A5B E5*10            [12] 3510 	mov	a,_count
      000A5D 94 01            [12] 3511 	subb	a,#0x01
      000A5F E5*11            [12] 3512 	mov	a,(_count + 1)
      000A61 64 80            [12] 3513 	xrl	a,#0x80
      000A63 94 80            [12] 3514 	subb	a,#0x80
      000A65 40 F3            [24] 3515 	jc	00104$
                           000A67  3516 	C$lab6.c$341$2$163 ==.
                                   3517 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:341: lcd_clear();
      000A67 C0 07            [24] 3518 	push	ar7
      000A69 C0 06            [24] 3519 	push	ar6
      000A6B C0 05            [24] 3520 	push	ar5
      000A6D C0 04            [24] 3521 	push	ar4
      000A6F 12r00rE1         [24] 3522 	lcall	_lcd_clear
                           000A72  3523 	C$lab6.c$342$2$163 ==.
                                   3524 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:342: lcd_print("go left: press 1\n go right: press 2\nPress * for next screen");
      000A72 74rC5            [12] 3525 	mov	a,#___str_8
      000A74 C0 E0            [24] 3526 	push	acc
      000A76 74s00            [12] 3527 	mov	a,#(___str_8 >> 8)
      000A78 C0 E0            [24] 3528 	push	acc
      000A7A 74 80            [12] 3529 	mov	a,#0x80
      000A7C C0 E0            [24] 3530 	push	acc
      000A7E 12r00r5C         [24] 3531 	lcall	_lcd_print
      000A81 15 81            [12] 3532 	dec	sp
      000A83 15 81            [12] 3533 	dec	sp
      000A85 15 81            [12] 3534 	dec	sp
                           000A87  3535 	C$lab6.c$343$2$163 ==.
                                   3536 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:343: start();
      000A87 12r10rAB         [24] 3537 	lcall	_start
                           000A8A  3538 	C$lab6.c$344$2$163 ==.
                                   3539 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:344: lcd_clear();
      000A8A 12r00rE1         [24] 3540 	lcall	_lcd_clear
                           000A8D  3541 	C$lab6.c$345$2$163 ==.
                                   3542 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:345: lcd_print("\n confirm: press 3\n press * to begin");
      000A8D 74r01            [12] 3543 	mov	a,#___str_9
      000A8F C0 E0            [24] 3544 	push	acc
      000A91 74s01            [12] 3545 	mov	a,#(___str_9 >> 8)
      000A93 C0 E0            [24] 3546 	push	acc
      000A95 74 80            [12] 3547 	mov	a,#0x80
      000A97 C0 E0            [24] 3548 	push	acc
      000A99 12r00r5C         [24] 3549 	lcall	_lcd_print
      000A9C 15 81            [12] 3550 	dec	sp
      000A9E 15 81            [12] 3551 	dec	sp
      000AA0 15 81            [12] 3552 	dec	sp
                           000AA2  3553 	C$lab6.c$346$2$163 ==.
                                   3554 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:346: start();
      000AA2 12r10rAB         [24] 3555 	lcall	_start
      000AA5 D0 04            [24] 3556 	pop	ar4
      000AA7 D0 05            [24] 3557 	pop	ar5
      000AA9 D0 06            [24] 3558 	pop	ar6
      000AAB D0 07            [24] 3559 	pop	ar7
                           000AAD  3560 	C$lab6.c$347$2$163 ==.
                                   3561 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:347: st =0;
      000AAD 7B 00            [12] 3562 	mov	r3,#0x00
                           000AAF  3563 	C$lab6.c$348$5$166 ==.
                                   3564 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:348: while (1)
      000AAF                       3565 00146$:
                           000AAF  3566 	C$lab6.c$350$3$164 ==.
                                   3567 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:350: printf("\r\n %u",ANGLE_PW);
      000AAF C0 07            [24] 3568 	push	ar7
      000AB1 C0 06            [24] 3569 	push	ar6
      000AB3 C0 05            [24] 3570 	push	ar5
      000AB5 C0 04            [24] 3571 	push	ar4
      000AB7 C0 03            [24] 3572 	push	ar3
      000AB9 C0*28            [24] 3573 	push	_ANGLE_PW
      000ABB C0*29            [24] 3574 	push	(_ANGLE_PW + 1)
      000ABD 74r26            [12] 3575 	mov	a,#___str_10
      000ABF C0 E0            [24] 3576 	push	acc
      000AC1 74s01            [12] 3577 	mov	a,#(___str_10 >> 8)
      000AC3 C0 E0            [24] 3578 	push	acc
      000AC5 74 80            [12] 3579 	mov	a,#0x80
      000AC7 C0 E0            [24] 3580 	push	acc
      000AC9 12r00r00         [24] 3581 	lcall	_printf
      000ACC E5 81            [12] 3582 	mov	a,sp
      000ACE 24 FB            [12] 3583 	add	a,#0xfb
      000AD0 F5 81            [12] 3584 	mov	sp,a
      000AD2 D0 03            [24] 3585 	pop	ar3
      000AD4 D0 04            [24] 3586 	pop	ar4
      000AD6 D0 05            [24] 3587 	pop	ar5
      000AD8 D0 06            [24] 3588 	pop	ar6
      000ADA D0 07            [24] 3589 	pop	ar7
                           000ADC  3590 	C$lab6.c$351$3$164 ==.
                                   3591 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:351: AGL_lo_to_hi = 0xFFFF - ANGLE_PW;
      000ADC 74 FF            [12] 3592 	mov	a,#0xFF
      000ADE C3               [12] 3593 	clr	c
      000ADF 95*28            [12] 3594 	subb	a,_ANGLE_PW
      000AE1 F5*2A            [12] 3595 	mov	_AGL_lo_to_hi,a
      000AE3 74 FF            [12] 3596 	mov	a,#0xFF
      000AE5 95*29            [12] 3597 	subb	a,(_ANGLE_PW + 1)
      000AE7 F5*2B            [12] 3598 	mov	(_AGL_lo_to_hi + 1),a
                           000AE9  3599 	C$lab6.c$352$3$164 ==.
                                   3600 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:352: PCA0CP1 = AGL_lo_to_hi;
      000AE9 85*2A EB         [24] 3601 	mov	((_PCA0CP1 >> 0) & 0xFF),_AGL_lo_to_hi
      000AEC 85*2B FB         [24] 3602 	mov	((_PCA0CP1 >> 8) & 0xFF),(_AGL_lo_to_hi + 1)
                           000AEF  3603 	C$lab6.c$354$3$164 ==.
                                   3604 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:354: if (times == 0 )
      000AEF EC               [12] 3605 	mov	a,r4
      000AF0 4D               [12] 3606 	orl	a,r5
      000AF1 60 03            [24] 3607 	jz	00215$
      000AF3 02r0Br85         [24] 3608 	ljmp	00143$
      000AF6                       3609 00215$:
                           000AF6  3610 	C$lab6.c$356$4$165 ==.
                                   3611 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:356: if (value ==0)
      000AF6 EE               [12] 3612 	mov	a,r6
      000AF7 4F               [12] 3613 	orl	a,r7
      000AF8 70 2F            [24] 3614 	jnz	00110$
                           000AFA  3615 	C$lab6.c$358$5$166 ==.
                                   3616 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:358: lcd_clear();
      000AFA C0 05            [24] 3617 	push	ar5
      000AFC C0 04            [24] 3618 	push	ar4
      000AFE C0 03            [24] 3619 	push	ar3
      000B00 12r00rE1         [24] 3620 	lcall	_lcd_clear
                           000B03  3621 	C$lab6.c$359$5$166 ==.
                                   3622 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:359: lcd_print("Now calibrating Min_PW UP ANGLE");
      000B03 74r84            [12] 3623 	mov	a,#___str_15
      000B05 C0 E0            [24] 3624 	push	acc
      000B07 74s01            [12] 3625 	mov	a,#(___str_15 >> 8)
      000B09 C0 E0            [24] 3626 	push	acc
      000B0B 74 80            [12] 3627 	mov	a,#0x80
      000B0D C0 E0            [24] 3628 	push	acc
      000B0F 12r00r5C         [24] 3629 	lcall	_lcd_print
      000B12 15 81            [12] 3630 	dec	sp
      000B14 15 81            [12] 3631 	dec	sp
      000B16 15 81            [12] 3632 	dec	sp
      000B18 D0 03            [24] 3633 	pop	ar3
      000B1A D0 04            [24] 3634 	pop	ar4
      000B1C D0 05            [24] 3635 	pop	ar5
                           000B1E  3636 	C$lab6.c$360$5$166 ==.
                                   3637 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:360: if (st == 0) ANGLE_PW = PW_UP_ANGLE;
      000B1E EB               [12] 3638 	mov	a,r3
      000B1F 70 06            [24] 3639 	jnz	00108$
      000B21 85*1E*28         [24] 3640 	mov	_ANGLE_PW,_PW_UP_ANGLE
      000B24 85*1F*29         [24] 3641 	mov	(_ANGLE_PW + 1),(_PW_UP_ANGLE + 1)
      000B27                       3642 00108$:
                           000B27  3643 	C$lab6.c$361$5$166 ==.
                                   3644 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:361: st =1;
      000B27 7B 01            [12] 3645 	mov	r3,#0x01
      000B29                       3646 00110$:
                           000B29  3647 	C$lab6.c$363$4$165 ==.
                                   3648 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:363: value = kpd_input(1);
      000B29 75 82 01         [24] 3649 	mov	dpl,#0x01
      000B2C C0 05            [24] 3650 	push	ar5
      000B2E C0 04            [24] 3651 	push	ar4
      000B30 C0 03            [24] 3652 	push	ar3
      000B32 12r01r99         [24] 3653 	lcall	_kpd_input
      000B35 AE 82            [24] 3654 	mov	r6,dpl
      000B37 AF 83            [24] 3655 	mov	r7,dph
      000B39 D0 03            [24] 3656 	pop	ar3
      000B3B D0 04            [24] 3657 	pop	ar4
      000B3D D0 05            [24] 3658 	pop	ar5
                           000B3F  3659 	C$lab6.c$364$4$165 ==.
                                   3660 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:364: if (value == 1)
      000B3F BE 01 12         [24] 3661 	cjne	r6,#0x01,00117$
      000B42 BF 00 0F         [24] 3662 	cjne	r7,#0x00,00117$
                           000B45  3663 	C$lab6.c$366$5$167 ==.
                                   3664 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:366: ANGLE_PW -= 30;
      000B45 E5*28            [12] 3665 	mov	a,_ANGLE_PW
      000B47 24 E2            [12] 3666 	add	a,#0xE2
      000B49 F5*28            [12] 3667 	mov	_ANGLE_PW,a
      000B4B E5*29            [12] 3668 	mov	a,(_ANGLE_PW + 1)
      000B4D 34 FF            [12] 3669 	addc	a,#0xFF
      000B4F F5*29            [12] 3670 	mov	(_ANGLE_PW + 1),a
      000B51 02r0ArAF         [24] 3671 	ljmp	00146$
      000B54                       3672 00117$:
                           000B54  3673 	C$lab6.c$368$4$165 ==.
                                   3674 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:368: else if (value==2)
      000B54 BE 02 11         [24] 3675 	cjne	r6,#0x02,00114$
      000B57 BF 00 0E         [24] 3676 	cjne	r7,#0x00,00114$
                           000B5A  3677 	C$lab6.c$370$5$168 ==.
                                   3678 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:370: ANGLE_PW += 30;
      000B5A 74 1E            [12] 3679 	mov	a,#0x1E
      000B5C 25*28            [12] 3680 	add	a,_ANGLE_PW
      000B5E F5*28            [12] 3681 	mov	_ANGLE_PW,a
      000B60 E4               [12] 3682 	clr	a
      000B61 35*29            [12] 3683 	addc	a,(_ANGLE_PW + 1)
      000B63 F5*29            [12] 3684 	mov	(_ANGLE_PW + 1),a
      000B65 02r0ArAF         [24] 3685 	ljmp	00146$
      000B68                       3686 00114$:
                           000B68  3687 	C$lab6.c$372$4$165 ==.
                                   3688 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:372: else if (value == 3)
      000B68 BE 03 05         [24] 3689 	cjne	r6,#0x03,00222$
      000B6B BF 00 02         [24] 3690 	cjne	r7,#0x00,00222$
      000B6E 80 03            [24] 3691 	sjmp	00223$
      000B70                       3692 00222$:
      000B70 02r0ArAF         [24] 3693 	ljmp	00146$
      000B73                       3694 00223$:
                           000B73  3695 	C$lab6.c$374$5$169 ==.
                                   3696 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:374: times++;
      000B73 0C               [12] 3697 	inc	r4
      000B74 BC 00 01         [24] 3698 	cjne	r4,#0x00,00224$
      000B77 0D               [12] 3699 	inc	r5
      000B78                       3700 00224$:
                           000B78  3701 	C$lab6.c$375$5$169 ==.
                                   3702 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:375: value =0;
      000B78 7E 00            [12] 3703 	mov	r6,#0x00
      000B7A 7F 00            [12] 3704 	mov	r7,#0x00
                           000B7C  3705 	C$lab6.c$376$5$169 ==.
                                   3706 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:376: PW_UP_ANGLE = ANGLE_PW;
      000B7C 85*28*1E         [24] 3707 	mov	_PW_UP_ANGLE,_ANGLE_PW
      000B7F 85*29*1F         [24] 3708 	mov	(_PW_UP_ANGLE + 1),(_ANGLE_PW + 1)
      000B82 02r0ArAF         [24] 3709 	ljmp	00146$
      000B85                       3710 00143$:
                           000B85  3711 	C$lab6.c$379$3$164 ==.
                                   3712 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:379: else if (times ==1)
      000B85 BC 01 05         [24] 3713 	cjne	r4,#0x01,00225$
      000B88 BD 00 02         [24] 3714 	cjne	r5,#0x00,00225$
      000B8B 80 03            [24] 3715 	sjmp	00226$
      000B8D                       3716 00225$:
      000B8D 02r0Cr1A         [24] 3717 	ljmp	00140$
      000B90                       3718 00226$:
                           000B90  3719 	C$lab6.c$381$4$170 ==.
                                   3720 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:381: if (value ==0)
      000B90 EE               [12] 3721 	mov	a,r6
      000B91 4F               [12] 3722 	orl	a,r7
      000B92 70 2A            [24] 3723 	jnz	00120$
                           000B94  3724 	C$lab6.c$383$5$171 ==.
                                   3725 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:383: lcd_clear();
      000B94 C0 05            [24] 3726 	push	ar5
      000B96 C0 04            [24] 3727 	push	ar4
      000B98 C0 03            [24] 3728 	push	ar3
      000B9A 12r00rE1         [24] 3729 	lcall	_lcd_clear
                           000B9D  3730 	C$lab6.c$384$5$171 ==.
                                   3731 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:384: lcd_print("Now calibrating Cen_PW");
      000B9D 74r44            [12] 3732 	mov	a,#___str_12
      000B9F C0 E0            [24] 3733 	push	acc
      000BA1 74s01            [12] 3734 	mov	a,#(___str_12 >> 8)
      000BA3 C0 E0            [24] 3735 	push	acc
      000BA5 74 80            [12] 3736 	mov	a,#0x80
      000BA7 C0 E0            [24] 3737 	push	acc
      000BA9 12r00r5C         [24] 3738 	lcall	_lcd_print
      000BAC 15 81            [12] 3739 	dec	sp
      000BAE 15 81            [12] 3740 	dec	sp
      000BB0 15 81            [12] 3741 	dec	sp
      000BB2 D0 03            [24] 3742 	pop	ar3
      000BB4 D0 04            [24] 3743 	pop	ar4
      000BB6 D0 05            [24] 3744 	pop	ar5
                           000BB8  3745 	C$lab6.c$385$5$171 ==.
                                   3746 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:385: ANGLE_PW = PW_CENTER_ANGLE;
      000BB8 85*20*28         [24] 3747 	mov	_ANGLE_PW,_PW_CENTER_ANGLE
      000BBB 85*21*29         [24] 3748 	mov	(_ANGLE_PW + 1),(_PW_CENTER_ANGLE + 1)
      000BBE                       3749 00120$:
                           000BBE  3750 	C$lab6.c$387$4$170 ==.
                                   3751 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:387: value = kpd_input(1);
      000BBE 75 82 01         [24] 3752 	mov	dpl,#0x01
      000BC1 C0 05            [24] 3753 	push	ar5
      000BC3 C0 04            [24] 3754 	push	ar4
      000BC5 C0 03            [24] 3755 	push	ar3
      000BC7 12r01r99         [24] 3756 	lcall	_kpd_input
      000BCA AE 82            [24] 3757 	mov	r6,dpl
      000BCC AF 83            [24] 3758 	mov	r7,dph
      000BCE D0 03            [24] 3759 	pop	ar3
      000BD0 D0 04            [24] 3760 	pop	ar4
      000BD2 D0 05            [24] 3761 	pop	ar5
                           000BD4  3762 	C$lab6.c$388$4$170 ==.
                                   3763 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:388: if (value == 1)
      000BD4 BE 01 12         [24] 3764 	cjne	r6,#0x01,00127$
      000BD7 BF 00 0F         [24] 3765 	cjne	r7,#0x00,00127$
                           000BDA  3766 	C$lab6.c$390$5$172 ==.
                                   3767 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:390: ANGLE_PW -= 30;
      000BDA E5*28            [12] 3768 	mov	a,_ANGLE_PW
      000BDC 24 E2            [12] 3769 	add	a,#0xE2
      000BDE F5*28            [12] 3770 	mov	_ANGLE_PW,a
      000BE0 E5*29            [12] 3771 	mov	a,(_ANGLE_PW + 1)
      000BE2 34 FF            [12] 3772 	addc	a,#0xFF
      000BE4 F5*29            [12] 3773 	mov	(_ANGLE_PW + 1),a
      000BE6 02r0ArAF         [24] 3774 	ljmp	00146$
      000BE9                       3775 00127$:
                           000BE9  3776 	C$lab6.c$392$4$170 ==.
                                   3777 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:392: else if (value==2)
      000BE9 BE 02 11         [24] 3778 	cjne	r6,#0x02,00124$
      000BEC BF 00 0E         [24] 3779 	cjne	r7,#0x00,00124$
                           000BEF  3780 	C$lab6.c$394$5$173 ==.
                                   3781 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:394: ANGLE_PW += 30;
      000BEF 74 1E            [12] 3782 	mov	a,#0x1E
      000BF1 25*28            [12] 3783 	add	a,_ANGLE_PW
      000BF3 F5*28            [12] 3784 	mov	_ANGLE_PW,a
      000BF5 E4               [12] 3785 	clr	a
      000BF6 35*29            [12] 3786 	addc	a,(_ANGLE_PW + 1)
      000BF8 F5*29            [12] 3787 	mov	(_ANGLE_PW + 1),a
      000BFA 02r0ArAF         [24] 3788 	ljmp	00146$
      000BFD                       3789 00124$:
                           000BFD  3790 	C$lab6.c$396$4$170 ==.
                                   3791 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:396: else if (value == 3)
      000BFD BE 03 05         [24] 3792 	cjne	r6,#0x03,00232$
      000C00 BF 00 02         [24] 3793 	cjne	r7,#0x00,00232$
      000C03 80 03            [24] 3794 	sjmp	00233$
      000C05                       3795 00232$:
      000C05 02r0ArAF         [24] 3796 	ljmp	00146$
      000C08                       3797 00233$:
                           000C08  3798 	C$lab6.c$398$5$174 ==.
                                   3799 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:398: times++;
      000C08 0C               [12] 3800 	inc	r4
      000C09 BC 00 01         [24] 3801 	cjne	r4,#0x00,00234$
      000C0C 0D               [12] 3802 	inc	r5
      000C0D                       3803 00234$:
                           000C0D  3804 	C$lab6.c$399$5$174 ==.
                                   3805 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:399: value=0;
      000C0D 7E 00            [12] 3806 	mov	r6,#0x00
      000C0F 7F 00            [12] 3807 	mov	r7,#0x00
                           000C11  3808 	C$lab6.c$400$5$174 ==.
                                   3809 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:400: PW_CENTER_ANGLE = ANGLE_PW;
      000C11 85*28*20         [24] 3810 	mov	_PW_CENTER_ANGLE,_ANGLE_PW
      000C14 85*29*21         [24] 3811 	mov	(_PW_CENTER_ANGLE + 1),(_ANGLE_PW + 1)
      000C17 02r0ArAF         [24] 3812 	ljmp	00146$
      000C1A                       3813 00140$:
                           000C1A  3814 	C$lab6.c$405$4$175 ==.
                                   3815 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:405: if (value==0)
      000C1A EE               [12] 3816 	mov	a,r6
      000C1B 4F               [12] 3817 	orl	a,r7
      000C1C 70 2A            [24] 3818 	jnz	00130$
                           000C1E  3819 	C$lab6.c$407$5$176 ==.
                                   3820 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:407: lcd_clear();
      000C1E C0 05            [24] 3821 	push	ar5
      000C20 C0 04            [24] 3822 	push	ar4
      000C22 C0 03            [24] 3823 	push	ar3
      000C24 12r00rE1         [24] 3824 	lcall	_lcd_clear
                           000C27  3825 	C$lab6.c$408$5$176 ==.
                                   3826 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:408: lcd_print("Now calibrating Max_PW DOWN ANGLE");
      000C27 74rA4            [12] 3827 	mov	a,#___str_16
      000C29 C0 E0            [24] 3828 	push	acc
      000C2B 74s01            [12] 3829 	mov	a,#(___str_16 >> 8)
      000C2D C0 E0            [24] 3830 	push	acc
      000C2F 74 80            [12] 3831 	mov	a,#0x80
      000C31 C0 E0            [24] 3832 	push	acc
      000C33 12r00r5C         [24] 3833 	lcall	_lcd_print
      000C36 15 81            [12] 3834 	dec	sp
      000C38 15 81            [12] 3835 	dec	sp
      000C3A 15 81            [12] 3836 	dec	sp
      000C3C D0 03            [24] 3837 	pop	ar3
      000C3E D0 04            [24] 3838 	pop	ar4
      000C40 D0 05            [24] 3839 	pop	ar5
                           000C42  3840 	C$lab6.c$409$5$176 ==.
                                   3841 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:409: ANGLE_PW = PW_DOWN_ANGLE;
      000C42 85*22*28         [24] 3842 	mov	_ANGLE_PW,_PW_DOWN_ANGLE
      000C45 85*23*29         [24] 3843 	mov	(_ANGLE_PW + 1),(_PW_DOWN_ANGLE + 1)
      000C48                       3844 00130$:
                           000C48  3845 	C$lab6.c$411$4$175 ==.
                                   3846 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:411: value = kpd_input(1);
      000C48 75 82 01         [24] 3847 	mov	dpl,#0x01
      000C4B C0 05            [24] 3848 	push	ar5
      000C4D C0 04            [24] 3849 	push	ar4
      000C4F C0 03            [24] 3850 	push	ar3
      000C51 12r01r99         [24] 3851 	lcall	_kpd_input
      000C54 AE 82            [24] 3852 	mov	r6,dpl
      000C56 AF 83            [24] 3853 	mov	r7,dph
      000C58 D0 03            [24] 3854 	pop	ar3
      000C5A D0 04            [24] 3855 	pop	ar4
      000C5C D0 05            [24] 3856 	pop	ar5
                           000C5E  3857 	C$lab6.c$412$4$175 ==.
                                   3858 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:412: if (value == 1)
      000C5E BE 01 12         [24] 3859 	cjne	r6,#0x01,00137$
      000C61 BF 00 0F         [24] 3860 	cjne	r7,#0x00,00137$
                           000C64  3861 	C$lab6.c$414$5$177 ==.
                                   3862 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:414: ANGLE_PW -= 30;
      000C64 E5*28            [12] 3863 	mov	a,_ANGLE_PW
      000C66 24 E2            [12] 3864 	add	a,#0xE2
      000C68 F5*28            [12] 3865 	mov	_ANGLE_PW,a
      000C6A E5*29            [12] 3866 	mov	a,(_ANGLE_PW + 1)
      000C6C 34 FF            [12] 3867 	addc	a,#0xFF
      000C6E F5*29            [12] 3868 	mov	(_ANGLE_PW + 1),a
      000C70 02r0ArAF         [24] 3869 	ljmp	00146$
      000C73                       3870 00137$:
                           000C73  3871 	C$lab6.c$416$4$175 ==.
                                   3872 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:416: else if (value==2)
      000C73 BE 02 11         [24] 3873 	cjne	r6,#0x02,00134$
      000C76 BF 00 0E         [24] 3874 	cjne	r7,#0x00,00134$
                           000C79  3875 	C$lab6.c$418$5$178 ==.
                                   3876 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:418: ANGLE_PW += 30;
      000C79 74 1E            [12] 3877 	mov	a,#0x1E
      000C7B 25*28            [12] 3878 	add	a,_ANGLE_PW
      000C7D F5*28            [12] 3879 	mov	_ANGLE_PW,a
      000C7F E4               [12] 3880 	clr	a
      000C80 35*29            [12] 3881 	addc	a,(_ANGLE_PW + 1)
      000C82 F5*29            [12] 3882 	mov	(_ANGLE_PW + 1),a
      000C84 02r0ArAF         [24] 3883 	ljmp	00146$
      000C87                       3884 00134$:
                           000C87  3885 	C$lab6.c$420$4$175 ==.
                                   3886 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:420: else if (value == 3)
      000C87 BE 03 05         [24] 3887 	cjne	r6,#0x03,00240$
      000C8A BF 00 02         [24] 3888 	cjne	r7,#0x00,00240$
      000C8D 80 03            [24] 3889 	sjmp	00241$
      000C8F                       3890 00240$:
      000C8F 02r0ArAF         [24] 3891 	ljmp	00146$
      000C92                       3892 00241$:
                           000C92  3893 	C$lab6.c$422$5$179 ==.
                                   3894 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:422: PW_DOWN_ANGLE = ANGLE_PW;
      000C92 85*28*22         [24] 3895 	mov	_PW_DOWN_ANGLE,_ANGLE_PW
      000C95 85*29*23         [24] 3896 	mov	(_PW_DOWN_ANGLE + 1),(_ANGLE_PW + 1)
                           000C98  3897 	C$lab6.c$423$5$179 ==.
                                   3898 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:423: return;
                           000C98  3899 	C$lab6.c$428$1$162 ==.
                           000C98  3900 	XG$Angle_cal$0$0 ==.
      000C98 22               [24] 3901 	ret
                                   3902 ;------------------------------------------------------------
                                   3903 ;Allocation info for local variables in function 'Thrust_cal'
                                   3904 ;------------------------------------------------------------
                                   3905 ;st                        Allocated to registers r3 
                                   3906 ;value                     Allocated to registers r6 r7 
                                   3907 ;times                     Allocated to registers r4 r5 
                                   3908 ;------------------------------------------------------------
                           000C99  3909 	G$Thrust_cal$0$0 ==.
                           000C99  3910 	C$lab6.c$430$1$162 ==.
                                   3911 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:430: void Thrust_cal(void)
                                   3912 ;	-----------------------------------------
                                   3913 ;	 function Thrust_cal
                                   3914 ;	-----------------------------------------
      000C99                       3915 _Thrust_cal:
                           000C99  3916 	C$lab6.c$433$1$162 ==.
                                   3917 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:433: int value =0;
                           000C99  3918 	C$lab6.c$434$1$162 ==.
                                   3919 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:434: int times =0;
                           000C99  3920 	C$lab6.c$435$1$181 ==.
                                   3921 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:435: count =0;
      000C99 E4               [12] 3922 	clr	a
      000C9A FE               [12] 3923 	mov	r6,a
      000C9B FF               [12] 3924 	mov	r7,a
      000C9C FC               [12] 3925 	mov	r4,a
      000C9D FD               [12] 3926 	mov	r5,a
      000C9E F5*10            [12] 3927 	mov	_count,a
      000CA0 F5*11            [12] 3928 	mov	(_count + 1),a
                           000CA2  3929 	C$lab6.c$436$1$181 ==.
                                   3930 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:436: lcd_clear();
      000CA2 C0 07            [24] 3931 	push	ar7
      000CA4 C0 06            [24] 3932 	push	ar6
      000CA6 C0 05            [24] 3933 	push	ar5
      000CA8 C0 04            [24] 3934 	push	ar4
      000CAA 12r00rE1         [24] 3935 	lcall	_lcd_clear
                           000CAD  3936 	C$lab6.c$437$1$181 ==.
                                   3937 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:437: lcd_print("Thrust Calibration");
      000CAD 74rC6            [12] 3938 	mov	a,#___str_17
      000CAF C0 E0            [24] 3939 	push	acc
      000CB1 74s01            [12] 3940 	mov	a,#(___str_17 >> 8)
      000CB3 C0 E0            [24] 3941 	push	acc
      000CB5 74 80            [12] 3942 	mov	a,#0x80
      000CB7 C0 E0            [24] 3943 	push	acc
      000CB9 12r00r5C         [24] 3944 	lcall	_lcd_print
      000CBC 15 81            [12] 3945 	dec	sp
      000CBE 15 81            [12] 3946 	dec	sp
      000CC0 15 81            [12] 3947 	dec	sp
      000CC2 D0 04            [24] 3948 	pop	ar4
      000CC4 D0 05            [24] 3949 	pop	ar5
      000CC6 D0 06            [24] 3950 	pop	ar6
      000CC8 D0 07            [24] 3951 	pop	ar7
                           000CCA  3952 	C$lab6.c$438$1$181 ==.
                                   3953 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:438: while (count < 50);
      000CCA                       3954 00101$:
      000CCA C3               [12] 3955 	clr	c
      000CCB E5*10            [12] 3956 	mov	a,_count
      000CCD 94 32            [12] 3957 	subb	a,#0x32
      000CCF E5*11            [12] 3958 	mov	a,(_count + 1)
      000CD1 64 80            [12] 3959 	xrl	a,#0x80
      000CD3 94 80            [12] 3960 	subb	a,#0x80
      000CD5 40 F3            [24] 3961 	jc	00101$
                           000CD7  3962 	C$lab6.c$439$1$181 ==.
                                   3963 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:439: lcd_clear();
      000CD7 C0 07            [24] 3964 	push	ar7
      000CD9 C0 06            [24] 3965 	push	ar6
      000CDB C0 05            [24] 3966 	push	ar5
      000CDD C0 04            [24] 3967 	push	ar4
      000CDF 12r00rE1         [24] 3968 	lcall	_lcd_clear
      000CE2 D0 04            [24] 3969 	pop	ar4
      000CE4 D0 05            [24] 3970 	pop	ar5
      000CE6 D0 06            [24] 3971 	pop	ar6
      000CE8 D0 07            [24] 3972 	pop	ar7
                           000CEA  3973 	C$lab6.c$443$2$182 ==.
                                   3974 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:443: count = 0;
      000CEA E4               [12] 3975 	clr	a
      000CEB F5*10            [12] 3976 	mov	_count,a
      000CED F5*11            [12] 3977 	mov	(_count + 1),a
                           000CEF  3978 	C$lab6.c$444$2$182 ==.
                                   3979 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:444: while (count < 1);
      000CEF                       3980 00104$:
      000CEF C3               [12] 3981 	clr	c
      000CF0 E5*10            [12] 3982 	mov	a,_count
      000CF2 94 01            [12] 3983 	subb	a,#0x01
      000CF4 E5*11            [12] 3984 	mov	a,(_count + 1)
      000CF6 64 80            [12] 3985 	xrl	a,#0x80
      000CF8 94 80            [12] 3986 	subb	a,#0x80
      000CFA 40 F3            [24] 3987 	jc	00104$
                           000CFC  3988 	C$lab6.c$445$2$182 ==.
                                   3989 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:445: lcd_clear();
      000CFC C0 07            [24] 3990 	push	ar7
      000CFE C0 06            [24] 3991 	push	ar6
      000D00 C0 05            [24] 3992 	push	ar5
      000D02 C0 04            [24] 3993 	push	ar4
      000D04 12r00rE1         [24] 3994 	lcall	_lcd_clear
                           000D07  3995 	C$lab6.c$446$2$182 ==.
                                   3996 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:446: lcd_print("go left: press 1\n go right: press 2\nPress * for next screen");
      000D07 74rC5            [12] 3997 	mov	a,#___str_8
      000D09 C0 E0            [24] 3998 	push	acc
      000D0B 74s00            [12] 3999 	mov	a,#(___str_8 >> 8)
      000D0D C0 E0            [24] 4000 	push	acc
      000D0F 74 80            [12] 4001 	mov	a,#0x80
      000D11 C0 E0            [24] 4002 	push	acc
      000D13 12r00r5C         [24] 4003 	lcall	_lcd_print
      000D16 15 81            [12] 4004 	dec	sp
      000D18 15 81            [12] 4005 	dec	sp
      000D1A 15 81            [12] 4006 	dec	sp
                           000D1C  4007 	C$lab6.c$447$2$182 ==.
                                   4008 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:447: start();
      000D1C 12r10rAB         [24] 4009 	lcall	_start
                           000D1F  4010 	C$lab6.c$448$2$182 ==.
                                   4011 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:448: lcd_clear();
      000D1F 12r00rE1         [24] 4012 	lcall	_lcd_clear
                           000D22  4013 	C$lab6.c$449$2$182 ==.
                                   4014 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:449: lcd_print("\n confirm: press 3\n press * to begin");
      000D22 74r01            [12] 4015 	mov	a,#___str_9
      000D24 C0 E0            [24] 4016 	push	acc
      000D26 74s01            [12] 4017 	mov	a,#(___str_9 >> 8)
      000D28 C0 E0            [24] 4018 	push	acc
      000D2A 74 80            [12] 4019 	mov	a,#0x80
      000D2C C0 E0            [24] 4020 	push	acc
      000D2E 12r00r5C         [24] 4021 	lcall	_lcd_print
      000D31 15 81            [12] 4022 	dec	sp
      000D33 15 81            [12] 4023 	dec	sp
      000D35 15 81            [12] 4024 	dec	sp
                           000D37  4025 	C$lab6.c$450$2$182 ==.
                                   4026 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:450: start();
      000D37 12r10rAB         [24] 4027 	lcall	_start
      000D3A D0 04            [24] 4028 	pop	ar4
      000D3C D0 05            [24] 4029 	pop	ar5
      000D3E D0 06            [24] 4030 	pop	ar6
      000D40 D0 07            [24] 4031 	pop	ar7
                           000D42  4032 	C$lab6.c$451$2$182 ==.
                                   4033 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:451: st =0;
      000D42 7B 00            [12] 4034 	mov	r3,#0x00
                           000D44  4035 	C$lab6.c$452$5$185 ==.
                                   4036 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:452: while (1)
      000D44                       4037 00148$:
                           000D44  4038 	C$lab6.c$454$3$183 ==.
                                   4039 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:454: printf("\r\n %u",RTHRUST_PW);
      000D44 C0 07            [24] 4040 	push	ar7
      000D46 C0 06            [24] 4041 	push	ar6
      000D48 C0 05            [24] 4042 	push	ar5
      000D4A C0 04            [24] 4043 	push	ar4
      000D4C C0 03            [24] 4044 	push	ar3
      000D4E C0*2C            [24] 4045 	push	_RTHRUST_PW
      000D50 C0*2D            [24] 4046 	push	(_RTHRUST_PW + 1)
      000D52 74r26            [12] 4047 	mov	a,#___str_10
      000D54 C0 E0            [24] 4048 	push	acc
      000D56 74s01            [12] 4049 	mov	a,#(___str_10 >> 8)
      000D58 C0 E0            [24] 4050 	push	acc
      000D5A 74 80            [12] 4051 	mov	a,#0x80
      000D5C C0 E0            [24] 4052 	push	acc
      000D5E 12r00r00         [24] 4053 	lcall	_printf
      000D61 E5 81            [12] 4054 	mov	a,sp
      000D63 24 FB            [12] 4055 	add	a,#0xfb
      000D65 F5 81            [12] 4056 	mov	sp,a
      000D67 D0 03            [24] 4057 	pop	ar3
      000D69 D0 04            [24] 4058 	pop	ar4
      000D6B D0 05            [24] 4059 	pop	ar5
      000D6D D0 06            [24] 4060 	pop	ar6
      000D6F D0 07            [24] 4061 	pop	ar7
                           000D71  4062 	C$lab6.c$455$3$183 ==.
                                   4063 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:455: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      000D71 74 FF            [12] 4064 	mov	a,#0xFF
      000D73 C3               [12] 4065 	clr	c
      000D74 95*2C            [12] 4066 	subb	a,_RTHRUST_PW
      000D76 F5*30            [12] 4067 	mov	_RTRST_lo_to_hi,a
      000D78 74 FF            [12] 4068 	mov	a,#0xFF
      000D7A 95*2D            [12] 4069 	subb	a,(_RTHRUST_PW + 1)
      000D7C F5*31            [12] 4070 	mov	(_RTRST_lo_to_hi + 1),a
                           000D7E  4071 	C$lab6.c$456$3$183 ==.
                                   4072 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:456: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      000D7E 74 FF            [12] 4073 	mov	a,#0xFF
      000D80 C3               [12] 4074 	clr	c
      000D81 95*2E            [12] 4075 	subb	a,_LTHRUST_PW
      000D83 F5*32            [12] 4076 	mov	_LTRST_lo_to_hi,a
      000D85 74 FF            [12] 4077 	mov	a,#0xFF
      000D87 95*2F            [12] 4078 	subb	a,(_LTHRUST_PW + 1)
      000D89 F5*33            [12] 4079 	mov	(_LTRST_lo_to_hi + 1),a
                           000D8B  4080 	C$lab6.c$457$3$183 ==.
                                   4081 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:457: PCA0CP2 = RTRST_lo_to_hi;
      000D8B 85*30 EC         [24] 4082 	mov	((_PCA0CP2 >> 0) & 0xFF),_RTRST_lo_to_hi
      000D8E 85*31 FC         [24] 4083 	mov	((_PCA0CP2 >> 8) & 0xFF),(_RTRST_lo_to_hi + 1)
                           000D91  4084 	C$lab6.c$458$3$183 ==.
                                   4085 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:458: PCA0CP3 = LTRST_lo_to_hi;
      000D91 85*32 ED         [24] 4086 	mov	((_PCA0CP3 >> 0) & 0xFF),_LTRST_lo_to_hi
      000D94 85*33 FD         [24] 4087 	mov	((_PCA0CP3 >> 8) & 0xFF),(_LTRST_lo_to_hi + 1)
                           000D97  4088 	C$lab6.c$462$3$183 ==.
                                   4089 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:462: if (times == 0 )
      000D97 EC               [12] 4090 	mov	a,r4
      000D98 4D               [12] 4091 	orl	a,r5
      000D99 60 03            [24] 4092 	jz	00220$
      000D9B 02r0Er4A         [24] 4093 	ljmp	00145$
      000D9E                       4094 00220$:
                           000D9E  4095 	C$lab6.c$464$4$184 ==.
                                   4096 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:464: if (value ==0)
      000D9E EE               [12] 4097 	mov	a,r6
      000D9F 4F               [12] 4098 	orl	a,r7
      000DA0 70 35            [24] 4099 	jnz	00110$
                           000DA2  4100 	C$lab6.c$466$5$185 ==.
                                   4101 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:466: lcd_clear();
      000DA2 C0 05            [24] 4102 	push	ar5
      000DA4 C0 04            [24] 4103 	push	ar4
      000DA6 C0 03            [24] 4104 	push	ar3
      000DA8 12r00rE1         [24] 4105 	lcall	_lcd_clear
                           000DAB  4106 	C$lab6.c$467$5$185 ==.
                                   4107 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:467: lcd_print("Now calibrating Min_PW");
      000DAB 74rD9            [12] 4108 	mov	a,#___str_18
      000DAD C0 E0            [24] 4109 	push	acc
      000DAF 74s01            [12] 4110 	mov	a,#(___str_18 >> 8)
      000DB1 C0 E0            [24] 4111 	push	acc
      000DB3 74 80            [12] 4112 	mov	a,#0x80
      000DB5 C0 E0            [24] 4113 	push	acc
      000DB7 12r00r5C         [24] 4114 	lcall	_lcd_print
      000DBA 15 81            [12] 4115 	dec	sp
      000DBC 15 81            [12] 4116 	dec	sp
      000DBE 15 81            [12] 4117 	dec	sp
      000DC0 D0 03            [24] 4118 	pop	ar3
      000DC2 D0 04            [24] 4119 	pop	ar4
      000DC4 D0 05            [24] 4120 	pop	ar5
                           000DC6  4121 	C$lab6.c$468$5$185 ==.
                                   4122 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:468: if (st ==0)
      000DC6 EB               [12] 4123 	mov	a,r3
      000DC7 70 0C            [24] 4124 	jnz	00108$
                           000DC9  4125 	C$lab6.c$470$6$186 ==.
                                   4126 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:470: RTHRUST_PW = PW_MIN_THRUST;
      000DC9 85*12*2C         [24] 4127 	mov	_RTHRUST_PW,_PW_MIN_THRUST
      000DCC 85*13*2D         [24] 4128 	mov	(_RTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
                           000DCF  4129 	C$lab6.c$471$6$186 ==.
                                   4130 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:471: LTHRUST_PW = PW_MIN_THRUST;
      000DCF 85*12*2E         [24] 4131 	mov	_LTHRUST_PW,_PW_MIN_THRUST
      000DD2 85*13*2F         [24] 4132 	mov	(_LTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
      000DD5                       4133 00108$:
                           000DD5  4134 	C$lab6.c$473$5$185 ==.
                                   4135 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:473: st =1;
      000DD5 7B 01            [12] 4136 	mov	r3,#0x01
      000DD7                       4137 00110$:
                           000DD7  4138 	C$lab6.c$475$4$184 ==.
                                   4139 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:475: value = kpd_input(1);
      000DD7 75 82 01         [24] 4140 	mov	dpl,#0x01
      000DDA C0 05            [24] 4141 	push	ar5
      000DDC C0 04            [24] 4142 	push	ar4
      000DDE C0 03            [24] 4143 	push	ar3
      000DE0 12r01r99         [24] 4144 	lcall	_kpd_input
      000DE3 AE 82            [24] 4145 	mov	r6,dpl
      000DE5 AF 83            [24] 4146 	mov	r7,dph
      000DE7 D0 03            [24] 4147 	pop	ar3
      000DE9 D0 04            [24] 4148 	pop	ar4
      000DEB D0 05            [24] 4149 	pop	ar5
                           000DED  4150 	C$lab6.c$476$4$184 ==.
                                   4151 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:476: if (value == 1)
      000DED BE 01 1D         [24] 4152 	cjne	r6,#0x01,00117$
      000DF0 BF 00 1A         [24] 4153 	cjne	r7,#0x00,00117$
                           000DF3  4154 	C$lab6.c$478$5$187 ==.
                                   4155 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:478: RTHRUST_PW -= 30;
      000DF3 E5*2C            [12] 4156 	mov	a,_RTHRUST_PW
      000DF5 24 E2            [12] 4157 	add	a,#0xE2
      000DF7 F5*2C            [12] 4158 	mov	_RTHRUST_PW,a
      000DF9 E5*2D            [12] 4159 	mov	a,(_RTHRUST_PW + 1)
      000DFB 34 FF            [12] 4160 	addc	a,#0xFF
      000DFD F5*2D            [12] 4161 	mov	(_RTHRUST_PW + 1),a
                           000DFF  4162 	C$lab6.c$479$5$187 ==.
                                   4163 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:479: LTHRUST_PW += 30;
      000DFF 74 1E            [12] 4164 	mov	a,#0x1E
      000E01 25*2E            [12] 4165 	add	a,_LTHRUST_PW
      000E03 F5*2E            [12] 4166 	mov	_LTHRUST_PW,a
      000E05 E4               [12] 4167 	clr	a
      000E06 35*2F            [12] 4168 	addc	a,(_LTHRUST_PW + 1)
      000E08 F5*2F            [12] 4169 	mov	(_LTHRUST_PW + 1),a
      000E0A 02r0Dr44         [24] 4170 	ljmp	00148$
      000E0D                       4171 00117$:
                           000E0D  4172 	C$lab6.c$481$4$184 ==.
                                   4173 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:481: else if (value==2)
      000E0D BE 02 1D         [24] 4174 	cjne	r6,#0x02,00114$
      000E10 BF 00 1A         [24] 4175 	cjne	r7,#0x00,00114$
                           000E13  4176 	C$lab6.c$483$5$188 ==.
                                   4177 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:483: RTHRUST_PW += 30;
      000E13 74 1E            [12] 4178 	mov	a,#0x1E
      000E15 25*2C            [12] 4179 	add	a,_RTHRUST_PW
      000E17 F5*2C            [12] 4180 	mov	_RTHRUST_PW,a
      000E19 E4               [12] 4181 	clr	a
      000E1A 35*2D            [12] 4182 	addc	a,(_RTHRUST_PW + 1)
      000E1C F5*2D            [12] 4183 	mov	(_RTHRUST_PW + 1),a
                           000E1E  4184 	C$lab6.c$484$5$188 ==.
                                   4185 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:484: LTHRUST_PW -= 30;
      000E1E E5*2E            [12] 4186 	mov	a,_LTHRUST_PW
      000E20 24 E2            [12] 4187 	add	a,#0xE2
      000E22 F5*2E            [12] 4188 	mov	_LTHRUST_PW,a
      000E24 E5*2F            [12] 4189 	mov	a,(_LTHRUST_PW + 1)
      000E26 34 FF            [12] 4190 	addc	a,#0xFF
      000E28 F5*2F            [12] 4191 	mov	(_LTHRUST_PW + 1),a
      000E2A 02r0Dr44         [24] 4192 	ljmp	00148$
      000E2D                       4193 00114$:
                           000E2D  4194 	C$lab6.c$486$4$184 ==.
                                   4195 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:486: else if (value == 3)
      000E2D BE 03 05         [24] 4196 	cjne	r6,#0x03,00227$
      000E30 BF 00 02         [24] 4197 	cjne	r7,#0x00,00227$
      000E33 80 03            [24] 4198 	sjmp	00228$
      000E35                       4199 00227$:
      000E35 02r0Dr44         [24] 4200 	ljmp	00148$
      000E38                       4201 00228$:
                           000E38  4202 	C$lab6.c$488$5$189 ==.
                                   4203 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:488: times++;
      000E38 0C               [12] 4204 	inc	r4
      000E39 BC 00 01         [24] 4205 	cjne	r4,#0x00,00229$
      000E3C 0D               [12] 4206 	inc	r5
      000E3D                       4207 00229$:
                           000E3D  4208 	C$lab6.c$489$5$189 ==.
                                   4209 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:489: value =0;
      000E3D 7E 00            [12] 4210 	mov	r6,#0x00
      000E3F 7F 00            [12] 4211 	mov	r7,#0x00
                           000E41  4212 	C$lab6.c$490$5$189 ==.
                                   4213 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:490: PW_MIN_THRUST = LTHRUST_PW;
      000E41 85*2E*12         [24] 4214 	mov	_PW_MIN_THRUST,_LTHRUST_PW
      000E44 85*2F*13         [24] 4215 	mov	(_PW_MIN_THRUST + 1),(_LTHRUST_PW + 1)
      000E47 02r0Dr44         [24] 4216 	ljmp	00148$
      000E4A                       4217 00145$:
                           000E4A  4218 	C$lab6.c$493$3$183 ==.
                                   4219 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:493: else if (times ==1)
      000E4A BC 01 05         [24] 4220 	cjne	r4,#0x01,00230$
      000E4D BD 00 02         [24] 4221 	cjne	r5,#0x00,00230$
      000E50 80 03            [24] 4222 	sjmp	00231$
      000E52                       4223 00230$:
      000E52 02r0Fr01         [24] 4224 	ljmp	00142$
      000E55                       4225 00231$:
                           000E55  4226 	C$lab6.c$495$4$190 ==.
                                   4227 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:495: if (value ==0)
      000E55 EE               [12] 4228 	mov	a,r6
      000E56 4F               [12] 4229 	orl	a,r7
      000E57 70 35            [24] 4230 	jnz	00122$
                           000E59  4231 	C$lab6.c$497$5$191 ==.
                                   4232 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:497: lcd_clear();
      000E59 C0 05            [24] 4233 	push	ar5
      000E5B C0 04            [24] 4234 	push	ar4
      000E5D C0 03            [24] 4235 	push	ar3
      000E5F 12r00rE1         [24] 4236 	lcall	_lcd_clear
                           000E62  4237 	C$lab6.c$498$5$191 ==.
                                   4238 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:498: lcd_print("Now calibrating Min_PW");
      000E62 74rD9            [12] 4239 	mov	a,#___str_18
      000E64 C0 E0            [24] 4240 	push	acc
      000E66 74s01            [12] 4241 	mov	a,#(___str_18 >> 8)
      000E68 C0 E0            [24] 4242 	push	acc
      000E6A 74 80            [12] 4243 	mov	a,#0x80
      000E6C C0 E0            [24] 4244 	push	acc
      000E6E 12r00r5C         [24] 4245 	lcall	_lcd_print
      000E71 15 81            [12] 4246 	dec	sp
      000E73 15 81            [12] 4247 	dec	sp
      000E75 15 81            [12] 4248 	dec	sp
      000E77 D0 03            [24] 4249 	pop	ar3
      000E79 D0 04            [24] 4250 	pop	ar4
      000E7B D0 05            [24] 4251 	pop	ar5
                           000E7D  4252 	C$lab6.c$499$5$191 ==.
                                   4253 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:499: if (st ==0)
      000E7D EB               [12] 4254 	mov	a,r3
      000E7E 70 0C            [24] 4255 	jnz	00120$
                           000E80  4256 	C$lab6.c$501$6$192 ==.
                                   4257 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:501: RTHRUST_PW = PW_NUET_THRUST;
      000E80 85*14*2C         [24] 4258 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      000E83 85*15*2D         [24] 4259 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           000E86  4260 	C$lab6.c$502$6$192 ==.
                                   4261 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:502: LTHRUST_PW = PW_NUET_THRUST;
      000E86 85*14*2E         [24] 4262 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      000E89 85*15*2F         [24] 4263 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
      000E8C                       4264 00120$:
                           000E8C  4265 	C$lab6.c$504$5$191 ==.
                                   4266 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:504: st =1;
      000E8C 7B 01            [12] 4267 	mov	r3,#0x01
      000E8E                       4268 00122$:
                           000E8E  4269 	C$lab6.c$506$4$190 ==.
                                   4270 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:506: value = kpd_input(1);
      000E8E 75 82 01         [24] 4271 	mov	dpl,#0x01
      000E91 C0 05            [24] 4272 	push	ar5
      000E93 C0 04            [24] 4273 	push	ar4
      000E95 C0 03            [24] 4274 	push	ar3
      000E97 12r01r99         [24] 4275 	lcall	_kpd_input
      000E9A AE 82            [24] 4276 	mov	r6,dpl
      000E9C AF 83            [24] 4277 	mov	r7,dph
      000E9E D0 03            [24] 4278 	pop	ar3
      000EA0 D0 04            [24] 4279 	pop	ar4
      000EA2 D0 05            [24] 4280 	pop	ar5
                           000EA4  4281 	C$lab6.c$507$4$190 ==.
                                   4282 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:507: if (value == 1)
      000EA4 BE 01 1D         [24] 4283 	cjne	r6,#0x01,00129$
      000EA7 BF 00 1A         [24] 4284 	cjne	r7,#0x00,00129$
                           000EAA  4285 	C$lab6.c$509$5$193 ==.
                                   4286 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:509: RTHRUST_PW -= 30;
      000EAA E5*2C            [12] 4287 	mov	a,_RTHRUST_PW
      000EAC 24 E2            [12] 4288 	add	a,#0xE2
      000EAE F5*2C            [12] 4289 	mov	_RTHRUST_PW,a
      000EB0 E5*2D            [12] 4290 	mov	a,(_RTHRUST_PW + 1)
      000EB2 34 FF            [12] 4291 	addc	a,#0xFF
      000EB4 F5*2D            [12] 4292 	mov	(_RTHRUST_PW + 1),a
                           000EB6  4293 	C$lab6.c$510$5$193 ==.
                                   4294 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:510: LTHRUST_PW += 30;
      000EB6 74 1E            [12] 4295 	mov	a,#0x1E
      000EB8 25*2E            [12] 4296 	add	a,_LTHRUST_PW
      000EBA F5*2E            [12] 4297 	mov	_LTHRUST_PW,a
      000EBC E4               [12] 4298 	clr	a
      000EBD 35*2F            [12] 4299 	addc	a,(_LTHRUST_PW + 1)
      000EBF F5*2F            [12] 4300 	mov	(_LTHRUST_PW + 1),a
      000EC1 02r0Dr44         [24] 4301 	ljmp	00148$
      000EC4                       4302 00129$:
                           000EC4  4303 	C$lab6.c$512$4$190 ==.
                                   4304 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:512: else if (value==2)
      000EC4 BE 02 1D         [24] 4305 	cjne	r6,#0x02,00126$
      000EC7 BF 00 1A         [24] 4306 	cjne	r7,#0x00,00126$
                           000ECA  4307 	C$lab6.c$514$5$194 ==.
                                   4308 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:514: RTHRUST_PW += 30;
      000ECA 74 1E            [12] 4309 	mov	a,#0x1E
      000ECC 25*2C            [12] 4310 	add	a,_RTHRUST_PW
      000ECE F5*2C            [12] 4311 	mov	_RTHRUST_PW,a
      000ED0 E4               [12] 4312 	clr	a
      000ED1 35*2D            [12] 4313 	addc	a,(_RTHRUST_PW + 1)
      000ED3 F5*2D            [12] 4314 	mov	(_RTHRUST_PW + 1),a
                           000ED5  4315 	C$lab6.c$515$5$194 ==.
                                   4316 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:515: LTHRUST_PW -= 30;
      000ED5 E5*2E            [12] 4317 	mov	a,_LTHRUST_PW
      000ED7 24 E2            [12] 4318 	add	a,#0xE2
      000ED9 F5*2E            [12] 4319 	mov	_LTHRUST_PW,a
      000EDB E5*2F            [12] 4320 	mov	a,(_LTHRUST_PW + 1)
      000EDD 34 FF            [12] 4321 	addc	a,#0xFF
      000EDF F5*2F            [12] 4322 	mov	(_LTHRUST_PW + 1),a
      000EE1 02r0Dr44         [24] 4323 	ljmp	00148$
      000EE4                       4324 00126$:
                           000EE4  4325 	C$lab6.c$517$4$190 ==.
                                   4326 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:517: else if (value == 3)
      000EE4 BE 03 05         [24] 4327 	cjne	r6,#0x03,00238$
      000EE7 BF 00 02         [24] 4328 	cjne	r7,#0x00,00238$
      000EEA 80 03            [24] 4329 	sjmp	00239$
      000EEC                       4330 00238$:
      000EEC 02r0Dr44         [24] 4331 	ljmp	00148$
      000EEF                       4332 00239$:
                           000EEF  4333 	C$lab6.c$519$5$195 ==.
                                   4334 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:519: times++;
      000EEF 0C               [12] 4335 	inc	r4
      000EF0 BC 00 01         [24] 4336 	cjne	r4,#0x00,00240$
      000EF3 0D               [12] 4337 	inc	r5
      000EF4                       4338 00240$:
                           000EF4  4339 	C$lab6.c$520$5$195 ==.
                                   4340 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:520: value =0;
      000EF4 7E 00            [12] 4341 	mov	r6,#0x00
      000EF6 7F 00            [12] 4342 	mov	r7,#0x00
                           000EF8  4343 	C$lab6.c$521$5$195 ==.
                                   4344 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:521: PW_NUET_THRUST = RTHRUST_PW;
      000EF8 85*2C*14         [24] 4345 	mov	_PW_NUET_THRUST,_RTHRUST_PW
      000EFB 85*2D*15         [24] 4346 	mov	(_PW_NUET_THRUST + 1),(_RTHRUST_PW + 1)
      000EFE 02r0Dr44         [24] 4347 	ljmp	00148$
      000F01                       4348 00142$:
                           000F01  4349 	C$lab6.c$526$4$196 ==.
                                   4350 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:526: if (value==0)
      000F01 EE               [12] 4351 	mov	a,r6
      000F02 4F               [12] 4352 	orl	a,r7
      000F03 70 2A            [24] 4353 	jnz	00132$
                           000F05  4354 	C$lab6.c$528$5$197 ==.
                                   4355 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:528: lcd_clear();
      000F05 C0 05            [24] 4356 	push	ar5
      000F07 C0 04            [24] 4357 	push	ar4
      000F09 C0 03            [24] 4358 	push	ar3
      000F0B 12r00rE1         [24] 4359 	lcall	_lcd_clear
                           000F0E  4360 	C$lab6.c$529$5$197 ==.
                                   4361 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:529: lcd_print("Now calibrating Max_PW");
      000F0E 74r5B            [12] 4362 	mov	a,#___str_13
      000F10 C0 E0            [24] 4363 	push	acc
      000F12 74s01            [12] 4364 	mov	a,#(___str_13 >> 8)
      000F14 C0 E0            [24] 4365 	push	acc
      000F16 74 80            [12] 4366 	mov	a,#0x80
      000F18 C0 E0            [24] 4367 	push	acc
      000F1A 12r00r5C         [24] 4368 	lcall	_lcd_print
      000F1D 15 81            [12] 4369 	dec	sp
      000F1F 15 81            [12] 4370 	dec	sp
      000F21 15 81            [12] 4371 	dec	sp
      000F23 D0 03            [24] 4372 	pop	ar3
      000F25 D0 04            [24] 4373 	pop	ar4
      000F27 D0 05            [24] 4374 	pop	ar5
                           000F29  4375 	C$lab6.c$530$5$197 ==.
                                   4376 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:530: RTHRUST_PW = PW_MAX_THRUST;
      000F29 85*16*2C         [24] 4377 	mov	_RTHRUST_PW,_PW_MAX_THRUST
      000F2C 85*17*2D         [24] 4378 	mov	(_RTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
      000F2F                       4379 00132$:
                           000F2F  4380 	C$lab6.c$532$4$196 ==.
                                   4381 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:532: value = kpd_input(1);
      000F2F 75 82 01         [24] 4382 	mov	dpl,#0x01
      000F32 C0 05            [24] 4383 	push	ar5
      000F34 C0 04            [24] 4384 	push	ar4
      000F36 C0 03            [24] 4385 	push	ar3
      000F38 12r01r99         [24] 4386 	lcall	_kpd_input
      000F3B AE 82            [24] 4387 	mov	r6,dpl
      000F3D AF 83            [24] 4388 	mov	r7,dph
      000F3F D0 03            [24] 4389 	pop	ar3
      000F41 D0 04            [24] 4390 	pop	ar4
      000F43 D0 05            [24] 4391 	pop	ar5
                           000F45  4392 	C$lab6.c$533$4$196 ==.
                                   4393 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:533: if (value == 1)
      000F45 BE 01 12         [24] 4394 	cjne	r6,#0x01,00139$
      000F48 BF 00 0F         [24] 4395 	cjne	r7,#0x00,00139$
                           000F4B  4396 	C$lab6.c$535$5$198 ==.
                                   4397 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:535: RTHRUST_PW -= 30;
      000F4B E5*2C            [12] 4398 	mov	a,_RTHRUST_PW
      000F4D 24 E2            [12] 4399 	add	a,#0xE2
      000F4F F5*2C            [12] 4400 	mov	_RTHRUST_PW,a
      000F51 E5*2D            [12] 4401 	mov	a,(_RTHRUST_PW + 1)
      000F53 34 FF            [12] 4402 	addc	a,#0xFF
      000F55 F5*2D            [12] 4403 	mov	(_RTHRUST_PW + 1),a
      000F57 02r0Dr44         [24] 4404 	ljmp	00148$
      000F5A                       4405 00139$:
                           000F5A  4406 	C$lab6.c$537$4$196 ==.
                                   4407 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:537: else if (value==2)
      000F5A BE 02 11         [24] 4408 	cjne	r6,#0x02,00136$
      000F5D BF 00 0E         [24] 4409 	cjne	r7,#0x00,00136$
                           000F60  4410 	C$lab6.c$539$5$199 ==.
                                   4411 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:539: RTHRUST_PW += 30;
      000F60 74 1E            [12] 4412 	mov	a,#0x1E
      000F62 25*2C            [12] 4413 	add	a,_RTHRUST_PW
      000F64 F5*2C            [12] 4414 	mov	_RTHRUST_PW,a
      000F66 E4               [12] 4415 	clr	a
      000F67 35*2D            [12] 4416 	addc	a,(_RTHRUST_PW + 1)
      000F69 F5*2D            [12] 4417 	mov	(_RTHRUST_PW + 1),a
      000F6B 02r0Dr44         [24] 4418 	ljmp	00148$
      000F6E                       4419 00136$:
                           000F6E  4420 	C$lab6.c$541$4$196 ==.
                                   4421 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:541: else if (value == 3)
      000F6E BE 03 05         [24] 4422 	cjne	r6,#0x03,00246$
      000F71 BF 00 02         [24] 4423 	cjne	r7,#0x00,00246$
      000F74 80 03            [24] 4424 	sjmp	00247$
      000F76                       4425 00246$:
      000F76 02r0Dr44         [24] 4426 	ljmp	00148$
      000F79                       4427 00247$:
                           000F79  4428 	C$lab6.c$543$5$200 ==.
                                   4429 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:543: PW_MAX_THRUST = RTHRUST_PW;
      000F79 85*2C*16         [24] 4430 	mov	_PW_MAX_THRUST,_RTHRUST_PW
      000F7C 85*2D*17         [24] 4431 	mov	(_PW_MAX_THRUST + 1),(_RTHRUST_PW + 1)
                           000F7F  4432 	C$lab6.c$544$5$200 ==.
                                   4433 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:544: return;
                           000F7F  4434 	C$lab6.c$549$1$181 ==.
                           000F7F  4435 	XG$Thrust_cal$0$0 ==.
      000F7F 22               [24] 4436 	ret
                                   4437 ;------------------------------------------------------------
                                   4438 ;Allocation info for local variables in function 'Steering_Servo'
                                   4439 ;------------------------------------------------------------
                                   4440 ;direction                 Allocated to registers r6 r7 
                                   4441 ;------------------------------------------------------------
                           000F80  4442 	G$Steering_Servo$0$0 ==.
                           000F80  4443 	C$lab6.c$552$1$181 ==.
                                   4444 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:552: void Steering_Servo(unsigned int direction)
                                   4445 ;	-----------------------------------------
                                   4446 ;	 function Steering_Servo
                                   4447 ;	-----------------------------------------
      000F80                       4448 _Steering_Servo:
      000F80 AE 82            [24] 4449 	mov	r6,dpl
      000F82 AF 83            [24] 4450 	mov	r7,dph
                           000F84  4451 	C$lab6.c$556$1$202 ==.
                                   4452 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:556: error = desired_D - direction;
      000F84 AC*34            [24] 4453 	mov	r4,_desired_D
      000F86 AD*35            [24] 4454 	mov	r5,(_desired_D + 1)
      000F88 EC               [12] 4455 	mov	a,r4
      000F89 C3               [12] 4456 	clr	c
      000F8A 9E               [12] 4457 	subb	a,r6
      000F8B F5*3A            [12] 4458 	mov	_error,a
      000F8D ED               [12] 4459 	mov	a,r5
      000F8E 9F               [12] 4460 	subb	a,r7
      000F8F F5*3B            [12] 4461 	mov	(_error + 1),a
                           000F91  4462 	C$lab6.c$558$1$202 ==.
                                   4463 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:558: RUDDER_PW  = PW_CENTER_RUDDER + (kp*error) + kd * (old_error - error);
      000F91 85*3A*00         [24] 4464 	mov	__mulint_PARM_2,_error
      000F94 85*3B*01         [24] 4465 	mov	(__mulint_PARM_2 + 1),(_error + 1)
      000F97 85*40 82         [24] 4466 	mov	dpl,_kp
      000F9A 85*41 83         [24] 4467 	mov	dph,(_kp + 1)
      000F9D 12r00r00         [24] 4468 	lcall	__mulint
      000FA0 AE 82            [24] 4469 	mov	r6,dpl
      000FA2 AF 83            [24] 4470 	mov	r7,dph
      000FA4 EE               [12] 4471 	mov	a,r6
      000FA5 25*1A            [12] 4472 	add	a,_PW_CENTER_RUDDER
      000FA7 FC               [12] 4473 	mov	r4,a
      000FA8 EF               [12] 4474 	mov	a,r7
      000FA9 35*1B            [12] 4475 	addc	a,(_PW_CENTER_RUDDER + 1)
      000FAB FD               [12] 4476 	mov	r5,a
      000FAC E5*3C            [12] 4477 	mov	a,_old_error
      000FAE C3               [12] 4478 	clr	c
      000FAF 95*3A            [12] 4479 	subb	a,_error
      000FB1 F5*00            [12] 4480 	mov	__mulint_PARM_2,a
      000FB3 E5*3D            [12] 4481 	mov	a,(_old_error + 1)
      000FB5 95*3B            [12] 4482 	subb	a,(_error + 1)
      000FB7 F5*01            [12] 4483 	mov	(__mulint_PARM_2 + 1),a
      000FB9 85*42 82         [24] 4484 	mov	dpl,_kd
      000FBC 85*43 83         [24] 4485 	mov	dph,(_kd + 1)
      000FBF C0 07            [24] 4486 	push	ar7
      000FC1 C0 06            [24] 4487 	push	ar6
      000FC3 C0 05            [24] 4488 	push	ar5
      000FC5 C0 04            [24] 4489 	push	ar4
      000FC7 12r00r00         [24] 4490 	lcall	__mulint
      000FCA AA 82            [24] 4491 	mov	r2,dpl
      000FCC AB 83            [24] 4492 	mov	r3,dph
      000FCE D0 04            [24] 4493 	pop	ar4
      000FD0 D0 05            [24] 4494 	pop	ar5
      000FD2 D0 06            [24] 4495 	pop	ar6
      000FD4 D0 07            [24] 4496 	pop	ar7
      000FD6 EA               [12] 4497 	mov	a,r2
      000FD7 2C               [12] 4498 	add	a,r4
      000FD8 F5*24            [12] 4499 	mov	_RUDDER_PW,a
      000FDA EB               [12] 4500 	mov	a,r3
      000FDB 3D               [12] 4501 	addc	a,r5
      000FDC F5*25            [12] 4502 	mov	(_RUDDER_PW + 1),a
                           000FDE  4503 	C$lab6.c$560$1$202 ==.
                                   4504 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:560: RTHRUST_PW = PW_NUET_THRUST   + (kp*error) + kd * (old_error - error);
      000FDE EE               [12] 4505 	mov	a,r6
      000FDF 25*14            [12] 4506 	add	a,_PW_NUET_THRUST
      000FE1 FC               [12] 4507 	mov	r4,a
      000FE2 EF               [12] 4508 	mov	a,r7
      000FE3 35*15            [12] 4509 	addc	a,(_PW_NUET_THRUST + 1)
      000FE5 FD               [12] 4510 	mov	r5,a
      000FE6 EA               [12] 4511 	mov	a,r2
      000FE7 2C               [12] 4512 	add	a,r4
      000FE8 F5*2C            [12] 4513 	mov	_RTHRUST_PW,a
      000FEA EB               [12] 4514 	mov	a,r3
      000FEB 3D               [12] 4515 	addc	a,r5
      000FEC F5*2D            [12] 4516 	mov	(_RTHRUST_PW + 1),a
                           000FEE  4517 	C$lab6.c$562$1$202 ==.
                                   4518 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:562: LTHRUST_PW = PW_NUET_THRUST   - (kp*error) + kd * (old_error - error);
      000FEE E5*14            [12] 4519 	mov	a,_PW_NUET_THRUST
      000FF0 C3               [12] 4520 	clr	c
      000FF1 9E               [12] 4521 	subb	a,r6
      000FF2 FE               [12] 4522 	mov	r6,a
      000FF3 E5*15            [12] 4523 	mov	a,(_PW_NUET_THRUST + 1)
      000FF5 9F               [12] 4524 	subb	a,r7
      000FF6 FF               [12] 4525 	mov	r7,a
      000FF7 EA               [12] 4526 	mov	a,r2
      000FF8 2E               [12] 4527 	add	a,r6
      000FF9 F5*2E            [12] 4528 	mov	_LTHRUST_PW,a
      000FFB EB               [12] 4529 	mov	a,r3
      000FFC 3F               [12] 4530 	addc	a,r7
      000FFD F5*2F            [12] 4531 	mov	(_LTHRUST_PW + 1),a
                           000FFF  4532 	C$lab6.c$564$1$202 ==.
                                   4533 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:564: old_error=error;
      000FFF 85*3A*3C         [24] 4534 	mov	_old_error,_error
      001002 85*3B*3D         [24] 4535 	mov	(_old_error + 1),(_error + 1)
                           001005  4536 	C$lab6.c$567$1$202 ==.
                                   4537 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:567: if (RUDDER_PW >= PW_RIGHT_RUDDER)
      001005 C3               [12] 4538 	clr	c
      001006 E5*24            [12] 4539 	mov	a,_RUDDER_PW
      001008 95*1C            [12] 4540 	subb	a,_PW_RIGHT_RUDDER
      00100A E5*25            [12] 4541 	mov	a,(_RUDDER_PW + 1)
      00100C 95*1D            [12] 4542 	subb	a,(_PW_RIGHT_RUDDER + 1)
      00100E 40 08            [24] 4543 	jc	00104$
                           001010  4544 	C$lab6.c$569$2$203 ==.
                                   4545 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:569: RUDDER_PW = PW_RIGHT_RUDDER;
      001010 85*1C*24         [24] 4546 	mov	_RUDDER_PW,_PW_RIGHT_RUDDER
      001013 85*1D*25         [24] 4547 	mov	(_RUDDER_PW + 1),(_PW_RIGHT_RUDDER + 1)
      001016 80 11            [24] 4548 	sjmp	00105$
      001018                       4549 00104$:
                           001018  4550 	C$lab6.c$571$1$202 ==.
                                   4551 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:571: else if(RUDDER_PW <= PW_LEFT_RUDDER)
      001018 C3               [12] 4552 	clr	c
      001019 E5*18            [12] 4553 	mov	a,_PW_LEFT_RUDDER
      00101B 95*24            [12] 4554 	subb	a,_RUDDER_PW
      00101D E5*19            [12] 4555 	mov	a,(_PW_LEFT_RUDDER + 1)
      00101F 95*25            [12] 4556 	subb	a,(_RUDDER_PW + 1)
      001021 40 06            [24] 4557 	jc	00105$
                           001023  4558 	C$lab6.c$573$2$204 ==.
                                   4559 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:573: RUDDER_PW = PW_LEFT_RUDDER;
      001023 85*18*24         [24] 4560 	mov	_RUDDER_PW,_PW_LEFT_RUDDER
      001026 85*19*25         [24] 4561 	mov	(_RUDDER_PW + 1),(_PW_LEFT_RUDDER + 1)
      001029                       4562 00105$:
                           001029  4563 	C$lab6.c$576$1$202 ==.
                                   4564 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:576: if (RTHRUST_PW >= PW_MAX_THRUST)
      001029 C3               [12] 4565 	clr	c
      00102A E5*2C            [12] 4566 	mov	a,_RTHRUST_PW
      00102C 95*16            [12] 4567 	subb	a,_PW_MAX_THRUST
      00102E E5*2D            [12] 4568 	mov	a,(_RTHRUST_PW + 1)
      001030 95*17            [12] 4569 	subb	a,(_PW_MAX_THRUST + 1)
      001032 40 08            [24] 4570 	jc	00109$
                           001034  4571 	C$lab6.c$578$2$205 ==.
                                   4572 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:578: RTHRUST_PW = PW_MAX_THRUST;
      001034 85*16*2C         [24] 4573 	mov	_RTHRUST_PW,_PW_MAX_THRUST
      001037 85*17*2D         [24] 4574 	mov	(_RTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
      00103A 80 11            [24] 4575 	sjmp	00110$
      00103C                       4576 00109$:
                           00103C  4577 	C$lab6.c$580$1$202 ==.
                                   4578 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:580: else if (RTHRUST_PW <=  PW_MIN_THRUST)
      00103C C3               [12] 4579 	clr	c
      00103D E5*12            [12] 4580 	mov	a,_PW_MIN_THRUST
      00103F 95*2C            [12] 4581 	subb	a,_RTHRUST_PW
      001041 E5*13            [12] 4582 	mov	a,(_PW_MIN_THRUST + 1)
      001043 95*2D            [12] 4583 	subb	a,(_RTHRUST_PW + 1)
      001045 40 06            [24] 4584 	jc	00110$
                           001047  4585 	C$lab6.c$582$2$206 ==.
                                   4586 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:582: RTHRUST_PW = PW_MIN_THRUST;
      001047 85*12*2C         [24] 4587 	mov	_RTHRUST_PW,_PW_MIN_THRUST
      00104A 85*13*2D         [24] 4588 	mov	(_RTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
      00104D                       4589 00110$:
                           00104D  4590 	C$lab6.c$584$1$202 ==.
                                   4591 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:584: if (LTHRUST_PW >= PW_MAX_THRUST)
      00104D C3               [12] 4592 	clr	c
      00104E E5*2E            [12] 4593 	mov	a,_LTHRUST_PW
      001050 95*16            [12] 4594 	subb	a,_PW_MAX_THRUST
      001052 E5*2F            [12] 4595 	mov	a,(_LTHRUST_PW + 1)
      001054 95*17            [12] 4596 	subb	a,(_PW_MAX_THRUST + 1)
      001056 40 08            [24] 4597 	jc	00114$
                           001058  4598 	C$lab6.c$586$2$207 ==.
                                   4599 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:586: LTHRUST_PW = PW_MAX_THRUST;
      001058 85*16*2E         [24] 4600 	mov	_LTHRUST_PW,_PW_MAX_THRUST
      00105B 85*17*2F         [24] 4601 	mov	(_LTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
      00105E 80 11            [24] 4602 	sjmp	00115$
      001060                       4603 00114$:
                           001060  4604 	C$lab6.c$588$1$202 ==.
                                   4605 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:588: else if(LTHRUST_PW <= PW_MIN_THRUST)
      001060 C3               [12] 4606 	clr	c
      001061 E5*12            [12] 4607 	mov	a,_PW_MIN_THRUST
      001063 95*2E            [12] 4608 	subb	a,_LTHRUST_PW
      001065 E5*13            [12] 4609 	mov	a,(_PW_MIN_THRUST + 1)
      001067 95*2F            [12] 4610 	subb	a,(_LTHRUST_PW + 1)
      001069 40 06            [24] 4611 	jc	00115$
                           00106B  4612 	C$lab6.c$590$2$208 ==.
                                   4613 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:590: LTHRUST_PW = PW_MIN_THRUST;
      00106B 85*12*2E         [24] 4614 	mov	_LTHRUST_PW,_PW_MIN_THRUST
      00106E 85*13*2F         [24] 4615 	mov	(_LTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
      001071                       4616 00115$:
                           001071  4617 	C$lab6.c$593$1$202 ==.
                                   4618 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:593: RDR_lo_to_hi = 0xFFFF - RUDDER_PW ;
      001071 74 FF            [12] 4619 	mov	a,#0xFF
      001073 C3               [12] 4620 	clr	c
      001074 95*24            [12] 4621 	subb	a,_RUDDER_PW
      001076 F5*26            [12] 4622 	mov	_RDR_lo_to_hi,a
      001078 74 FF            [12] 4623 	mov	a,#0xFF
      00107A 95*25            [12] 4624 	subb	a,(_RUDDER_PW + 1)
      00107C F5*27            [12] 4625 	mov	(_RDR_lo_to_hi + 1),a
                           00107E  4626 	C$lab6.c$594$1$202 ==.
                                   4627 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:594: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      00107E 74 FF            [12] 4628 	mov	a,#0xFF
      001080 C3               [12] 4629 	clr	c
      001081 95*2C            [12] 4630 	subb	a,_RTHRUST_PW
      001083 F5*30            [12] 4631 	mov	_RTRST_lo_to_hi,a
      001085 74 FF            [12] 4632 	mov	a,#0xFF
      001087 95*2D            [12] 4633 	subb	a,(_RTHRUST_PW + 1)
      001089 F5*31            [12] 4634 	mov	(_RTRST_lo_to_hi + 1),a
                           00108B  4635 	C$lab6.c$595$1$202 ==.
                                   4636 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:595: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      00108B 74 FF            [12] 4637 	mov	a,#0xFF
      00108D C3               [12] 4638 	clr	c
      00108E 95*2E            [12] 4639 	subb	a,_LTHRUST_PW
      001090 F5*32            [12] 4640 	mov	_LTRST_lo_to_hi,a
      001092 74 FF            [12] 4641 	mov	a,#0xFF
      001094 95*2F            [12] 4642 	subb	a,(_LTHRUST_PW + 1)
      001096 F5*33            [12] 4643 	mov	(_LTRST_lo_to_hi + 1),a
                           001098  4644 	C$lab6.c$597$1$202 ==.
                                   4645 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:597: PCA0CP0 = RDR_lo_to_hi;
      001098 85*26 EA         [24] 4646 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      00109B 85*27 FA         [24] 4647 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           00109E  4648 	C$lab6.c$598$1$202 ==.
                                   4649 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:598: PCA0CP2 = RTRST_lo_to_hi;
      00109E 85*30 EC         [24] 4650 	mov	((_PCA0CP2 >> 0) & 0xFF),_RTRST_lo_to_hi
      0010A1 85*31 FC         [24] 4651 	mov	((_PCA0CP2 >> 8) & 0xFF),(_RTRST_lo_to_hi + 1)
                           0010A4  4652 	C$lab6.c$599$1$202 ==.
                                   4653 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:599: PCA0CP3 = LTRST_lo_to_hi;
      0010A4 85*32 ED         [24] 4654 	mov	((_PCA0CP3 >> 0) & 0xFF),_LTRST_lo_to_hi
      0010A7 85*33 FD         [24] 4655 	mov	((_PCA0CP3 >> 8) & 0xFF),(_LTRST_lo_to_hi + 1)
                           0010AA  4656 	C$lab6.c$600$1$202 ==.
                           0010AA  4657 	XG$Steering_Servo$0$0 ==.
      0010AA 22               [24] 4658 	ret
                                   4659 ;------------------------------------------------------------
                                   4660 ;Allocation info for local variables in function 'start'
                                   4661 ;------------------------------------------------------------
                           0010AB  4662 	G$start$0$0 ==.
                           0010AB  4663 	C$lab6.c$602$1$202 ==.
                                   4664 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:602: void start(void)            ///WAITS UNTIL '*' IS ENTERED
                                   4665 ;	-----------------------------------------
                                   4666 ;	 function start
                                   4667 ;	-----------------------------------------
      0010AB                       4668 _start:
                           0010AB  4669 	C$lab6.c$604$1$210 ==.
                                   4670 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:604: while (read_keypad() != '*') wait();
      0010AB                       4671 00101$:
      0010AB 12r01r1A         [24] 4672 	lcall	_read_keypad
      0010AE AF 82            [24] 4673 	mov	r7,dpl
      0010B0 BF 2A 02         [24] 4674 	cjne	r7,#0x2A,00112$
      0010B3 80 05            [24] 4675 	sjmp	00104$
      0010B5                       4676 00112$:
      0010B5 12r10rBB         [24] 4677 	lcall	_wait
      0010B8 80 F1            [24] 4678 	sjmp	00101$
      0010BA                       4679 00104$:
                           0010BA  4680 	C$lab6.c$605$1$210 ==.
                           0010BA  4681 	XG$start$0$0 ==.
      0010BA 22               [24] 4682 	ret
                                   4683 ;------------------------------------------------------------
                                   4684 ;Allocation info for local variables in function 'wait'
                                   4685 ;------------------------------------------------------------
                                   4686 ;old_count                 Allocated to registers r6 r7 
                                   4687 ;------------------------------------------------------------
                           0010BB  4688 	G$wait$0$0 ==.
                           0010BB  4689 	C$lab6.c$609$1$210 ==.
                                   4690 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:609: void wait(void)
                                   4691 ;	-----------------------------------------
                                   4692 ;	 function wait
                                   4693 ;	-----------------------------------------
      0010BB                       4694 _wait:
                           0010BB  4695 	C$lab6.c$611$1$212 ==.
                                   4696 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:611: int old_count = count+1;
      0010BB 74 01            [12] 4697 	mov	a,#0x01
      0010BD 25*10            [12] 4698 	add	a,_count
      0010BF FE               [12] 4699 	mov	r6,a
      0010C0 E4               [12] 4700 	clr	a
      0010C1 35*11            [12] 4701 	addc	a,(_count + 1)
      0010C3 FF               [12] 4702 	mov	r7,a
                           0010C4  4703 	C$lab6.c$612$1$212 ==.
                                   4704 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:612: while (old_count> count);
      0010C4                       4705 00101$:
      0010C4 C3               [12] 4706 	clr	c
      0010C5 E5*10            [12] 4707 	mov	a,_count
      0010C7 9E               [12] 4708 	subb	a,r6
      0010C8 E5*11            [12] 4709 	mov	a,(_count + 1)
      0010CA 64 80            [12] 4710 	xrl	a,#0x80
      0010CC 8F F0            [24] 4711 	mov	b,r7
      0010CE 63 F0 80         [24] 4712 	xrl	b,#0x80
      0010D1 95 F0            [12] 4713 	subb	a,b
      0010D3 40 EF            [24] 4714 	jc	00101$
                           0010D5  4715 	C$lab6.c$613$1$212 ==.
                           0010D5  4716 	XG$wait$0$0 ==.
      0010D5 22               [24] 4717 	ret
                                   4718 ;------------------------------------------------------------
                                   4719 ;Allocation info for local variables in function 'Port_Init'
                                   4720 ;------------------------------------------------------------
                           0010D6  4721 	G$Port_Init$0$0 ==.
                           0010D6  4722 	C$lab6.c$615$1$212 ==.
                                   4723 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:615: void Port_Init(void)
                                   4724 ;	-----------------------------------------
                                   4725 ;	 function Port_Init
                                   4726 ;	-----------------------------------------
      0010D6                       4727 _Port_Init:
                           0010D6  4728 	C$lab6.c$617$1$214 ==.
                                   4729 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:617: P0MDOUT &= ~0x32;
      0010D6 AF A4            [24] 4730 	mov	r7,_P0MDOUT
      0010D8 74 CD            [12] 4731 	mov	a,#0xCD
      0010DA 5F               [12] 4732 	anl	a,r7
      0010DB F5 A4            [12] 4733 	mov	_P0MDOUT,a
                           0010DD  4734 	C$lab6.c$619$1$214 ==.
                                   4735 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:619: P1MDIN  &= ~0x20;
      0010DD AF BD            [24] 4736 	mov	r7,_P1MDIN
      0010DF 74 DF            [12] 4737 	mov	a,#0xDF
      0010E1 5F               [12] 4738 	anl	a,r7
      0010E2 F5 BD            [12] 4739 	mov	_P1MDIN,a
                           0010E4  4740 	C$lab6.c$621$1$214 ==.
                                   4741 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:621: P1MDOUT |= 0x0F;
      0010E4 43 A5 0F         [24] 4742 	orl	_P1MDOUT,#0x0F
                           0010E7  4743 	C$lab6.c$622$1$214 ==.
                                   4744 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:622: P1MDOUT &= 0x20;
      0010E7 53 A5 20         [24] 4745 	anl	_P1MDOUT,#0x20
                           0010EA  4746 	C$lab6.c$624$1$214 ==.
                                   4747 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:624: P1 		 = 0x20;
      0010EA 75 90 20         [24] 4748 	mov	_P1,#0x20
                           0010ED  4749 	C$lab6.c$627$1$214 ==.
                           0010ED  4750 	XG$Port_Init$0$0 ==.
      0010ED 22               [24] 4751 	ret
                                   4752 ;------------------------------------------------------------
                                   4753 ;Allocation info for local variables in function 'PCA_Init'
                                   4754 ;------------------------------------------------------------
                           0010EE  4755 	G$PCA_Init$0$0 ==.
                           0010EE  4756 	C$lab6.c$629$1$214 ==.
                                   4757 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:629: void PCA_Init(void)
                                   4758 ;	-----------------------------------------
                                   4759 ;	 function PCA_Init
                                   4760 ;	-----------------------------------------
      0010EE                       4761 _PCA_Init:
                           0010EE  4762 	C$lab6.c$631$1$216 ==.
                                   4763 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:631: PCA0MD   = 0x81;
      0010EE 75 D9 81         [24] 4764 	mov	_PCA0MD,#0x81
                           0010F1  4765 	C$lab6.c$632$1$216 ==.
                                   4766 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:632: PCA0CPM0 = 0xC2;    //CCM0 in 16-bit compare mode FOR STEERING
      0010F1 75 DA C2         [24] 4767 	mov	_PCA0CPM0,#0xC2
                           0010F4  4768 	C$lab6.c$633$1$216 ==.
                                   4769 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:633: PCA0CPM1 = 0xC2;
      0010F4 75 DB C2         [24] 4770 	mov	_PCA0CPM1,#0xC2
                           0010F7  4771 	C$lab6.c$634$1$216 ==.
                                   4772 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:634: PCA0CPM2 = 0xC2;    //CCM2 in 16-bit compare mode FOR MOTOR
      0010F7 75 DC C2         [24] 4773 	mov	_PCA0CPM2,#0xC2
                           0010FA  4774 	C$lab6.c$635$1$216 ==.
                                   4775 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:635: PCA0CPM3 = 0XC2;
      0010FA 75 DD C2         [24] 4776 	mov	_PCA0CPM3,#0xC2
                           0010FD  4777 	C$lab6.c$636$1$216 ==.
                                   4778 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:636: PCA0CN 	 = 0x40;    //Enable PCA counter
      0010FD 75 D8 40         [24] 4779 	mov	_PCA0CN,#0x40
                           001100  4780 	C$lab6.c$637$1$216 ==.
                                   4781 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:637: EIE1    |= 0x08;    //Enable PCA interrupt
      001100 43 E6 08         [24] 4782 	orl	_EIE1,#0x08
                           001103  4783 	C$lab6.c$638$1$216 ==.
                                   4784 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:638: EA       = 1   ;    //Enable global interrupts
      001103 D2 AF            [12] 4785 	setb	_EA
                           001105  4786 	C$lab6.c$639$1$216 ==.
                           001105  4787 	XG$PCA_Init$0$0 ==.
      001105 22               [24] 4788 	ret
                                   4789 ;------------------------------------------------------------
                                   4790 ;Allocation info for local variables in function 'XBR0_Init'
                                   4791 ;------------------------------------------------------------
                           001106  4792 	G$XBR0_Init$0$0 ==.
                           001106  4793 	C$lab6.c$642$1$216 ==.
                                   4794 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:642: void XBR0_Init(void)
                                   4795 ;	-----------------------------------------
                                   4796 ;	 function XBR0_Init
                                   4797 ;	-----------------------------------------
      001106                       4798 _XBR0_Init:
                           001106  4799 	C$lab6.c$644$1$218 ==.
                                   4800 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:644: XBR0 = 0x27;
      001106 75 E1 27         [24] 4801 	mov	_XBR0,#0x27
                           001109  4802 	C$lab6.c$645$1$218 ==.
                           001109  4803 	XG$XBR0_Init$0$0 ==.
      001109 22               [24] 4804 	ret
                                   4805 ;------------------------------------------------------------
                                   4806 ;Allocation info for local variables in function 'SMB_Init'
                                   4807 ;------------------------------------------------------------
                           00110A  4808 	G$SMB_Init$0$0 ==.
                           00110A  4809 	C$lab6.c$647$1$218 ==.
                                   4810 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:647: void SMB_Init(void)
                                   4811 ;	-----------------------------------------
                                   4812 ;	 function SMB_Init
                                   4813 ;	-----------------------------------------
      00110A                       4814 _SMB_Init:
                           00110A  4815 	C$lab6.c$649$1$220 ==.
                                   4816 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:649: SMB0CR =0x93;
      00110A 75 CF 93         [24] 4817 	mov	_SMB0CR,#0x93
                           00110D  4818 	C$lab6.c$650$1$220 ==.
                                   4819 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:650: ENSMB =1;
      00110D D2 C6            [12] 4820 	setb	_ENSMB
                           00110F  4821 	C$lab6.c$651$1$220 ==.
                           00110F  4822 	XG$SMB_Init$0$0 ==.
      00110F 22               [24] 4823 	ret
                                   4824 ;------------------------------------------------------------
                                   4825 ;Allocation info for local variables in function 'ADC_Init'
                                   4826 ;------------------------------------------------------------
                           001110  4827 	G$ADC_Init$0$0 ==.
                           001110  4828 	C$lab6.c$653$1$220 ==.
                                   4829 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:653: void ADC_Init(void)								/////SETS ADC 
                                   4830 ;	-----------------------------------------
                                   4831 ;	 function ADC_Init
                                   4832 ;	-----------------------------------------
      001110                       4833 _ADC_Init:
                           001110  4834 	C$lab6.c$655$1$222 ==.
                                   4835 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:655: REF0CN = 0x03;
      001110 75 D1 03         [24] 4836 	mov	_REF0CN,#0x03
                           001113  4837 	C$lab6.c$656$1$222 ==.
                                   4838 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:656: ADC1CN = 0x80;
      001113 75 AA 80         [24] 4839 	mov	_ADC1CN,#0x80
                           001116  4840 	C$lab6.c$657$1$222 ==.
                                   4841 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:657: ADC1CF |= 0x01;
      001116 43 AB 01         [24] 4842 	orl	_ADC1CF,#0x01
                           001119  4843 	C$lab6.c$658$1$222 ==.
                           001119  4844 	XG$ADC_Init$0$0 ==.
      001119 22               [24] 4845 	ret
                                   4846 ;------------------------------------------------------------
                                   4847 ;Allocation info for local variables in function 'PCA_ISR'
                                   4848 ;------------------------------------------------------------
                           00111A  4849 	G$PCA_ISR$0$0 ==.
                           00111A  4850 	C$lab6.c$660$1$222 ==.
                                   4851 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:660: void PCA_ISR ( void ) __interrupt 9
                                   4852 ;	-----------------------------------------
                                   4853 ;	 function PCA_ISR
                                   4854 ;	-----------------------------------------
      00111A                       4855 _PCA_ISR:
      00111A C0 E0            [24] 4856 	push	acc
      00111C C0 D0            [24] 4857 	push	psw
                           00111E  4858 	C$lab6.c$663$1$224 ==.
                                   4859 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:663: if (CF)
                           00111E  4860 	C$lab6.c$665$2$225 ==.
                                   4861 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:665: CF =0;
      00111E 10 DF 02         [24] 4862 	jbc	_CF,00108$
      001121 80 0E            [24] 4863 	sjmp	00102$
      001123                       4864 00108$:
                           001123  4865 	C$lab6.c$666$2$225 ==.
                                   4866 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:666: PCA0 = PCA_START;
      001123 75 E9 00         [24] 4867 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      001126 75 F9 70         [24] 4868 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           001129  4869 	C$lab6.c$667$2$225 ==.
                                   4870 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:667: count++;
      001129 05*10            [12] 4871 	inc	_count
      00112B E4               [12] 4872 	clr	a
      00112C B5*10 02         [24] 4873 	cjne	a,_count,00109$
      00112F 05*11            [12] 4874 	inc	(_count + 1)
      001131                       4875 00109$:
      001131                       4876 00102$:
                           001131  4877 	C$lab6.c$672$1$224 ==.
                                   4878 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:672: PCA0CN &= 0xC0;
      001131 53 D8 C0         [24] 4879 	anl	_PCA0CN,#0xC0
      001134 D0 D0            [24] 4880 	pop	psw
      001136 D0 E0            [24] 4881 	pop	acc
                           001138  4882 	C$lab6.c$673$1$224 ==.
                           001138  4883 	XG$PCA_ISR$0$0 ==.
      001138 32               [24] 4884 	reti
                                   4885 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   4886 ;	eliminated unneeded push/pop dpl
                                   4887 ;	eliminated unneeded push/pop dph
                                   4888 ;	eliminated unneeded push/pop b
                                   4889 	.area CSEG    (CODE)
                                   4890 	.area CONST   (CODE)
                           000000  4891 Flab6$__str_0$0$0 == .
      000000                       4892 ___str_0:
      000000 0A                    4893 	.db 0x0A
      000001 54 79 70 65 20 64 69  4894 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    4895 	.db 0x00
                           000016  4896 Flab6$__str_1$0$0 == .
      000016                       4897 ___str_1:
      000016 20 20 20 20 20 25 63  4898 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    4899 	.db 0x00
                           000026  4900 Flab6$__str_2$0$0 == .
      000026                       4901 ___str_2:
      000026 25 63                 4902 	.ascii "%c"
      000028 00                    4903 	.db 0x00
                           000029  4904 Flab6$__str_3$0$0 == .
      000029                       4905 ___str_3:
      000029 50 6C 65 61 73 65 20  4906 	.ascii "Please enter a kp value:"
             65 6E 74 65 72 20 61
             20 6B 70 20 76 61 6C
             75 65 3A
      000041 0A                    4907 	.db 0x0A
      000042 20                    4908 	.ascii " "
      000043 00                    4909 	.db 0x00
                           000044  4910 Flab6$__str_4$0$0 == .
      000044                       4911 ___str_4:
      000044 50 6C 65 61 73 65 20  4912 	.ascii "Please enter a kd value:"
             65 6E 74 65 72 20 61
             20 6B 64 20 76 61 6C
             75 65 3A
      00005C 0A                    4913 	.db 0x0A
      00005D 20                    4914 	.ascii " "
      00005E 00                    4915 	.db 0x00
                           00005F  4916 Flab6$__str_5$0$0 == .
      00005F                       4917 ___str_5:
      00005F 43 61 6C 69 62 72 61  4918 	.ascii "Calibration:"
             74 69 6F 6E 3A
      00006B 0A                    4919 	.db 0x0A
      00006C 48 65 6C 6C 6F 20 77  4920 	.ascii "Hello world!"
             6F 72 6C 64 21
      000078 0A                    4921 	.db 0x0A
      000079 30 31 32 5F 33 34 35  4922 	.ascii "012_345_678:"
             5F 36 37 38 3A
      000085 0A                    4923 	.db 0x0A
      000086 61 62 63 20 64 65 66  4924 	.ascii "abc def ghij"
             20 67 68 69 6A
      000092 00                    4925 	.db 0x00
                           000093  4926 Flab6$__str_6$0$0 == .
      000093                       4927 ___str_6:
      000093 0D                    4928 	.db 0x0D
      000094 0A                    4929 	.db 0x0A
      000095 54 68 65 20 64 65 73  4930 	.ascii "The desired direction is: %d"
             69 72 65 64 20 64 69
             72 65 63 74 69 6F 6E
             20 69 73 3A 20 25 64
      0000B1 00                    4931 	.db 0x00
                           0000B2  4932 Flab6$__str_7$0$0 == .
      0000B2                       4933 ___str_7:
      0000B2 52 75 64 64 65 72 20  4934 	.ascii "Rudder Calibration"
             43 61 6C 69 62 72 61
             74 69 6F 6E
      0000C4 00                    4935 	.db 0x00
                           0000C5  4936 Flab6$__str_8$0$0 == .
      0000C5                       4937 ___str_8:
      0000C5 67 6F 20 6C 65 66 74  4938 	.ascii "go left: press 1"
             3A 20 70 72 65 73 73
             20 31
      0000D5 0A                    4939 	.db 0x0A
      0000D6 20 67 6F 20 72 69 67  4940 	.ascii " go right: press 2"
             68 74 3A 20 70 72 65
             73 73 20 32
      0000E8 0A                    4941 	.db 0x0A
      0000E9 50 72 65 73 73 20 2A  4942 	.ascii "Press * for next screen"
             20 66 6F 72 20 6E 65
             78 74 20 73 63 72 65
             65 6E
      000100 00                    4943 	.db 0x00
                           000101  4944 Flab6$__str_9$0$0 == .
      000101                       4945 ___str_9:
      000101 0A                    4946 	.db 0x0A
      000102 20 63 6F 6E 66 69 72  4947 	.ascii " confirm: press 3"
             6D 3A 20 70 72 65 73
             73 20 33
      000113 0A                    4948 	.db 0x0A
      000114 20 70 72 65 73 73 20  4949 	.ascii " press * to begin"
             2A 20 74 6F 20 62 65
             67 69 6E
      000125 00                    4950 	.db 0x00
                           000126  4951 Flab6$__str_10$0$0 == .
      000126                       4952 ___str_10:
      000126 0D                    4953 	.db 0x0D
      000127 0A                    4954 	.db 0x0A
      000128 20 25 75              4955 	.ascii " %u"
      00012B 00                    4956 	.db 0x00
                           00012C  4957 Flab6$__str_11$0$0 == .
      00012C                       4958 ___str_11:
      00012C 4E 6F 77 20 63 61 6C  4959 	.ascii "Now calibrating Min_PW"
             69 62 72 61 74 69 6E
             67 20 4D 69 6E 5F 50
             57
      000142 0A                    4960 	.db 0x0A
      000143 00                    4961 	.db 0x00
                           000144  4962 Flab6$__str_12$0$0 == .
      000144                       4963 ___str_12:
      000144 4E 6F 77 20 63 61 6C  4964 	.ascii "Now calibrating Cen_PW"
             69 62 72 61 74 69 6E
             67 20 43 65 6E 5F 50
             57
      00015A 00                    4965 	.db 0x00
                           00015B  4966 Flab6$__str_13$0$0 == .
      00015B                       4967 ___str_13:
      00015B 4E 6F 77 20 63 61 6C  4968 	.ascii "Now calibrating Max_PW"
             69 62 72 61 74 69 6E
             67 20 4D 61 78 5F 50
             57
      000171 00                    4969 	.db 0x00
                           000172  4970 Flab6$__str_14$0$0 == .
      000172                       4971 ___str_14:
      000172 41 6E 67 6C 65 20 43  4972 	.ascii "Angle Calibration"
             61 6C 69 62 72 61 74
             69 6F 6E
      000183 00                    4973 	.db 0x00
                           000184  4974 Flab6$__str_15$0$0 == .
      000184                       4975 ___str_15:
      000184 4E 6F 77 20 63 61 6C  4976 	.ascii "Now calibrating Min_PW UP ANGLE"
             69 62 72 61 74 69 6E
             67 20 4D 69 6E 5F 50
             57 20 55 50 20 41 4E
             47 4C 45
      0001A3 00                    4977 	.db 0x00
                           0001A4  4978 Flab6$__str_16$0$0 == .
      0001A4                       4979 ___str_16:
      0001A4 4E 6F 77 20 63 61 6C  4980 	.ascii "Now calibrating Max_PW DOWN ANGLE"
             69 62 72 61 74 69 6E
             67 20 4D 61 78 5F 50
             57 20 44 4F 57 4E 20
             41 4E 47 4C 45
      0001C5 00                    4981 	.db 0x00
                           0001C6  4982 Flab6$__str_17$0$0 == .
      0001C6                       4983 ___str_17:
      0001C6 54 68 72 75 73 74 20  4984 	.ascii "Thrust Calibration"
             43 61 6C 69 62 72 61
             74 69 6F 6E
      0001D8 00                    4985 	.db 0x00
                           0001D9  4986 Flab6$__str_18$0$0 == .
      0001D9                       4987 ___str_18:
      0001D9 4E 6F 77 20 63 61 6C  4988 	.ascii "Now calibrating Min_PW"
             69 62 72 61 74 69 6E
             67 20 4D 69 6E 5F 50
             57
      0001EF 00                    4989 	.db 0x00
                                   4990 	.area XINIT   (CODE)
                                   4991 	.area CABS    (ABS,CODE)
