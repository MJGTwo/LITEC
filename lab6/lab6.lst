                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Mon Apr 27 20:55:54 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module lab6
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _PCA_ISR
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _vsprintf
                                     20 	.globl _printf
                                     21 	.globl _BUS_SCL
                                     22 	.globl _BUS_TOE
                                     23 	.globl _BUS_FTE
                                     24 	.globl _BUS_AA
                                     25 	.globl _BUS_INT
                                     26 	.globl _BUS_STOP
                                     27 	.globl _BUS_START
                                     28 	.globl _BUS_EN
                                     29 	.globl _BUS_BUSY
                                     30 	.globl _SPIF
                                     31 	.globl _WCOL
                                     32 	.globl _MODF
                                     33 	.globl _RXOVRN
                                     34 	.globl _TXBSY
                                     35 	.globl _SLVSEL
                                     36 	.globl _MSTEN
                                     37 	.globl _SPIEN
                                     38 	.globl _AD0EN
                                     39 	.globl _ADCEN
                                     40 	.globl _AD0TM
                                     41 	.globl _ADCTM
                                     42 	.globl _AD0INT
                                     43 	.globl _ADCINT
                                     44 	.globl _AD0BUSY
                                     45 	.globl _ADBUSY
                                     46 	.globl _AD0CM1
                                     47 	.globl _ADSTM1
                                     48 	.globl _AD0CM0
                                     49 	.globl _ADSTM0
                                     50 	.globl _AD0WINT
                                     51 	.globl _ADWINT
                                     52 	.globl _AD0LJST
                                     53 	.globl _ADLJST
                                     54 	.globl _CF
                                     55 	.globl _CR
                                     56 	.globl _CCF4
                                     57 	.globl _CCF3
                                     58 	.globl _CCF2
                                     59 	.globl _CCF1
                                     60 	.globl _CCF0
                                     61 	.globl _CY
                                     62 	.globl _AC
                                     63 	.globl _F0
                                     64 	.globl _RS1
                                     65 	.globl _RS0
                                     66 	.globl _OV
                                     67 	.globl _F1
                                     68 	.globl _P
                                     69 	.globl _TF2
                                     70 	.globl _EXF2
                                     71 	.globl _RCLK
                                     72 	.globl _TCLK
                                     73 	.globl _EXEN2
                                     74 	.globl _TR2
                                     75 	.globl _CT2
                                     76 	.globl _CPRL2
                                     77 	.globl _BUSY
                                     78 	.globl _ENSMB
                                     79 	.globl _STA
                                     80 	.globl _STO
                                     81 	.globl _SI
                                     82 	.globl _AA
                                     83 	.globl _SMBFTE
                                     84 	.globl _SMBTOE
                                     85 	.globl _PT2
                                     86 	.globl _PS
                                     87 	.globl _PS0
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _P3_7
                                     93 	.globl _P3_6
                                     94 	.globl _P3_5
                                     95 	.globl _P3_4
                                     96 	.globl _P3_3
                                     97 	.globl _P3_2
                                     98 	.globl _P3_1
                                     99 	.globl _P3_0
                                    100 	.globl _EA
                                    101 	.globl _ET2
                                    102 	.globl _ES
                                    103 	.globl _ES0
                                    104 	.globl _ET1
                                    105 	.globl _EX1
                                    106 	.globl _ET0
                                    107 	.globl _EX0
                                    108 	.globl _P2_7
                                    109 	.globl _P2_6
                                    110 	.globl _P2_5
                                    111 	.globl _P2_4
                                    112 	.globl _P2_3
                                    113 	.globl _P2_2
                                    114 	.globl _P2_1
                                    115 	.globl _P2_0
                                    116 	.globl _S0MODE
                                    117 	.globl _SM00
                                    118 	.globl _SM0
                                    119 	.globl _SM10
                                    120 	.globl _SM1
                                    121 	.globl _MCE0
                                    122 	.globl _SM20
                                    123 	.globl _SM2
                                    124 	.globl _REN0
                                    125 	.globl _REN
                                    126 	.globl _TB80
                                    127 	.globl _TB8
                                    128 	.globl _RB80
                                    129 	.globl _RB8
                                    130 	.globl _TI0
                                    131 	.globl _TI
                                    132 	.globl _RI0
                                    133 	.globl _RI
                                    134 	.globl _P1_7
                                    135 	.globl _P1_6
                                    136 	.globl _P1_5
                                    137 	.globl _P1_4
                                    138 	.globl _P1_3
                                    139 	.globl _P1_2
                                    140 	.globl _P1_1
                                    141 	.globl _P1_0
                                    142 	.globl _TF1
                                    143 	.globl _TR1
                                    144 	.globl _TF0
                                    145 	.globl _TR0
                                    146 	.globl _IE1
                                    147 	.globl _IT1
                                    148 	.globl _IE0
                                    149 	.globl _IT0
                                    150 	.globl _P0_7
                                    151 	.globl _P0_6
                                    152 	.globl _P0_5
                                    153 	.globl _P0_4
                                    154 	.globl _P0_3
                                    155 	.globl _P0_2
                                    156 	.globl _P0_1
                                    157 	.globl _P0_0
                                    158 	.globl _PCA0CP4
                                    159 	.globl _PCA0CP3
                                    160 	.globl _PCA0CP2
                                    161 	.globl _PCA0CP1
                                    162 	.globl _PCA0CP0
                                    163 	.globl _PCA0
                                    164 	.globl _DAC1
                                    165 	.globl _DAC0
                                    166 	.globl _ADC0LT
                                    167 	.globl _ADC0GT
                                    168 	.globl _ADC0
                                    169 	.globl _RCAP4
                                    170 	.globl _TMR4
                                    171 	.globl _TMR3RL
                                    172 	.globl _TMR3
                                    173 	.globl _RCAP2
                                    174 	.globl _TMR2
                                    175 	.globl _TMR1
                                    176 	.globl _TMR0
                                    177 	.globl _WDTCN
                                    178 	.globl _PCA0CPH4
                                    179 	.globl _PCA0CPH3
                                    180 	.globl _PCA0CPH2
                                    181 	.globl _PCA0CPH1
                                    182 	.globl _PCA0CPH0
                                    183 	.globl _PCA0H
                                    184 	.globl _SPI0CN
                                    185 	.globl _EIP2
                                    186 	.globl _EIP1
                                    187 	.globl _TH4
                                    188 	.globl _TL4
                                    189 	.globl _SADDR1
                                    190 	.globl _SBUF1
                                    191 	.globl _SCON1
                                    192 	.globl _B
                                    193 	.globl _RSTSRC
                                    194 	.globl _PCA0CPL4
                                    195 	.globl _PCA0CPL3
                                    196 	.globl _PCA0CPL2
                                    197 	.globl _PCA0CPL1
                                    198 	.globl _PCA0CPL0
                                    199 	.globl _PCA0L
                                    200 	.globl _ADC0CN
                                    201 	.globl _EIE2
                                    202 	.globl _EIE1
                                    203 	.globl _RCAP4H
                                    204 	.globl _RCAP4L
                                    205 	.globl _XBR2
                                    206 	.globl _XBR1
                                    207 	.globl _XBR0
                                    208 	.globl _ACC
                                    209 	.globl _PCA0CPM4
                                    210 	.globl _PCA0CPM3
                                    211 	.globl _PCA0CPM2
                                    212 	.globl _PCA0CPM1
                                    213 	.globl _PCA0CPM0
                                    214 	.globl _PCA0MD
                                    215 	.globl _PCA0CN
                                    216 	.globl _DAC1CN
                                    217 	.globl _DAC1H
                                    218 	.globl _DAC1L
                                    219 	.globl _DAC0CN
                                    220 	.globl _DAC0H
                                    221 	.globl _DAC0L
                                    222 	.globl _REF0CN
                                    223 	.globl _PSW
                                    224 	.globl _SMB0CR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T4CON
                                    230 	.globl _T2CON
                                    231 	.globl _ADC0LTH
                                    232 	.globl _ADC0LTL
                                    233 	.globl _ADC0GTH
                                    234 	.globl _ADC0GTL
                                    235 	.globl _SMB0ADR
                                    236 	.globl _SMB0DAT
                                    237 	.globl _SMB0STA
                                    238 	.globl _SMB0CN
                                    239 	.globl _ADC0H
                                    240 	.globl _ADC0L
                                    241 	.globl _P1MDIN
                                    242 	.globl _ADC0CF
                                    243 	.globl _AMX0SL
                                    244 	.globl _AMX0CF
                                    245 	.globl _SADEN0
                                    246 	.globl _IP
                                    247 	.globl _FLACL
                                    248 	.globl _FLSCL
                                    249 	.globl _P74OUT
                                    250 	.globl _OSCICN
                                    251 	.globl _OSCXCN
                                    252 	.globl _P3
                                    253 	.globl __XPAGE
                                    254 	.globl _EMI0CN
                                    255 	.globl _SADEN1
                                    256 	.globl _P3IF
                                    257 	.globl _AMX1SL
                                    258 	.globl _ADC1CF
                                    259 	.globl _ADC1CN
                                    260 	.globl _SADDR0
                                    261 	.globl _IE
                                    262 	.globl _P3MDOUT
                                    263 	.globl _PRT3CF
                                    264 	.globl _P2MDOUT
                                    265 	.globl _PRT2CF
                                    266 	.globl _P1MDOUT
                                    267 	.globl _PRT1CF
                                    268 	.globl _P0MDOUT
                                    269 	.globl _PRT0CF
                                    270 	.globl _EMI0CF
                                    271 	.globl _EMI0TC
                                    272 	.globl _P2
                                    273 	.globl _CPT1CN
                                    274 	.globl _CPT0CN
                                    275 	.globl _SPI0CKR
                                    276 	.globl _ADC1
                                    277 	.globl _SPI0DAT
                                    278 	.globl _SPI0CFG
                                    279 	.globl _SBUF0
                                    280 	.globl _SBUF
                                    281 	.globl _SCON0
                                    282 	.globl _SCON
                                    283 	.globl _P7
                                    284 	.globl _TMR3H
                                    285 	.globl _TMR3L
                                    286 	.globl _TMR3RLH
                                    287 	.globl _TMR3RLL
                                    288 	.globl _TMR3CN
                                    289 	.globl _P1
                                    290 	.globl _PSCTL
                                    291 	.globl _CKCON
                                    292 	.globl _TH1
                                    293 	.globl _TH0
                                    294 	.globl _TL1
                                    295 	.globl _TL0
                                    296 	.globl _TMOD
                                    297 	.globl _TCON
                                    298 	.globl _PCON
                                    299 	.globl _P6
                                    300 	.globl _P5
                                    301 	.globl _P4
                                    302 	.globl _DPH
                                    303 	.globl _DPL
                                    304 	.globl _SP
                                    305 	.globl _P0
                                    306 	.globl _old_error
                                    307 	.globl _error
                                    308 	.globl _actual_D
                                    309 	.globl _desired_D
                                    310 	.globl _dratio
                                    311 	.globl _ratio
                                    312 	.globl _kd
                                    313 	.globl _kp
                                    314 	.globl _r_data
                                    315 	.globl _offset
                                    316 	.globl _LTRST_lo_to_hi
                                    317 	.globl _RTRST_lo_to_hi
                                    318 	.globl _LTHRUST_PW
                                    319 	.globl _RTHRUST_PW
                                    320 	.globl _AGL_lo_to_hi
                                    321 	.globl _ANGLE_PW
                                    322 	.globl _RDR_lo_to_hi
                                    323 	.globl _RUDDER_PW
                                    324 	.globl _PW_DOWN_ANGLE
                                    325 	.globl _PW_CENTER_ANGLE
                                    326 	.globl _PW_UP_ANGLE
                                    327 	.globl _PW_RIGHT_RUDDER
                                    328 	.globl _PW_CENTER_RUDDER
                                    329 	.globl _PW_LEFT_RUDDER
                                    330 	.globl _PW_MAX_THRUST
                                    331 	.globl _PW_NUET_THRUST
                                    332 	.globl _PW_MIN_THRUST
                                    333 	.globl _count
                                    334 	.globl _i2c_read_data_PARM_4
                                    335 	.globl _i2c_read_data_PARM_3
                                    336 	.globl _i2c_read_data_PARM_2
                                    337 	.globl _i2c_write_data_PARM_4
                                    338 	.globl _i2c_write_data_PARM_3
                                    339 	.globl _i2c_write_data_PARM_2
                                    340 	.globl _putchar
                                    341 	.globl _getchar
                                    342 	.globl _lcd_print
                                    343 	.globl _lcd_clear
                                    344 	.globl _kpd_input
                                    345 	.globl _delay_time
                                    346 	.globl _i2c_start
                                    347 	.globl _i2c_write
                                    348 	.globl _i2c_write_and_stop
                                    349 	.globl _i2c_read
                                    350 	.globl _i2c_read_and_stop
                                    351 	.globl _i2c_write_data
                                    352 	.globl _i2c_read_data
                                    353 	.globl _Accel_Init
                                    354 	.globl _Calibrate
                                    355 	.globl _kpkd
                                    356 	.globl _Change_D
                                    357 	.globl _Read_Ranger
                                    358 	.globl _Steering_func
                                    359 	.globl _direction
                                    360 	.globl _ReadCompass
                                    361 	.globl _Rudder_cal
                                    362 	.globl _Angle_cal
                                    363 	.globl _Thrust_cal
                                    364 	.globl _Steering_Servo
                                    365 	.globl _start
                                    366 	.globl _wait
                                    367 	.globl _Port_Init
                                    368 	.globl _PCA_Init
                                    369 	.globl _XBR0_Init
                                    370 	.globl _SMB_Init
                                    371 	.globl _ADC_Init
                                    372 ;--------------------------------------------------------
                                    373 ; special function registers
                                    374 ;--------------------------------------------------------
                                    375 	.area RSEG    (ABS,DATA)
      000000                        376 	.org 0x0000
                           000080   377 G$P0$0$0 == 0x0080
                           000080   378 _P0	=	0x0080
                           000081   379 G$SP$0$0 == 0x0081
                           000081   380 _SP	=	0x0081
                           000082   381 G$DPL$0$0 == 0x0082
                           000082   382 _DPL	=	0x0082
                           000083   383 G$DPH$0$0 == 0x0083
                           000083   384 _DPH	=	0x0083
                           000084   385 G$P4$0$0 == 0x0084
                           000084   386 _P4	=	0x0084
                           000085   387 G$P5$0$0 == 0x0085
                           000085   388 _P5	=	0x0085
                           000086   389 G$P6$0$0 == 0x0086
                           000086   390 _P6	=	0x0086
                           000087   391 G$PCON$0$0 == 0x0087
                           000087   392 _PCON	=	0x0087
                           000088   393 G$TCON$0$0 == 0x0088
                           000088   394 _TCON	=	0x0088
                           000089   395 G$TMOD$0$0 == 0x0089
                           000089   396 _TMOD	=	0x0089
                           00008A   397 G$TL0$0$0 == 0x008a
                           00008A   398 _TL0	=	0x008a
                           00008B   399 G$TL1$0$0 == 0x008b
                           00008B   400 _TL1	=	0x008b
                           00008C   401 G$TH0$0$0 == 0x008c
                           00008C   402 _TH0	=	0x008c
                           00008D   403 G$TH1$0$0 == 0x008d
                           00008D   404 _TH1	=	0x008d
                           00008E   405 G$CKCON$0$0 == 0x008e
                           00008E   406 _CKCON	=	0x008e
                           00008F   407 G$PSCTL$0$0 == 0x008f
                           00008F   408 _PSCTL	=	0x008f
                           000090   409 G$P1$0$0 == 0x0090
                           000090   410 _P1	=	0x0090
                           000091   411 G$TMR3CN$0$0 == 0x0091
                           000091   412 _TMR3CN	=	0x0091
                           000092   413 G$TMR3RLL$0$0 == 0x0092
                           000092   414 _TMR3RLL	=	0x0092
                           000093   415 G$TMR3RLH$0$0 == 0x0093
                           000093   416 _TMR3RLH	=	0x0093
                           000094   417 G$TMR3L$0$0 == 0x0094
                           000094   418 _TMR3L	=	0x0094
                           000095   419 G$TMR3H$0$0 == 0x0095
                           000095   420 _TMR3H	=	0x0095
                           000096   421 G$P7$0$0 == 0x0096
                           000096   422 _P7	=	0x0096
                           000098   423 G$SCON$0$0 == 0x0098
                           000098   424 _SCON	=	0x0098
                           000098   425 G$SCON0$0$0 == 0x0098
                           000098   426 _SCON0	=	0x0098
                           000099   427 G$SBUF$0$0 == 0x0099
                           000099   428 _SBUF	=	0x0099
                           000099   429 G$SBUF0$0$0 == 0x0099
                           000099   430 _SBUF0	=	0x0099
                           00009A   431 G$SPI0CFG$0$0 == 0x009a
                           00009A   432 _SPI0CFG	=	0x009a
                           00009B   433 G$SPI0DAT$0$0 == 0x009b
                           00009B   434 _SPI0DAT	=	0x009b
                           00009C   435 G$ADC1$0$0 == 0x009c
                           00009C   436 _ADC1	=	0x009c
                           00009D   437 G$SPI0CKR$0$0 == 0x009d
                           00009D   438 _SPI0CKR	=	0x009d
                           00009E   439 G$CPT0CN$0$0 == 0x009e
                           00009E   440 _CPT0CN	=	0x009e
                           00009F   441 G$CPT1CN$0$0 == 0x009f
                           00009F   442 _CPT1CN	=	0x009f
                           0000A0   443 G$P2$0$0 == 0x00a0
                           0000A0   444 _P2	=	0x00a0
                           0000A1   445 G$EMI0TC$0$0 == 0x00a1
                           0000A1   446 _EMI0TC	=	0x00a1
                           0000A3   447 G$EMI0CF$0$0 == 0x00a3
                           0000A3   448 _EMI0CF	=	0x00a3
                           0000A4   449 G$PRT0CF$0$0 == 0x00a4
                           0000A4   450 _PRT0CF	=	0x00a4
                           0000A4   451 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   452 _P0MDOUT	=	0x00a4
                           0000A5   453 G$PRT1CF$0$0 == 0x00a5
                           0000A5   454 _PRT1CF	=	0x00a5
                           0000A5   455 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   456 _P1MDOUT	=	0x00a5
                           0000A6   457 G$PRT2CF$0$0 == 0x00a6
                           0000A6   458 _PRT2CF	=	0x00a6
                           0000A6   459 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   460 _P2MDOUT	=	0x00a6
                           0000A7   461 G$PRT3CF$0$0 == 0x00a7
                           0000A7   462 _PRT3CF	=	0x00a7
                           0000A7   463 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   464 _P3MDOUT	=	0x00a7
                           0000A8   465 G$IE$0$0 == 0x00a8
                           0000A8   466 _IE	=	0x00a8
                           0000A9   467 G$SADDR0$0$0 == 0x00a9
                           0000A9   468 _SADDR0	=	0x00a9
                           0000AA   469 G$ADC1CN$0$0 == 0x00aa
                           0000AA   470 _ADC1CN	=	0x00aa
                           0000AB   471 G$ADC1CF$0$0 == 0x00ab
                           0000AB   472 _ADC1CF	=	0x00ab
                           0000AC   473 G$AMX1SL$0$0 == 0x00ac
                           0000AC   474 _AMX1SL	=	0x00ac
                           0000AD   475 G$P3IF$0$0 == 0x00ad
                           0000AD   476 _P3IF	=	0x00ad
                           0000AE   477 G$SADEN1$0$0 == 0x00ae
                           0000AE   478 _SADEN1	=	0x00ae
                           0000AF   479 G$EMI0CN$0$0 == 0x00af
                           0000AF   480 _EMI0CN	=	0x00af
                           0000AF   481 G$_XPAGE$0$0 == 0x00af
                           0000AF   482 __XPAGE	=	0x00af
                           0000B0   483 G$P3$0$0 == 0x00b0
                           0000B0   484 _P3	=	0x00b0
                           0000B1   485 G$OSCXCN$0$0 == 0x00b1
                           0000B1   486 _OSCXCN	=	0x00b1
                           0000B2   487 G$OSCICN$0$0 == 0x00b2
                           0000B2   488 _OSCICN	=	0x00b2
                           0000B5   489 G$P74OUT$0$0 == 0x00b5
                           0000B5   490 _P74OUT	=	0x00b5
                           0000B6   491 G$FLSCL$0$0 == 0x00b6
                           0000B6   492 _FLSCL	=	0x00b6
                           0000B7   493 G$FLACL$0$0 == 0x00b7
                           0000B7   494 _FLACL	=	0x00b7
                           0000B8   495 G$IP$0$0 == 0x00b8
                           0000B8   496 _IP	=	0x00b8
                           0000B9   497 G$SADEN0$0$0 == 0x00b9
                           0000B9   498 _SADEN0	=	0x00b9
                           0000BA   499 G$AMX0CF$0$0 == 0x00ba
                           0000BA   500 _AMX0CF	=	0x00ba
                           0000BB   501 G$AMX0SL$0$0 == 0x00bb
                           0000BB   502 _AMX0SL	=	0x00bb
                           0000BC   503 G$ADC0CF$0$0 == 0x00bc
                           0000BC   504 _ADC0CF	=	0x00bc
                           0000BD   505 G$P1MDIN$0$0 == 0x00bd
                           0000BD   506 _P1MDIN	=	0x00bd
                           0000BE   507 G$ADC0L$0$0 == 0x00be
                           0000BE   508 _ADC0L	=	0x00be
                           0000BF   509 G$ADC0H$0$0 == 0x00bf
                           0000BF   510 _ADC0H	=	0x00bf
                           0000C0   511 G$SMB0CN$0$0 == 0x00c0
                           0000C0   512 _SMB0CN	=	0x00c0
                           0000C1   513 G$SMB0STA$0$0 == 0x00c1
                           0000C1   514 _SMB0STA	=	0x00c1
                           0000C2   515 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   516 _SMB0DAT	=	0x00c2
                           0000C3   517 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   518 _SMB0ADR	=	0x00c3
                           0000C4   519 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   520 _ADC0GTL	=	0x00c4
                           0000C5   521 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   522 _ADC0GTH	=	0x00c5
                           0000C6   523 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   524 _ADC0LTL	=	0x00c6
                           0000C7   525 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   526 _ADC0LTH	=	0x00c7
                           0000C8   527 G$T2CON$0$0 == 0x00c8
                           0000C8   528 _T2CON	=	0x00c8
                           0000C9   529 G$T4CON$0$0 == 0x00c9
                           0000C9   530 _T4CON	=	0x00c9
                           0000CA   531 G$RCAP2L$0$0 == 0x00ca
                           0000CA   532 _RCAP2L	=	0x00ca
                           0000CB   533 G$RCAP2H$0$0 == 0x00cb
                           0000CB   534 _RCAP2H	=	0x00cb
                           0000CC   535 G$TL2$0$0 == 0x00cc
                           0000CC   536 _TL2	=	0x00cc
                           0000CD   537 G$TH2$0$0 == 0x00cd
                           0000CD   538 _TH2	=	0x00cd
                           0000CF   539 G$SMB0CR$0$0 == 0x00cf
                           0000CF   540 _SMB0CR	=	0x00cf
                           0000D0   541 G$PSW$0$0 == 0x00d0
                           0000D0   542 _PSW	=	0x00d0
                           0000D1   543 G$REF0CN$0$0 == 0x00d1
                           0000D1   544 _REF0CN	=	0x00d1
                           0000D2   545 G$DAC0L$0$0 == 0x00d2
                           0000D2   546 _DAC0L	=	0x00d2
                           0000D3   547 G$DAC0H$0$0 == 0x00d3
                           0000D3   548 _DAC0H	=	0x00d3
                           0000D4   549 G$DAC0CN$0$0 == 0x00d4
                           0000D4   550 _DAC0CN	=	0x00d4
                           0000D5   551 G$DAC1L$0$0 == 0x00d5
                           0000D5   552 _DAC1L	=	0x00d5
                           0000D6   553 G$DAC1H$0$0 == 0x00d6
                           0000D6   554 _DAC1H	=	0x00d6
                           0000D7   555 G$DAC1CN$0$0 == 0x00d7
                           0000D7   556 _DAC1CN	=	0x00d7
                           0000D8   557 G$PCA0CN$0$0 == 0x00d8
                           0000D8   558 _PCA0CN	=	0x00d8
                           0000D9   559 G$PCA0MD$0$0 == 0x00d9
                           0000D9   560 _PCA0MD	=	0x00d9
                           0000DA   561 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   562 _PCA0CPM0	=	0x00da
                           0000DB   563 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   564 _PCA0CPM1	=	0x00db
                           0000DC   565 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   566 _PCA0CPM2	=	0x00dc
                           0000DD   567 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   568 _PCA0CPM3	=	0x00dd
                           0000DE   569 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   570 _PCA0CPM4	=	0x00de
                           0000E0   571 G$ACC$0$0 == 0x00e0
                           0000E0   572 _ACC	=	0x00e0
                           0000E1   573 G$XBR0$0$0 == 0x00e1
                           0000E1   574 _XBR0	=	0x00e1
                           0000E2   575 G$XBR1$0$0 == 0x00e2
                           0000E2   576 _XBR1	=	0x00e2
                           0000E3   577 G$XBR2$0$0 == 0x00e3
                           0000E3   578 _XBR2	=	0x00e3
                           0000E4   579 G$RCAP4L$0$0 == 0x00e4
                           0000E4   580 _RCAP4L	=	0x00e4
                           0000E5   581 G$RCAP4H$0$0 == 0x00e5
                           0000E5   582 _RCAP4H	=	0x00e5
                           0000E6   583 G$EIE1$0$0 == 0x00e6
                           0000E6   584 _EIE1	=	0x00e6
                           0000E7   585 G$EIE2$0$0 == 0x00e7
                           0000E7   586 _EIE2	=	0x00e7
                           0000E8   587 G$ADC0CN$0$0 == 0x00e8
                           0000E8   588 _ADC0CN	=	0x00e8
                           0000E9   589 G$PCA0L$0$0 == 0x00e9
                           0000E9   590 _PCA0L	=	0x00e9
                           0000EA   591 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   592 _PCA0CPL0	=	0x00ea
                           0000EB   593 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   594 _PCA0CPL1	=	0x00eb
                           0000EC   595 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   596 _PCA0CPL2	=	0x00ec
                           0000ED   597 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   598 _PCA0CPL3	=	0x00ed
                           0000EE   599 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   600 _PCA0CPL4	=	0x00ee
                           0000EF   601 G$RSTSRC$0$0 == 0x00ef
                           0000EF   602 _RSTSRC	=	0x00ef
                           0000F0   603 G$B$0$0 == 0x00f0
                           0000F0   604 _B	=	0x00f0
                           0000F1   605 G$SCON1$0$0 == 0x00f1
                           0000F1   606 _SCON1	=	0x00f1
                           0000F2   607 G$SBUF1$0$0 == 0x00f2
                           0000F2   608 _SBUF1	=	0x00f2
                           0000F3   609 G$SADDR1$0$0 == 0x00f3
                           0000F3   610 _SADDR1	=	0x00f3
                           0000F4   611 G$TL4$0$0 == 0x00f4
                           0000F4   612 _TL4	=	0x00f4
                           0000F5   613 G$TH4$0$0 == 0x00f5
                           0000F5   614 _TH4	=	0x00f5
                           0000F6   615 G$EIP1$0$0 == 0x00f6
                           0000F6   616 _EIP1	=	0x00f6
                           0000F7   617 G$EIP2$0$0 == 0x00f7
                           0000F7   618 _EIP2	=	0x00f7
                           0000F8   619 G$SPI0CN$0$0 == 0x00f8
                           0000F8   620 _SPI0CN	=	0x00f8
                           0000F9   621 G$PCA0H$0$0 == 0x00f9
                           0000F9   622 _PCA0H	=	0x00f9
                           0000FA   623 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   624 _PCA0CPH0	=	0x00fa
                           0000FB   625 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   626 _PCA0CPH1	=	0x00fb
                           0000FC   627 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   628 _PCA0CPH2	=	0x00fc
                           0000FD   629 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   630 _PCA0CPH3	=	0x00fd
                           0000FE   631 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   632 _PCA0CPH4	=	0x00fe
                           0000FF   633 G$WDTCN$0$0 == 0x00ff
                           0000FF   634 _WDTCN	=	0x00ff
                           008C8A   635 G$TMR0$0$0 == 0x8c8a
                           008C8A   636 _TMR0	=	0x8c8a
                           008D8B   637 G$TMR1$0$0 == 0x8d8b
                           008D8B   638 _TMR1	=	0x8d8b
                           00CDCC   639 G$TMR2$0$0 == 0xcdcc
                           00CDCC   640 _TMR2	=	0xcdcc
                           00CBCA   641 G$RCAP2$0$0 == 0xcbca
                           00CBCA   642 _RCAP2	=	0xcbca
                           009594   643 G$TMR3$0$0 == 0x9594
                           009594   644 _TMR3	=	0x9594
                           009392   645 G$TMR3RL$0$0 == 0x9392
                           009392   646 _TMR3RL	=	0x9392
                           00F5F4   647 G$TMR4$0$0 == 0xf5f4
                           00F5F4   648 _TMR4	=	0xf5f4
                           00E5E4   649 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   650 _RCAP4	=	0xe5e4
                           00BFBE   651 G$ADC0$0$0 == 0xbfbe
                           00BFBE   652 _ADC0	=	0xbfbe
                           00C5C4   653 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   654 _ADC0GT	=	0xc5c4
                           00C7C6   655 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   656 _ADC0LT	=	0xc7c6
                           00D3D2   657 G$DAC0$0$0 == 0xd3d2
                           00D3D2   658 _DAC0	=	0xd3d2
                           00D6D5   659 G$DAC1$0$0 == 0xd6d5
                           00D6D5   660 _DAC1	=	0xd6d5
                           00F9E9   661 G$PCA0$0$0 == 0xf9e9
                           00F9E9   662 _PCA0	=	0xf9e9
                           00FAEA   663 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   664 _PCA0CP0	=	0xfaea
                           00FBEB   665 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   666 _PCA0CP1	=	0xfbeb
                           00FCEC   667 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   668 _PCA0CP2	=	0xfcec
                           00FDED   669 G$PCA0CP3$0$0 == 0xfded
                           00FDED   670 _PCA0CP3	=	0xfded
                           00FEEE   671 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   672 _PCA0CP4	=	0xfeee
                                    673 ;--------------------------------------------------------
                                    674 ; special function bits
                                    675 ;--------------------------------------------------------
                                    676 	.area RSEG    (ABS,DATA)
      000000                        677 	.org 0x0000
                           000080   678 G$P0_0$0$0 == 0x0080
                           000080   679 _P0_0	=	0x0080
                           000081   680 G$P0_1$0$0 == 0x0081
                           000081   681 _P0_1	=	0x0081
                           000082   682 G$P0_2$0$0 == 0x0082
                           000082   683 _P0_2	=	0x0082
                           000083   684 G$P0_3$0$0 == 0x0083
                           000083   685 _P0_3	=	0x0083
                           000084   686 G$P0_4$0$0 == 0x0084
                           000084   687 _P0_4	=	0x0084
                           000085   688 G$P0_5$0$0 == 0x0085
                           000085   689 _P0_5	=	0x0085
                           000086   690 G$P0_6$0$0 == 0x0086
                           000086   691 _P0_6	=	0x0086
                           000087   692 G$P0_7$0$0 == 0x0087
                           000087   693 _P0_7	=	0x0087
                           000088   694 G$IT0$0$0 == 0x0088
                           000088   695 _IT0	=	0x0088
                           000089   696 G$IE0$0$0 == 0x0089
                           000089   697 _IE0	=	0x0089
                           00008A   698 G$IT1$0$0 == 0x008a
                           00008A   699 _IT1	=	0x008a
                           00008B   700 G$IE1$0$0 == 0x008b
                           00008B   701 _IE1	=	0x008b
                           00008C   702 G$TR0$0$0 == 0x008c
                           00008C   703 _TR0	=	0x008c
                           00008D   704 G$TF0$0$0 == 0x008d
                           00008D   705 _TF0	=	0x008d
                           00008E   706 G$TR1$0$0 == 0x008e
                           00008E   707 _TR1	=	0x008e
                           00008F   708 G$TF1$0$0 == 0x008f
                           00008F   709 _TF1	=	0x008f
                           000090   710 G$P1_0$0$0 == 0x0090
                           000090   711 _P1_0	=	0x0090
                           000091   712 G$P1_1$0$0 == 0x0091
                           000091   713 _P1_1	=	0x0091
                           000092   714 G$P1_2$0$0 == 0x0092
                           000092   715 _P1_2	=	0x0092
                           000093   716 G$P1_3$0$0 == 0x0093
                           000093   717 _P1_3	=	0x0093
                           000094   718 G$P1_4$0$0 == 0x0094
                           000094   719 _P1_4	=	0x0094
                           000095   720 G$P1_5$0$0 == 0x0095
                           000095   721 _P1_5	=	0x0095
                           000096   722 G$P1_6$0$0 == 0x0096
                           000096   723 _P1_6	=	0x0096
                           000097   724 G$P1_7$0$0 == 0x0097
                           000097   725 _P1_7	=	0x0097
                           000098   726 G$RI$0$0 == 0x0098
                           000098   727 _RI	=	0x0098
                           000098   728 G$RI0$0$0 == 0x0098
                           000098   729 _RI0	=	0x0098
                           000099   730 G$TI$0$0 == 0x0099
                           000099   731 _TI	=	0x0099
                           000099   732 G$TI0$0$0 == 0x0099
                           000099   733 _TI0	=	0x0099
                           00009A   734 G$RB8$0$0 == 0x009a
                           00009A   735 _RB8	=	0x009a
                           00009A   736 G$RB80$0$0 == 0x009a
                           00009A   737 _RB80	=	0x009a
                           00009B   738 G$TB8$0$0 == 0x009b
                           00009B   739 _TB8	=	0x009b
                           00009B   740 G$TB80$0$0 == 0x009b
                           00009B   741 _TB80	=	0x009b
                           00009C   742 G$REN$0$0 == 0x009c
                           00009C   743 _REN	=	0x009c
                           00009C   744 G$REN0$0$0 == 0x009c
                           00009C   745 _REN0	=	0x009c
                           00009D   746 G$SM2$0$0 == 0x009d
                           00009D   747 _SM2	=	0x009d
                           00009D   748 G$SM20$0$0 == 0x009d
                           00009D   749 _SM20	=	0x009d
                           00009D   750 G$MCE0$0$0 == 0x009d
                           00009D   751 _MCE0	=	0x009d
                           00009E   752 G$SM1$0$0 == 0x009e
                           00009E   753 _SM1	=	0x009e
                           00009E   754 G$SM10$0$0 == 0x009e
                           00009E   755 _SM10	=	0x009e
                           00009F   756 G$SM0$0$0 == 0x009f
                           00009F   757 _SM0	=	0x009f
                           00009F   758 G$SM00$0$0 == 0x009f
                           00009F   759 _SM00	=	0x009f
                           00009F   760 G$S0MODE$0$0 == 0x009f
                           00009F   761 _S0MODE	=	0x009f
                           0000A0   762 G$P2_0$0$0 == 0x00a0
                           0000A0   763 _P2_0	=	0x00a0
                           0000A1   764 G$P2_1$0$0 == 0x00a1
                           0000A1   765 _P2_1	=	0x00a1
                           0000A2   766 G$P2_2$0$0 == 0x00a2
                           0000A2   767 _P2_2	=	0x00a2
                           0000A3   768 G$P2_3$0$0 == 0x00a3
                           0000A3   769 _P2_3	=	0x00a3
                           0000A4   770 G$P2_4$0$0 == 0x00a4
                           0000A4   771 _P2_4	=	0x00a4
                           0000A5   772 G$P2_5$0$0 == 0x00a5
                           0000A5   773 _P2_5	=	0x00a5
                           0000A6   774 G$P2_6$0$0 == 0x00a6
                           0000A6   775 _P2_6	=	0x00a6
                           0000A7   776 G$P2_7$0$0 == 0x00a7
                           0000A7   777 _P2_7	=	0x00a7
                           0000A8   778 G$EX0$0$0 == 0x00a8
                           0000A8   779 _EX0	=	0x00a8
                           0000A9   780 G$ET0$0$0 == 0x00a9
                           0000A9   781 _ET0	=	0x00a9
                           0000AA   782 G$EX1$0$0 == 0x00aa
                           0000AA   783 _EX1	=	0x00aa
                           0000AB   784 G$ET1$0$0 == 0x00ab
                           0000AB   785 _ET1	=	0x00ab
                           0000AC   786 G$ES0$0$0 == 0x00ac
                           0000AC   787 _ES0	=	0x00ac
                           0000AC   788 G$ES$0$0 == 0x00ac
                           0000AC   789 _ES	=	0x00ac
                           0000AD   790 G$ET2$0$0 == 0x00ad
                           0000AD   791 _ET2	=	0x00ad
                           0000AF   792 G$EA$0$0 == 0x00af
                           0000AF   793 _EA	=	0x00af
                           0000B0   794 G$P3_0$0$0 == 0x00b0
                           0000B0   795 _P3_0	=	0x00b0
                           0000B1   796 G$P3_1$0$0 == 0x00b1
                           0000B1   797 _P3_1	=	0x00b1
                           0000B2   798 G$P3_2$0$0 == 0x00b2
                           0000B2   799 _P3_2	=	0x00b2
                           0000B3   800 G$P3_3$0$0 == 0x00b3
                           0000B3   801 _P3_3	=	0x00b3
                           0000B4   802 G$P3_4$0$0 == 0x00b4
                           0000B4   803 _P3_4	=	0x00b4
                           0000B5   804 G$P3_5$0$0 == 0x00b5
                           0000B5   805 _P3_5	=	0x00b5
                           0000B6   806 G$P3_6$0$0 == 0x00b6
                           0000B6   807 _P3_6	=	0x00b6
                           0000B7   808 G$P3_7$0$0 == 0x00b7
                           0000B7   809 _P3_7	=	0x00b7
                           0000B8   810 G$PX0$0$0 == 0x00b8
                           0000B8   811 _PX0	=	0x00b8
                           0000B9   812 G$PT0$0$0 == 0x00b9
                           0000B9   813 _PT0	=	0x00b9
                           0000BA   814 G$PX1$0$0 == 0x00ba
                           0000BA   815 _PX1	=	0x00ba
                           0000BB   816 G$PT1$0$0 == 0x00bb
                           0000BB   817 _PT1	=	0x00bb
                           0000BC   818 G$PS0$0$0 == 0x00bc
                           0000BC   819 _PS0	=	0x00bc
                           0000BC   820 G$PS$0$0 == 0x00bc
                           0000BC   821 _PS	=	0x00bc
                           0000BD   822 G$PT2$0$0 == 0x00bd
                           0000BD   823 _PT2	=	0x00bd
                           0000C0   824 G$SMBTOE$0$0 == 0x00c0
                           0000C0   825 _SMBTOE	=	0x00c0
                           0000C1   826 G$SMBFTE$0$0 == 0x00c1
                           0000C1   827 _SMBFTE	=	0x00c1
                           0000C2   828 G$AA$0$0 == 0x00c2
                           0000C2   829 _AA	=	0x00c2
                           0000C3   830 G$SI$0$0 == 0x00c3
                           0000C3   831 _SI	=	0x00c3
                           0000C4   832 G$STO$0$0 == 0x00c4
                           0000C4   833 _STO	=	0x00c4
                           0000C5   834 G$STA$0$0 == 0x00c5
                           0000C5   835 _STA	=	0x00c5
                           0000C6   836 G$ENSMB$0$0 == 0x00c6
                           0000C6   837 _ENSMB	=	0x00c6
                           0000C7   838 G$BUSY$0$0 == 0x00c7
                           0000C7   839 _BUSY	=	0x00c7
                           0000C8   840 G$CPRL2$0$0 == 0x00c8
                           0000C8   841 _CPRL2	=	0x00c8
                           0000C9   842 G$CT2$0$0 == 0x00c9
                           0000C9   843 _CT2	=	0x00c9
                           0000CA   844 G$TR2$0$0 == 0x00ca
                           0000CA   845 _TR2	=	0x00ca
                           0000CB   846 G$EXEN2$0$0 == 0x00cb
                           0000CB   847 _EXEN2	=	0x00cb
                           0000CC   848 G$TCLK$0$0 == 0x00cc
                           0000CC   849 _TCLK	=	0x00cc
                           0000CD   850 G$RCLK$0$0 == 0x00cd
                           0000CD   851 _RCLK	=	0x00cd
                           0000CE   852 G$EXF2$0$0 == 0x00ce
                           0000CE   853 _EXF2	=	0x00ce
                           0000CF   854 G$TF2$0$0 == 0x00cf
                           0000CF   855 _TF2	=	0x00cf
                           0000D0   856 G$P$0$0 == 0x00d0
                           0000D0   857 _P	=	0x00d0
                           0000D1   858 G$F1$0$0 == 0x00d1
                           0000D1   859 _F1	=	0x00d1
                           0000D2   860 G$OV$0$0 == 0x00d2
                           0000D2   861 _OV	=	0x00d2
                           0000D3   862 G$RS0$0$0 == 0x00d3
                           0000D3   863 _RS0	=	0x00d3
                           0000D4   864 G$RS1$0$0 == 0x00d4
                           0000D4   865 _RS1	=	0x00d4
                           0000D5   866 G$F0$0$0 == 0x00d5
                           0000D5   867 _F0	=	0x00d5
                           0000D6   868 G$AC$0$0 == 0x00d6
                           0000D6   869 _AC	=	0x00d6
                           0000D7   870 G$CY$0$0 == 0x00d7
                           0000D7   871 _CY	=	0x00d7
                           0000D8   872 G$CCF0$0$0 == 0x00d8
                           0000D8   873 _CCF0	=	0x00d8
                           0000D9   874 G$CCF1$0$0 == 0x00d9
                           0000D9   875 _CCF1	=	0x00d9
                           0000DA   876 G$CCF2$0$0 == 0x00da
                           0000DA   877 _CCF2	=	0x00da
                           0000DB   878 G$CCF3$0$0 == 0x00db
                           0000DB   879 _CCF3	=	0x00db
                           0000DC   880 G$CCF4$0$0 == 0x00dc
                           0000DC   881 _CCF4	=	0x00dc
                           0000DE   882 G$CR$0$0 == 0x00de
                           0000DE   883 _CR	=	0x00de
                           0000DF   884 G$CF$0$0 == 0x00df
                           0000DF   885 _CF	=	0x00df
                           0000E8   886 G$ADLJST$0$0 == 0x00e8
                           0000E8   887 _ADLJST	=	0x00e8
                           0000E8   888 G$AD0LJST$0$0 == 0x00e8
                           0000E8   889 _AD0LJST	=	0x00e8
                           0000E9   890 G$ADWINT$0$0 == 0x00e9
                           0000E9   891 _ADWINT	=	0x00e9
                           0000E9   892 G$AD0WINT$0$0 == 0x00e9
                           0000E9   893 _AD0WINT	=	0x00e9
                           0000EA   894 G$ADSTM0$0$0 == 0x00ea
                           0000EA   895 _ADSTM0	=	0x00ea
                           0000EA   896 G$AD0CM0$0$0 == 0x00ea
                           0000EA   897 _AD0CM0	=	0x00ea
                           0000EB   898 G$ADSTM1$0$0 == 0x00eb
                           0000EB   899 _ADSTM1	=	0x00eb
                           0000EB   900 G$AD0CM1$0$0 == 0x00eb
                           0000EB   901 _AD0CM1	=	0x00eb
                           0000EC   902 G$ADBUSY$0$0 == 0x00ec
                           0000EC   903 _ADBUSY	=	0x00ec
                           0000EC   904 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   905 _AD0BUSY	=	0x00ec
                           0000ED   906 G$ADCINT$0$0 == 0x00ed
                           0000ED   907 _ADCINT	=	0x00ed
                           0000ED   908 G$AD0INT$0$0 == 0x00ed
                           0000ED   909 _AD0INT	=	0x00ed
                           0000EE   910 G$ADCTM$0$0 == 0x00ee
                           0000EE   911 _ADCTM	=	0x00ee
                           0000EE   912 G$AD0TM$0$0 == 0x00ee
                           0000EE   913 _AD0TM	=	0x00ee
                           0000EF   914 G$ADCEN$0$0 == 0x00ef
                           0000EF   915 _ADCEN	=	0x00ef
                           0000EF   916 G$AD0EN$0$0 == 0x00ef
                           0000EF   917 _AD0EN	=	0x00ef
                           0000F8   918 G$SPIEN$0$0 == 0x00f8
                           0000F8   919 _SPIEN	=	0x00f8
                           0000F9   920 G$MSTEN$0$0 == 0x00f9
                           0000F9   921 _MSTEN	=	0x00f9
                           0000FA   922 G$SLVSEL$0$0 == 0x00fa
                           0000FA   923 _SLVSEL	=	0x00fa
                           0000FB   924 G$TXBSY$0$0 == 0x00fb
                           0000FB   925 _TXBSY	=	0x00fb
                           0000FC   926 G$RXOVRN$0$0 == 0x00fc
                           0000FC   927 _RXOVRN	=	0x00fc
                           0000FD   928 G$MODF$0$0 == 0x00fd
                           0000FD   929 _MODF	=	0x00fd
                           0000FE   930 G$WCOL$0$0 == 0x00fe
                           0000FE   931 _WCOL	=	0x00fe
                           0000FF   932 G$SPIF$0$0 == 0x00ff
                           0000FF   933 _SPIF	=	0x00ff
                           0000C7   934 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   935 _BUS_BUSY	=	0x00c7
                           0000C6   936 G$BUS_EN$0$0 == 0x00c6
                           0000C6   937 _BUS_EN	=	0x00c6
                           0000C5   938 G$BUS_START$0$0 == 0x00c5
                           0000C5   939 _BUS_START	=	0x00c5
                           0000C4   940 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   941 _BUS_STOP	=	0x00c4
                           0000C3   942 G$BUS_INT$0$0 == 0x00c3
                           0000C3   943 _BUS_INT	=	0x00c3
                           0000C2   944 G$BUS_AA$0$0 == 0x00c2
                           0000C2   945 _BUS_AA	=	0x00c2
                           0000C1   946 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   947 _BUS_FTE	=	0x00c1
                           0000C0   948 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   949 _BUS_TOE	=	0x00c0
                           000083   950 G$BUS_SCL$0$0 == 0x0083
                           000083   951 _BUS_SCL	=	0x0083
                                    952 ;--------------------------------------------------------
                                    953 ; overlayable register banks
                                    954 ;--------------------------------------------------------
                                    955 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        956 	.ds 8
                                    957 ;--------------------------------------------------------
                                    958 ; internal ram data
                                    959 ;--------------------------------------------------------
                                    960 	.area DSEG    (DATA)
                           000000   961 Llab6.lcd_clear$NumBytes$1$77==.
      000000                        962 _lcd_clear_NumBytes_1_77:
      000000                        963 	.ds 1
                           000001   964 Llab6.lcd_clear$Cmd$1$77==.
      000001                        965 _lcd_clear_Cmd_1_77:
      000001                        966 	.ds 2
                           000003   967 Llab6.read_keypad$Data$1$78==.
      000003                        968 _read_keypad_Data_1_78:
      000003                        969 	.ds 2
                           000005   970 Llab6.i2c_write_data$start_reg$1$97==.
      000005                        971 _i2c_write_data_PARM_2:
      000005                        972 	.ds 1
                           000006   973 Llab6.i2c_write_data$buffer$1$97==.
      000006                        974 _i2c_write_data_PARM_3:
      000006                        975 	.ds 3
                           000009   976 Llab6.i2c_write_data$num_bytes$1$97==.
      000009                        977 _i2c_write_data_PARM_4:
      000009                        978 	.ds 1
                           00000A   979 Llab6.i2c_read_data$start_reg$1$99==.
      00000A                        980 _i2c_read_data_PARM_2:
      00000A                        981 	.ds 1
                           00000B   982 Llab6.i2c_read_data$buffer$1$99==.
      00000B                        983 _i2c_read_data_PARM_3:
      00000B                        984 	.ds 3
                           00000E   985 Llab6.i2c_read_data$num_bytes$1$99==.
      00000E                        986 _i2c_read_data_PARM_4:
      00000E                        987 	.ds 1
                           00000F   988 Llab6.Accel_Init$Data2$1$103==.
      00000F                        989 _Accel_Init_Data2_1_103:
      00000F                        990 	.ds 1
                           000010   991 G$count$0$0==.
      000010                        992 _count::
      000010                        993 	.ds 2
                           000012   994 G$PW_MIN_THRUST$0$0==.
      000012                        995 _PW_MIN_THRUST::
      000012                        996 	.ds 2
                           000014   997 G$PW_NUET_THRUST$0$0==.
      000014                        998 _PW_NUET_THRUST::
      000014                        999 	.ds 2
                           000016  1000 G$PW_MAX_THRUST$0$0==.
      000016                       1001 _PW_MAX_THRUST::
      000016                       1002 	.ds 2
                           000018  1003 G$PW_LEFT_RUDDER$0$0==.
      000018                       1004 _PW_LEFT_RUDDER::
      000018                       1005 	.ds 2
                           00001A  1006 G$PW_CENTER_RUDDER$0$0==.
      00001A                       1007 _PW_CENTER_RUDDER::
      00001A                       1008 	.ds 2
                           00001C  1009 G$PW_RIGHT_RUDDER$0$0==.
      00001C                       1010 _PW_RIGHT_RUDDER::
      00001C                       1011 	.ds 2
                           00001E  1012 G$PW_UP_ANGLE$0$0==.
      00001E                       1013 _PW_UP_ANGLE::
      00001E                       1014 	.ds 2
                           000020  1015 G$PW_CENTER_ANGLE$0$0==.
      000020                       1016 _PW_CENTER_ANGLE::
      000020                       1017 	.ds 2
                           000022  1018 G$PW_DOWN_ANGLE$0$0==.
      000022                       1019 _PW_DOWN_ANGLE::
      000022                       1020 	.ds 2
                           000024  1021 G$RUDDER_PW$0$0==.
      000024                       1022 _RUDDER_PW::
      000024                       1023 	.ds 2
                           000026  1024 G$RDR_lo_to_hi$0$0==.
      000026                       1025 _RDR_lo_to_hi::
      000026                       1026 	.ds 2
                           000028  1027 G$ANGLE_PW$0$0==.
      000028                       1028 _ANGLE_PW::
      000028                       1029 	.ds 2
                           00002A  1030 G$AGL_lo_to_hi$0$0==.
      00002A                       1031 _AGL_lo_to_hi::
      00002A                       1032 	.ds 2
                           00002C  1033 G$RTHRUST_PW$0$0==.
      00002C                       1034 _RTHRUST_PW::
      00002C                       1035 	.ds 2
                           00002E  1036 G$LTHRUST_PW$0$0==.
      00002E                       1037 _LTHRUST_PW::
      00002E                       1038 	.ds 2
                           000030  1039 G$RTRST_lo_to_hi$0$0==.
      000030                       1040 _RTRST_lo_to_hi::
      000030                       1041 	.ds 2
                           000032  1042 G$LTRST_lo_to_hi$0$0==.
      000032                       1043 _LTRST_lo_to_hi::
      000032                       1044 	.ds 2
                           000034  1045 G$offset$0$0==.
      000034                       1046 _offset::
      000034                       1047 	.ds 2
                           000036  1048 G$r_data$0$0==.
      000036                       1049 _r_data::
      000036                       1050 	.ds 2
                           000038  1051 G$kp$0$0==.
      000038                       1052 _kp::
      000038                       1053 	.ds 2
                           00003A  1054 G$kd$0$0==.
      00003A                       1055 _kd::
      00003A                       1056 	.ds 2
                           00003C  1057 G$ratio$0$0==.
      00003C                       1058 _ratio::
      00003C                       1059 	.ds 2
                           00003E  1060 G$dratio$0$0==.
      00003E                       1061 _dratio::
      00003E                       1062 	.ds 2
                           000040  1063 Llab6.ReadCompass$Data$1$141==.
      000040                       1064 _ReadCompass_Data_1_141:
      000040                       1065 	.ds 2
                                   1066 ;--------------------------------------------------------
                                   1067 ; overlayable items in internal ram 
                                   1068 ;--------------------------------------------------------
                                   1069 	.area	OSEG    (OVR,DATA)
                                   1070 	.area	OSEG    (OVR,DATA)
                                   1071 	.area	OSEG    (OVR,DATA)
                                   1072 	.area	OSEG    (OVR,DATA)
                                   1073 	.area	OSEG    (OVR,DATA)
                                   1074 	.area	OSEG    (OVR,DATA)
                                   1075 	.area	OSEG    (OVR,DATA)
                                   1076 ;--------------------------------------------------------
                                   1077 ; Stack segment in internal ram 
                                   1078 ;--------------------------------------------------------
                                   1079 	.area	SSEG
      000000                       1080 __start__stack:
      000000                       1081 	.ds	1
                                   1082 
                                   1083 ;--------------------------------------------------------
                                   1084 ; indirectly addressable internal ram data
                                   1085 ;--------------------------------------------------------
                                   1086 	.area ISEG    (DATA)
                                   1087 ;--------------------------------------------------------
                                   1088 ; absolute internal ram data
                                   1089 ;--------------------------------------------------------
                                   1090 	.area IABS    (ABS,DATA)
                                   1091 	.area IABS    (ABS,DATA)
                                   1092 ;--------------------------------------------------------
                                   1093 ; bit data
                                   1094 ;--------------------------------------------------------
                                   1095 	.area BSEG    (BIT)
                                   1096 ;--------------------------------------------------------
                                   1097 ; paged external ram data
                                   1098 ;--------------------------------------------------------
                                   1099 	.area PSEG    (PAG,XDATA)
                                   1100 ;--------------------------------------------------------
                                   1101 ; external ram data
                                   1102 ;--------------------------------------------------------
                                   1103 	.area XSEG    (XDATA)
                           000000  1104 Llab6.lcd_print$text$1$73==.
      000000                       1105 _lcd_print_text_1_73:
      000000                       1106 	.ds 80
                           000050  1107 G$desired_D$0$0==.
      000050                       1108 _desired_D::
      000050                       1109 	.ds 2
                           000052  1110 G$actual_D$0$0==.
      000052                       1111 _actual_D::
      000052                       1112 	.ds 2
                           000054  1113 Llab6.Change_D$distance$1$131==.
      000054                       1114 _Change_D_distance_1_131:
      000054                       1115 	.ds 2
                           000056  1116 Llab6.Rudder_cal$value$1$143==.
      000056                       1117 _Rudder_cal_value_1_143:
      000056                       1118 	.ds 2
                           000058  1119 Llab6.Rudder_cal$times$1$143==.
      000058                       1120 _Rudder_cal_times_1_143:
      000058                       1121 	.ds 2
                           00005A  1122 Llab6.Angle_cal$value$1$162==.
      00005A                       1123 _Angle_cal_value_1_162:
      00005A                       1124 	.ds 2
                           00005C  1125 Llab6.Angle_cal$times$1$162==.
      00005C                       1126 _Angle_cal_times_1_162:
      00005C                       1127 	.ds 2
                           00005E  1128 Llab6.Thrust_cal$value$1$181==.
      00005E                       1129 _Thrust_cal_value_1_181:
      00005E                       1130 	.ds 2
                           000060  1131 Llab6.Thrust_cal$times$1$181==.
      000060                       1132 _Thrust_cal_times_1_181:
      000060                       1133 	.ds 2
                           000062  1134 Llab6.wait$old_count$1$216==.
      000062                       1135 _wait_old_count_1_216:
      000062                       1136 	.ds 2
                                   1137 ;--------------------------------------------------------
                                   1138 ; absolute external ram data
                                   1139 ;--------------------------------------------------------
                                   1140 	.area XABS    (ABS,XDATA)
                                   1141 ;--------------------------------------------------------
                                   1142 ; external initialized ram data
                                   1143 ;--------------------------------------------------------
                                   1144 	.area XISEG   (XDATA)
                           000000  1145 G$error$0$0==.
      000000                       1146 _error::
      000000                       1147 	.ds 2
                           000002  1148 G$old_error$0$0==.
      000002                       1149 _old_error::
      000002                       1150 	.ds 2
                                   1151 	.area HOME    (CODE)
                                   1152 	.area GSINIT0 (CODE)
                                   1153 	.area GSINIT1 (CODE)
                                   1154 	.area GSINIT2 (CODE)
                                   1155 	.area GSINIT3 (CODE)
                                   1156 	.area GSINIT4 (CODE)
                                   1157 	.area GSINIT5 (CODE)
                                   1158 	.area GSINIT  (CODE)
                                   1159 	.area GSFINAL (CODE)
                                   1160 	.area CSEG    (CODE)
                                   1161 ;--------------------------------------------------------
                                   1162 ; interrupt vector 
                                   1163 ;--------------------------------------------------------
                                   1164 	.area HOME    (CODE)
      000000                       1165 __interrupt_vect:
      000000 02r00r00         [24] 1166 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1167 	reti
      000004                       1168 	.ds	7
      00000B 32               [24] 1169 	reti
      00000C                       1170 	.ds	7
      000013 32               [24] 1171 	reti
      000014                       1172 	.ds	7
      00001B 32               [24] 1173 	reti
      00001C                       1174 	.ds	7
      000023 32               [24] 1175 	reti
      000024                       1176 	.ds	7
      00002B 32               [24] 1177 	reti
      00002C                       1178 	.ds	7
      000033 32               [24] 1179 	reti
      000034                       1180 	.ds	7
      00003B 32               [24] 1181 	reti
      00003C                       1182 	.ds	7
      000043 32               [24] 1183 	reti
      000044                       1184 	.ds	7
      00004B 02r12rF3         [24] 1185 	ljmp	_PCA_ISR
                                   1186 ;--------------------------------------------------------
                                   1187 ; global & static initialisations
                                   1188 ;--------------------------------------------------------
                                   1189 	.area HOME    (CODE)
                                   1190 	.area GSINIT  (CODE)
                                   1191 	.area GSFINAL (CODE)
                                   1192 	.area GSINIT  (CODE)
                                   1193 	.globl __sdcc_gsinit_startup
                                   1194 	.globl __sdcc_program_startup
                                   1195 	.globl __start__stack
                                   1196 	.globl __mcs51_genXINIT
                                   1197 	.globl __mcs51_genXRAMCLEAR
                                   1198 	.globl __mcs51_genRAMCLEAR
                           000000  1199 	C$lab6.c$45$1$228 ==.
                                   1200 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:45: int count=0;
      000000 E4               [12] 1201 	clr	a
      000001 F5*10            [12] 1202 	mov	_count,a
      000003 F5*11            [12] 1203 	mov	(_count + 1),a
                           000005  1204 	C$lab6.c$46$1$228 ==.
                                   1205 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:46: unsigned int PW_MIN_THRUST = 2000;
      000005 75*12 D0         [24] 1206 	mov	_PW_MIN_THRUST,#0xD0
      000008 75*13 07         [24] 1207 	mov	(_PW_MIN_THRUST + 1),#0x07
                           00000B  1208 	C$lab6.c$47$1$228 ==.
                                   1209 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:47: unsigned int PW_NUET_THRUST = 2750;
      00000B 75*14 BE         [24] 1210 	mov	_PW_NUET_THRUST,#0xBE
      00000E 75*15 0A         [24] 1211 	mov	(_PW_NUET_THRUST + 1),#0x0A
                           000011  1212 	C$lab6.c$48$1$228 ==.
                                   1213 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:48: unsigned int PW_MAX_THRUST = 3500;
      000011 75*16 AC         [24] 1214 	mov	_PW_MAX_THRUST,#0xAC
      000014 75*17 0D         [24] 1215 	mov	(_PW_MAX_THRUST + 1),#0x0D
                           000017  1216 	C$lab6.c$50$1$228 ==.
                                   1217 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:50: unsigned int PW_LEFT_RUDDER = 2000;
      000017 75*18 D0         [24] 1218 	mov	_PW_LEFT_RUDDER,#0xD0
      00001A 75*19 07         [24] 1219 	mov	(_PW_LEFT_RUDDER + 1),#0x07
                           00001D  1220 	C$lab6.c$51$1$228 ==.
                                   1221 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:51: unsigned int PW_CENTER_RUDDER = 2750;
      00001D 75*1A BE         [24] 1222 	mov	_PW_CENTER_RUDDER,#0xBE
      000020 75*1B 0A         [24] 1223 	mov	(_PW_CENTER_RUDDER + 1),#0x0A
                           000023  1224 	C$lab6.c$52$1$228 ==.
                                   1225 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:52: unsigned int PW_RIGHT_RUDDER = 3500;
      000023 75*1C AC         [24] 1226 	mov	_PW_RIGHT_RUDDER,#0xAC
      000026 75*1D 0D         [24] 1227 	mov	(_PW_RIGHT_RUDDER + 1),#0x0D
                           000029  1228 	C$lab6.c$54$1$228 ==.
                                   1229 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:54: unsigned int PW_UP_ANGLE = 2880;
      000029 75*1E 40         [24] 1230 	mov	_PW_UP_ANGLE,#0x40
      00002C 75*1F 0B         [24] 1231 	mov	(_PW_UP_ANGLE + 1),#0x0B
                           00002F  1232 	C$lab6.c$55$1$228 ==.
                                   1233 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:55: unsigned int PW_CENTER_ANGLE = 3530;
      00002F 75*20 CA         [24] 1234 	mov	_PW_CENTER_ANGLE,#0xCA
      000032 75*21 0D         [24] 1235 	mov	(_PW_CENTER_ANGLE + 1),#0x0D
                           000035  1236 	C$lab6.c$56$1$228 ==.
                                   1237 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:56: unsigned int PW_DOWN_ANGLE = 4180;
      000035 75*22 54         [24] 1238 	mov	_PW_DOWN_ANGLE,#0x54
      000038 75*23 10         [24] 1239 	mov	(_PW_DOWN_ANGLE + 1),#0x10
                                   1240 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1241 	ljmp	__sdcc_program_startup
                                   1242 ;--------------------------------------------------------
                                   1243 ; Home
                                   1244 ;--------------------------------------------------------
                                   1245 	.area HOME    (CODE)
                                   1246 	.area HOME    (CODE)
      00004E                       1247 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1248 	ljmp	_main
                                   1249 ;	return from main will return to caller
                                   1250 ;--------------------------------------------------------
                                   1251 ; code
                                   1252 ;--------------------------------------------------------
                                   1253 	.area CSEG    (CODE)
                                   1254 ;------------------------------------------------------------
                                   1255 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1256 ;------------------------------------------------------------
                                   1257 ;i                         Allocated to registers 
                                   1258 ;------------------------------------------------------------
                           000000  1259 	G$SYSCLK_Init$0$0 ==.
                           000000  1260 	C$c8051_SDCC.h$42$0$0 ==.
                                   1261 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1262 ;	-----------------------------------------
                                   1263 ;	 function SYSCLK_Init
                                   1264 ;	-----------------------------------------
      000000                       1265 _SYSCLK_Init:
                           000007  1266 	ar7 = 0x07
                           000006  1267 	ar6 = 0x06
                           000005  1268 	ar5 = 0x05
                           000004  1269 	ar4 = 0x04
                           000003  1270 	ar3 = 0x03
                           000002  1271 	ar2 = 0x02
                           000001  1272 	ar1 = 0x01
                           000000  1273 	ar0 = 0x00
                           000000  1274 	C$c8051_SDCC.h$46$1$31 ==.
                                   1275 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1276 	mov	_OSCXCN,#0x67
                           000003  1277 	C$c8051_SDCC.h$49$1$31 ==.
                                   1278 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1279 	mov	r6,#0x00
      000005 7F 01            [12] 1280 	mov	r7,#0x01
      000007                       1281 00107$:
      000007 1E               [12] 1282 	dec	r6
      000008 BE FF 01         [24] 1283 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1284 	dec	r7
      00000C                       1285 00121$:
      00000C EE               [12] 1286 	mov	a,r6
      00000D 4F               [12] 1287 	orl	a,r7
      00000E 70 F7            [24] 1288 	jnz	00107$
                           000010  1289 	C$c8051_SDCC.h$51$1$31 ==.
                                   1290 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1291 00102$:
      000010 E5 B1            [12] 1292 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1293 	jnb	acc.7,00102$
                           000015  1294 	C$c8051_SDCC.h$53$1$31 ==.
                                   1295 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1296 	mov	_OSCICN,#0x88
                           000018  1297 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1298 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1299 	ret
                                   1300 ;------------------------------------------------------------
                                   1301 ;Allocation info for local variables in function 'UART0_Init'
                                   1302 ;------------------------------------------------------------
                           000019  1303 	G$UART0_Init$0$0 ==.
                           000019  1304 	C$c8051_SDCC.h$64$1$31 ==.
                                   1305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1306 ;	-----------------------------------------
                                   1307 ;	 function UART0_Init
                                   1308 ;	-----------------------------------------
      000019                       1309 _UART0_Init:
                           000019  1310 	C$c8051_SDCC.h$66$1$33 ==.
                                   1311 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1312 	mov	_SCON0,#0x50
                           00001C  1313 	C$c8051_SDCC.h$67$1$33 ==.
                                   1314 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1315 	mov	_TMOD,#0x20
                           00001F  1316 	C$c8051_SDCC.h$68$1$33 ==.
                                   1317 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1318 	mov	_TH1,#0xDC
                           000022  1319 	C$c8051_SDCC.h$69$1$33 ==.
                                   1320 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1321 	setb	_TR1
                           000024  1322 	C$c8051_SDCC.h$70$1$33 ==.
                                   1323 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1324 	orl	_CKCON,#0x10
                           000027  1325 	C$c8051_SDCC.h$71$1$33 ==.
                                   1326 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1327 	orl	_PCON,#0x80
                           00002A  1328 	C$c8051_SDCC.h$73$1$33 ==.
                                   1329 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1330 	setb	_TI0
                           00002C  1331 	C$c8051_SDCC.h$74$1$33 ==.
                                   1332 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1333 	orl	_P0MDOUT,#0x01
                           00002F  1334 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1335 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1336 	ret
                                   1337 ;------------------------------------------------------------
                                   1338 ;Allocation info for local variables in function 'Sys_Init'
                                   1339 ;------------------------------------------------------------
                           000030  1340 	G$Sys_Init$0$0 ==.
                           000030  1341 	C$c8051_SDCC.h$83$1$33 ==.
                                   1342 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1343 ;	-----------------------------------------
                                   1344 ;	 function Sys_Init
                                   1345 ;	-----------------------------------------
      000030                       1346 _Sys_Init:
                           000030  1347 	C$c8051_SDCC.h$85$1$35 ==.
                                   1348 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1349 	mov	_WDTCN,#0xDE
                           000033  1350 	C$c8051_SDCC.h$86$1$35 ==.
                                   1351 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1352 	mov	_WDTCN,#0xAD
                           000036  1353 	C$c8051_SDCC.h$88$1$35 ==.
                                   1354 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1355 	lcall	_SYSCLK_Init
                           000039  1356 	C$c8051_SDCC.h$89$1$35 ==.
                                   1357 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1358 	lcall	_UART0_Init
                           00003C  1359 	C$c8051_SDCC.h$91$1$35 ==.
                                   1360 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1361 	orl	_XBR0,#0x04
                           00003F  1362 	C$c8051_SDCC.h$92$1$35 ==.
                                   1363 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1364 	orl	_XBR2,#0x40
                           000042  1365 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1366 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1367 	ret
                                   1368 ;------------------------------------------------------------
                                   1369 ;Allocation info for local variables in function 'putchar'
                                   1370 ;------------------------------------------------------------
                                   1371 ;c                         Allocated to registers r7 
                                   1372 ;------------------------------------------------------------
                           000043  1373 	G$putchar$0$0 ==.
                           000043  1374 	C$c8051_SDCC.h$98$1$35 ==.
                                   1375 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1376 ;	-----------------------------------------
                                   1377 ;	 function putchar
                                   1378 ;	-----------------------------------------
      000043                       1379 _putchar:
      000043 AF 82            [24] 1380 	mov	r7,dpl
                           000045  1381 	C$c8051_SDCC.h$100$1$37 ==.
                                   1382 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1383 00101$:
                           000045  1384 	C$c8051_SDCC.h$101$1$37 ==.
                                   1385 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1386 	jbc	_TI0,00112$
      000048 80 FB            [24] 1387 	sjmp	00101$
      00004A                       1388 00112$:
                           00004A  1389 	C$c8051_SDCC.h$102$1$37 ==.
                                   1390 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1391 	mov	_SBUF0,r7
                           00004C  1392 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1393 	XG$putchar$0$0 ==.
      00004C 22               [24] 1394 	ret
                                   1395 ;------------------------------------------------------------
                                   1396 ;Allocation info for local variables in function 'getchar'
                                   1397 ;------------------------------------------------------------
                                   1398 ;c                         Allocated to registers 
                                   1399 ;------------------------------------------------------------
                           00004D  1400 	G$getchar$0$0 ==.
                           00004D  1401 	C$c8051_SDCC.h$108$1$37 ==.
                                   1402 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1403 ;	-----------------------------------------
                                   1404 ;	 function getchar
                                   1405 ;	-----------------------------------------
      00004D                       1406 _getchar:
                           00004D  1407 	C$c8051_SDCC.h$111$1$39 ==.
                                   1408 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1409 00101$:
                           00004D  1410 	C$c8051_SDCC.h$112$1$39 ==.
                                   1411 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1412 	jbc	_RI0,00112$
      000050 80 FB            [24] 1413 	sjmp	00101$
      000052                       1414 00112$:
                           000052  1415 	C$c8051_SDCC.h$113$1$39 ==.
                                   1416 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1417 	mov	dpl,_SBUF0
                           000055  1418 	C$c8051_SDCC.h$114$1$39 ==.
                                   1419 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1420 	lcall	_putchar
                           000058  1421 	C$c8051_SDCC.h$115$1$39 ==.
                                   1422 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1423 	mov	dpl,_SBUF0
                           00005B  1424 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1425 	XG$getchar$0$0 ==.
      00005B 22               [24] 1426 	ret
                                   1427 ;------------------------------------------------------------
                                   1428 ;Allocation info for local variables in function 'lcd_print'
                                   1429 ;------------------------------------------------------------
                                   1430 ;fmt                       Allocated to stack - _bp -5
                                   1431 ;len                       Allocated to registers r6 
                                   1432 ;i                         Allocated to registers 
                                   1433 ;ap                        Allocated to registers 
                                   1434 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1435 ;------------------------------------------------------------
                           00005C  1436 	G$lcd_print$0$0 ==.
                           00005C  1437 	C$i2c.h$81$1$39 ==.
                                   1438 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1439 ;	-----------------------------------------
                                   1440 ;	 function lcd_print
                                   1441 ;	-----------------------------------------
      00005C                       1442 _lcd_print:
      00005C C0*00            [24] 1443 	push	_bp
      00005E 85 81*00         [24] 1444 	mov	_bp,sp
                           000061  1445 	C$i2c.h$87$1$73 ==.
                                   1446 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1447 	mov	a,_bp
      000063 24 FB            [12] 1448 	add	a,#0xfb
      000065 F8               [12] 1449 	mov	r0,a
      000066 86 82            [24] 1450 	mov	dpl,@r0
      000068 08               [12] 1451 	inc	r0
      000069 86 83            [24] 1452 	mov	dph,@r0
      00006B 08               [12] 1453 	inc	r0
      00006C 86 F0            [24] 1454 	mov	b,@r0
      00006E 12r00r00         [24] 1455 	lcall	_strlen
      000071 E5 82            [12] 1456 	mov	a,dpl
      000073 85 83 F0         [24] 1457 	mov	b,dph
      000076 45 F0            [12] 1458 	orl	a,b
      000078 70 02            [24] 1459 	jnz	00102$
      00007A 80 62            [24] 1460 	sjmp	00109$
      00007C                       1461 00102$:
                           00007C  1462 	C$i2c.h$89$2$74 ==.
                                   1463 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1464 	mov	a,_bp
      00007E 24 FB            [12] 1465 	add	a,#0xFB
      000080 FF               [12] 1466 	mov	r7,a
      000081 8F*00            [24] 1467 	mov	_vsprintf_PARM_3,r7
                           000083  1468 	C$i2c.h$90$1$73 ==.
                                   1469 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1470 	mov	a,_bp
      000085 24 FB            [12] 1471 	add	a,#0xfb
      000087 F8               [12] 1472 	mov	r0,a
      000088 86*00            [24] 1473 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1474 	inc	r0
      00008B 86*01            [24] 1475 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1476 	inc	r0
      00008E 86*02            [24] 1477 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1478 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1479 	mov	b,#0x00
      000096 12r00r00         [24] 1480 	lcall	_vsprintf
                           000099  1481 	C$i2c.h$93$1$73 ==.
                                   1482 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1483 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1484 	mov	b,#0x00
      00009F 12r00r00         [24] 1485 	lcall	_strlen
      0000A2 AE 82            [24] 1486 	mov	r6,dpl
                           0000A4  1487 	C$i2c.h$94$1$73 ==.
                                   1488 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1489 	mov	r7,#0x00
      0000A6                       1490 00107$:
      0000A6 C3               [12] 1491 	clr	c
      0000A7 EF               [12] 1492 	mov	a,r7
      0000A8 9E               [12] 1493 	subb	a,r6
      0000A9 50 1F            [24] 1494 	jnc	00105$
                           0000AB  1495 	C$i2c.h$96$2$76 ==.
                                   1496 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1497 	mov	a,r7
      0000AC 24r00            [12] 1498 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1499 	mov	dpl,a
      0000B0 E4               [12] 1500 	clr	a
      0000B1 34s00            [12] 1501 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1502 	mov	dph,a
      0000B5 E0               [24] 1503 	movx	a,@dptr
      0000B6 FD               [12] 1504 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1505 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1506 	mov	a,r7
      0000BB 24r00            [12] 1507 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1508 	mov	dpl,a
      0000BF E4               [12] 1509 	clr	a
      0000C0 34s00            [12] 1510 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1511 	mov	dph,a
      0000C4 74 0D            [12] 1512 	mov	a,#0x0D
      0000C6 F0               [24] 1513 	movx	@dptr,a
      0000C7                       1514 00108$:
                           0000C7  1515 	C$i2c.h$94$1$73 ==.
                                   1516 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1517 	inc	r7
      0000C8 80 DC            [24] 1518 	sjmp	00107$
      0000CA                       1519 00105$:
                           0000CA  1520 	C$i2c.h$99$1$73 ==.
                                   1521 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1522 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1523 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1524 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1525 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1526 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1527 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1528 	lcall	_i2c_write_data
      0000DE                       1529 00109$:
      0000DE D0*00            [24] 1530 	pop	_bp
                           0000E0  1531 	C$i2c.h$100$1$73 ==.
                           0000E0  1532 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1533 	ret
                                   1534 ;------------------------------------------------------------
                                   1535 ;Allocation info for local variables in function 'lcd_clear'
                                   1536 ;------------------------------------------------------------
                                   1537 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1538 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1539 ;------------------------------------------------------------
                           0000E1  1540 	G$lcd_clear$0$0 ==.
                           0000E1  1541 	C$i2c.h$103$1$73 ==.
                                   1542 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1543 ;	-----------------------------------------
                                   1544 ;	 function lcd_clear
                                   1545 ;	-----------------------------------------
      0000E1                       1546 _lcd_clear:
                           0000E1  1547 	C$i2c.h$105$1$73 ==.
                                   1548 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1549 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1550 	C$i2c.h$107$1$77 ==.
                                   1551 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1552 00101$:
      0000E4 74 C0            [12] 1553 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1554 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1555 	jc	00103$
      0000EA 75*0Br00         [24] 1556 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1557 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1558 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1559 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1560 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1561 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1562 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1563 	sjmp	00101$
      000101                       1564 00103$:
                           000101  1565 	C$i2c.h$109$1$77 ==.
                                   1566 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1567 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1568 	C$i2c.h$110$1$77 ==.
                                   1569 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1570 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1571 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1572 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1573 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1574 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1575 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1576 	lcall	_i2c_write_data
                           000119  1577 	C$i2c.h$111$1$77 ==.
                           000119  1578 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1579 	ret
                                   1580 ;------------------------------------------------------------
                                   1581 ;Allocation info for local variables in function 'read_keypad'
                                   1582 ;------------------------------------------------------------
                                   1583 ;i                         Allocated to registers r7 
                                   1584 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1585 ;------------------------------------------------------------
                           00011A  1586 	G$read_keypad$0$0 ==.
                           00011A  1587 	C$i2c.h$114$1$77 ==.
                                   1588 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1589 ;	-----------------------------------------
                                   1590 ;	 function read_keypad
                                   1591 ;	-----------------------------------------
      00011A                       1592 _read_keypad:
                           00011A  1593 	C$i2c.h$118$1$78 ==.
                                   1594 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1595 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1596 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1597 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1598 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1599 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1600 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1601 	lcall	_i2c_read_data
                           00012F  1602 	C$i2c.h$119$1$78 ==.
                                   1603 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1604 	mov	a,#0xFF
      000131 B5*03 05         [24] 1605 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1606 	mov	dpl,#0x00
      000137 80 5F            [24] 1607 	sjmp	00116$
      000139                       1608 00102$:
                           000139  1609 	C$i2c.h$121$1$78 ==.
                                   1610 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1611 	mov	r7,#0x00
      00013B 8F 06            [24] 1612 	mov	ar6,r7
      00013D                       1613 00114$:
                           00013D  1614 	C$i2c.h$123$2$79 ==.
                                   1615 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1616 	mov	b,r6
      00013F 05 F0            [12] 1617 	inc	b
      000141 7C 01            [12] 1618 	mov	r4,#0x01
      000143 7D 00            [12] 1619 	mov	r5,#0x00
      000145 80 06            [24] 1620 	sjmp	00145$
      000147                       1621 00144$:
      000147 EC               [12] 1622 	mov	a,r4
      000148 2C               [12] 1623 	add	a,r4
      000149 FC               [12] 1624 	mov	r4,a
      00014A ED               [12] 1625 	mov	a,r5
      00014B 33               [12] 1626 	rlc	a
      00014C FD               [12] 1627 	mov	r5,a
      00014D                       1628 00145$:
      00014D D5 F0 F7         [24] 1629 	djnz	b,00144$
      000150 AA*03            [24] 1630 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1631 	mov	r3,#0x00
      000154 EA               [12] 1632 	mov	a,r2
      000155 52 04            [12] 1633 	anl	ar4,a
      000157 EB               [12] 1634 	mov	a,r3
      000158 52 05            [12] 1635 	anl	ar5,a
      00015A EC               [12] 1636 	mov	a,r4
      00015B 4D               [12] 1637 	orl	a,r5
      00015C 60 07            [24] 1638 	jz	00115$
                           00015E  1639 	C$i2c.h$124$2$79 ==.
                                   1640 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1641 	mov	a,#0x31
      000160 2F               [12] 1642 	add	a,r7
      000161 F5 82            [12] 1643 	mov	dpl,a
      000163 80 33            [24] 1644 	sjmp	00116$
      000165                       1645 00115$:
                           000165  1646 	C$i2c.h$121$1$78 ==.
                                   1647 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1648 	inc	r6
      000166 8E 07            [24] 1649 	mov	ar7,r6
      000168 BE 08 00         [24] 1650 	cjne	r6,#0x08,00147$
      00016B                       1651 00147$:
      00016B 40 D0            [24] 1652 	jc	00114$
                           00016D  1653 	C$i2c.h$127$1$78 ==.
                                   1654 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1655 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1656 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1657 	mov	dpl,#0x39
      000175 80 21            [24] 1658 	sjmp	00116$
      000177                       1659 00107$:
                           000177  1660 	C$i2c.h$129$1$78 ==.
                                   1661 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1662 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1663 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1664 	mov	dpl,#0x2A
      00017F 80 17            [24] 1665 	sjmp	00116$
      000181                       1666 00109$:
                           000181  1667 	C$i2c.h$131$1$78 ==.
                                   1668 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1669 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1670 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1671 	mov	dpl,#0x30
      000189 80 0D            [24] 1672 	sjmp	00116$
      00018B                       1673 00111$:
                           00018B  1674 	C$i2c.h$133$1$78 ==.
                                   1675 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1676 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1677 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1678 	mov	dpl,#0x23
      000193 80 03            [24] 1679 	sjmp	00116$
      000195                       1680 00113$:
                           000195  1681 	C$i2c.h$135$1$78 ==.
                                   1682 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1683 	mov	dpl,#0xFF
      000198                       1684 00116$:
                           000198  1685 	C$i2c.h$136$1$78 ==.
                           000198  1686 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1687 	ret
                                   1688 ;------------------------------------------------------------
                                   1689 ;Allocation info for local variables in function 'kpd_input'
                                   1690 ;------------------------------------------------------------
                                   1691 ;mode                      Allocated to registers r7 
                                   1692 ;sum                       Allocated to registers r5 r6 
                                   1693 ;key                       Allocated to registers r3 
                                   1694 ;i                         Allocated to registers 
                                   1695 ;------------------------------------------------------------
                           000199  1696 	G$kpd_input$0$0 ==.
                           000199  1697 	C$i2c.h$148$1$78 ==.
                                   1698 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1699 ;	-----------------------------------------
                                   1700 ;	 function kpd_input
                                   1701 ;	-----------------------------------------
      000199                       1702 _kpd_input:
      000199 AF 82            [24] 1703 	mov	r7,dpl
                           00019B  1704 	C$i2c.h$153$1$81 ==.
                                   1705 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1706 	C$i2c.h$156$1$81 ==.
                                   1707 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1708 	clr	a
      00019C FD               [12] 1709 	mov	r5,a
      00019D FE               [12] 1710 	mov	r6,a
      00019E EF               [12] 1711 	mov	a,r7
      00019F 70 1D            [24] 1712 	jnz	00102$
      0001A1 C0 06            [24] 1713 	push	ar6
      0001A3 C0 05            [24] 1714 	push	ar5
      0001A5 74r00            [12] 1715 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1716 	push	acc
      0001A9 74s00            [12] 1717 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1718 	push	acc
      0001AD 74 80            [12] 1719 	mov	a,#0x80
      0001AF C0 E0            [24] 1720 	push	acc
      0001B1 12r00r5C         [24] 1721 	lcall	_lcd_print
      0001B4 15 81            [12] 1722 	dec	sp
      0001B6 15 81            [12] 1723 	dec	sp
      0001B8 15 81            [12] 1724 	dec	sp
      0001BA D0 05            [24] 1725 	pop	ar5
      0001BC D0 06            [24] 1726 	pop	ar6
      0001BE                       1727 00102$:
                           0001BE  1728 	C$i2c.h$158$1$81 ==.
                                   1729 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1730 	push	ar6
      0001C0 C0 05            [24] 1731 	push	ar5
      0001C2 74 08            [12] 1732 	mov	a,#0x08
      0001C4 C0 E0            [24] 1733 	push	acc
      0001C6 E4               [12] 1734 	clr	a
      0001C7 C0 E0            [24] 1735 	push	acc
      0001C9 74 08            [12] 1736 	mov	a,#0x08
      0001CB C0 E0            [24] 1737 	push	acc
      0001CD E4               [12] 1738 	clr	a
      0001CE C0 E0            [24] 1739 	push	acc
      0001D0 74 08            [12] 1740 	mov	a,#0x08
      0001D2 C0 E0            [24] 1741 	push	acc
      0001D4 E4               [12] 1742 	clr	a
      0001D5 C0 E0            [24] 1743 	push	acc
      0001D7 74 08            [12] 1744 	mov	a,#0x08
      0001D9 C0 E0            [24] 1745 	push	acc
      0001DB E4               [12] 1746 	clr	a
      0001DC C0 E0            [24] 1747 	push	acc
      0001DE 74 08            [12] 1748 	mov	a,#0x08
      0001E0 C0 E0            [24] 1749 	push	acc
      0001E2 E4               [12] 1750 	clr	a
      0001E3 C0 E0            [24] 1751 	push	acc
      0001E5 74r16            [12] 1752 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1753 	push	acc
      0001E9 74s00            [12] 1754 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1755 	push	acc
      0001ED 74 80            [12] 1756 	mov	a,#0x80
      0001EF C0 E0            [24] 1757 	push	acc
      0001F1 12r00r5C         [24] 1758 	lcall	_lcd_print
      0001F4 E5 81            [12] 1759 	mov	a,sp
      0001F6 24 F3            [12] 1760 	add	a,#0xf3
      0001F8 F5 81            [12] 1761 	mov	sp,a
                           0001FA  1762 	C$i2c.h$160$1$81 ==.
                                   1763 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1764 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1765 	mov	b,#0x07
      000200 E4               [12] 1766 	clr	a
      000201 12r03r0D         [24] 1767 	lcall	_delay_time
      000204 D0 05            [24] 1768 	pop	ar5
      000206 D0 06            [24] 1769 	pop	ar6
                           000208  1770 	C$i2c.h$164$1$81 ==.
                                   1771 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1772 	mov	r7,#0x00
                           00020A  1773 	C$i2c.h$166$3$84 ==.
                                   1774 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1775 00104$:
      00020A C0 07            [24] 1776 	push	ar7
      00020C C0 06            [24] 1777 	push	ar6
      00020E C0 05            [24] 1778 	push	ar5
      000210 12r01r1A         [24] 1779 	lcall	_read_keypad
      000213 AC 82            [24] 1780 	mov	r4,dpl
      000215 D0 05            [24] 1781 	pop	ar5
      000217 D0 06            [24] 1782 	pop	ar6
      000219 D0 07            [24] 1783 	pop	ar7
      00021B 8C 03            [24] 1784 	mov	ar3,r4
      00021D BC FF 02         [24] 1785 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1786 	sjmp	00105$
      000222                       1787 00146$:
      000222 BB 2A 17         [24] 1788 	cjne	r3,#0x2A,00106$
      000225                       1789 00105$:
      000225 90 27 10         [24] 1790 	mov	dptr,#0x2710
      000228 E4               [12] 1791 	clr	a
      000229 F5 F0            [12] 1792 	mov	b,a
      00022B C0 07            [24] 1793 	push	ar7
      00022D C0 06            [24] 1794 	push	ar6
      00022F C0 05            [24] 1795 	push	ar5
      000231 12r03r0D         [24] 1796 	lcall	_delay_time
      000234 D0 05            [24] 1797 	pop	ar5
      000236 D0 06            [24] 1798 	pop	ar6
      000238 D0 07            [24] 1799 	pop	ar7
      00023A 80 CE            [24] 1800 	sjmp	00104$
      00023C                       1801 00106$:
                           00023C  1802 	C$i2c.h$167$2$82 ==.
                                   1803 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1804 	cjne	r3,#0x23,00114$
                           00023F  1805 	C$i2c.h$169$3$83 ==.
                                   1806 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1807 00107$:
      00023F C0 06            [24] 1808 	push	ar6
      000241 C0 05            [24] 1809 	push	ar5
      000243 12r01r1A         [24] 1810 	lcall	_read_keypad
      000246 AC 82            [24] 1811 	mov	r4,dpl
      000248 D0 05            [24] 1812 	pop	ar5
      00024A D0 06            [24] 1813 	pop	ar6
      00024C BC 23 13         [24] 1814 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1815 	mov	dptr,#0x2710
      000252 E4               [12] 1816 	clr	a
      000253 F5 F0            [12] 1817 	mov	b,a
      000255 C0 06            [24] 1818 	push	ar6
      000257 C0 05            [24] 1819 	push	ar5
      000259 12r03r0D         [24] 1820 	lcall	_delay_time
      00025C D0 05            [24] 1821 	pop	ar5
      00025E D0 06            [24] 1822 	pop	ar6
      000260 80 DD            [24] 1823 	sjmp	00107$
      000262                       1824 00109$:
                           000262  1825 	C$i2c.h$170$3$83 ==.
                                   1826 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1827 	mov	dpl,r5
      000264 8E 83            [24] 1828 	mov	dph,r6
      000266 02r03r0C         [24] 1829 	ljmp	00119$
      000269                       1830 00114$:
                           000269  1831 	C$i2c.h$174$3$84 ==.
                                   1832 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1833 	mov	a,r3
      00026A FA               [12] 1834 	mov	r2,a
      00026B 33               [12] 1835 	rlc	a
      00026C 95 E0            [12] 1836 	subb	a,acc
      00026E FC               [12] 1837 	mov	r4,a
      00026F C0 07            [24] 1838 	push	ar7
      000271 C0 06            [24] 1839 	push	ar6
      000273 C0 05            [24] 1840 	push	ar5
      000275 C0 04            [24] 1841 	push	ar4
      000277 C0 03            [24] 1842 	push	ar3
      000279 C0 02            [24] 1843 	push	ar2
      00027B C0 02            [24] 1844 	push	ar2
      00027D C0 04            [24] 1845 	push	ar4
      00027F 74r26            [12] 1846 	mov	a,#___str_2
      000281 C0 E0            [24] 1847 	push	acc
      000283 74s00            [12] 1848 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1849 	push	acc
      000287 74 80            [12] 1850 	mov	a,#0x80
      000289 C0 E0            [24] 1851 	push	acc
      00028B 12r00r5C         [24] 1852 	lcall	_lcd_print
      00028E E5 81            [12] 1853 	mov	a,sp
      000290 24 FB            [12] 1854 	add	a,#0xfb
      000292 F5 81            [12] 1855 	mov	sp,a
      000294 D0 02            [24] 1856 	pop	ar2
      000296 D0 03            [24] 1857 	pop	ar3
      000298 D0 04            [24] 1858 	pop	ar4
      00029A D0 05            [24] 1859 	pop	ar5
      00029C D0 06            [24] 1860 	pop	ar6
                           00029E  1861 	C$i2c.h$175$1$81 ==.
                                   1862 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1863 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1864 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1865 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1866 	push	ar4
      0002A7 C0 03            [24] 1867 	push	ar3
      0002A9 C0 02            [24] 1868 	push	ar2
      0002AB 12r00r00         [24] 1869 	lcall	__mulint
      0002AE A8 82            [24] 1870 	mov	r0,dpl
      0002B0 A9 83            [24] 1871 	mov	r1,dph
      0002B2 D0 02            [24] 1872 	pop	ar2
      0002B4 D0 03            [24] 1873 	pop	ar3
      0002B6 D0 04            [24] 1874 	pop	ar4
      0002B8 D0 07            [24] 1875 	pop	ar7
      0002BA EA               [12] 1876 	mov	a,r2
      0002BB 28               [12] 1877 	add	a,r0
      0002BC F8               [12] 1878 	mov	r0,a
      0002BD EC               [12] 1879 	mov	a,r4
      0002BE 39               [12] 1880 	addc	a,r1
      0002BF F9               [12] 1881 	mov	r1,a
      0002C0 E8               [12] 1882 	mov	a,r0
      0002C1 24 D0            [12] 1883 	add	a,#0xD0
      0002C3 FD               [12] 1884 	mov	r5,a
      0002C4 E9               [12] 1885 	mov	a,r1
      0002C5 34 FF            [12] 1886 	addc	a,#0xFF
      0002C7 FE               [12] 1887 	mov	r6,a
                           0002C8  1888 	C$i2c.h$176$3$84 ==.
                                   1889 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1890 00110$:
      0002C8 C0 07            [24] 1891 	push	ar7
      0002CA C0 06            [24] 1892 	push	ar6
      0002CC C0 05            [24] 1893 	push	ar5
      0002CE C0 03            [24] 1894 	push	ar3
      0002D0 12r01r1A         [24] 1895 	lcall	_read_keypad
      0002D3 AC 82            [24] 1896 	mov	r4,dpl
      0002D5 D0 03            [24] 1897 	pop	ar3
      0002D7 D0 05            [24] 1898 	pop	ar5
      0002D9 D0 06            [24] 1899 	pop	ar6
      0002DB D0 07            [24] 1900 	pop	ar7
      0002DD EC               [12] 1901 	mov	a,r4
      0002DE B5 03 1B         [24] 1902 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1903 	mov	dptr,#0x2710
      0002E4 E4               [12] 1904 	clr	a
      0002E5 F5 F0            [12] 1905 	mov	b,a
      0002E7 C0 07            [24] 1906 	push	ar7
      0002E9 C0 06            [24] 1907 	push	ar6
      0002EB C0 05            [24] 1908 	push	ar5
      0002ED C0 03            [24] 1909 	push	ar3
      0002EF 12r03r0D         [24] 1910 	lcall	_delay_time
      0002F2 D0 03            [24] 1911 	pop	ar3
      0002F4 D0 05            [24] 1912 	pop	ar5
      0002F6 D0 06            [24] 1913 	pop	ar6
      0002F8 D0 07            [24] 1914 	pop	ar7
      0002FA 80 CC            [24] 1915 	sjmp	00110$
      0002FC                       1916 00118$:
                           0002FC  1917 	C$i2c.h$164$1$81 ==.
                                   1918 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1919 	inc	r7
      0002FD C3               [12] 1920 	clr	c
      0002FE EF               [12] 1921 	mov	a,r7
      0002FF 64 80            [12] 1922 	xrl	a,#0x80
      000301 94 85            [12] 1923 	subb	a,#0x85
      000303 50 03            [24] 1924 	jnc	00155$
      000305 02r02r0A         [24] 1925 	ljmp	00104$
      000308                       1926 00155$:
                           000308  1927 	C$i2c.h$179$1$81 ==.
                                   1928 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1929 	mov	dpl,r5
      00030A 8E 83            [24] 1930 	mov	dph,r6
      00030C                       1931 00119$:
                           00030C  1932 	C$i2c.h$180$1$81 ==.
                           00030C  1933 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1934 	ret
                                   1935 ;------------------------------------------------------------
                                   1936 ;Allocation info for local variables in function 'delay_time'
                                   1937 ;------------------------------------------------------------
                                   1938 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1939 ;index                     Allocated to registers 
                                   1940 ;------------------------------------------------------------
                           00030D  1941 	G$delay_time$0$0 ==.
                           00030D  1942 	C$i2c.h$189$1$81 ==.
                                   1943 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1944 ;	-----------------------------------------
                                   1945 ;	 function delay_time
                                   1946 ;	-----------------------------------------
      00030D                       1947 _delay_time:
      00030D AC 82            [24] 1948 	mov	r4,dpl
      00030F AD 83            [24] 1949 	mov	r5,dph
      000311 AE F0            [24] 1950 	mov	r6,b
      000313 FF               [12] 1951 	mov	r7,a
                           000314  1952 	C$i2c.h$192$1$86 ==.
                                   1953 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1954 	mov	r0,#0x00
      000316 79 00            [12] 1955 	mov	r1,#0x00
      000318 7A 00            [12] 1956 	mov	r2,#0x00
      00031A 7B 00            [12] 1957 	mov	r3,#0x00
      00031C                       1958 00103$:
      00031C C3               [12] 1959 	clr	c
      00031D E8               [12] 1960 	mov	a,r0
      00031E 9C               [12] 1961 	subb	a,r4
      00031F E9               [12] 1962 	mov	a,r1
      000320 9D               [12] 1963 	subb	a,r5
      000321 EA               [12] 1964 	mov	a,r2
      000322 9E               [12] 1965 	subb	a,r6
      000323 EB               [12] 1966 	mov	a,r3
      000324 9F               [12] 1967 	subb	a,r7
      000325 50 0F            [24] 1968 	jnc	00105$
      000327 08               [12] 1969 	inc	r0
      000328 B8 00 09         [24] 1970 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1971 	inc	r1
      00032C B9 00 05         [24] 1972 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1973 	inc	r2
      000330 BA 00 E9         [24] 1974 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1975 	inc	r3
      000334                       1976 00115$:
      000334 80 E6            [24] 1977 	sjmp	00103$
      000336                       1978 00105$:
                           000336  1979 	C$i2c.h$193$1$86 ==.
                           000336  1980 	XG$delay_time$0$0 ==.
      000336 22               [24] 1981 	ret
                                   1982 ;------------------------------------------------------------
                                   1983 ;Allocation info for local variables in function 'i2c_start'
                                   1984 ;------------------------------------------------------------
                           000337  1985 	G$i2c_start$0$0 ==.
                           000337  1986 	C$i2c.h$196$1$86 ==.
                                   1987 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1988 ;	-----------------------------------------
                                   1989 ;	 function i2c_start
                                   1990 ;	-----------------------------------------
      000337                       1991 _i2c_start:
                           000337  1992 	C$i2c.h$198$1$88 ==.
                                   1993 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1994 00101$:
      000337 20 C7 FD         [24] 1995 	jb	_BUSY,00101$
                           00033A  1996 	C$i2c.h$199$1$88 ==.
                                   1997 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1998 	setb	_STA
                           00033C  1999 	C$i2c.h$200$1$88 ==.
                                   2000 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       2001 00104$:
      00033C 30 C3 FD         [24] 2002 	jnb	_SI,00104$
                           00033F  2003 	C$i2c.h$201$1$88 ==.
                                   2004 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 2005 	clr	_STA
                           000341  2006 	C$i2c.h$202$1$88 ==.
                                   2007 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 2008 	clr	_SI
                           000343  2009 	C$i2c.h$203$1$88 ==.
                           000343  2010 	XG$i2c_start$0$0 ==.
      000343 22               [24] 2011 	ret
                                   2012 ;------------------------------------------------------------
                                   2013 ;Allocation info for local variables in function 'i2c_write'
                                   2014 ;------------------------------------------------------------
                                   2015 ;output_data               Allocated to registers 
                                   2016 ;------------------------------------------------------------
                           000344  2017 	G$i2c_write$0$0 ==.
                           000344  2018 	C$i2c.h$206$1$88 ==.
                                   2019 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   2020 ;	-----------------------------------------
                                   2021 ;	 function i2c_write
                                   2022 ;	-----------------------------------------
      000344                       2023 _i2c_write:
      000344 85 82 C2         [24] 2024 	mov	_SMB0DAT,dpl
                           000347  2025 	C$i2c.h$209$1$90 ==.
                                   2026 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       2027 00101$:
                           000347  2028 	C$i2c.h$210$1$90 ==.
                                   2029 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 2030 	jbc	_SI,00112$
      00034A 80 FB            [24] 2031 	sjmp	00101$
      00034C                       2032 00112$:
                           00034C  2033 	C$i2c.h$211$1$90 ==.
                           00034C  2034 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 2035 	ret
                                   2036 ;------------------------------------------------------------
                                   2037 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2038 ;------------------------------------------------------------
                                   2039 ;output_data               Allocated to registers 
                                   2040 ;------------------------------------------------------------
                           00034D  2041 	G$i2c_write_and_stop$0$0 ==.
                           00034D  2042 	C$i2c.h$214$1$90 ==.
                                   2043 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2044 ;	-----------------------------------------
                                   2045 ;	 function i2c_write_and_stop
                                   2046 ;	-----------------------------------------
      00034D                       2047 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2048 	mov	_SMB0DAT,dpl
                           000350  2049 	C$i2c.h$217$1$92 ==.
                                   2050 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2051 	setb	_STO
                           000352  2052 	C$i2c.h$218$1$92 ==.
                                   2053 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2054 00101$:
                           000352  2055 	C$i2c.h$219$1$92 ==.
                                   2056 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2057 	jbc	_SI,00112$
      000355 80 FB            [24] 2058 	sjmp	00101$
      000357                       2059 00112$:
                           000357  2060 	C$i2c.h$220$1$92 ==.
                           000357  2061 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2062 	ret
                                   2063 ;------------------------------------------------------------
                                   2064 ;Allocation info for local variables in function 'i2c_read'
                                   2065 ;------------------------------------------------------------
                                   2066 ;input_data                Allocated to registers 
                                   2067 ;------------------------------------------------------------
                           000358  2068 	G$i2c_read$0$0 ==.
                           000358  2069 	C$i2c.h$223$1$92 ==.
                                   2070 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2071 ;	-----------------------------------------
                                   2072 ;	 function i2c_read
                                   2073 ;	-----------------------------------------
      000358                       2074 _i2c_read:
                           000358  2075 	C$i2c.h$226$1$94 ==.
                                   2076 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2077 00101$:
      000358 30 C3 FD         [24] 2078 	jnb	_SI,00101$
                           00035B  2079 	C$i2c.h$227$1$94 ==.
                                   2080 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2081 	mov	dpl,_SMB0DAT
                           00035E  2082 	C$i2c.h$228$1$94 ==.
                                   2083 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2084 	clr	_SI
                           000360  2085 	C$i2c.h$229$1$94 ==.
                                   2086 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2087 	C$i2c.h$230$1$94 ==.
                           000360  2088 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2089 	ret
                                   2090 ;------------------------------------------------------------
                                   2091 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2092 ;------------------------------------------------------------
                                   2093 ;input_data                Allocated to registers r7 
                                   2094 ;------------------------------------------------------------
                           000361  2095 	G$i2c_read_and_stop$0$0 ==.
                           000361  2096 	C$i2c.h$233$1$94 ==.
                                   2097 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2098 ;	-----------------------------------------
                                   2099 ;	 function i2c_read_and_stop
                                   2100 ;	-----------------------------------------
      000361                       2101 _i2c_read_and_stop:
                           000361  2102 	C$i2c.h$236$1$96 ==.
                                   2103 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2104 00101$:
      000361 30 C3 FD         [24] 2105 	jnb	_SI,00101$
                           000364  2106 	C$i2c.h$237$1$96 ==.
                                   2107 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2108 	mov	r7,_SMB0DAT
                           000366  2109 	C$i2c.h$238$1$96 ==.
                                   2110 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2111 	clr	_SI
                           000368  2112 	C$i2c.h$239$1$96 ==.
                                   2113 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2114 	setb	_STO
                           00036A  2115 	C$i2c.h$240$1$96 ==.
                                   2116 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2117 00104$:
                           00036A  2118 	C$i2c.h$241$1$96 ==.
                                   2119 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2120 	jbc	_SI,00122$
      00036D 80 FB            [24] 2121 	sjmp	00104$
      00036F                       2122 00122$:
                           00036F  2123 	C$i2c.h$242$1$96 ==.
                                   2124 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2125 	mov	dpl,r7
                           000371  2126 	C$i2c.h$243$1$96 ==.
                           000371  2127 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2128 	ret
                                   2129 ;------------------------------------------------------------
                                   2130 ;Allocation info for local variables in function 'i2c_write_data'
                                   2131 ;------------------------------------------------------------
                                   2132 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2133 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2134 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2135 ;addr                      Allocated to registers r7 
                                   2136 ;i                         Allocated to registers 
                                   2137 ;------------------------------------------------------------
                           000372  2138 	G$i2c_write_data$0$0 ==.
                           000372  2139 	C$i2c.h$246$1$96 ==.
                                   2140 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2141 ;	-----------------------------------------
                                   2142 ;	 function i2c_write_data
                                   2143 ;	-----------------------------------------
      000372                       2144 _i2c_write_data:
      000372 AF 82            [24] 2145 	mov	r7,dpl
                           000374  2146 	C$i2c.h$250$1$98 ==.
                                   2147 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2148 	push	ar7
      000376 12r03r37         [24] 2149 	lcall	_i2c_start
      000379 D0 07            [24] 2150 	pop	ar7
                           00037B  2151 	C$i2c.h$251$1$98 ==.
                                   2152 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2153 	mov	a,#0xFE
      00037D 5F               [12] 2154 	anl	a,r7
      00037E F5 82            [12] 2155 	mov	dpl,a
      000380 12r03r44         [24] 2156 	lcall	_i2c_write
                           000383  2157 	C$i2c.h$252$1$98 ==.
                                   2158 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2159 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2160 	lcall	_i2c_write
                           000389  2161 	C$i2c.h$253$1$98 ==.
                                   2162 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2163 	mov	r7,#0x00
      00038B                       2164 00103$:
      00038B AD*09            [24] 2165 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2166 	mov	r6,#0x00
      00038F 1D               [12] 2167 	dec	r5
      000390 BD FF 01         [24] 2168 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2169 	dec	r6
      000394                       2170 00114$:
      000394 8F 03            [24] 2171 	mov	ar3,r7
      000396 7C 00            [12] 2172 	mov	r4,#0x00
      000398 C3               [12] 2173 	clr	c
      000399 EB               [12] 2174 	mov	a,r3
      00039A 9D               [12] 2175 	subb	a,r5
      00039B EC               [12] 2176 	mov	a,r4
      00039C 64 80            [12] 2177 	xrl	a,#0x80
      00039E 8E F0            [24] 2178 	mov	b,r6
      0003A0 63 F0 80         [24] 2179 	xrl	b,#0x80
      0003A3 95 F0            [12] 2180 	subb	a,b
      0003A5 50 1F            [24] 2181 	jnc	00101$
                           0003A7  2182 	C$i2c.h$254$1$98 ==.
                                   2183 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2184 	mov	a,r7
      0003A8 25*06            [12] 2185 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2186 	mov	r4,a
      0003AB E4               [12] 2187 	clr	a
      0003AC 35*07            [12] 2188 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2189 	mov	r5,a
      0003AF AE*08            [24] 2190 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2191 	mov	dpl,r4
      0003B3 8D 83            [24] 2192 	mov	dph,r5
      0003B5 8E F0            [24] 2193 	mov	b,r6
      0003B7 12r00r00         [24] 2194 	lcall	__gptrget
      0003BA F5 82            [12] 2195 	mov	dpl,a
      0003BC C0 07            [24] 2196 	push	ar7
      0003BE 12r03r44         [24] 2197 	lcall	_i2c_write
      0003C1 D0 07            [24] 2198 	pop	ar7
                           0003C3  2199 	C$i2c.h$253$1$98 ==.
                                   2200 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2201 	inc	r7
      0003C4 80 C5            [24] 2202 	sjmp	00103$
      0003C6                       2203 00101$:
                           0003C6  2204 	C$i2c.h$255$1$98 ==.
                                   2205 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2206 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2207 	mov	r7,#0x00
      0003CA 1E               [12] 2208 	dec	r6
      0003CB BE FF 01         [24] 2209 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2210 	dec	r7
      0003CF                       2211 00116$:
      0003CF EE               [12] 2212 	mov	a,r6
      0003D0 25*06            [12] 2213 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2214 	mov	r6,a
      0003D3 EF               [12] 2215 	mov	a,r7
      0003D4 35*07            [12] 2216 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2217 	mov	r7,a
      0003D7 AD*08            [24] 2218 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2219 	mov	dpl,r6
      0003DB 8F 83            [24] 2220 	mov	dph,r7
      0003DD 8D F0            [24] 2221 	mov	b,r5
      0003DF 12r00r00         [24] 2222 	lcall	__gptrget
      0003E2 F5 82            [12] 2223 	mov	dpl,a
      0003E4 12r03r4D         [24] 2224 	lcall	_i2c_write_and_stop
                           0003E7  2225 	C$i2c.h$256$1$98 ==.
                           0003E7  2226 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2227 	ret
                                   2228 ;------------------------------------------------------------
                                   2229 ;Allocation info for local variables in function 'i2c_read_data'
                                   2230 ;------------------------------------------------------------
                                   2231 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2232 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2233 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2234 ;addr                      Allocated to registers r7 
                                   2235 ;j                         Allocated to registers 
                                   2236 ;------------------------------------------------------------
                           0003E8  2237 	G$i2c_read_data$0$0 ==.
                           0003E8  2238 	C$i2c.h$259$1$98 ==.
                                   2239 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2240 ;	-----------------------------------------
                                   2241 ;	 function i2c_read_data
                                   2242 ;	-----------------------------------------
      0003E8                       2243 _i2c_read_data:
      0003E8 AF 82            [24] 2244 	mov	r7,dpl
                           0003EA  2245 	C$i2c.h$262$1$100 ==.
                                   2246 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2247 	push	ar7
      0003EC 12r03r37         [24] 2248 	lcall	_i2c_start
      0003EF D0 07            [24] 2249 	pop	ar7
                           0003F1  2250 	C$i2c.h$263$1$100 ==.
                                   2251 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2252 	mov	ar6,r7
      0003F3 74 FE            [12] 2253 	mov	a,#0xFE
      0003F5 5E               [12] 2254 	anl	a,r6
      0003F6 F5 82            [12] 2255 	mov	dpl,a
      0003F8 C0 07            [24] 2256 	push	ar7
      0003FA 12r03r44         [24] 2257 	lcall	_i2c_write
                           0003FD  2258 	C$i2c.h$264$1$100 ==.
                                   2259 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2260 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2261 	lcall	_i2c_write_and_stop
                           000403  2262 	C$i2c.h$265$1$100 ==.
                                   2263 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2264 	lcall	_i2c_start
      000406 D0 07            [24] 2265 	pop	ar7
                           000408  2266 	C$i2c.h$266$1$100 ==.
                                   2267 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2268 	mov	a,#0x01
      00040A 4F               [12] 2269 	orl	a,r7
      00040B F5 82            [12] 2270 	mov	dpl,a
      00040D 12r03r44         [24] 2271 	lcall	_i2c_write
                           000410  2272 	C$i2c.h$267$1$100 ==.
                                   2273 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2274 	mov	r7,#0x00
      000412                       2275 00103$:
      000412 AD*0E            [24] 2276 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2277 	mov	r6,#0x00
      000416 1D               [12] 2278 	dec	r5
      000417 BD FF 01         [24] 2279 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2280 	dec	r6
      00041B                       2281 00114$:
      00041B 8F 03            [24] 2282 	mov	ar3,r7
      00041D 7C 00            [12] 2283 	mov	r4,#0x00
      00041F C3               [12] 2284 	clr	c
      000420 EB               [12] 2285 	mov	a,r3
      000421 9D               [12] 2286 	subb	a,r5
      000422 EC               [12] 2287 	mov	a,r4
      000423 64 80            [12] 2288 	xrl	a,#0x80
      000425 8E F0            [24] 2289 	mov	b,r6
      000427 63 F0 80         [24] 2290 	xrl	b,#0x80
      00042A 95 F0            [12] 2291 	subb	a,b
      00042C 50 2E            [24] 2292 	jnc	00101$
                           00042E  2293 	C$i2c.h$269$2$101 ==.
                                   2294 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2295 	setb	_AA
                           000430  2296 	C$i2c.h$270$2$101 ==.
                                   2297 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2298 	mov	a,r7
      000431 25*0B            [12] 2299 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2300 	mov	r4,a
      000434 E4               [12] 2301 	clr	a
      000435 35*0C            [12] 2302 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2303 	mov	r5,a
      000438 AE*0D            [24] 2304 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2305 	push	ar7
      00043C C0 06            [24] 2306 	push	ar6
      00043E C0 05            [24] 2307 	push	ar5
      000440 C0 04            [24] 2308 	push	ar4
      000442 12r03r58         [24] 2309 	lcall	_i2c_read
      000445 AB 82            [24] 2310 	mov	r3,dpl
      000447 D0 04            [24] 2311 	pop	ar4
      000449 D0 05            [24] 2312 	pop	ar5
      00044B D0 06            [24] 2313 	pop	ar6
      00044D D0 07            [24] 2314 	pop	ar7
      00044F 8C 82            [24] 2315 	mov	dpl,r4
      000451 8D 83            [24] 2316 	mov	dph,r5
      000453 8E F0            [24] 2317 	mov	b,r6
      000455 EB               [12] 2318 	mov	a,r3
      000456 12r00r00         [24] 2319 	lcall	__gptrput
                           000459  2320 	C$i2c.h$267$1$100 ==.
                                   2321 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2322 	inc	r7
      00045A 80 B6            [24] 2323 	sjmp	00103$
      00045C                       2324 00101$:
                           00045C  2325 	C$i2c.h$272$1$100 ==.
                                   2326 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2327 	clr	_AA
                           00045E  2328 	C$i2c.h$273$1$100 ==.
                                   2329 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2330 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2331 	mov	r7,#0x00
      000462 1E               [12] 2332 	dec	r6
      000463 BE FF 01         [24] 2333 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2334 	dec	r7
      000467                       2335 00116$:
      000467 EE               [12] 2336 	mov	a,r6
      000468 25*0B            [12] 2337 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2338 	mov	r6,a
      00046B EF               [12] 2339 	mov	a,r7
      00046C 35*0C            [12] 2340 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2341 	mov	r7,a
      00046F AD*0D            [24] 2342 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2343 	push	ar7
      000473 C0 06            [24] 2344 	push	ar6
      000475 C0 05            [24] 2345 	push	ar5
      000477 12r03r61         [24] 2346 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2347 	mov	r4,dpl
      00047C D0 05            [24] 2348 	pop	ar5
      00047E D0 06            [24] 2349 	pop	ar6
      000480 D0 07            [24] 2350 	pop	ar7
      000482 8E 82            [24] 2351 	mov	dpl,r6
      000484 8F 83            [24] 2352 	mov	dph,r7
      000486 8D F0            [24] 2353 	mov	b,r5
      000488 EC               [12] 2354 	mov	a,r4
      000489 12r00r00         [24] 2355 	lcall	__gptrput
                           00048C  2356 	C$i2c.h$274$1$100 ==.
                           00048C  2357 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2358 	ret
                                   2359 ;------------------------------------------------------------
                                   2360 ;Allocation info for local variables in function 'Accel_Init'
                                   2361 ;------------------------------------------------------------
                                   2362 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2363 ;------------------------------------------------------------
                           00048D  2364 	G$Accel_Init$0$0 ==.
                           00048D  2365 	C$i2c.h$283$1$100 ==.
                                   2366 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2367 ;	-----------------------------------------
                                   2368 ;	 function Accel_Init
                                   2369 ;	-----------------------------------------
      00048D                       2370 _Accel_Init:
                           00048D  2371 	C$i2c.h$287$1$103 ==.
                                   2372 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2373 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2374 	C$i2c.h$289$1$103 ==.
                                   2375 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2376 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2377 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2378 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2379 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2380 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2381 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2382 	lcall	_i2c_write_data
                           0004A5  2383 	C$i2c.h$290$1$103 ==.
                                   2384 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2385 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2386 	C$i2c.h$292$1$103 ==.
                                   2387 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2388 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2389 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2390 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2391 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2392 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2393 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2394 	lcall	_i2c_write_data
                           0004BD  2395 	C$i2c.h$293$1$103 ==.
                                   2396 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2397 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2398 	C$i2c.h$294$1$103 ==.
                                   2399 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2400 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2401 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2402 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2403 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2404 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2405 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2406 	lcall	_i2c_write_data
                           0004D5  2407 	C$i2c.h$298$1$103 ==.
                           0004D5  2408 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2409 	ret
                                   2410 ;------------------------------------------------------------
                                   2411 ;Allocation info for local variables in function 'main'
                                   2412 ;------------------------------------------------------------
                           0004D6  2413 	G$main$0$0 ==.
                           0004D6  2414 	C$lab6.c$81$1$103 ==.
                                   2415 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:81: void main(void)
                                   2416 ;	-----------------------------------------
                                   2417 ;	 function main
                                   2418 ;	-----------------------------------------
      0004D6                       2419 _main:
                           0004D6  2420 	C$lab6.c$83$1$123 ==.
                                   2421 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:83: Sys_Init();
      0004D6 12r00r30         [24] 2422 	lcall	_Sys_Init
                           0004D9  2423 	C$lab6.c$84$1$123 ==.
                                   2424 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:84: putchar(' '); //the quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2425 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2426 	lcall	_putchar
                           0004DF  2427 	C$lab6.c$85$1$123 ==.
                                   2428 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:85: Port_Init();
      0004DF 12r12rAF         [24] 2429 	lcall	_Port_Init
                           0004E2  2430 	C$lab6.c$86$1$123 ==.
                                   2431 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:86: XBR0_Init();
      0004E2 12r12rDF         [24] 2432 	lcall	_XBR0_Init
                           0004E5  2433 	C$lab6.c$87$1$123 ==.
                                   2434 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:87: PCA_Init();
      0004E5 12r12rC7         [24] 2435 	lcall	_PCA_Init
                           0004E8  2436 	C$lab6.c$88$1$123 ==.
                                   2437 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:88: SMB_Init();
      0004E8 12r12rE3         [24] 2438 	lcall	_SMB_Init
                           0004EB  2439 	C$lab6.c$89$1$123 ==.
                                   2440 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:89: ADC_Init();
      0004EB 12r12rE9         [24] 2441 	lcall	_ADC_Init
                           0004EE  2442 	C$lab6.c$91$1$123 ==.
                                   2443 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:91: count =0;
      0004EE E4               [12] 2444 	clr	a
      0004EF F5*10            [12] 2445 	mov	_count,a
      0004F1 F5*11            [12] 2446 	mov	(_count + 1),a
                           0004F3  2447 	C$lab6.c$93$1$123 ==.
                                   2448 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:93: RUDDER_PW= PW_CENTER_RUDDER;
      0004F3 85*1A*24         [24] 2449 	mov	_RUDDER_PW,_PW_CENTER_RUDDER
      0004F6 85*1B*25         [24] 2450 	mov	(_RUDDER_PW + 1),(_PW_CENTER_RUDDER + 1)
                           0004F9  2451 	C$lab6.c$94$1$123 ==.
                                   2452 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:94: ANGLE_PW = PW_CENTER_ANGLE;
      0004F9 85*20*28         [24] 2453 	mov	_ANGLE_PW,_PW_CENTER_ANGLE
      0004FC 85*21*29         [24] 2454 	mov	(_ANGLE_PW + 1),(_PW_CENTER_ANGLE + 1)
                           0004FF  2455 	C$lab6.c$95$1$123 ==.
                                   2456 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:95: RTHRUST_PW = PW_NUET_THRUST;
      0004FF 85*14*2C         [24] 2457 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      000502 85*15*2D         [24] 2458 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           000505  2459 	C$lab6.c$96$1$123 ==.
                                   2460 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:96: LTHRUST_PW = PW_NUET_THRUST;
      000505 85*14*2E         [24] 2461 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      000508 85*15*2F         [24] 2462 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           00050B  2463 	C$lab6.c$98$1$123 ==.
                                   2464 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:98: RDR_lo_to_hi = 0xFFFF - RUDDER_PW;
      00050B 14               [12] 2465 	dec	a
      00050C C3               [12] 2466 	clr	c
      00050D 95*24            [12] 2467 	subb	a,_RUDDER_PW
      00050F F5*26            [12] 2468 	mov	_RDR_lo_to_hi,a
      000511 74 FF            [12] 2469 	mov	a,#0xFF
      000513 95*25            [12] 2470 	subb	a,(_RUDDER_PW + 1)
      000515 F5*27            [12] 2471 	mov	(_RDR_lo_to_hi + 1),a
                           000517  2472 	C$lab6.c$99$1$123 ==.
                                   2473 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:99: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      000517 74 FF            [12] 2474 	mov	a,#0xFF
      000519 C3               [12] 2475 	clr	c
      00051A 95*2C            [12] 2476 	subb	a,_RTHRUST_PW
      00051C F5*30            [12] 2477 	mov	_RTRST_lo_to_hi,a
      00051E 74 FF            [12] 2478 	mov	a,#0xFF
      000520 95*2D            [12] 2479 	subb	a,(_RTHRUST_PW + 1)
      000522 F5*31            [12] 2480 	mov	(_RTRST_lo_to_hi + 1),a
                           000524  2481 	C$lab6.c$100$1$123 ==.
                                   2482 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:100: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      000524 74 FF            [12] 2483 	mov	a,#0xFF
      000526 C3               [12] 2484 	clr	c
      000527 95*2E            [12] 2485 	subb	a,_LTHRUST_PW
      000529 F5*32            [12] 2486 	mov	_LTRST_lo_to_hi,a
      00052B 74 FF            [12] 2487 	mov	a,#0xFF
      00052D 95*2F            [12] 2488 	subb	a,(_LTHRUST_PW + 1)
      00052F F5*33            [12] 2489 	mov	(_LTRST_lo_to_hi + 1),a
                           000531  2490 	C$lab6.c$101$1$123 ==.
                                   2491 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:101: AGL_lo_to_hi = 0xFFFF - ANGLE_PW;
      000531 74 FF            [12] 2492 	mov	a,#0xFF
      000533 C3               [12] 2493 	clr	c
      000534 95*28            [12] 2494 	subb	a,_ANGLE_PW
      000536 F5*2A            [12] 2495 	mov	_AGL_lo_to_hi,a
      000538 74 FF            [12] 2496 	mov	a,#0xFF
      00053A 95*29            [12] 2497 	subb	a,(_ANGLE_PW + 1)
      00053C F5*2B            [12] 2498 	mov	(_AGL_lo_to_hi + 1),a
                           00053E  2499 	C$lab6.c$103$1$123 ==.
                                   2500 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:103: PCA0CP0 = RDR_lo_to_hi;
      00053E 85*26 EA         [24] 2501 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      000541 85*27 FA         [24] 2502 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           000544  2503 	C$lab6.c$104$1$123 ==.
                                   2504 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:104: PCA0CP1 = AGL_lo_to_hi;	
      000544 85*2A EB         [24] 2505 	mov	((_PCA0CP1 >> 0) & 0xFF),_AGL_lo_to_hi
      000547 85*2B FB         [24] 2506 	mov	((_PCA0CP1 >> 8) & 0xFF),(_AGL_lo_to_hi + 1)
                           00054A  2507 	C$lab6.c$105$1$123 ==.
                                   2508 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:105: PCA0CP2 = RTRST_lo_to_hi;
      00054A 85*30 EC         [24] 2509 	mov	((_PCA0CP2 >> 0) & 0xFF),_RTRST_lo_to_hi
      00054D 85*31 FC         [24] 2510 	mov	((_PCA0CP2 >> 8) & 0xFF),(_RTRST_lo_to_hi + 1)
                           000550  2511 	C$lab6.c$106$1$123 ==.
                                   2512 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:106: PCA0CP3 = LTRST_lo_to_hi;
      000550 85*32 ED         [24] 2513 	mov	((_PCA0CP3 >> 0) & 0xFF),_LTRST_lo_to_hi
      000553 85*33 FD         [24] 2514 	mov	((_PCA0CP3 >> 8) & 0xFF),(_LTRST_lo_to_hi + 1)
                           000556  2515 	C$lab6.c$108$1$123 ==.
                                   2516 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:108: kpkd();
      000556 12r05rE3         [24] 2517 	lcall	_kpkd
                           000559  2518 	C$lab6.c$112$1$123 ==.
                                   2519 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:112: direction();
      000559 12r07r21         [24] 2520 	lcall	_direction
                           00055C  2521 	C$lab6.c$113$1$123 ==.
                                   2522 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:113: while (1)
      00055C                       2523 00104$:
                           00055C  2524 	C$lab6.c$116$2$124 ==.
                                   2525 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:116: wait();
      00055C 12r12r88         [24] 2526 	lcall	_wait
                           00055F  2527 	C$lab6.c$117$2$124 ==.
                                   2528 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:117: if ((count +1) % 2 ==0)
      00055F 85*10 82         [24] 2529 	mov	dpl,_count
      000562 85*11 83         [24] 2530 	mov	dph,(_count + 1)
      000565 A3               [24] 2531 	inc	dptr
      000566 75*00 02         [24] 2532 	mov	__modsint_PARM_2,#0x02
      000569 75*01 00         [24] 2533 	mov	(__modsint_PARM_2 + 1),#0x00
      00056C 12r00r00         [24] 2534 	lcall	__modsint
      00056F E5 82            [12] 2535 	mov	a,dpl
      000571 85 83 F0         [24] 2536 	mov	b,dph
      000574 45 F0            [12] 2537 	orl	a,b
      000576 70 03            [24] 2538 	jnz	00102$
                           000578  2539 	C$lab6.c$120$3$125 ==.
                                   2540 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:120: Steering_func();
      000578 12r06rB3         [24] 2541 	lcall	_Steering_func
      00057B                       2542 00102$:
                           00057B  2543 	C$lab6.c$122$2$124 ==.
                                   2544 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:122: Change_D();
      00057B 12r06r2F         [24] 2545 	lcall	_Change_D
      00057E 80 DC            [24] 2546 	sjmp	00104$
                           000580  2547 	C$lab6.c$126$1$123 ==.
                           000580  2548 	XG$main$0$0 ==.
      000580 22               [24] 2549 	ret
                                   2550 ;------------------------------------------------------------
                                   2551 ;Allocation info for local variables in function 'Calibrate'
                                   2552 ;------------------------------------------------------------
                           000581  2553 	G$Calibrate$0$0 ==.
                           000581  2554 	C$lab6.c$128$1$123 ==.
                                   2555 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:128: void Calibrate(void)
                                   2556 ;	-----------------------------------------
                                   2557 ;	 function Calibrate
                                   2558 ;	-----------------------------------------
      000581                       2559 _Calibrate:
                           000581  2560 	C$lab6.c$132$1$127 ==.
                                   2561 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:132: Rudder_cal();
      000581 12r07rD3         [24] 2562 	lcall	_Rudder_cal
                           000584  2563 	C$lab6.c$133$1$127 ==.
                                   2564 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:133: RUDDER_PW= PW_CENTER_RUDDER;
      000584 85*1A*24         [24] 2565 	mov	_RUDDER_PW,_PW_CENTER_RUDDER
      000587 85*1B*25         [24] 2566 	mov	(_RUDDER_PW + 1),(_PW_CENTER_RUDDER + 1)
                           00058A  2567 	C$lab6.c$134$1$127 ==.
                                   2568 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:134: RDR_lo_to_hi = 0xFFFF - RUDDER_PW;
      00058A 74 FF            [12] 2569 	mov	a,#0xFF
      00058C C3               [12] 2570 	clr	c
      00058D 95*24            [12] 2571 	subb	a,_RUDDER_PW
      00058F F5*26            [12] 2572 	mov	_RDR_lo_to_hi,a
      000591 74 FF            [12] 2573 	mov	a,#0xFF
      000593 95*25            [12] 2574 	subb	a,(_RUDDER_PW + 1)
      000595 F5*27            [12] 2575 	mov	(_RDR_lo_to_hi + 1),a
                           000597  2576 	C$lab6.c$135$1$127 ==.
                                   2577 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:135: PCA0CP0 = RDR_lo_to_hi;
      000597 85*26 EA         [24] 2578 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      00059A 85*27 FA         [24] 2579 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           00059D  2580 	C$lab6.c$137$1$127 ==.
                                   2581 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:137: Angle_cal();
      00059D 12r0Ar80         [24] 2582 	lcall	_Angle_cal
                           0005A0  2583 	C$lab6.c$138$1$127 ==.
                                   2584 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:138: ANGLE_PW = PW_CENTER_ANGLE;
      0005A0 85*20*28         [24] 2585 	mov	_ANGLE_PW,_PW_CENTER_ANGLE
      0005A3 85*21*29         [24] 2586 	mov	(_ANGLE_PW + 1),(_PW_CENTER_ANGLE + 1)
                           0005A6  2587 	C$lab6.c$139$1$127 ==.
                                   2588 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:139: AGL_lo_to_hi = 0xFFFF - ANGLE_PW;
      0005A6 74 FF            [12] 2589 	mov	a,#0xFF
      0005A8 C3               [12] 2590 	clr	c
      0005A9 95*28            [12] 2591 	subb	a,_ANGLE_PW
      0005AB F5*2A            [12] 2592 	mov	_AGL_lo_to_hi,a
      0005AD 74 FF            [12] 2593 	mov	a,#0xFF
      0005AF 95*29            [12] 2594 	subb	a,(_ANGLE_PW + 1)
      0005B1 F5*2B            [12] 2595 	mov	(_AGL_lo_to_hi + 1),a
                           0005B3  2596 	C$lab6.c$140$1$127 ==.
                                   2597 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:140: PCA0CP1 = AGL_lo_to_hi;
      0005B3 85*2A EB         [24] 2598 	mov	((_PCA0CP1 >> 0) & 0xFF),_AGL_lo_to_hi
      0005B6 85*2B FB         [24] 2599 	mov	((_PCA0CP1 >> 8) & 0xFF),(_AGL_lo_to_hi + 1)
                           0005B9  2600 	C$lab6.c$142$1$127 ==.
                                   2601 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:142: Thrust_cal();
      0005B9 12r0Dr3B         [24] 2602 	lcall	_Thrust_cal
                           0005BC  2603 	C$lab6.c$143$1$127 ==.
                                   2604 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:143: RTHRUST_PW = PW_NUET_THRUST;
      0005BC 85*14*2C         [24] 2605 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      0005BF 85*15*2D         [24] 2606 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           0005C2  2607 	C$lab6.c$144$1$127 ==.
                                   2608 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:144: LTHRUST_PW = PW_NUET_THRUST;
      0005C2 85*14*2E         [24] 2609 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      0005C5 85*15*2F         [24] 2610 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           0005C8  2611 	C$lab6.c$145$1$127 ==.
                                   2612 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:145: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      0005C8 74 FF            [12] 2613 	mov	a,#0xFF
      0005CA C3               [12] 2614 	clr	c
      0005CB 95*2C            [12] 2615 	subb	a,_RTHRUST_PW
      0005CD F5*30            [12] 2616 	mov	_RTRST_lo_to_hi,a
      0005CF 74 FF            [12] 2617 	mov	a,#0xFF
      0005D1 95*2D            [12] 2618 	subb	a,(_RTHRUST_PW + 1)
      0005D3 F5*31            [12] 2619 	mov	(_RTRST_lo_to_hi + 1),a
                           0005D5  2620 	C$lab6.c$146$1$127 ==.
                                   2621 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:146: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      0005D5 74 FF            [12] 2622 	mov	a,#0xFF
      0005D7 C3               [12] 2623 	clr	c
      0005D8 95*2E            [12] 2624 	subb	a,_LTHRUST_PW
      0005DA F5*32            [12] 2625 	mov	_LTRST_lo_to_hi,a
      0005DC 74 FF            [12] 2626 	mov	a,#0xFF
      0005DE 95*2F            [12] 2627 	subb	a,(_LTHRUST_PW + 1)
      0005E0 F5*33            [12] 2628 	mov	(_LTRST_lo_to_hi + 1),a
                           0005E2  2629 	C$lab6.c$147$1$127 ==.
                           0005E2  2630 	XG$Calibrate$0$0 ==.
      0005E2 22               [24] 2631 	ret
                                   2632 ;------------------------------------------------------------
                                   2633 ;Allocation info for local variables in function 'kpkd'
                                   2634 ;------------------------------------------------------------
                           0005E3  2635 	G$kpkd$0$0 ==.
                           0005E3  2636 	C$lab6.c$149$1$127 ==.
                                   2637 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:149: void kpkd(void)
                                   2638 ;	-----------------------------------------
                                   2639 ;	 function kpkd
                                   2640 ;	-----------------------------------------
      0005E3                       2641 _kpkd:
                           0005E3  2642 	C$lab6.c$151$1$129 ==.
                                   2643 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:151: lcd_clear();
      0005E3 12r00rE1         [24] 2644 	lcall	_lcd_clear
                           0005E6  2645 	C$lab6.c$152$1$129 ==.
                                   2646 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:152: lcd_print("Please enter a kp value:\n ");
      0005E6 74r29            [12] 2647 	mov	a,#___str_3
      0005E8 C0 E0            [24] 2648 	push	acc
      0005EA 74s00            [12] 2649 	mov	a,#(___str_3 >> 8)
      0005EC C0 E0            [24] 2650 	push	acc
      0005EE 74 80            [12] 2651 	mov	a,#0x80
      0005F0 C0 E0            [24] 2652 	push	acc
      0005F2 12r00r5C         [24] 2653 	lcall	_lcd_print
      0005F5 15 81            [12] 2654 	dec	sp
      0005F7 15 81            [12] 2655 	dec	sp
      0005F9 15 81            [12] 2656 	dec	sp
                           0005FB  2657 	C$lab6.c$153$1$129 ==.
                                   2658 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:153: kp = kpd_input(0);
      0005FB 75 82 00         [24] 2659 	mov	dpl,#0x00
      0005FE 12r01r99         [24] 2660 	lcall	_kpd_input
      000601 85 82*38         [24] 2661 	mov	_kp,dpl
      000604 85 83*39         [24] 2662 	mov	(_kp + 1),dph
                           000607  2663 	C$lab6.c$154$1$129 ==.
                                   2664 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:154: lcd_clear();
      000607 12r00rE1         [24] 2665 	lcall	_lcd_clear
                           00060A  2666 	C$lab6.c$155$1$129 ==.
                                   2667 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:155: lcd_print("Please enter a kd value:\n ");
      00060A 74r44            [12] 2668 	mov	a,#___str_4
      00060C C0 E0            [24] 2669 	push	acc
      00060E 74s00            [12] 2670 	mov	a,#(___str_4 >> 8)
      000610 C0 E0            [24] 2671 	push	acc
      000612 74 80            [12] 2672 	mov	a,#0x80
      000614 C0 E0            [24] 2673 	push	acc
      000616 12r00r5C         [24] 2674 	lcall	_lcd_print
      000619 15 81            [12] 2675 	dec	sp
      00061B 15 81            [12] 2676 	dec	sp
      00061D 15 81            [12] 2677 	dec	sp
                           00061F  2678 	C$lab6.c$156$1$129 ==.
                                   2679 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:156: kd = kpd_input(0);
      00061F 75 82 00         [24] 2680 	mov	dpl,#0x00
      000622 12r01r99         [24] 2681 	lcall	_kpd_input
      000625 85 82*3A         [24] 2682 	mov	_kd,dpl
      000628 85 83*3B         [24] 2683 	mov	(_kd + 1),dph
                           00062B  2684 	C$lab6.c$157$1$129 ==.
                                   2685 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:157: lcd_clear();
      00062B 12r00rE1         [24] 2686 	lcall	_lcd_clear
                           00062E  2687 	C$lab6.c$158$1$129 ==.
                           00062E  2688 	XG$kpkd$0$0 ==.
      00062E 22               [24] 2689 	ret
                                   2690 ;------------------------------------------------------------
                                   2691 ;Allocation info for local variables in function 'Change_D'
                                   2692 ;------------------------------------------------------------
                                   2693 ;distance                  Allocated with name '_Change_D_distance_1_131'
                                   2694 ;------------------------------------------------------------
                           00062F  2695 	G$Change_D$0$0 ==.
                           00062F  2696 	C$lab6.c$161$1$129 ==.
                                   2697 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:161: void Change_D(void)
                                   2698 ;	-----------------------------------------
                                   2699 ;	 function Change_D
                                   2700 ;	-----------------------------------------
      00062F                       2701 _Change_D:
                           00062F  2702 	C$lab6.c$163$1$129 ==.
                                   2703 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:163: __xdata unsigned int distance=100;
      00062F 90r00r54         [24] 2704 	mov	dptr,#_Change_D_distance_1_131
      000632 74 64            [12] 2705 	mov	a,#0x64
      000634 F0               [24] 2706 	movx	@dptr,a
      000635 E4               [12] 2707 	clr	a
      000636 A3               [24] 2708 	inc	dptr
      000637 F0               [24] 2709 	movx	@dptr,a
                           000638  2710 	C$lab6.c$164$1$131 ==.
                                   2711 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:164: if (count +1 % 4 == 0)
      000638 04               [12] 2712 	inc	a
      000639 25*10            [12] 2713 	add	a,_count
      00063B FE               [12] 2714 	mov	r6,a
      00063C E4               [12] 2715 	clr	a
      00063D 35*11            [12] 2716 	addc	a,(_count + 1)
      00063F FF               [12] 2717 	mov	r7,a
      000640 4E               [12] 2718 	orl	a,r6
      000641 70 10            [24] 2719 	jnz	00102$
                           000643  2720 	C$lab6.c$166$2$132 ==.
                                   2721 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:166: distance = Read_Ranger();
      000643 12r06r8D         [24] 2722 	lcall	_Read_Ranger
      000646 E5 82            [12] 2723 	mov	a,dpl
      000648 85 83 F0         [24] 2724 	mov	b,dph
      00064B 90r00r54         [24] 2725 	mov	dptr,#_Change_D_distance_1_131
      00064E F0               [24] 2726 	movx	@dptr,a
      00064F E5 F0            [12] 2727 	mov	a,b
      000651 A3               [24] 2728 	inc	dptr
      000652 F0               [24] 2729 	movx	@dptr,a
      000653                       2730 00102$:
                           000653  2731 	C$lab6.c$168$1$131 ==.
                                   2732 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:168: if (distance < 50)
      000653 90r00r54         [24] 2733 	mov	dptr,#_Change_D_distance_1_131
      000656 E0               [24] 2734 	movx	a,@dptr
      000657 FE               [12] 2735 	mov	r6,a
      000658 A3               [24] 2736 	inc	dptr
      000659 E0               [24] 2737 	movx	a,@dptr
      00065A FF               [12] 2738 	mov	r7,a
      00065B C3               [12] 2739 	clr	c
      00065C EE               [12] 2740 	mov	a,r6
      00065D 94 32            [12] 2741 	subb	a,#0x32
      00065F EF               [12] 2742 	mov	a,r7
      000660 94 00            [12] 2743 	subb	a,#0x00
      000662 50 28            [24] 2744 	jnc	00105$
                           000664  2745 	C$lab6.c$170$2$133 ==.
                                   2746 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:170: desired_D = (desired_D + 1800) % 3600;
      000664 90r00r50         [24] 2747 	mov	dptr,#_desired_D
      000667 E0               [24] 2748 	movx	a,@dptr
      000668 FE               [12] 2749 	mov	r6,a
      000669 A3               [24] 2750 	inc	dptr
      00066A E0               [24] 2751 	movx	a,@dptr
      00066B FF               [12] 2752 	mov	r7,a
      00066C 74 08            [12] 2753 	mov	a,#0x08
      00066E 2E               [12] 2754 	add	a,r6
      00066F F5 82            [12] 2755 	mov	dpl,a
      000671 74 07            [12] 2756 	mov	a,#0x07
      000673 3F               [12] 2757 	addc	a,r7
      000674 F5 83            [12] 2758 	mov	dph,a
      000676 75*00 10         [24] 2759 	mov	__modsint_PARM_2,#0x10
      000679 75*01 0E         [24] 2760 	mov	(__modsint_PARM_2 + 1),#0x0E
      00067C 12r00r00         [24] 2761 	lcall	__modsint
      00067F E5 82            [12] 2762 	mov	a,dpl
      000681 85 83 F0         [24] 2763 	mov	b,dph
      000684 90r00r50         [24] 2764 	mov	dptr,#_desired_D
      000687 F0               [24] 2765 	movx	@dptr,a
      000688 E5 F0            [12] 2766 	mov	a,b
      00068A A3               [24] 2767 	inc	dptr
      00068B F0               [24] 2768 	movx	@dptr,a
      00068C                       2769 00105$:
                           00068C  2770 	C$lab6.c$172$1$131 ==.
                           00068C  2771 	XG$Change_D$0$0 ==.
      00068C 22               [24] 2772 	ret
                                   2773 ;------------------------------------------------------------
                                   2774 ;Allocation info for local variables in function 'Read_Ranger'
                                   2775 ;------------------------------------------------------------
                                   2776 ;r_addr                    Allocated to registers 
                                   2777 ;read                      Allocated to registers 
                                   2778 ;------------------------------------------------------------
                           00068D  2779 	G$Read_Ranger$0$0 ==.
                           00068D  2780 	C$lab6.c$174$1$131 ==.
                                   2781 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:174: unsigned int Read_Ranger(void)
                                   2782 ;	-----------------------------------------
                                   2783 ;	 function Read_Ranger
                                   2784 ;	-----------------------------------------
      00068D                       2785 _Read_Ranger:
                           00068D  2786 	C$lab6.c$180$1$135 ==.
                                   2787 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:180: i2c_read_data(r_addr, 2, r_data, 2);
      00068D 75*0Br36         [24] 2788 	mov	_i2c_read_data_PARM_3,#_r_data
      000690 75*0C 00         [24] 2789 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000693 75*0D 40         [24] 2790 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000696 75*0A 02         [24] 2791 	mov	_i2c_read_data_PARM_2,#0x02
      000699 75*0E 02         [24] 2792 	mov	_i2c_read_data_PARM_4,#0x02
      00069C 75 82 E0         [24] 2793 	mov	dpl,#0xE0
      00069F 12r03rE8         [24] 2794 	lcall	_i2c_read_data
                           0006A2  2795 	C$lab6.c$181$1$135 ==.
                                   2796 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:181: read = (((unsigned int) r_data[0] <<8) | r_data[1]);
      0006A2 AF*36            [24] 2797 	mov	r7,_r_data
      0006A4 7E 00            [12] 2798 	mov	r6,#0x00
      0006A6 AC*37            [24] 2799 	mov	r4,(_r_data + 0x0001)
      0006A8 7D 00            [12] 2800 	mov	r5,#0x00
      0006AA EC               [12] 2801 	mov	a,r4
      0006AB 4E               [12] 2802 	orl	a,r6
      0006AC F5 82            [12] 2803 	mov	dpl,a
      0006AE ED               [12] 2804 	mov	a,r5
      0006AF 4F               [12] 2805 	orl	a,r7
      0006B0 F5 83            [12] 2806 	mov	dph,a
                           0006B2  2807 	C$lab6.c$182$1$135 ==.
                                   2808 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:182: return read;
                           0006B2  2809 	C$lab6.c$183$1$135 ==.
                           0006B2  2810 	XG$Read_Ranger$0$0 ==.
      0006B2 22               [24] 2811 	ret
                                   2812 ;------------------------------------------------------------
                                   2813 ;Allocation info for local variables in function 'Steering_func'
                                   2814 ;------------------------------------------------------------
                           0006B3  2815 	G$Steering_func$0$0 ==.
                           0006B3  2816 	C$lab6.c$185$1$135 ==.
                                   2817 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:185: void Steering_func(void)    ///FUNCTION TO HOLD ACTIONS FOR STEERING
                                   2818 ;	-----------------------------------------
                                   2819 ;	 function Steering_func
                                   2820 ;	-----------------------------------------
      0006B3                       2821 _Steering_func:
                           0006B3  2822 	C$lab6.c$188$1$137 ==.
                                   2823 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:188: actual_D = ReadCompass();
      0006B3 12r07rAD         [24] 2824 	lcall	_ReadCompass
      0006B6 E5 82            [12] 2825 	mov	a,dpl
      0006B8 85 83 F0         [24] 2826 	mov	b,dph
      0006BB 90r00r52         [24] 2827 	mov	dptr,#_actual_D
      0006BE F0               [24] 2828 	movx	@dptr,a
      0006BF E5 F0            [12] 2829 	mov	a,b
      0006C1 A3               [24] 2830 	inc	dptr
      0006C2 F0               [24] 2831 	movx	@dptr,a
                           0006C3  2832 	C$lab6.c$189$1$137 ==.
                                   2833 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:189: lcd_clear();
      0006C3 12r00rE1         [24] 2834 	lcall	_lcd_clear
                           0006C6  2835 	C$lab6.c$190$1$137 ==.
                                   2836 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:190: lcd_print("%d", actual_D);
      0006C6 90r00r52         [24] 2837 	mov	dptr,#_actual_D
      0006C9 E0               [24] 2838 	movx	a,@dptr
      0006CA C0 E0            [24] 2839 	push	acc
      0006CC A3               [24] 2840 	inc	dptr
      0006CD E0               [24] 2841 	movx	a,@dptr
      0006CE C0 E0            [24] 2842 	push	acc
      0006D0 74r5F            [12] 2843 	mov	a,#___str_5
      0006D2 C0 E0            [24] 2844 	push	acc
      0006D4 74s00            [12] 2845 	mov	a,#(___str_5 >> 8)
      0006D6 C0 E0            [24] 2846 	push	acc
      0006D8 74 80            [12] 2847 	mov	a,#0x80
      0006DA C0 E0            [24] 2848 	push	acc
      0006DC 12r00r5C         [24] 2849 	lcall	_lcd_print
      0006DF E5 81            [12] 2850 	mov	a,sp
      0006E1 24 FB            [12] 2851 	add	a,#0xfb
      0006E3 F5 81            [12] 2852 	mov	sp,a
                           0006E5  2853 	C$lab6.c$191$1$137 ==.
                                   2854 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:191: offset = (unsigned int)((actual_D +3600- desired_D ) % 3600);
      0006E5 90r00r52         [24] 2855 	mov	dptr,#_actual_D
      0006E8 E0               [24] 2856 	movx	a,@dptr
      0006E9 FE               [12] 2857 	mov	r6,a
      0006EA A3               [24] 2858 	inc	dptr
      0006EB E0               [24] 2859 	movx	a,@dptr
      0006EC FF               [12] 2860 	mov	r7,a
      0006ED 74 10            [12] 2861 	mov	a,#0x10
      0006EF 2E               [12] 2862 	add	a,r6
      0006F0 FE               [12] 2863 	mov	r6,a
      0006F1 74 0E            [12] 2864 	mov	a,#0x0E
      0006F3 3F               [12] 2865 	addc	a,r7
      0006F4 FF               [12] 2866 	mov	r7,a
      0006F5 90r00r50         [24] 2867 	mov	dptr,#_desired_D
      0006F8 E0               [24] 2868 	movx	a,@dptr
      0006F9 FC               [12] 2869 	mov	r4,a
      0006FA A3               [24] 2870 	inc	dptr
      0006FB E0               [24] 2871 	movx	a,@dptr
      0006FC FD               [12] 2872 	mov	r5,a
      0006FD EE               [12] 2873 	mov	a,r6
      0006FE C3               [12] 2874 	clr	c
      0006FF 9C               [12] 2875 	subb	a,r4
      000700 F5 82            [12] 2876 	mov	dpl,a
      000702 EF               [12] 2877 	mov	a,r7
      000703 9D               [12] 2878 	subb	a,r5
      000704 F5 83            [12] 2879 	mov	dph,a
      000706 75*00 10         [24] 2880 	mov	__modsint_PARM_2,#0x10
      000709 75*01 0E         [24] 2881 	mov	(__modsint_PARM_2 + 1),#0x0E
      00070C 12r00r00         [24] 2882 	lcall	__modsint
      00070F AE 82            [24] 2883 	mov	r6,dpl
      000711 AF 83            [24] 2884 	mov	r7,dph
      000713 8E*34            [24] 2885 	mov	_offset,r6
      000715 8F*35            [24] 2886 	mov	(_offset + 1),r7
                           000717  2887 	C$lab6.c$192$1$137 ==.
                                   2888 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:192: Steering_Servo(offset);
      000717 85*34 82         [24] 2889 	mov	dpl,_offset
      00071A 85*35 83         [24] 2890 	mov	dph,(_offset + 1)
      00071D 12r10r6A         [24] 2891 	lcall	_Steering_Servo
                           000720  2892 	C$lab6.c$194$1$137 ==.
                           000720  2893 	XG$Steering_func$0$0 ==.
      000720 22               [24] 2894 	ret
                                   2895 ;------------------------------------------------------------
                                   2896 ;Allocation info for local variables in function 'direction'
                                   2897 ;------------------------------------------------------------
                                   2898 ;value                     Allocated to registers r6 r7 
                                   2899 ;------------------------------------------------------------
                           000721  2900 	G$direction$0$0 ==.
                           000721  2901 	C$lab6.c$196$1$137 ==.
                                   2902 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:196: unsigned int direction(void)        ///ADJUSTS THE VALUES OF DIRECTION SO THE DESIRED DIRECTION IS THE CAR'S 'NORTH'
                                   2903 ;	-----------------------------------------
                                   2904 ;	 function direction
                                   2905 ;	-----------------------------------------
      000721                       2906 _direction:
                           000721  2907 	C$lab6.c$199$1$139 ==.
                                   2908 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:199: count =0;
      000721 E4               [12] 2909 	clr	a
      000722 F5*10            [12] 2910 	mov	_count,a
      000724 F5*11            [12] 2911 	mov	(_count + 1),a
                           000726  2912 	C$lab6.c$200$1$139 ==.
                                   2913 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:200: while (count < 1);
      000726                       2914 00101$:
      000726 C3               [12] 2915 	clr	c
      000727 E5*10            [12] 2916 	mov	a,_count
      000729 94 01            [12] 2917 	subb	a,#0x01
      00072B E5*11            [12] 2918 	mov	a,(_count + 1)
      00072D 64 80            [12] 2919 	xrl	a,#0x80
      00072F 94 80            [12] 2920 	subb	a,#0x80
      000731 40 F3            [24] 2921 	jc	00101$
                           000733  2922 	C$lab6.c$201$1$139 ==.
                                   2923 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:201: lcd_clear();
      000733 12r00rE1         [24] 2924 	lcall	_lcd_clear
                           000736  2925 	C$lab6.c$202$1$139 ==.
                                   2926 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:202: lcd_print("Calibration:\nHello world!\n012_345_678:\nabc def ghij");
      000736 74r62            [12] 2927 	mov	a,#___str_6
      000738 C0 E0            [24] 2928 	push	acc
      00073A 74s00            [12] 2929 	mov	a,#(___str_6 >> 8)
      00073C C0 E0            [24] 2930 	push	acc
      00073E 74 80            [12] 2931 	mov	a,#0x80
      000740 C0 E0            [24] 2932 	push	acc
      000742 12r00r5C         [24] 2933 	lcall	_lcd_print
      000745 15 81            [12] 2934 	dec	sp
      000747 15 81            [12] 2935 	dec	sp
      000749 15 81            [12] 2936 	dec	sp
                           00074B  2937 	C$lab6.c$203$1$139 ==.
                                   2938 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:203: start();
      00074B 12r12r78         [24] 2939 	lcall	_start
                           00074E  2940 	C$lab6.c$204$1$139 ==.
                                   2941 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:204: lcd_clear();
      00074E 12r00rE1         [24] 2942 	lcall	_lcd_clear
                           000751  2943 	C$lab6.c$205$1$139 ==.
                                   2944 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:205: value = kpd_input(0);
      000751 75 82 00         [24] 2945 	mov	dpl,#0x00
      000754 12r01r99         [24] 2946 	lcall	_kpd_input
      000757 AE 82            [24] 2947 	mov	r6,dpl
      000759 AF 83            [24] 2948 	mov	r7,dph
                           00075B  2949 	C$lab6.c$206$1$139 ==.
                                   2950 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:206: lcd_clear();
      00075B C0 07            [24] 2951 	push	ar7
      00075D C0 06            [24] 2952 	push	ar6
      00075F 12r00rE1         [24] 2953 	lcall	_lcd_clear
      000762 D0 06            [24] 2954 	pop	ar6
      000764 D0 07            [24] 2955 	pop	ar7
                           000766  2956 	C$lab6.c$207$1$139 ==.
                                   2957 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:207: lcd_print("\r\nThe desired direction is: %d", value);
      000766 C0 07            [24] 2958 	push	ar7
      000768 C0 06            [24] 2959 	push	ar6
      00076A C0 06            [24] 2960 	push	ar6
      00076C C0 07            [24] 2961 	push	ar7
      00076E 74r96            [12] 2962 	mov	a,#___str_7
      000770 C0 E0            [24] 2963 	push	acc
      000772 74s00            [12] 2964 	mov	a,#(___str_7 >> 8)
      000774 C0 E0            [24] 2965 	push	acc
      000776 74 80            [12] 2966 	mov	a,#0x80
      000778 C0 E0            [24] 2967 	push	acc
      00077A 12r00r5C         [24] 2968 	lcall	_lcd_print
      00077D E5 81            [12] 2969 	mov	a,sp
      00077F 24 FB            [12] 2970 	add	a,#0xfb
      000781 F5 81            [12] 2971 	mov	sp,a
      000783 D0 06            [24] 2972 	pop	ar6
      000785 D0 07            [24] 2973 	pop	ar7
                           000787  2974 	C$lab6.c$208$1$139 ==.
                                   2975 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:208: printf("\r\nThe desired direction is: %d", value);
      000787 C0 07            [24] 2976 	push	ar7
      000789 C0 06            [24] 2977 	push	ar6
      00078B C0 06            [24] 2978 	push	ar6
      00078D C0 07            [24] 2979 	push	ar7
      00078F 74r96            [12] 2980 	mov	a,#___str_7
      000791 C0 E0            [24] 2981 	push	acc
      000793 74s00            [12] 2982 	mov	a,#(___str_7 >> 8)
      000795 C0 E0            [24] 2983 	push	acc
      000797 74 80            [12] 2984 	mov	a,#0x80
      000799 C0 E0            [24] 2985 	push	acc
      00079B 12r00r00         [24] 2986 	lcall	_printf
      00079E E5 81            [12] 2987 	mov	a,sp
      0007A0 24 FB            [12] 2988 	add	a,#0xfb
      0007A2 F5 81            [12] 2989 	mov	sp,a
      0007A4 D0 06            [24] 2990 	pop	ar6
      0007A6 D0 07            [24] 2991 	pop	ar7
                           0007A8  2992 	C$lab6.c$210$1$139 ==.
                                   2993 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:210: return value;
      0007A8 8E 82            [24] 2994 	mov	dpl,r6
      0007AA 8F 83            [24] 2995 	mov	dph,r7
                           0007AC  2996 	C$lab6.c$212$1$139 ==.
                           0007AC  2997 	XG$direction$0$0 ==.
      0007AC 22               [24] 2998 	ret
                                   2999 ;------------------------------------------------------------
                                   3000 ;Allocation info for local variables in function 'ReadCompass'
                                   3001 ;------------------------------------------------------------
                                   3002 ;Data                      Allocated with name '_ReadCompass_Data_1_141'
                                   3003 ;Crange                    Allocated to registers 
                                   3004 ;addr                      Allocated to registers 
                                   3005 ;------------------------------------------------------------
                           0007AD  3006 	G$ReadCompass$0$0 ==.
                           0007AD  3007 	C$lab6.c$214$1$139 ==.
                                   3008 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:214: unsigned int ReadCompass(void)
                                   3009 ;	-----------------------------------------
                                   3010 ;	 function ReadCompass
                                   3011 ;	-----------------------------------------
      0007AD                       3012 _ReadCompass:
                           0007AD  3013 	C$lab6.c$220$1$141 ==.
                                   3014 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:220: i2c_read_data(addr, 2,Data,2);
      0007AD 75*0Br40         [24] 3015 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_1_141
      0007B0 75*0C 00         [24] 3016 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0007B3 75*0D 40         [24] 3017 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0007B6 75*0A 02         [24] 3018 	mov	_i2c_read_data_PARM_2,#0x02
      0007B9 75*0E 02         [24] 3019 	mov	_i2c_read_data_PARM_4,#0x02
      0007BC 75 82 C0         [24] 3020 	mov	dpl,#0xC0
      0007BF 12r03rE8         [24] 3021 	lcall	_i2c_read_data
                           0007C2  3022 	C$lab6.c$221$1$141 ==.
                                   3023 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:221: Crange = ((unsigned int) Data[0] << 8 | Data[1]);
      0007C2 AF*40            [24] 3024 	mov	r7,_ReadCompass_Data_1_141
      0007C4 7E 00            [12] 3025 	mov	r6,#0x00
      0007C6 AC*41            [24] 3026 	mov	r4,(_ReadCompass_Data_1_141 + 0x0001)
      0007C8 7D 00            [12] 3027 	mov	r5,#0x00
      0007CA EC               [12] 3028 	mov	a,r4
      0007CB 4E               [12] 3029 	orl	a,r6
      0007CC F5 82            [12] 3030 	mov	dpl,a
      0007CE ED               [12] 3031 	mov	a,r5
      0007CF 4F               [12] 3032 	orl	a,r7
      0007D0 F5 83            [12] 3033 	mov	dph,a
                           0007D2  3034 	C$lab6.c$222$1$141 ==.
                                   3035 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:222: return Crange;
                           0007D2  3036 	C$lab6.c$223$1$141 ==.
                           0007D2  3037 	XG$ReadCompass$0$0 ==.
      0007D2 22               [24] 3038 	ret
                                   3039 ;------------------------------------------------------------
                                   3040 ;Allocation info for local variables in function 'Rudder_cal'
                                   3041 ;------------------------------------------------------------
                                   3042 ;st                        Allocated to registers r7 
                                   3043 ;value                     Allocated with name '_Rudder_cal_value_1_143'
                                   3044 ;times                     Allocated with name '_Rudder_cal_times_1_143'
                                   3045 ;------------------------------------------------------------
                           0007D3  3046 	G$Rudder_cal$0$0 ==.
                           0007D3  3047 	C$lab6.c$225$1$141 ==.
                                   3048 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:225: void Rudder_cal(void)
                                   3049 ;	-----------------------------------------
                                   3050 ;	 function Rudder_cal
                                   3051 ;	-----------------------------------------
      0007D3                       3052 _Rudder_cal:
                           0007D3  3053 	C$lab6.c$228$1$141 ==.
                                   3054 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:228: __xdata int value =0;
      0007D3 90r00r56         [24] 3055 	mov	dptr,#_Rudder_cal_value_1_143
      0007D6 E4               [12] 3056 	clr	a
      0007D7 F0               [24] 3057 	movx	@dptr,a
      0007D8 A3               [24] 3058 	inc	dptr
      0007D9 F0               [24] 3059 	movx	@dptr,a
                           0007DA  3060 	C$lab6.c$229$1$141 ==.
                                   3061 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:229: __xdata int times =0;
      0007DA 90r00r58         [24] 3062 	mov	dptr,#_Rudder_cal_times_1_143
      0007DD F0               [24] 3063 	movx	@dptr,a
      0007DE A3               [24] 3064 	inc	dptr
      0007DF F0               [24] 3065 	movx	@dptr,a
                           0007E0  3066 	C$lab6.c$230$1$143 ==.
                                   3067 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:230: count =0;
      0007E0 F5*10            [12] 3068 	mov	_count,a
      0007E2 F5*11            [12] 3069 	mov	(_count + 1),a
                           0007E4  3070 	C$lab6.c$231$1$143 ==.
                                   3071 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:231: lcd_clear();
      0007E4 12r00rE1         [24] 3072 	lcall	_lcd_clear
                           0007E7  3073 	C$lab6.c$232$1$143 ==.
                                   3074 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:232: lcd_print("Rudder Calibration");
      0007E7 74rB5            [12] 3075 	mov	a,#___str_8
      0007E9 C0 E0            [24] 3076 	push	acc
      0007EB 74s00            [12] 3077 	mov	a,#(___str_8 >> 8)
      0007ED C0 E0            [24] 3078 	push	acc
      0007EF 74 80            [12] 3079 	mov	a,#0x80
      0007F1 C0 E0            [24] 3080 	push	acc
      0007F3 12r00r5C         [24] 3081 	lcall	_lcd_print
      0007F6 15 81            [12] 3082 	dec	sp
      0007F8 15 81            [12] 3083 	dec	sp
      0007FA 15 81            [12] 3084 	dec	sp
                           0007FC  3085 	C$lab6.c$233$1$143 ==.
                                   3086 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:233: while (count < 50);
      0007FC                       3087 00101$:
      0007FC C3               [12] 3088 	clr	c
      0007FD E5*10            [12] 3089 	mov	a,_count
      0007FF 94 32            [12] 3090 	subb	a,#0x32
      000801 E5*11            [12] 3091 	mov	a,(_count + 1)
      000803 64 80            [12] 3092 	xrl	a,#0x80
      000805 94 80            [12] 3093 	subb	a,#0x80
      000807 40 F3            [24] 3094 	jc	00101$
                           000809  3095 	C$lab6.c$234$1$143 ==.
                                   3096 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:234: lcd_clear();
      000809 12r00rE1         [24] 3097 	lcall	_lcd_clear
                           00080C  3098 	C$lab6.c$238$2$144 ==.
                                   3099 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:238: count =0;
      00080C E4               [12] 3100 	clr	a
      00080D F5*10            [12] 3101 	mov	_count,a
      00080F F5*11            [12] 3102 	mov	(_count + 1),a
                           000811  3103 	C$lab6.c$239$2$144 ==.
                                   3104 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:239: while (count < 1);
      000811                       3105 00104$:
      000811 C3               [12] 3106 	clr	c
      000812 E5*10            [12] 3107 	mov	a,_count
      000814 94 01            [12] 3108 	subb	a,#0x01
      000816 E5*11            [12] 3109 	mov	a,(_count + 1)
      000818 64 80            [12] 3110 	xrl	a,#0x80
      00081A 94 80            [12] 3111 	subb	a,#0x80
      00081C 40 F3            [24] 3112 	jc	00104$
                           00081E  3113 	C$lab6.c$240$2$144 ==.
                                   3114 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:240: lcd_clear();
      00081E 12r00rE1         [24] 3115 	lcall	_lcd_clear
                           000821  3116 	C$lab6.c$241$2$144 ==.
                                   3117 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:241: lcd_print("go left: press 1\n go right: press 2\nPress * for next screen");
      000821 74rC8            [12] 3118 	mov	a,#___str_9
      000823 C0 E0            [24] 3119 	push	acc
      000825 74s00            [12] 3120 	mov	a,#(___str_9 >> 8)
      000827 C0 E0            [24] 3121 	push	acc
      000829 74 80            [12] 3122 	mov	a,#0x80
      00082B C0 E0            [24] 3123 	push	acc
      00082D 12r00r5C         [24] 3124 	lcall	_lcd_print
      000830 15 81            [12] 3125 	dec	sp
      000832 15 81            [12] 3126 	dec	sp
      000834 15 81            [12] 3127 	dec	sp
                           000836  3128 	C$lab6.c$242$2$144 ==.
                                   3129 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:242: start();
      000836 12r12r78         [24] 3130 	lcall	_start
                           000839  3131 	C$lab6.c$243$2$144 ==.
                                   3132 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:243: lcd_clear();
      000839 12r00rE1         [24] 3133 	lcall	_lcd_clear
                           00083C  3134 	C$lab6.c$244$2$144 ==.
                                   3135 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:244: lcd_print("\n confirm: press 3\n press * to begin");
      00083C 74r04            [12] 3136 	mov	a,#___str_10
      00083E C0 E0            [24] 3137 	push	acc
      000840 74s01            [12] 3138 	mov	a,#(___str_10 >> 8)
      000842 C0 E0            [24] 3139 	push	acc
      000844 74 80            [12] 3140 	mov	a,#0x80
      000846 C0 E0            [24] 3141 	push	acc
      000848 12r00r5C         [24] 3142 	lcall	_lcd_print
      00084B 15 81            [12] 3143 	dec	sp
      00084D 15 81            [12] 3144 	dec	sp
      00084F 15 81            [12] 3145 	dec	sp
                           000851  3146 	C$lab6.c$245$2$144 ==.
                                   3147 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:245: start();
      000851 12r12r78         [24] 3148 	lcall	_start
                           000854  3149 	C$lab6.c$246$2$144 ==.
                                   3150 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:246: st =0;
      000854 7F 00            [12] 3151 	mov	r7,#0x00
                           000856  3152 	C$lab6.c$247$5$147 ==.
                                   3153 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:247: while (1)
      000856                       3154 00146$:
                           000856  3155 	C$lab6.c$249$3$145 ==.
                                   3156 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:249: printf("\r\n %u",RUDDER_PW);
      000856 C0 07            [24] 3157 	push	ar7
      000858 C0*24            [24] 3158 	push	_RUDDER_PW
      00085A C0*25            [24] 3159 	push	(_RUDDER_PW + 1)
      00085C 74r29            [12] 3160 	mov	a,#___str_11
      00085E C0 E0            [24] 3161 	push	acc
      000860 74s01            [12] 3162 	mov	a,#(___str_11 >> 8)
      000862 C0 E0            [24] 3163 	push	acc
      000864 74 80            [12] 3164 	mov	a,#0x80
      000866 C0 E0            [24] 3165 	push	acc
      000868 12r00r00         [24] 3166 	lcall	_printf
      00086B E5 81            [12] 3167 	mov	a,sp
      00086D 24 FB            [12] 3168 	add	a,#0xfb
      00086F F5 81            [12] 3169 	mov	sp,a
      000871 D0 07            [24] 3170 	pop	ar7
                           000873  3171 	C$lab6.c$250$3$145 ==.
                                   3172 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:250: RDR_lo_to_hi = 0xFFFF - RUDDER_PW;
      000873 74 FF            [12] 3173 	mov	a,#0xFF
      000875 C3               [12] 3174 	clr	c
      000876 95*24            [12] 3175 	subb	a,_RUDDER_PW
      000878 F5*26            [12] 3176 	mov	_RDR_lo_to_hi,a
      00087A 74 FF            [12] 3177 	mov	a,#0xFF
      00087C 95*25            [12] 3178 	subb	a,(_RUDDER_PW + 1)
      00087E F5*27            [12] 3179 	mov	(_RDR_lo_to_hi + 1),a
                           000880  3180 	C$lab6.c$251$3$145 ==.
                                   3181 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:251: PCA0CP0 = RDR_lo_to_hi;
      000880 85*26 EA         [24] 3182 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      000883 85*27 FA         [24] 3183 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           000886  3184 	C$lab6.c$253$3$145 ==.
                                   3185 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:253: if (times == 0 )
      000886 90r00r58         [24] 3186 	mov	dptr,#_Rudder_cal_times_1_143
      000889 E0               [24] 3187 	movx	a,@dptr
      00088A FD               [12] 3188 	mov	r5,a
      00088B A3               [24] 3189 	inc	dptr
      00088C E0               [24] 3190 	movx	a,@dptr
      00088D FE               [12] 3191 	mov	r6,a
      00088E 4D               [12] 3192 	orl	a,r5
      00088F 60 03            [24] 3193 	jz	00215$
      000891 02r09r3C         [24] 3194 	ljmp	00143$
      000894                       3195 00215$:
                           000894  3196 	C$lab6.c$255$4$146 ==.
                                   3197 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:255: if (value ==0)
      000894 90r00r56         [24] 3198 	mov	dptr,#_Rudder_cal_value_1_143
      000897 E0               [24] 3199 	movx	a,@dptr
      000898 FD               [12] 3200 	mov	r5,a
      000899 A3               [24] 3201 	inc	dptr
      00089A E0               [24] 3202 	movx	a,@dptr
      00089B FE               [12] 3203 	mov	r6,a
      00089C 4D               [12] 3204 	orl	a,r5
      00089D 70 27            [24] 3205 	jnz	00110$
                           00089F  3206 	C$lab6.c$257$5$147 ==.
                                   3207 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:257: lcd_clear();
      00089F C0 07            [24] 3208 	push	ar7
      0008A1 12r00rE1         [24] 3209 	lcall	_lcd_clear
                           0008A4  3210 	C$lab6.c$258$5$147 ==.
                                   3211 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:258: lcd_print("Now calibrating Min_PW\n");
      0008A4 74r2F            [12] 3212 	mov	a,#___str_12
      0008A6 C0 E0            [24] 3213 	push	acc
      0008A8 74s01            [12] 3214 	mov	a,#(___str_12 >> 8)
      0008AA C0 E0            [24] 3215 	push	acc
      0008AC 74 80            [12] 3216 	mov	a,#0x80
      0008AE C0 E0            [24] 3217 	push	acc
      0008B0 12r00r5C         [24] 3218 	lcall	_lcd_print
      0008B3 15 81            [12] 3219 	dec	sp
      0008B5 15 81            [12] 3220 	dec	sp
      0008B7 15 81            [12] 3221 	dec	sp
      0008B9 D0 07            [24] 3222 	pop	ar7
                           0008BB  3223 	C$lab6.c$259$5$147 ==.
                                   3224 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:259: if (st ==0 ) RUDDER_PW = PW_LEFT_RUDDER;
      0008BB EF               [12] 3225 	mov	a,r7
      0008BC 70 06            [24] 3226 	jnz	00108$
      0008BE 85*18*24         [24] 3227 	mov	_RUDDER_PW,_PW_LEFT_RUDDER
      0008C1 85*19*25         [24] 3228 	mov	(_RUDDER_PW + 1),(_PW_LEFT_RUDDER + 1)
      0008C4                       3229 00108$:
                           0008C4  3230 	C$lab6.c$260$5$147 ==.
                                   3231 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:260: st =1;
      0008C4 7F 01            [12] 3232 	mov	r7,#0x01
      0008C6                       3233 00110$:
                           0008C6  3234 	C$lab6.c$262$4$146 ==.
                                   3235 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:262: value = kpd_input(1);
      0008C6 75 82 01         [24] 3236 	mov	dpl,#0x01
      0008C9 C0 07            [24] 3237 	push	ar7
      0008CB 12r01r99         [24] 3238 	lcall	_kpd_input
      0008CE AD 82            [24] 3239 	mov	r5,dpl
      0008D0 AE 83            [24] 3240 	mov	r6,dph
      0008D2 D0 07            [24] 3241 	pop	ar7
      0008D4 90r00r56         [24] 3242 	mov	dptr,#_Rudder_cal_value_1_143
      0008D7 ED               [12] 3243 	mov	a,r5
      0008D8 F0               [24] 3244 	movx	@dptr,a
      0008D9 EE               [12] 3245 	mov	a,r6
      0008DA A3               [24] 3246 	inc	dptr
      0008DB F0               [24] 3247 	movx	@dptr,a
                           0008DC  3248 	C$lab6.c$263$4$146 ==.
                                   3249 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:263: if (value == 1)
      0008DC BD 01 12         [24] 3250 	cjne	r5,#0x01,00117$
      0008DF BE 00 0F         [24] 3251 	cjne	r6,#0x00,00117$
                           0008E2  3252 	C$lab6.c$265$5$148 ==.
                                   3253 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:265: RUDDER_PW -= 20;
      0008E2 E5*24            [12] 3254 	mov	a,_RUDDER_PW
      0008E4 24 EC            [12] 3255 	add	a,#0xEC
      0008E6 F5*24            [12] 3256 	mov	_RUDDER_PW,a
      0008E8 E5*25            [12] 3257 	mov	a,(_RUDDER_PW + 1)
      0008EA 34 FF            [12] 3258 	addc	a,#0xFF
      0008EC F5*25            [12] 3259 	mov	(_RUDDER_PW + 1),a
      0008EE 02r08r56         [24] 3260 	ljmp	00146$
      0008F1                       3261 00117$:
                           0008F1  3262 	C$lab6.c$267$4$146 ==.
                                   3263 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:267: else if (value==2)
      0008F1 90r00r56         [24] 3264 	mov	dptr,#_Rudder_cal_value_1_143
      0008F4 E0               [24] 3265 	movx	a,@dptr
      0008F5 FD               [12] 3266 	mov	r5,a
      0008F6 A3               [24] 3267 	inc	dptr
      0008F7 E0               [24] 3268 	movx	a,@dptr
      0008F8 FE               [12] 3269 	mov	r6,a
      0008F9 BD 02 11         [24] 3270 	cjne	r5,#0x02,00114$
      0008FC BE 00 0E         [24] 3271 	cjne	r6,#0x00,00114$
                           0008FF  3272 	C$lab6.c$269$5$149 ==.
                                   3273 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:269: RUDDER_PW += 20;
      0008FF 74 14            [12] 3274 	mov	a,#0x14
      000901 25*24            [12] 3275 	add	a,_RUDDER_PW
      000903 F5*24            [12] 3276 	mov	_RUDDER_PW,a
      000905 E4               [12] 3277 	clr	a
      000906 35*25            [12] 3278 	addc	a,(_RUDDER_PW + 1)
      000908 F5*25            [12] 3279 	mov	(_RUDDER_PW + 1),a
      00090A 02r08r56         [24] 3280 	ljmp	00146$
      00090D                       3281 00114$:
                           00090D  3282 	C$lab6.c$271$4$146 ==.
                                   3283 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:271: else if (value == 3)
      00090D 90r00r56         [24] 3284 	mov	dptr,#_Rudder_cal_value_1_143
      000910 E0               [24] 3285 	movx	a,@dptr
      000911 FD               [12] 3286 	mov	r5,a
      000912 A3               [24] 3287 	inc	dptr
      000913 E0               [24] 3288 	movx	a,@dptr
      000914 FE               [12] 3289 	mov	r6,a
      000915 BD 03 05         [24] 3290 	cjne	r5,#0x03,00222$
      000918 BE 00 02         [24] 3291 	cjne	r6,#0x00,00222$
      00091B 80 03            [24] 3292 	sjmp	00223$
      00091D                       3293 00222$:
      00091D 02r08r56         [24] 3294 	ljmp	00146$
      000920                       3295 00223$:
                           000920  3296 	C$lab6.c$273$5$150 ==.
                                   3297 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:273: times++;
      000920 90r00r58         [24] 3298 	mov	dptr,#_Rudder_cal_times_1_143
      000923 E0               [24] 3299 	movx	a,@dptr
      000924 24 01            [12] 3300 	add	a,#0x01
      000926 F0               [24] 3301 	movx	@dptr,a
      000927 A3               [24] 3302 	inc	dptr
      000928 E0               [24] 3303 	movx	a,@dptr
      000929 34 00            [12] 3304 	addc	a,#0x00
      00092B F0               [24] 3305 	movx	@dptr,a
                           00092C  3306 	C$lab6.c$274$5$150 ==.
                                   3307 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:274: value =0;
      00092C 90r00r56         [24] 3308 	mov	dptr,#_Rudder_cal_value_1_143
      00092F E4               [12] 3309 	clr	a
      000930 F0               [24] 3310 	movx	@dptr,a
      000931 A3               [24] 3311 	inc	dptr
      000932 F0               [24] 3312 	movx	@dptr,a
                           000933  3313 	C$lab6.c$275$5$150 ==.
                                   3314 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:275: PW_LEFT_RUDDER = RUDDER_PW;
      000933 85*24*18         [24] 3315 	mov	_PW_LEFT_RUDDER,_RUDDER_PW
      000936 85*25*19         [24] 3316 	mov	(_PW_LEFT_RUDDER + 1),(_RUDDER_PW + 1)
      000939 02r08r56         [24] 3317 	ljmp	00146$
      00093C                       3318 00143$:
                           00093C  3319 	C$lab6.c$278$3$145 ==.
                                   3320 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:278: else if (times ==1)
      00093C 90r00r58         [24] 3321 	mov	dptr,#_Rudder_cal_times_1_143
      00093F E0               [24] 3322 	movx	a,@dptr
      000940 FD               [12] 3323 	mov	r5,a
      000941 A3               [24] 3324 	inc	dptr
      000942 E0               [24] 3325 	movx	a,@dptr
      000943 FE               [12] 3326 	mov	r6,a
      000944 BD 01 05         [24] 3327 	cjne	r5,#0x01,00224$
      000947 BE 00 02         [24] 3328 	cjne	r6,#0x00,00224$
      00094A 80 03            [24] 3329 	sjmp	00225$
      00094C                       3330 00224$:
      00094C 02r09rF2         [24] 3331 	ljmp	00140$
      00094F                       3332 00225$:
                           00094F  3333 	C$lab6.c$280$4$151 ==.
                                   3334 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:280: if (value ==0)
      00094F 90r00r56         [24] 3335 	mov	dptr,#_Rudder_cal_value_1_143
      000952 E0               [24] 3336 	movx	a,@dptr
      000953 FD               [12] 3337 	mov	r5,a
      000954 A3               [24] 3338 	inc	dptr
      000955 E0               [24] 3339 	movx	a,@dptr
      000956 FE               [12] 3340 	mov	r6,a
      000957 4D               [12] 3341 	orl	a,r5
      000958 70 22            [24] 3342 	jnz	00120$
                           00095A  3343 	C$lab6.c$282$5$152 ==.
                                   3344 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:282: lcd_clear();
      00095A C0 07            [24] 3345 	push	ar7
      00095C 12r00rE1         [24] 3346 	lcall	_lcd_clear
                           00095F  3347 	C$lab6.c$283$5$152 ==.
                                   3348 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:283: lcd_print("Now calibrating Cen_PW");
      00095F 74r47            [12] 3349 	mov	a,#___str_13
      000961 C0 E0            [24] 3350 	push	acc
      000963 74s01            [12] 3351 	mov	a,#(___str_13 >> 8)
      000965 C0 E0            [24] 3352 	push	acc
      000967 74 80            [12] 3353 	mov	a,#0x80
      000969 C0 E0            [24] 3354 	push	acc
      00096B 12r00r5C         [24] 3355 	lcall	_lcd_print
      00096E 15 81            [12] 3356 	dec	sp
      000970 15 81            [12] 3357 	dec	sp
      000972 15 81            [12] 3358 	dec	sp
      000974 D0 07            [24] 3359 	pop	ar7
                           000976  3360 	C$lab6.c$284$5$152 ==.
                                   3361 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:284: RUDDER_PW = PW_CENTER_RUDDER;
      000976 85*1A*24         [24] 3362 	mov	_RUDDER_PW,_PW_CENTER_RUDDER
      000979 85*1B*25         [24] 3363 	mov	(_RUDDER_PW + 1),(_PW_CENTER_RUDDER + 1)
      00097C                       3364 00120$:
                           00097C  3365 	C$lab6.c$286$4$151 ==.
                                   3366 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:286: value = kpd_input(1);
      00097C 75 82 01         [24] 3367 	mov	dpl,#0x01
      00097F C0 07            [24] 3368 	push	ar7
      000981 12r01r99         [24] 3369 	lcall	_kpd_input
      000984 AD 82            [24] 3370 	mov	r5,dpl
      000986 AE 83            [24] 3371 	mov	r6,dph
      000988 D0 07            [24] 3372 	pop	ar7
      00098A 90r00r56         [24] 3373 	mov	dptr,#_Rudder_cal_value_1_143
      00098D ED               [12] 3374 	mov	a,r5
      00098E F0               [24] 3375 	movx	@dptr,a
      00098F EE               [12] 3376 	mov	a,r6
      000990 A3               [24] 3377 	inc	dptr
      000991 F0               [24] 3378 	movx	@dptr,a
                           000992  3379 	C$lab6.c$287$4$151 ==.
                                   3380 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:287: if (value == 1)
      000992 BD 01 12         [24] 3381 	cjne	r5,#0x01,00127$
      000995 BE 00 0F         [24] 3382 	cjne	r6,#0x00,00127$
                           000998  3383 	C$lab6.c$289$5$153 ==.
                                   3384 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:289: RUDDER_PW -= 20;
      000998 E5*24            [12] 3385 	mov	a,_RUDDER_PW
      00099A 24 EC            [12] 3386 	add	a,#0xEC
      00099C F5*24            [12] 3387 	mov	_RUDDER_PW,a
      00099E E5*25            [12] 3388 	mov	a,(_RUDDER_PW + 1)
      0009A0 34 FF            [12] 3389 	addc	a,#0xFF
      0009A2 F5*25            [12] 3390 	mov	(_RUDDER_PW + 1),a
      0009A4 02r08r56         [24] 3391 	ljmp	00146$
      0009A7                       3392 00127$:
                           0009A7  3393 	C$lab6.c$291$4$151 ==.
                                   3394 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:291: else if (value==2)
      0009A7 90r00r56         [24] 3395 	mov	dptr,#_Rudder_cal_value_1_143
      0009AA E0               [24] 3396 	movx	a,@dptr
      0009AB FD               [12] 3397 	mov	r5,a
      0009AC A3               [24] 3398 	inc	dptr
      0009AD E0               [24] 3399 	movx	a,@dptr
      0009AE FE               [12] 3400 	mov	r6,a
      0009AF BD 02 11         [24] 3401 	cjne	r5,#0x02,00124$
      0009B2 BE 00 0E         [24] 3402 	cjne	r6,#0x00,00124$
                           0009B5  3403 	C$lab6.c$293$5$154 ==.
                                   3404 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:293: RUDDER_PW += 20;
      0009B5 74 14            [12] 3405 	mov	a,#0x14
      0009B7 25*24            [12] 3406 	add	a,_RUDDER_PW
      0009B9 F5*24            [12] 3407 	mov	_RUDDER_PW,a
      0009BB E4               [12] 3408 	clr	a
      0009BC 35*25            [12] 3409 	addc	a,(_RUDDER_PW + 1)
      0009BE F5*25            [12] 3410 	mov	(_RUDDER_PW + 1),a
      0009C0 02r08r56         [24] 3411 	ljmp	00146$
      0009C3                       3412 00124$:
                           0009C3  3413 	C$lab6.c$295$4$151 ==.
                                   3414 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:295: else if (value == 3)
      0009C3 90r00r56         [24] 3415 	mov	dptr,#_Rudder_cal_value_1_143
      0009C6 E0               [24] 3416 	movx	a,@dptr
      0009C7 FD               [12] 3417 	mov	r5,a
      0009C8 A3               [24] 3418 	inc	dptr
      0009C9 E0               [24] 3419 	movx	a,@dptr
      0009CA FE               [12] 3420 	mov	r6,a
      0009CB BD 03 05         [24] 3421 	cjne	r5,#0x03,00231$
      0009CE BE 00 02         [24] 3422 	cjne	r6,#0x00,00231$
      0009D1 80 03            [24] 3423 	sjmp	00232$
      0009D3                       3424 00231$:
      0009D3 02r08r56         [24] 3425 	ljmp	00146$
      0009D6                       3426 00232$:
                           0009D6  3427 	C$lab6.c$297$5$155 ==.
                                   3428 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:297: times++;
      0009D6 90r00r58         [24] 3429 	mov	dptr,#_Rudder_cal_times_1_143
      0009D9 E0               [24] 3430 	movx	a,@dptr
      0009DA 24 01            [12] 3431 	add	a,#0x01
      0009DC F0               [24] 3432 	movx	@dptr,a
      0009DD A3               [24] 3433 	inc	dptr
      0009DE E0               [24] 3434 	movx	a,@dptr
      0009DF 34 00            [12] 3435 	addc	a,#0x00
      0009E1 F0               [24] 3436 	movx	@dptr,a
                           0009E2  3437 	C$lab6.c$298$5$155 ==.
                                   3438 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:298: value=0;
      0009E2 90r00r56         [24] 3439 	mov	dptr,#_Rudder_cal_value_1_143
      0009E5 E4               [12] 3440 	clr	a
      0009E6 F0               [24] 3441 	movx	@dptr,a
      0009E7 A3               [24] 3442 	inc	dptr
      0009E8 F0               [24] 3443 	movx	@dptr,a
                           0009E9  3444 	C$lab6.c$299$5$155 ==.
                                   3445 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:299: PW_CENTER_RUDDER = RUDDER_PW;
      0009E9 85*24*1A         [24] 3446 	mov	_PW_CENTER_RUDDER,_RUDDER_PW
      0009EC 85*25*1B         [24] 3447 	mov	(_PW_CENTER_RUDDER + 1),(_RUDDER_PW + 1)
      0009EF 02r08r56         [24] 3448 	ljmp	00146$
      0009F2                       3449 00140$:
                           0009F2  3450 	C$lab6.c$304$4$156 ==.
                                   3451 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:304: if (value==0)
      0009F2 90r00r56         [24] 3452 	mov	dptr,#_Rudder_cal_value_1_143
      0009F5 E0               [24] 3453 	movx	a,@dptr
      0009F6 FD               [12] 3454 	mov	r5,a
      0009F7 A3               [24] 3455 	inc	dptr
      0009F8 E0               [24] 3456 	movx	a,@dptr
      0009F9 FE               [12] 3457 	mov	r6,a
      0009FA 4D               [12] 3458 	orl	a,r5
      0009FB 70 22            [24] 3459 	jnz	00130$
                           0009FD  3460 	C$lab6.c$306$5$157 ==.
                                   3461 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:306: lcd_clear();
      0009FD C0 07            [24] 3462 	push	ar7
      0009FF 12r00rE1         [24] 3463 	lcall	_lcd_clear
                           000A02  3464 	C$lab6.c$307$5$157 ==.
                                   3465 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:307: lcd_print("Now calibrating Max_PW");
      000A02 74r5E            [12] 3466 	mov	a,#___str_14
      000A04 C0 E0            [24] 3467 	push	acc
      000A06 74s01            [12] 3468 	mov	a,#(___str_14 >> 8)
      000A08 C0 E0            [24] 3469 	push	acc
      000A0A 74 80            [12] 3470 	mov	a,#0x80
      000A0C C0 E0            [24] 3471 	push	acc
      000A0E 12r00r5C         [24] 3472 	lcall	_lcd_print
      000A11 15 81            [12] 3473 	dec	sp
      000A13 15 81            [12] 3474 	dec	sp
      000A15 15 81            [12] 3475 	dec	sp
      000A17 D0 07            [24] 3476 	pop	ar7
                           000A19  3477 	C$lab6.c$308$5$157 ==.
                                   3478 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:308: RUDDER_PW = PW_RIGHT_RUDDER;
      000A19 85*1C*24         [24] 3479 	mov	_RUDDER_PW,_PW_RIGHT_RUDDER
      000A1C 85*1D*25         [24] 3480 	mov	(_RUDDER_PW + 1),(_PW_RIGHT_RUDDER + 1)
      000A1F                       3481 00130$:
                           000A1F  3482 	C$lab6.c$310$4$156 ==.
                                   3483 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:310: value = kpd_input(1);
      000A1F 75 82 01         [24] 3484 	mov	dpl,#0x01
      000A22 C0 07            [24] 3485 	push	ar7
      000A24 12r01r99         [24] 3486 	lcall	_kpd_input
      000A27 AD 82            [24] 3487 	mov	r5,dpl
      000A29 AE 83            [24] 3488 	mov	r6,dph
      000A2B D0 07            [24] 3489 	pop	ar7
      000A2D 90r00r56         [24] 3490 	mov	dptr,#_Rudder_cal_value_1_143
      000A30 ED               [12] 3491 	mov	a,r5
      000A31 F0               [24] 3492 	movx	@dptr,a
      000A32 EE               [12] 3493 	mov	a,r6
      000A33 A3               [24] 3494 	inc	dptr
      000A34 F0               [24] 3495 	movx	@dptr,a
                           000A35  3496 	C$lab6.c$311$4$156 ==.
                                   3497 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:311: if (value == 1)
      000A35 BD 01 12         [24] 3498 	cjne	r5,#0x01,00137$
      000A38 BE 00 0F         [24] 3499 	cjne	r6,#0x00,00137$
                           000A3B  3500 	C$lab6.c$313$5$158 ==.
                                   3501 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:313: RUDDER_PW -= 20;
      000A3B E5*24            [12] 3502 	mov	a,_RUDDER_PW
      000A3D 24 EC            [12] 3503 	add	a,#0xEC
      000A3F F5*24            [12] 3504 	mov	_RUDDER_PW,a
      000A41 E5*25            [12] 3505 	mov	a,(_RUDDER_PW + 1)
      000A43 34 FF            [12] 3506 	addc	a,#0xFF
      000A45 F5*25            [12] 3507 	mov	(_RUDDER_PW + 1),a
      000A47 02r08r56         [24] 3508 	ljmp	00146$
      000A4A                       3509 00137$:
                           000A4A  3510 	C$lab6.c$315$4$156 ==.
                                   3511 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:315: else if (value==2)
      000A4A 90r00r56         [24] 3512 	mov	dptr,#_Rudder_cal_value_1_143
      000A4D E0               [24] 3513 	movx	a,@dptr
      000A4E FD               [12] 3514 	mov	r5,a
      000A4F A3               [24] 3515 	inc	dptr
      000A50 E0               [24] 3516 	movx	a,@dptr
      000A51 FE               [12] 3517 	mov	r6,a
      000A52 BD 02 11         [24] 3518 	cjne	r5,#0x02,00134$
      000A55 BE 00 0E         [24] 3519 	cjne	r6,#0x00,00134$
                           000A58  3520 	C$lab6.c$317$5$159 ==.
                                   3521 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:317: RUDDER_PW += 20;
      000A58 74 14            [12] 3522 	mov	a,#0x14
      000A5A 25*24            [12] 3523 	add	a,_RUDDER_PW
      000A5C F5*24            [12] 3524 	mov	_RUDDER_PW,a
      000A5E E4               [12] 3525 	clr	a
      000A5F 35*25            [12] 3526 	addc	a,(_RUDDER_PW + 1)
      000A61 F5*25            [12] 3527 	mov	(_RUDDER_PW + 1),a
      000A63 02r08r56         [24] 3528 	ljmp	00146$
      000A66                       3529 00134$:
                           000A66  3530 	C$lab6.c$319$4$156 ==.
                                   3531 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:319: else if (value == 3)
      000A66 90r00r56         [24] 3532 	mov	dptr,#_Rudder_cal_value_1_143
      000A69 E0               [24] 3533 	movx	a,@dptr
      000A6A FD               [12] 3534 	mov	r5,a
      000A6B A3               [24] 3535 	inc	dptr
      000A6C E0               [24] 3536 	movx	a,@dptr
      000A6D FE               [12] 3537 	mov	r6,a
      000A6E BD 03 05         [24] 3538 	cjne	r5,#0x03,00238$
      000A71 BE 00 02         [24] 3539 	cjne	r6,#0x00,00238$
      000A74 80 03            [24] 3540 	sjmp	00239$
      000A76                       3541 00238$:
      000A76 02r08r56         [24] 3542 	ljmp	00146$
      000A79                       3543 00239$:
                           000A79  3544 	C$lab6.c$321$5$160 ==.
                                   3545 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:321: PW_RIGHT_RUDDER = RUDDER_PW;
      000A79 85*24*1C         [24] 3546 	mov	_PW_RIGHT_RUDDER,_RUDDER_PW
      000A7C 85*25*1D         [24] 3547 	mov	(_PW_RIGHT_RUDDER + 1),(_RUDDER_PW + 1)
                           000A7F  3548 	C$lab6.c$322$5$160 ==.
                                   3549 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:322: return;
                           000A7F  3550 	C$lab6.c$331$1$143 ==.
                           000A7F  3551 	XG$Rudder_cal$0$0 ==.
      000A7F 22               [24] 3552 	ret
                                   3553 ;------------------------------------------------------------
                                   3554 ;Allocation info for local variables in function 'Angle_cal'
                                   3555 ;------------------------------------------------------------
                                   3556 ;st                        Allocated to registers r7 
                                   3557 ;value                     Allocated with name '_Angle_cal_value_1_162'
                                   3558 ;times                     Allocated with name '_Angle_cal_times_1_162'
                                   3559 ;------------------------------------------------------------
                           000A80  3560 	G$Angle_cal$0$0 ==.
                           000A80  3561 	C$lab6.c$333$1$143 ==.
                                   3562 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:333: void Angle_cal(void)
                                   3563 ;	-----------------------------------------
                                   3564 ;	 function Angle_cal
                                   3565 ;	-----------------------------------------
      000A80                       3566 _Angle_cal:
                           000A80  3567 	C$lab6.c$336$1$143 ==.
                                   3568 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:336: __xdata int value =0;
      000A80 90r00r5A         [24] 3569 	mov	dptr,#_Angle_cal_value_1_162
      000A83 E4               [12] 3570 	clr	a
      000A84 F0               [24] 3571 	movx	@dptr,a
      000A85 A3               [24] 3572 	inc	dptr
      000A86 F0               [24] 3573 	movx	@dptr,a
                           000A87  3574 	C$lab6.c$337$1$143 ==.
                                   3575 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:337: __xdata int times =0;
      000A87 90r00r5C         [24] 3576 	mov	dptr,#_Angle_cal_times_1_162
      000A8A F0               [24] 3577 	movx	@dptr,a
      000A8B A3               [24] 3578 	inc	dptr
      000A8C F0               [24] 3579 	movx	@dptr,a
                           000A8D  3580 	C$lab6.c$338$1$162 ==.
                                   3581 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:338: count =0;
      000A8D F5*10            [12] 3582 	mov	_count,a
      000A8F F5*11            [12] 3583 	mov	(_count + 1),a
                           000A91  3584 	C$lab6.c$339$1$162 ==.
                                   3585 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:339: lcd_clear();
      000A91 12r00rE1         [24] 3586 	lcall	_lcd_clear
                           000A94  3587 	C$lab6.c$340$1$162 ==.
                                   3588 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:340: lcd_print("Angle Calibration");
      000A94 74r75            [12] 3589 	mov	a,#___str_15
      000A96 C0 E0            [24] 3590 	push	acc
      000A98 74s01            [12] 3591 	mov	a,#(___str_15 >> 8)
      000A9A C0 E0            [24] 3592 	push	acc
      000A9C 74 80            [12] 3593 	mov	a,#0x80
      000A9E C0 E0            [24] 3594 	push	acc
      000AA0 12r00r5C         [24] 3595 	lcall	_lcd_print
      000AA3 15 81            [12] 3596 	dec	sp
      000AA5 15 81            [12] 3597 	dec	sp
      000AA7 15 81            [12] 3598 	dec	sp
                           000AA9  3599 	C$lab6.c$341$1$162 ==.
                                   3600 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:341: while (count < 50);
      000AA9                       3601 00101$:
      000AA9 C3               [12] 3602 	clr	c
      000AAA E5*10            [12] 3603 	mov	a,_count
      000AAC 94 32            [12] 3604 	subb	a,#0x32
      000AAE E5*11            [12] 3605 	mov	a,(_count + 1)
      000AB0 64 80            [12] 3606 	xrl	a,#0x80
      000AB2 94 80            [12] 3607 	subb	a,#0x80
      000AB4 40 F3            [24] 3608 	jc	00101$
                           000AB6  3609 	C$lab6.c$342$1$162 ==.
                                   3610 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:342: lcd_clear();
      000AB6 12r00rE1         [24] 3611 	lcall	_lcd_clear
                           000AB9  3612 	C$lab6.c$345$2$163 ==.
                                   3613 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:345: count = 0;
      000AB9 E4               [12] 3614 	clr	a
      000ABA F5*10            [12] 3615 	mov	_count,a
      000ABC F5*11            [12] 3616 	mov	(_count + 1),a
                           000ABE  3617 	C$lab6.c$346$2$163 ==.
                                   3618 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:346: while (count < 1);
      000ABE                       3619 00104$:
      000ABE C3               [12] 3620 	clr	c
      000ABF E5*10            [12] 3621 	mov	a,_count
      000AC1 94 01            [12] 3622 	subb	a,#0x01
      000AC3 E5*11            [12] 3623 	mov	a,(_count + 1)
      000AC5 64 80            [12] 3624 	xrl	a,#0x80
      000AC7 94 80            [12] 3625 	subb	a,#0x80
      000AC9 40 F3            [24] 3626 	jc	00104$
                           000ACB  3627 	C$lab6.c$347$2$163 ==.
                                   3628 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:347: lcd_clear();
      000ACB 12r00rE1         [24] 3629 	lcall	_lcd_clear
                           000ACE  3630 	C$lab6.c$348$2$163 ==.
                                   3631 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:348: lcd_print("go left: press 1\n go right: press 2\nPress * for next screen");
      000ACE 74rC8            [12] 3632 	mov	a,#___str_9
      000AD0 C0 E0            [24] 3633 	push	acc
      000AD2 74s00            [12] 3634 	mov	a,#(___str_9 >> 8)
      000AD4 C0 E0            [24] 3635 	push	acc
      000AD6 74 80            [12] 3636 	mov	a,#0x80
      000AD8 C0 E0            [24] 3637 	push	acc
      000ADA 12r00r5C         [24] 3638 	lcall	_lcd_print
      000ADD 15 81            [12] 3639 	dec	sp
      000ADF 15 81            [12] 3640 	dec	sp
      000AE1 15 81            [12] 3641 	dec	sp
                           000AE3  3642 	C$lab6.c$349$2$163 ==.
                                   3643 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:349: start();
      000AE3 12r12r78         [24] 3644 	lcall	_start
                           000AE6  3645 	C$lab6.c$350$2$163 ==.
                                   3646 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:350: lcd_clear();
      000AE6 12r00rE1         [24] 3647 	lcall	_lcd_clear
                           000AE9  3648 	C$lab6.c$351$2$163 ==.
                                   3649 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:351: lcd_print("\n confirm: press 3\n press * to begin");
      000AE9 74r04            [12] 3650 	mov	a,#___str_10
      000AEB C0 E0            [24] 3651 	push	acc
      000AED 74s01            [12] 3652 	mov	a,#(___str_10 >> 8)
      000AEF C0 E0            [24] 3653 	push	acc
      000AF1 74 80            [12] 3654 	mov	a,#0x80
      000AF3 C0 E0            [24] 3655 	push	acc
      000AF5 12r00r5C         [24] 3656 	lcall	_lcd_print
      000AF8 15 81            [12] 3657 	dec	sp
      000AFA 15 81            [12] 3658 	dec	sp
      000AFC 15 81            [12] 3659 	dec	sp
                           000AFE  3660 	C$lab6.c$352$2$163 ==.
                                   3661 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:352: start();
      000AFE 12r12r78         [24] 3662 	lcall	_start
                           000B01  3663 	C$lab6.c$353$2$163 ==.
                                   3664 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:353: st =0;
      000B01 7F 00            [12] 3665 	mov	r7,#0x00
                           000B03  3666 	C$lab6.c$354$5$166 ==.
                                   3667 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:354: while (1)
      000B03                       3668 00150$:
                           000B03  3669 	C$lab6.c$356$3$164 ==.
                                   3670 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:356: printf("\r\n %u",ANGLE_PW);
      000B03 C0 07            [24] 3671 	push	ar7
      000B05 C0*28            [24] 3672 	push	_ANGLE_PW
      000B07 C0*29            [24] 3673 	push	(_ANGLE_PW + 1)
      000B09 74r29            [12] 3674 	mov	a,#___str_11
      000B0B C0 E0            [24] 3675 	push	acc
      000B0D 74s01            [12] 3676 	mov	a,#(___str_11 >> 8)
      000B0F C0 E0            [24] 3677 	push	acc
      000B11 74 80            [12] 3678 	mov	a,#0x80
      000B13 C0 E0            [24] 3679 	push	acc
      000B15 12r00r00         [24] 3680 	lcall	_printf
      000B18 E5 81            [12] 3681 	mov	a,sp
      000B1A 24 FB            [12] 3682 	add	a,#0xfb
      000B1C F5 81            [12] 3683 	mov	sp,a
      000B1E D0 07            [24] 3684 	pop	ar7
                           000B20  3685 	C$lab6.c$357$3$164 ==.
                                   3686 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:357: AGL_lo_to_hi = 0xFFFF - ANGLE_PW;
      000B20 74 FF            [12] 3687 	mov	a,#0xFF
      000B22 C3               [12] 3688 	clr	c
      000B23 95*28            [12] 3689 	subb	a,_ANGLE_PW
      000B25 F5*2A            [12] 3690 	mov	_AGL_lo_to_hi,a
      000B27 74 FF            [12] 3691 	mov	a,#0xFF
      000B29 95*29            [12] 3692 	subb	a,(_ANGLE_PW + 1)
      000B2B F5*2B            [12] 3693 	mov	(_AGL_lo_to_hi + 1),a
                           000B2D  3694 	C$lab6.c$358$3$164 ==.
                                   3695 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:358: PCA0CP1 = AGL_lo_to_hi;
      000B2D 85*2A EB         [24] 3696 	mov	((_PCA0CP1 >> 0) & 0xFF),_AGL_lo_to_hi
      000B30 85*2B FB         [24] 3697 	mov	((_PCA0CP1 >> 8) & 0xFF),(_AGL_lo_to_hi + 1)
                           000B33  3698 	C$lab6.c$360$3$164 ==.
                                   3699 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:360: if (times == 0 )
      000B33 90r00r5C         [24] 3700 	mov	dptr,#_Angle_cal_times_1_162
      000B36 E0               [24] 3701 	movx	a,@dptr
      000B37 FD               [12] 3702 	mov	r5,a
      000B38 A3               [24] 3703 	inc	dptr
      000B39 E0               [24] 3704 	movx	a,@dptr
      000B3A FE               [12] 3705 	mov	r6,a
      000B3B 4D               [12] 3706 	orl	a,r5
      000B3C 60 03            [24] 3707 	jz	00225$
      000B3E 02r0BrEB         [24] 3708 	ljmp	00147$
      000B41                       3709 00225$:
                           000B41  3710 	C$lab6.c$362$4$165 ==.
                                   3711 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:362: if (value ==0)
      000B41 90r00r5A         [24] 3712 	mov	dptr,#_Angle_cal_value_1_162
      000B44 E0               [24] 3713 	movx	a,@dptr
      000B45 FD               [12] 3714 	mov	r5,a
      000B46 A3               [24] 3715 	inc	dptr
      000B47 E0               [24] 3716 	movx	a,@dptr
      000B48 FE               [12] 3717 	mov	r6,a
      000B49 4D               [12] 3718 	orl	a,r5
      000B4A 70 27            [24] 3719 	jnz	00110$
                           000B4C  3720 	C$lab6.c$364$5$166 ==.
                                   3721 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:364: lcd_clear();
      000B4C C0 07            [24] 3722 	push	ar7
      000B4E 12r00rE1         [24] 3723 	lcall	_lcd_clear
                           000B51  3724 	C$lab6.c$365$5$166 ==.
                                   3725 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:365: lcd_print("Now calibrating Min_PW UP ANGLE");
      000B51 74r87            [12] 3726 	mov	a,#___str_16
      000B53 C0 E0            [24] 3727 	push	acc
      000B55 74s01            [12] 3728 	mov	a,#(___str_16 >> 8)
      000B57 C0 E0            [24] 3729 	push	acc
      000B59 74 80            [12] 3730 	mov	a,#0x80
      000B5B C0 E0            [24] 3731 	push	acc
      000B5D 12r00r5C         [24] 3732 	lcall	_lcd_print
      000B60 15 81            [12] 3733 	dec	sp
      000B62 15 81            [12] 3734 	dec	sp
      000B64 15 81            [12] 3735 	dec	sp
      000B66 D0 07            [24] 3736 	pop	ar7
                           000B68  3737 	C$lab6.c$366$5$166 ==.
                                   3738 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:366: if (st == 0) ANGLE_PW = PW_UP_ANGLE;
      000B68 EF               [12] 3739 	mov	a,r7
      000B69 70 06            [24] 3740 	jnz	00108$
      000B6B 85*1E*28         [24] 3741 	mov	_ANGLE_PW,_PW_UP_ANGLE
      000B6E 85*1F*29         [24] 3742 	mov	(_ANGLE_PW + 1),(_PW_UP_ANGLE + 1)
      000B71                       3743 00108$:
                           000B71  3744 	C$lab6.c$367$5$166 ==.
                                   3745 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:367: st =1;
      000B71 7F 01            [12] 3746 	mov	r7,#0x01
      000B73                       3747 00110$:
                           000B73  3748 	C$lab6.c$369$4$165 ==.
                                   3749 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:369: value = kpd_input(1);
      000B73 75 82 01         [24] 3750 	mov	dpl,#0x01
      000B76 C0 07            [24] 3751 	push	ar7
      000B78 12r01r99         [24] 3752 	lcall	_kpd_input
      000B7B AD 82            [24] 3753 	mov	r5,dpl
      000B7D AE 83            [24] 3754 	mov	r6,dph
      000B7F D0 07            [24] 3755 	pop	ar7
      000B81 90r00r5A         [24] 3756 	mov	dptr,#_Angle_cal_value_1_162
      000B84 ED               [12] 3757 	mov	a,r5
      000B85 F0               [24] 3758 	movx	@dptr,a
      000B86 EE               [12] 3759 	mov	a,r6
      000B87 A3               [24] 3760 	inc	dptr
      000B88 F0               [24] 3761 	movx	@dptr,a
                           000B89  3762 	C$lab6.c$370$4$165 ==.
                                   3763 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:370: if (value == 1)
      000B89 BD 01 12         [24] 3764 	cjne	r5,#0x01,00117$
      000B8C BE 00 0F         [24] 3765 	cjne	r6,#0x00,00117$
                           000B8F  3766 	C$lab6.c$372$5$167 ==.
                                   3767 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:372: ANGLE_PW -= 30;
      000B8F E5*28            [12] 3768 	mov	a,_ANGLE_PW
      000B91 24 E2            [12] 3769 	add	a,#0xE2
      000B93 F5*28            [12] 3770 	mov	_ANGLE_PW,a
      000B95 E5*29            [12] 3771 	mov	a,(_ANGLE_PW + 1)
      000B97 34 FF            [12] 3772 	addc	a,#0xFF
      000B99 F5*29            [12] 3773 	mov	(_ANGLE_PW + 1),a
      000B9B 02r0Br03         [24] 3774 	ljmp	00150$
      000B9E                       3775 00117$:
                           000B9E  3776 	C$lab6.c$374$4$165 ==.
                                   3777 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:374: else if (value==2)
      000B9E 90r00r5A         [24] 3778 	mov	dptr,#_Angle_cal_value_1_162
      000BA1 E0               [24] 3779 	movx	a,@dptr
      000BA2 FD               [12] 3780 	mov	r5,a
      000BA3 A3               [24] 3781 	inc	dptr
      000BA4 E0               [24] 3782 	movx	a,@dptr
      000BA5 FE               [12] 3783 	mov	r6,a
      000BA6 BD 02 11         [24] 3784 	cjne	r5,#0x02,00114$
      000BA9 BE 00 0E         [24] 3785 	cjne	r6,#0x00,00114$
                           000BAC  3786 	C$lab6.c$376$5$168 ==.
                                   3787 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:376: ANGLE_PW += 30;
      000BAC 74 1E            [12] 3788 	mov	a,#0x1E
      000BAE 25*28            [12] 3789 	add	a,_ANGLE_PW
      000BB0 F5*28            [12] 3790 	mov	_ANGLE_PW,a
      000BB2 E4               [12] 3791 	clr	a
      000BB3 35*29            [12] 3792 	addc	a,(_ANGLE_PW + 1)
      000BB5 F5*29            [12] 3793 	mov	(_ANGLE_PW + 1),a
      000BB7 02r0Br03         [24] 3794 	ljmp	00150$
      000BBA                       3795 00114$:
                           000BBA  3796 	C$lab6.c$378$4$165 ==.
                                   3797 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:378: else if (value == 3)
      000BBA 90r00r5A         [24] 3798 	mov	dptr,#_Angle_cal_value_1_162
      000BBD E0               [24] 3799 	movx	a,@dptr
      000BBE FD               [12] 3800 	mov	r5,a
      000BBF A3               [24] 3801 	inc	dptr
      000BC0 E0               [24] 3802 	movx	a,@dptr
      000BC1 FE               [12] 3803 	mov	r6,a
      000BC2 BD 03 05         [24] 3804 	cjne	r5,#0x03,00232$
      000BC5 BE 00 02         [24] 3805 	cjne	r6,#0x00,00232$
      000BC8 80 03            [24] 3806 	sjmp	00233$
      000BCA                       3807 00232$:
      000BCA 02r0Br03         [24] 3808 	ljmp	00150$
      000BCD                       3809 00233$:
                           000BCD  3810 	C$lab6.c$380$5$169 ==.
                                   3811 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:380: times++;
      000BCD 90r00r5C         [24] 3812 	mov	dptr,#_Angle_cal_times_1_162
      000BD0 E0               [24] 3813 	movx	a,@dptr
      000BD1 24 01            [12] 3814 	add	a,#0x01
      000BD3 F0               [24] 3815 	movx	@dptr,a
      000BD4 A3               [24] 3816 	inc	dptr
      000BD5 E0               [24] 3817 	movx	a,@dptr
      000BD6 34 00            [12] 3818 	addc	a,#0x00
      000BD8 F0               [24] 3819 	movx	@dptr,a
                           000BD9  3820 	C$lab6.c$381$5$169 ==.
                                   3821 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:381: value =0;
      000BD9 90r00r5A         [24] 3822 	mov	dptr,#_Angle_cal_value_1_162
      000BDC E4               [12] 3823 	clr	a
      000BDD F0               [24] 3824 	movx	@dptr,a
      000BDE A3               [24] 3825 	inc	dptr
      000BDF F0               [24] 3826 	movx	@dptr,a
                           000BE0  3827 	C$lab6.c$382$5$169 ==.
                                   3828 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:382: st=0;
      000BE0 7F 00            [12] 3829 	mov	r7,#0x00
                           000BE2  3830 	C$lab6.c$383$5$169 ==.
                                   3831 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:383: PW_UP_ANGLE = ANGLE_PW;
      000BE2 85*28*1E         [24] 3832 	mov	_PW_UP_ANGLE,_ANGLE_PW
      000BE5 85*29*1F         [24] 3833 	mov	(_PW_UP_ANGLE + 1),(_ANGLE_PW + 1)
      000BE8 02r0Br03         [24] 3834 	ljmp	00150$
      000BEB                       3835 00147$:
                           000BEB  3836 	C$lab6.c$386$3$164 ==.
                                   3837 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:386: else if (times ==1)
      000BEB 90r00r5C         [24] 3838 	mov	dptr,#_Angle_cal_times_1_162
      000BEE E0               [24] 3839 	movx	a,@dptr
      000BEF FD               [12] 3840 	mov	r5,a
      000BF0 A3               [24] 3841 	inc	dptr
      000BF1 E0               [24] 3842 	movx	a,@dptr
      000BF2 FE               [12] 3843 	mov	r6,a
      000BF3 BD 01 05         [24] 3844 	cjne	r5,#0x01,00234$
      000BF6 BE 00 02         [24] 3845 	cjne	r6,#0x00,00234$
      000BF9 80 03            [24] 3846 	sjmp	00235$
      000BFB                       3847 00234$:
      000BFB 02r0CrA8         [24] 3848 	ljmp	00144$
      000BFE                       3849 00235$:
                           000BFE  3850 	C$lab6.c$388$4$170 ==.
                                   3851 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:388: if (value ==0)
      000BFE 90r00r5A         [24] 3852 	mov	dptr,#_Angle_cal_value_1_162
      000C01 E0               [24] 3853 	movx	a,@dptr
      000C02 FD               [12] 3854 	mov	r5,a
      000C03 A3               [24] 3855 	inc	dptr
      000C04 E0               [24] 3856 	movx	a,@dptr
      000C05 FE               [12] 3857 	mov	r6,a
      000C06 4D               [12] 3858 	orl	a,r5
      000C07 70 27            [24] 3859 	jnz	00122$
                           000C09  3860 	C$lab6.c$390$5$171 ==.
                                   3861 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:390: lcd_clear();
      000C09 C0 07            [24] 3862 	push	ar7
      000C0B 12r00rE1         [24] 3863 	lcall	_lcd_clear
                           000C0E  3864 	C$lab6.c$391$5$171 ==.
                                   3865 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:391: lcd_print("Now calibrating Cen_PW");
      000C0E 74r47            [12] 3866 	mov	a,#___str_13
      000C10 C0 E0            [24] 3867 	push	acc
      000C12 74s01            [12] 3868 	mov	a,#(___str_13 >> 8)
      000C14 C0 E0            [24] 3869 	push	acc
      000C16 74 80            [12] 3870 	mov	a,#0x80
      000C18 C0 E0            [24] 3871 	push	acc
      000C1A 12r00r5C         [24] 3872 	lcall	_lcd_print
      000C1D 15 81            [12] 3873 	dec	sp
      000C1F 15 81            [12] 3874 	dec	sp
      000C21 15 81            [12] 3875 	dec	sp
      000C23 D0 07            [24] 3876 	pop	ar7
                           000C25  3877 	C$lab6.c$392$5$171 ==.
                                   3878 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:392: if (st == 0) ANGLE_PW = PW_CENTER_ANGLE;
      000C25 EF               [12] 3879 	mov	a,r7
      000C26 70 06            [24] 3880 	jnz	00120$
      000C28 85*20*28         [24] 3881 	mov	_ANGLE_PW,_PW_CENTER_ANGLE
      000C2B 85*21*29         [24] 3882 	mov	(_ANGLE_PW + 1),(_PW_CENTER_ANGLE + 1)
      000C2E                       3883 00120$:
                           000C2E  3884 	C$lab6.c$393$5$171 ==.
                                   3885 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:393: st=1;
      000C2E 7F 01            [12] 3886 	mov	r7,#0x01
      000C30                       3887 00122$:
                           000C30  3888 	C$lab6.c$395$4$170 ==.
                                   3889 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:395: value = kpd_input(1);
      000C30 75 82 01         [24] 3890 	mov	dpl,#0x01
      000C33 C0 07            [24] 3891 	push	ar7
      000C35 12r01r99         [24] 3892 	lcall	_kpd_input
      000C38 AD 82            [24] 3893 	mov	r5,dpl
      000C3A AE 83            [24] 3894 	mov	r6,dph
      000C3C D0 07            [24] 3895 	pop	ar7
      000C3E 90r00r5A         [24] 3896 	mov	dptr,#_Angle_cal_value_1_162
      000C41 ED               [12] 3897 	mov	a,r5
      000C42 F0               [24] 3898 	movx	@dptr,a
      000C43 EE               [12] 3899 	mov	a,r6
      000C44 A3               [24] 3900 	inc	dptr
      000C45 F0               [24] 3901 	movx	@dptr,a
                           000C46  3902 	C$lab6.c$396$4$170 ==.
                                   3903 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:396: if (value == 1)
      000C46 BD 01 12         [24] 3904 	cjne	r5,#0x01,00129$
      000C49 BE 00 0F         [24] 3905 	cjne	r6,#0x00,00129$
                           000C4C  3906 	C$lab6.c$398$5$172 ==.
                                   3907 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:398: ANGLE_PW -= 30;
      000C4C E5*28            [12] 3908 	mov	a,_ANGLE_PW
      000C4E 24 E2            [12] 3909 	add	a,#0xE2
      000C50 F5*28            [12] 3910 	mov	_ANGLE_PW,a
      000C52 E5*29            [12] 3911 	mov	a,(_ANGLE_PW + 1)
      000C54 34 FF            [12] 3912 	addc	a,#0xFF
      000C56 F5*29            [12] 3913 	mov	(_ANGLE_PW + 1),a
      000C58 02r0Br03         [24] 3914 	ljmp	00150$
      000C5B                       3915 00129$:
                           000C5B  3916 	C$lab6.c$400$4$170 ==.
                                   3917 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:400: else if (value==2)
      000C5B 90r00r5A         [24] 3918 	mov	dptr,#_Angle_cal_value_1_162
      000C5E E0               [24] 3919 	movx	a,@dptr
      000C5F FD               [12] 3920 	mov	r5,a
      000C60 A3               [24] 3921 	inc	dptr
      000C61 E0               [24] 3922 	movx	a,@dptr
      000C62 FE               [12] 3923 	mov	r6,a
      000C63 BD 02 11         [24] 3924 	cjne	r5,#0x02,00126$
      000C66 BE 00 0E         [24] 3925 	cjne	r6,#0x00,00126$
                           000C69  3926 	C$lab6.c$402$5$173 ==.
                                   3927 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:402: ANGLE_PW += 30;
      000C69 74 1E            [12] 3928 	mov	a,#0x1E
      000C6B 25*28            [12] 3929 	add	a,_ANGLE_PW
      000C6D F5*28            [12] 3930 	mov	_ANGLE_PW,a
      000C6F E4               [12] 3931 	clr	a
      000C70 35*29            [12] 3932 	addc	a,(_ANGLE_PW + 1)
      000C72 F5*29            [12] 3933 	mov	(_ANGLE_PW + 1),a
      000C74 02r0Br03         [24] 3934 	ljmp	00150$
      000C77                       3935 00126$:
                           000C77  3936 	C$lab6.c$404$4$170 ==.
                                   3937 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:404: else if (value == 3)
      000C77 90r00r5A         [24] 3938 	mov	dptr,#_Angle_cal_value_1_162
      000C7A E0               [24] 3939 	movx	a,@dptr
      000C7B FD               [12] 3940 	mov	r5,a
      000C7C A3               [24] 3941 	inc	dptr
      000C7D E0               [24] 3942 	movx	a,@dptr
      000C7E FE               [12] 3943 	mov	r6,a
      000C7F BD 03 05         [24] 3944 	cjne	r5,#0x03,00242$
      000C82 BE 00 02         [24] 3945 	cjne	r6,#0x00,00242$
      000C85 80 03            [24] 3946 	sjmp	00243$
      000C87                       3947 00242$:
      000C87 02r0Br03         [24] 3948 	ljmp	00150$
      000C8A                       3949 00243$:
                           000C8A  3950 	C$lab6.c$406$5$174 ==.
                                   3951 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:406: times++;
      000C8A 90r00r5C         [24] 3952 	mov	dptr,#_Angle_cal_times_1_162
      000C8D E0               [24] 3953 	movx	a,@dptr
      000C8E 24 01            [12] 3954 	add	a,#0x01
      000C90 F0               [24] 3955 	movx	@dptr,a
      000C91 A3               [24] 3956 	inc	dptr
      000C92 E0               [24] 3957 	movx	a,@dptr
      000C93 34 00            [12] 3958 	addc	a,#0x00
      000C95 F0               [24] 3959 	movx	@dptr,a
                           000C96  3960 	C$lab6.c$407$5$174 ==.
                                   3961 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:407: value=0;
      000C96 90r00r5A         [24] 3962 	mov	dptr,#_Angle_cal_value_1_162
      000C99 E4               [12] 3963 	clr	a
      000C9A F0               [24] 3964 	movx	@dptr,a
      000C9B A3               [24] 3965 	inc	dptr
      000C9C F0               [24] 3966 	movx	@dptr,a
                           000C9D  3967 	C$lab6.c$408$5$174 ==.
                                   3968 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:408: st=0;
      000C9D 7F 00            [12] 3969 	mov	r7,#0x00
                           000C9F  3970 	C$lab6.c$409$5$174 ==.
                                   3971 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:409: PW_CENTER_ANGLE = ANGLE_PW;
      000C9F 85*28*20         [24] 3972 	mov	_PW_CENTER_ANGLE,_ANGLE_PW
      000CA2 85*29*21         [24] 3973 	mov	(_PW_CENTER_ANGLE + 1),(_ANGLE_PW + 1)
      000CA5 02r0Br03         [24] 3974 	ljmp	00150$
      000CA8                       3975 00144$:
                           000CA8  3976 	C$lab6.c$414$4$175 ==.
                                   3977 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:414: if (value==0)
      000CA8 90r00r5A         [24] 3978 	mov	dptr,#_Angle_cal_value_1_162
      000CAB E0               [24] 3979 	movx	a,@dptr
      000CAC FD               [12] 3980 	mov	r5,a
      000CAD A3               [24] 3981 	inc	dptr
      000CAE E0               [24] 3982 	movx	a,@dptr
      000CAF FE               [12] 3983 	mov	r6,a
      000CB0 4D               [12] 3984 	orl	a,r5
      000CB1 70 27            [24] 3985 	jnz	00134$
                           000CB3  3986 	C$lab6.c$416$5$176 ==.
                                   3987 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:416: lcd_clear();
      000CB3 C0 07            [24] 3988 	push	ar7
      000CB5 12r00rE1         [24] 3989 	lcall	_lcd_clear
                           000CB8  3990 	C$lab6.c$417$5$176 ==.
                                   3991 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:417: lcd_print("Now calibrating Max_PW DOWN ANGLE");
      000CB8 74rA7            [12] 3992 	mov	a,#___str_17
      000CBA C0 E0            [24] 3993 	push	acc
      000CBC 74s01            [12] 3994 	mov	a,#(___str_17 >> 8)
      000CBE C0 E0            [24] 3995 	push	acc
      000CC0 74 80            [12] 3996 	mov	a,#0x80
      000CC2 C0 E0            [24] 3997 	push	acc
      000CC4 12r00r5C         [24] 3998 	lcall	_lcd_print
      000CC7 15 81            [12] 3999 	dec	sp
      000CC9 15 81            [12] 4000 	dec	sp
      000CCB 15 81            [12] 4001 	dec	sp
      000CCD D0 07            [24] 4002 	pop	ar7
                           000CCF  4003 	C$lab6.c$418$5$176 ==.
                                   4004 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:418: if (st == 0) ANGLE_PW = PW_DOWN_ANGLE;
      000CCF EF               [12] 4005 	mov	a,r7
      000CD0 70 06            [24] 4006 	jnz	00132$
      000CD2 85*22*28         [24] 4007 	mov	_ANGLE_PW,_PW_DOWN_ANGLE
      000CD5 85*23*29         [24] 4008 	mov	(_ANGLE_PW + 1),(_PW_DOWN_ANGLE + 1)
      000CD8                       4009 00132$:
                           000CD8  4010 	C$lab6.c$419$5$176 ==.
                                   4011 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:419: st=1;
      000CD8 7F 01            [12] 4012 	mov	r7,#0x01
      000CDA                       4013 00134$:
                           000CDA  4014 	C$lab6.c$421$4$175 ==.
                                   4015 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:421: value = kpd_input(1);
      000CDA 75 82 01         [24] 4016 	mov	dpl,#0x01
      000CDD C0 07            [24] 4017 	push	ar7
      000CDF 12r01r99         [24] 4018 	lcall	_kpd_input
      000CE2 AD 82            [24] 4019 	mov	r5,dpl
      000CE4 AE 83            [24] 4020 	mov	r6,dph
      000CE6 D0 07            [24] 4021 	pop	ar7
      000CE8 90r00r5A         [24] 4022 	mov	dptr,#_Angle_cal_value_1_162
      000CEB ED               [12] 4023 	mov	a,r5
      000CEC F0               [24] 4024 	movx	@dptr,a
      000CED EE               [12] 4025 	mov	a,r6
      000CEE A3               [24] 4026 	inc	dptr
      000CEF F0               [24] 4027 	movx	@dptr,a
                           000CF0  4028 	C$lab6.c$422$4$175 ==.
                                   4029 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:422: if (value == 1)
      000CF0 BD 01 12         [24] 4030 	cjne	r5,#0x01,00141$
      000CF3 BE 00 0F         [24] 4031 	cjne	r6,#0x00,00141$
                           000CF6  4032 	C$lab6.c$424$5$177 ==.
                                   4033 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:424: ANGLE_PW -= 30;
      000CF6 E5*28            [12] 4034 	mov	a,_ANGLE_PW
      000CF8 24 E2            [12] 4035 	add	a,#0xE2
      000CFA F5*28            [12] 4036 	mov	_ANGLE_PW,a
      000CFC E5*29            [12] 4037 	mov	a,(_ANGLE_PW + 1)
      000CFE 34 FF            [12] 4038 	addc	a,#0xFF
      000D00 F5*29            [12] 4039 	mov	(_ANGLE_PW + 1),a
      000D02 02r0Br03         [24] 4040 	ljmp	00150$
      000D05                       4041 00141$:
                           000D05  4042 	C$lab6.c$426$4$175 ==.
                                   4043 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:426: else if (value==2)
      000D05 90r00r5A         [24] 4044 	mov	dptr,#_Angle_cal_value_1_162
      000D08 E0               [24] 4045 	movx	a,@dptr
      000D09 FD               [12] 4046 	mov	r5,a
      000D0A A3               [24] 4047 	inc	dptr
      000D0B E0               [24] 4048 	movx	a,@dptr
      000D0C FE               [12] 4049 	mov	r6,a
      000D0D BD 02 11         [24] 4050 	cjne	r5,#0x02,00138$
      000D10 BE 00 0E         [24] 4051 	cjne	r6,#0x00,00138$
                           000D13  4052 	C$lab6.c$428$5$178 ==.
                                   4053 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:428: ANGLE_PW += 30;
      000D13 74 1E            [12] 4054 	mov	a,#0x1E
      000D15 25*28            [12] 4055 	add	a,_ANGLE_PW
      000D17 F5*28            [12] 4056 	mov	_ANGLE_PW,a
      000D19 E4               [12] 4057 	clr	a
      000D1A 35*29            [12] 4058 	addc	a,(_ANGLE_PW + 1)
      000D1C F5*29            [12] 4059 	mov	(_ANGLE_PW + 1),a
      000D1E 02r0Br03         [24] 4060 	ljmp	00150$
      000D21                       4061 00138$:
                           000D21  4062 	C$lab6.c$430$4$175 ==.
                                   4063 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:430: else if (value == 3)
      000D21 90r00r5A         [24] 4064 	mov	dptr,#_Angle_cal_value_1_162
      000D24 E0               [24] 4065 	movx	a,@dptr
      000D25 FD               [12] 4066 	mov	r5,a
      000D26 A3               [24] 4067 	inc	dptr
      000D27 E0               [24] 4068 	movx	a,@dptr
      000D28 FE               [12] 4069 	mov	r6,a
      000D29 BD 03 05         [24] 4070 	cjne	r5,#0x03,00250$
      000D2C BE 00 02         [24] 4071 	cjne	r6,#0x00,00250$
      000D2F 80 03            [24] 4072 	sjmp	00251$
      000D31                       4073 00250$:
      000D31 02r0Br03         [24] 4074 	ljmp	00150$
      000D34                       4075 00251$:
                           000D34  4076 	C$lab6.c$432$5$179 ==.
                                   4077 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:432: PW_DOWN_ANGLE = ANGLE_PW;
      000D34 85*28*22         [24] 4078 	mov	_PW_DOWN_ANGLE,_ANGLE_PW
      000D37 85*29*23         [24] 4079 	mov	(_PW_DOWN_ANGLE + 1),(_ANGLE_PW + 1)
                           000D3A  4080 	C$lab6.c$433$5$179 ==.
                                   4081 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:433: return;
                           000D3A  4082 	C$lab6.c$438$1$162 ==.
                           000D3A  4083 	XG$Angle_cal$0$0 ==.
      000D3A 22               [24] 4084 	ret
                                   4085 ;------------------------------------------------------------
                                   4086 ;Allocation info for local variables in function 'Thrust_cal'
                                   4087 ;------------------------------------------------------------
                                   4088 ;st                        Allocated to registers r7 
                                   4089 ;value                     Allocated with name '_Thrust_cal_value_1_181'
                                   4090 ;times                     Allocated with name '_Thrust_cal_times_1_181'
                                   4091 ;------------------------------------------------------------
                           000D3B  4092 	G$Thrust_cal$0$0 ==.
                           000D3B  4093 	C$lab6.c$440$1$162 ==.
                                   4094 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:440: void Thrust_cal(void)
                                   4095 ;	-----------------------------------------
                                   4096 ;	 function Thrust_cal
                                   4097 ;	-----------------------------------------
      000D3B                       4098 _Thrust_cal:
                           000D3B  4099 	C$lab6.c$443$1$162 ==.
                                   4100 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:443: __xdata int value =0;
      000D3B 90r00r5E         [24] 4101 	mov	dptr,#_Thrust_cal_value_1_181
      000D3E E4               [12] 4102 	clr	a
      000D3F F0               [24] 4103 	movx	@dptr,a
      000D40 A3               [24] 4104 	inc	dptr
      000D41 F0               [24] 4105 	movx	@dptr,a
                           000D42  4106 	C$lab6.c$445$1$181 ==.
                                   4107 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:445: count =0;
      000D42 F5*10            [12] 4108 	mov	_count,a
      000D44 F5*11            [12] 4109 	mov	(_count + 1),a
                           000D46  4110 	C$lab6.c$446$1$181 ==.
                                   4111 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:446: lcd_clear();
      000D46 12r00rE1         [24] 4112 	lcall	_lcd_clear
                           000D49  4113 	C$lab6.c$447$1$181 ==.
                                   4114 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:447: lcd_print("Thrust Calibration");
      000D49 74rC9            [12] 4115 	mov	a,#___str_18
      000D4B C0 E0            [24] 4116 	push	acc
      000D4D 74s01            [12] 4117 	mov	a,#(___str_18 >> 8)
      000D4F C0 E0            [24] 4118 	push	acc
      000D51 74 80            [12] 4119 	mov	a,#0x80
      000D53 C0 E0            [24] 4120 	push	acc
      000D55 12r00r5C         [24] 4121 	lcall	_lcd_print
      000D58 15 81            [12] 4122 	dec	sp
      000D5A 15 81            [12] 4123 	dec	sp
      000D5C 15 81            [12] 4124 	dec	sp
                           000D5E  4125 	C$lab6.c$448$1$181 ==.
                                   4126 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:448: while (count < 50);
      000D5E                       4127 00101$:
      000D5E C3               [12] 4128 	clr	c
      000D5F E5*10            [12] 4129 	mov	a,_count
      000D61 94 32            [12] 4130 	subb	a,#0x32
      000D63 E5*11            [12] 4131 	mov	a,(_count + 1)
      000D65 64 80            [12] 4132 	xrl	a,#0x80
      000D67 94 80            [12] 4133 	subb	a,#0x80
      000D69 40 F3            [24] 4134 	jc	00101$
                           000D6B  4135 	C$lab6.c$449$1$181 ==.
                                   4136 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:449: lcd_clear();
      000D6B 12r00rE1         [24] 4137 	lcall	_lcd_clear
                           000D6E  4138 	C$lab6.c$453$2$182 ==.
                                   4139 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:453: count = 0;
      000D6E E4               [12] 4140 	clr	a
      000D6F F5*10            [12] 4141 	mov	_count,a
      000D71 F5*11            [12] 4142 	mov	(_count + 1),a
                           000D73  4143 	C$lab6.c$454$2$182 ==.
                                   4144 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:454: while (count < 1);
      000D73                       4145 00104$:
      000D73 C3               [12] 4146 	clr	c
      000D74 E5*10            [12] 4147 	mov	a,_count
      000D76 94 01            [12] 4148 	subb	a,#0x01
      000D78 E5*11            [12] 4149 	mov	a,(_count + 1)
      000D7A 64 80            [12] 4150 	xrl	a,#0x80
      000D7C 94 80            [12] 4151 	subb	a,#0x80
      000D7E 40 F3            [24] 4152 	jc	00104$
                           000D80  4153 	C$lab6.c$455$2$182 ==.
                                   4154 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:455: lcd_clear();
      000D80 12r00rE1         [24] 4155 	lcall	_lcd_clear
                           000D83  4156 	C$lab6.c$456$2$182 ==.
                                   4157 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:456: lcd_print("go left: press 1\n go right: press 2\nPress * for next screen");
      000D83 74rC8            [12] 4158 	mov	a,#___str_9
      000D85 C0 E0            [24] 4159 	push	acc
      000D87 74s00            [12] 4160 	mov	a,#(___str_9 >> 8)
      000D89 C0 E0            [24] 4161 	push	acc
      000D8B 74 80            [12] 4162 	mov	a,#0x80
      000D8D C0 E0            [24] 4163 	push	acc
      000D8F 12r00r5C         [24] 4164 	lcall	_lcd_print
      000D92 15 81            [12] 4165 	dec	sp
      000D94 15 81            [12] 4166 	dec	sp
      000D96 15 81            [12] 4167 	dec	sp
                           000D98  4168 	C$lab6.c$457$2$182 ==.
                                   4169 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:457: start();
      000D98 12r12r78         [24] 4170 	lcall	_start
                           000D9B  4171 	C$lab6.c$458$2$182 ==.
                                   4172 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:458: lcd_clear();
      000D9B 12r00rE1         [24] 4173 	lcall	_lcd_clear
                           000D9E  4174 	C$lab6.c$459$2$182 ==.
                                   4175 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:459: lcd_print("\n confirm: press 3\n press * to begin");
      000D9E 74r04            [12] 4176 	mov	a,#___str_10
      000DA0 C0 E0            [24] 4177 	push	acc
      000DA2 74s01            [12] 4178 	mov	a,#(___str_10 >> 8)
      000DA4 C0 E0            [24] 4179 	push	acc
      000DA6 74 80            [12] 4180 	mov	a,#0x80
      000DA8 C0 E0            [24] 4181 	push	acc
      000DAA 12r00r5C         [24] 4182 	lcall	_lcd_print
      000DAD 15 81            [12] 4183 	dec	sp
      000DAF 15 81            [12] 4184 	dec	sp
      000DB1 15 81            [12] 4185 	dec	sp
                           000DB3  4186 	C$lab6.c$460$2$182 ==.
                                   4187 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:460: start();
      000DB3 12r12r78         [24] 4188 	lcall	_start
                           000DB6  4189 	C$lab6.c$461$2$182 ==.
                                   4190 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:461: st =0;
      000DB6 7F 00            [12] 4191 	mov	r7,#0x00
                           000DB8  4192 	C$lab6.c$462$2$182 ==.
                                   4193 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:462: times=0;
      000DB8 90r00r60         [24] 4194 	mov	dptr,#_Thrust_cal_times_1_181
      000DBB E4               [12] 4195 	clr	a
      000DBC F0               [24] 4196 	movx	@dptr,a
      000DBD A3               [24] 4197 	inc	dptr
      000DBE F0               [24] 4198 	movx	@dptr,a
                           000DBF  4199 	C$lab6.c$463$5$185 ==.
                                   4200 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:463: while (1)
      000DBF                       4201 00153$:
                           000DBF  4202 	C$lab6.c$465$3$183 ==.
                                   4203 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:465: printf("\r\n %u",RTHRUST_PW);
      000DBF C0 07            [24] 4204 	push	ar7
      000DC1 C0*2C            [24] 4205 	push	_RTHRUST_PW
      000DC3 C0*2D            [24] 4206 	push	(_RTHRUST_PW + 1)
      000DC5 74r29            [12] 4207 	mov	a,#___str_11
      000DC7 C0 E0            [24] 4208 	push	acc
      000DC9 74s01            [12] 4209 	mov	a,#(___str_11 >> 8)
      000DCB C0 E0            [24] 4210 	push	acc
      000DCD 74 80            [12] 4211 	mov	a,#0x80
      000DCF C0 E0            [24] 4212 	push	acc
      000DD1 12r00r00         [24] 4213 	lcall	_printf
      000DD4 E5 81            [12] 4214 	mov	a,sp
      000DD6 24 FB            [12] 4215 	add	a,#0xfb
      000DD8 F5 81            [12] 4216 	mov	sp,a
      000DDA D0 07            [24] 4217 	pop	ar7
                           000DDC  4218 	C$lab6.c$466$3$183 ==.
                                   4219 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:466: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      000DDC 74 FF            [12] 4220 	mov	a,#0xFF
      000DDE C3               [12] 4221 	clr	c
      000DDF 95*2C            [12] 4222 	subb	a,_RTHRUST_PW
      000DE1 F5*30            [12] 4223 	mov	_RTRST_lo_to_hi,a
      000DE3 74 FF            [12] 4224 	mov	a,#0xFF
      000DE5 95*2D            [12] 4225 	subb	a,(_RTHRUST_PW + 1)
      000DE7 F5*31            [12] 4226 	mov	(_RTRST_lo_to_hi + 1),a
                           000DE9  4227 	C$lab6.c$467$3$183 ==.
                                   4228 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:467: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      000DE9 74 FF            [12] 4229 	mov	a,#0xFF
      000DEB C3               [12] 4230 	clr	c
      000DEC 95*2E            [12] 4231 	subb	a,_LTHRUST_PW
      000DEE F5*32            [12] 4232 	mov	_LTRST_lo_to_hi,a
      000DF0 74 FF            [12] 4233 	mov	a,#0xFF
      000DF2 95*2F            [12] 4234 	subb	a,(_LTHRUST_PW + 1)
      000DF4 F5*33            [12] 4235 	mov	(_LTRST_lo_to_hi + 1),a
                           000DF6  4236 	C$lab6.c$468$3$183 ==.
                                   4237 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:468: PCA0CP2 = RTRST_lo_to_hi;
      000DF6 85*30 EC         [24] 4238 	mov	((_PCA0CP2 >> 0) & 0xFF),_RTRST_lo_to_hi
      000DF9 85*31 FC         [24] 4239 	mov	((_PCA0CP2 >> 8) & 0xFF),(_RTRST_lo_to_hi + 1)
                           000DFC  4240 	C$lab6.c$469$3$183 ==.
                                   4241 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:469: PCA0CP3 = LTRST_lo_to_hi;
      000DFC 85*32 ED         [24] 4242 	mov	((_PCA0CP3 >> 0) & 0xFF),_LTRST_lo_to_hi
      000DFF 85*33 FD         [24] 4243 	mov	((_PCA0CP3 >> 8) & 0xFF),(_LTRST_lo_to_hi + 1)
                           000E02  4244 	C$lab6.c$473$3$183 ==.
                                   4245 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:473: if (times == 0 )
      000E02 90r00r60         [24] 4246 	mov	dptr,#_Thrust_cal_times_1_181
      000E05 E0               [24] 4247 	movx	a,@dptr
      000E06 FD               [12] 4248 	mov	r5,a
      000E07 A3               [24] 4249 	inc	dptr
      000E08 E0               [24] 4250 	movx	a,@dptr
      000E09 FE               [12] 4251 	mov	r6,a
      000E0A 4D               [12] 4252 	orl	a,r5
      000E0B 60 03            [24] 4253 	jz	00231$
      000E0D 02r0ErD7         [24] 4254 	ljmp	00150$
      000E10                       4255 00231$:
                           000E10  4256 	C$lab6.c$475$4$184 ==.
                                   4257 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:475: if (value ==0)
      000E10 90r00r5E         [24] 4258 	mov	dptr,#_Thrust_cal_value_1_181
      000E13 E0               [24] 4259 	movx	a,@dptr
      000E14 FD               [12] 4260 	mov	r5,a
      000E15 A3               [24] 4261 	inc	dptr
      000E16 E0               [24] 4262 	movx	a,@dptr
      000E17 FE               [12] 4263 	mov	r6,a
      000E18 4D               [12] 4264 	orl	a,r5
      000E19 70 2D            [24] 4265 	jnz	00110$
                           000E1B  4266 	C$lab6.c$477$5$185 ==.
                                   4267 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:477: lcd_clear();
      000E1B C0 07            [24] 4268 	push	ar7
      000E1D 12r00rE1         [24] 4269 	lcall	_lcd_clear
                           000E20  4270 	C$lab6.c$478$5$185 ==.
                                   4271 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:478: lcd_print("Now calibrating Min_PW");
      000E20 74rDC            [12] 4272 	mov	a,#___str_19
      000E22 C0 E0            [24] 4273 	push	acc
      000E24 74s01            [12] 4274 	mov	a,#(___str_19 >> 8)
      000E26 C0 E0            [24] 4275 	push	acc
      000E28 74 80            [12] 4276 	mov	a,#0x80
      000E2A C0 E0            [24] 4277 	push	acc
      000E2C 12r00r5C         [24] 4278 	lcall	_lcd_print
      000E2F 15 81            [12] 4279 	dec	sp
      000E31 15 81            [12] 4280 	dec	sp
      000E33 15 81            [12] 4281 	dec	sp
      000E35 D0 07            [24] 4282 	pop	ar7
                           000E37  4283 	C$lab6.c$479$5$185 ==.
                                   4284 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:479: if (st ==0)
      000E37 EF               [12] 4285 	mov	a,r7
      000E38 70 0C            [24] 4286 	jnz	00108$
                           000E3A  4287 	C$lab6.c$481$6$186 ==.
                                   4288 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:481: RTHRUST_PW = PW_MIN_THRUST;
      000E3A 85*12*2C         [24] 4289 	mov	_RTHRUST_PW,_PW_MIN_THRUST
      000E3D 85*13*2D         [24] 4290 	mov	(_RTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
                           000E40  4291 	C$lab6.c$482$6$186 ==.
                                   4292 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:482: LTHRUST_PW = PW_MIN_THRUST;
      000E40 85*12*2E         [24] 4293 	mov	_LTHRUST_PW,_PW_MIN_THRUST
      000E43 85*13*2F         [24] 4294 	mov	(_LTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
      000E46                       4295 00108$:
                           000E46  4296 	C$lab6.c$484$5$185 ==.
                                   4297 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:484: st =1;
      000E46 7F 01            [12] 4298 	mov	r7,#0x01
      000E48                       4299 00110$:
                           000E48  4300 	C$lab6.c$486$4$184 ==.
                                   4301 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:486: value = kpd_input(1);
      000E48 75 82 01         [24] 4302 	mov	dpl,#0x01
      000E4B C0 07            [24] 4303 	push	ar7
      000E4D 12r01r99         [24] 4304 	lcall	_kpd_input
      000E50 AD 82            [24] 4305 	mov	r5,dpl
      000E52 AE 83            [24] 4306 	mov	r6,dph
      000E54 D0 07            [24] 4307 	pop	ar7
      000E56 90r00r5E         [24] 4308 	mov	dptr,#_Thrust_cal_value_1_181
      000E59 ED               [12] 4309 	mov	a,r5
      000E5A F0               [24] 4310 	movx	@dptr,a
      000E5B EE               [12] 4311 	mov	a,r6
      000E5C A3               [24] 4312 	inc	dptr
      000E5D F0               [24] 4313 	movx	@dptr,a
                           000E5E  4314 	C$lab6.c$487$4$184 ==.
                                   4315 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:487: if (value == 1)
      000E5E BD 01 1D         [24] 4316 	cjne	r5,#0x01,00117$
      000E61 BE 00 1A         [24] 4317 	cjne	r6,#0x00,00117$
                           000E64  4318 	C$lab6.c$489$5$187 ==.
                                   4319 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:489: RTHRUST_PW -= 30;
      000E64 E5*2C            [12] 4320 	mov	a,_RTHRUST_PW
      000E66 24 E2            [12] 4321 	add	a,#0xE2
      000E68 F5*2C            [12] 4322 	mov	_RTHRUST_PW,a
      000E6A E5*2D            [12] 4323 	mov	a,(_RTHRUST_PW + 1)
      000E6C 34 FF            [12] 4324 	addc	a,#0xFF
      000E6E F5*2D            [12] 4325 	mov	(_RTHRUST_PW + 1),a
                           000E70  4326 	C$lab6.c$490$5$187 ==.
                                   4327 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:490: LTHRUST_PW += 30;
      000E70 74 1E            [12] 4328 	mov	a,#0x1E
      000E72 25*2E            [12] 4329 	add	a,_LTHRUST_PW
      000E74 F5*2E            [12] 4330 	mov	_LTHRUST_PW,a
      000E76 E4               [12] 4331 	clr	a
      000E77 35*2F            [12] 4332 	addc	a,(_LTHRUST_PW + 1)
      000E79 F5*2F            [12] 4333 	mov	(_LTHRUST_PW + 1),a
      000E7B 02r0DrBF         [24] 4334 	ljmp	00153$
      000E7E                       4335 00117$:
                           000E7E  4336 	C$lab6.c$492$4$184 ==.
                                   4337 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:492: else if (value==2)
      000E7E 90r00r5E         [24] 4338 	mov	dptr,#_Thrust_cal_value_1_181
      000E81 E0               [24] 4339 	movx	a,@dptr
      000E82 FD               [12] 4340 	mov	r5,a
      000E83 A3               [24] 4341 	inc	dptr
      000E84 E0               [24] 4342 	movx	a,@dptr
      000E85 FE               [12] 4343 	mov	r6,a
      000E86 BD 02 1D         [24] 4344 	cjne	r5,#0x02,00114$
      000E89 BE 00 1A         [24] 4345 	cjne	r6,#0x00,00114$
                           000E8C  4346 	C$lab6.c$494$5$188 ==.
                                   4347 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:494: RTHRUST_PW += 30;
      000E8C 74 1E            [12] 4348 	mov	a,#0x1E
      000E8E 25*2C            [12] 4349 	add	a,_RTHRUST_PW
      000E90 F5*2C            [12] 4350 	mov	_RTHRUST_PW,a
      000E92 E4               [12] 4351 	clr	a
      000E93 35*2D            [12] 4352 	addc	a,(_RTHRUST_PW + 1)
      000E95 F5*2D            [12] 4353 	mov	(_RTHRUST_PW + 1),a
                           000E97  4354 	C$lab6.c$495$5$188 ==.
                                   4355 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:495: LTHRUST_PW -= 30;
      000E97 E5*2E            [12] 4356 	mov	a,_LTHRUST_PW
      000E99 24 E2            [12] 4357 	add	a,#0xE2
      000E9B F5*2E            [12] 4358 	mov	_LTHRUST_PW,a
      000E9D E5*2F            [12] 4359 	mov	a,(_LTHRUST_PW + 1)
      000E9F 34 FF            [12] 4360 	addc	a,#0xFF
      000EA1 F5*2F            [12] 4361 	mov	(_LTHRUST_PW + 1),a
      000EA3 02r0DrBF         [24] 4362 	ljmp	00153$
      000EA6                       4363 00114$:
                           000EA6  4364 	C$lab6.c$497$4$184 ==.
                                   4365 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:497: else if (value == 3)
      000EA6 90r00r5E         [24] 4366 	mov	dptr,#_Thrust_cal_value_1_181
      000EA9 E0               [24] 4367 	movx	a,@dptr
      000EAA FD               [12] 4368 	mov	r5,a
      000EAB A3               [24] 4369 	inc	dptr
      000EAC E0               [24] 4370 	movx	a,@dptr
      000EAD FE               [12] 4371 	mov	r6,a
      000EAE BD 03 05         [24] 4372 	cjne	r5,#0x03,00238$
      000EB1 BE 00 02         [24] 4373 	cjne	r6,#0x00,00238$
      000EB4 80 03            [24] 4374 	sjmp	00239$
      000EB6                       4375 00238$:
      000EB6 02r0DrBF         [24] 4376 	ljmp	00153$
      000EB9                       4377 00239$:
                           000EB9  4378 	C$lab6.c$499$5$189 ==.
                                   4379 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:499: times++;
      000EB9 90r00r60         [24] 4380 	mov	dptr,#_Thrust_cal_times_1_181
      000EBC E0               [24] 4381 	movx	a,@dptr
      000EBD 24 01            [12] 4382 	add	a,#0x01
      000EBF F0               [24] 4383 	movx	@dptr,a
      000EC0 A3               [24] 4384 	inc	dptr
      000EC1 E0               [24] 4385 	movx	a,@dptr
      000EC2 34 00            [12] 4386 	addc	a,#0x00
      000EC4 F0               [24] 4387 	movx	@dptr,a
                           000EC5  4388 	C$lab6.c$500$5$189 ==.
                                   4389 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:500: value =0;
      000EC5 90r00r5E         [24] 4390 	mov	dptr,#_Thrust_cal_value_1_181
      000EC8 E4               [12] 4391 	clr	a
      000EC9 F0               [24] 4392 	movx	@dptr,a
      000ECA A3               [24] 4393 	inc	dptr
      000ECB F0               [24] 4394 	movx	@dptr,a
                           000ECC  4395 	C$lab6.c$501$5$189 ==.
                                   4396 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:501: st=0;
      000ECC 7F 00            [12] 4397 	mov	r7,#0x00
                           000ECE  4398 	C$lab6.c$502$5$189 ==.
                                   4399 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:502: PW_MIN_THRUST = RTHRUST_PW;
      000ECE 85*2C*12         [24] 4400 	mov	_PW_MIN_THRUST,_RTHRUST_PW
      000ED1 85*2D*13         [24] 4401 	mov	(_PW_MIN_THRUST + 1),(_RTHRUST_PW + 1)
      000ED4 02r0DrBF         [24] 4402 	ljmp	00153$
      000ED7                       4403 00150$:
                           000ED7  4404 	C$lab6.c$506$3$183 ==.
                                   4405 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:506: else if (times ==1)
      000ED7 90r00r60         [24] 4406 	mov	dptr,#_Thrust_cal_times_1_181
      000EDA E0               [24] 4407 	movx	a,@dptr
      000EDB FD               [12] 4408 	mov	r5,a
      000EDC A3               [24] 4409 	inc	dptr
      000EDD E0               [24] 4410 	movx	a,@dptr
      000EDE FE               [12] 4411 	mov	r6,a
      000EDF BD 01 05         [24] 4412 	cjne	r5,#0x01,00240$
      000EE2 BE 00 02         [24] 4413 	cjne	r6,#0x00,00240$
      000EE5 80 03            [24] 4414 	sjmp	00241$
      000EE7                       4415 00240$:
      000EE7 02r0FrB1         [24] 4416 	ljmp	00147$
      000EEA                       4417 00241$:
                           000EEA  4418 	C$lab6.c$508$4$190 ==.
                                   4419 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:508: if (value ==0)
      000EEA 90r00r5E         [24] 4420 	mov	dptr,#_Thrust_cal_value_1_181
      000EED E0               [24] 4421 	movx	a,@dptr
      000EEE FD               [12] 4422 	mov	r5,a
      000EEF A3               [24] 4423 	inc	dptr
      000EF0 E0               [24] 4424 	movx	a,@dptr
      000EF1 FE               [12] 4425 	mov	r6,a
      000EF2 4D               [12] 4426 	orl	a,r5
      000EF3 70 2D            [24] 4427 	jnz	00122$
                           000EF5  4428 	C$lab6.c$510$5$191 ==.
                                   4429 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:510: lcd_clear();
      000EF5 C0 07            [24] 4430 	push	ar7
      000EF7 12r00rE1         [24] 4431 	lcall	_lcd_clear
                           000EFA  4432 	C$lab6.c$511$5$191 ==.
                                   4433 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:511: lcd_print("Now calibrating Min_PW");
      000EFA 74rDC            [12] 4434 	mov	a,#___str_19
      000EFC C0 E0            [24] 4435 	push	acc
      000EFE 74s01            [12] 4436 	mov	a,#(___str_19 >> 8)
      000F00 C0 E0            [24] 4437 	push	acc
      000F02 74 80            [12] 4438 	mov	a,#0x80
      000F04 C0 E0            [24] 4439 	push	acc
      000F06 12r00r5C         [24] 4440 	lcall	_lcd_print
      000F09 15 81            [12] 4441 	dec	sp
      000F0B 15 81            [12] 4442 	dec	sp
      000F0D 15 81            [12] 4443 	dec	sp
      000F0F D0 07            [24] 4444 	pop	ar7
                           000F11  4445 	C$lab6.c$512$5$191 ==.
                                   4446 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:512: if (st ==0)
      000F11 EF               [12] 4447 	mov	a,r7
      000F12 70 0C            [24] 4448 	jnz	00120$
                           000F14  4449 	C$lab6.c$514$6$192 ==.
                                   4450 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:514: RTHRUST_PW = PW_NUET_THRUST;
      000F14 85*14*2C         [24] 4451 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      000F17 85*15*2D         [24] 4452 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           000F1A  4453 	C$lab6.c$515$6$192 ==.
                                   4454 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:515: LTHRUST_PW = PW_NUET_THRUST;
      000F1A 85*14*2E         [24] 4455 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      000F1D 85*15*2F         [24] 4456 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
      000F20                       4457 00120$:
                           000F20  4458 	C$lab6.c$517$5$191 ==.
                                   4459 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:517: st =1;
      000F20 7F 01            [12] 4460 	mov	r7,#0x01
      000F22                       4461 00122$:
                           000F22  4462 	C$lab6.c$519$4$190 ==.
                                   4463 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:519: value = kpd_input(1);
      000F22 75 82 01         [24] 4464 	mov	dpl,#0x01
      000F25 C0 07            [24] 4465 	push	ar7
      000F27 12r01r99         [24] 4466 	lcall	_kpd_input
      000F2A AD 82            [24] 4467 	mov	r5,dpl
      000F2C AE 83            [24] 4468 	mov	r6,dph
      000F2E D0 07            [24] 4469 	pop	ar7
      000F30 90r00r5E         [24] 4470 	mov	dptr,#_Thrust_cal_value_1_181
      000F33 ED               [12] 4471 	mov	a,r5
      000F34 F0               [24] 4472 	movx	@dptr,a
      000F35 EE               [12] 4473 	mov	a,r6
      000F36 A3               [24] 4474 	inc	dptr
      000F37 F0               [24] 4475 	movx	@dptr,a
                           000F38  4476 	C$lab6.c$520$4$190 ==.
                                   4477 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:520: if (value == 1)
      000F38 BD 01 1D         [24] 4478 	cjne	r5,#0x01,00129$
      000F3B BE 00 1A         [24] 4479 	cjne	r6,#0x00,00129$
                           000F3E  4480 	C$lab6.c$522$5$193 ==.
                                   4481 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:522: RTHRUST_PW -= 30;
      000F3E E5*2C            [12] 4482 	mov	a,_RTHRUST_PW
      000F40 24 E2            [12] 4483 	add	a,#0xE2
      000F42 F5*2C            [12] 4484 	mov	_RTHRUST_PW,a
      000F44 E5*2D            [12] 4485 	mov	a,(_RTHRUST_PW + 1)
      000F46 34 FF            [12] 4486 	addc	a,#0xFF
      000F48 F5*2D            [12] 4487 	mov	(_RTHRUST_PW + 1),a
                           000F4A  4488 	C$lab6.c$523$5$193 ==.
                                   4489 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:523: LTHRUST_PW += 30;
      000F4A 74 1E            [12] 4490 	mov	a,#0x1E
      000F4C 25*2E            [12] 4491 	add	a,_LTHRUST_PW
      000F4E F5*2E            [12] 4492 	mov	_LTHRUST_PW,a
      000F50 E4               [12] 4493 	clr	a
      000F51 35*2F            [12] 4494 	addc	a,(_LTHRUST_PW + 1)
      000F53 F5*2F            [12] 4495 	mov	(_LTHRUST_PW + 1),a
      000F55 02r0DrBF         [24] 4496 	ljmp	00153$
      000F58                       4497 00129$:
                           000F58  4498 	C$lab6.c$525$4$190 ==.
                                   4499 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:525: else if (value==2)
      000F58 90r00r5E         [24] 4500 	mov	dptr,#_Thrust_cal_value_1_181
      000F5B E0               [24] 4501 	movx	a,@dptr
      000F5C FD               [12] 4502 	mov	r5,a
      000F5D A3               [24] 4503 	inc	dptr
      000F5E E0               [24] 4504 	movx	a,@dptr
      000F5F FE               [12] 4505 	mov	r6,a
      000F60 BD 02 1D         [24] 4506 	cjne	r5,#0x02,00126$
      000F63 BE 00 1A         [24] 4507 	cjne	r6,#0x00,00126$
                           000F66  4508 	C$lab6.c$527$5$194 ==.
                                   4509 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:527: RTHRUST_PW += 30;
      000F66 74 1E            [12] 4510 	mov	a,#0x1E
      000F68 25*2C            [12] 4511 	add	a,_RTHRUST_PW
      000F6A F5*2C            [12] 4512 	mov	_RTHRUST_PW,a
      000F6C E4               [12] 4513 	clr	a
      000F6D 35*2D            [12] 4514 	addc	a,(_RTHRUST_PW + 1)
      000F6F F5*2D            [12] 4515 	mov	(_RTHRUST_PW + 1),a
                           000F71  4516 	C$lab6.c$528$5$194 ==.
                                   4517 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:528: LTHRUST_PW -= 30;
      000F71 E5*2E            [12] 4518 	mov	a,_LTHRUST_PW
      000F73 24 E2            [12] 4519 	add	a,#0xE2
      000F75 F5*2E            [12] 4520 	mov	_LTHRUST_PW,a
      000F77 E5*2F            [12] 4521 	mov	a,(_LTHRUST_PW + 1)
      000F79 34 FF            [12] 4522 	addc	a,#0xFF
      000F7B F5*2F            [12] 4523 	mov	(_LTHRUST_PW + 1),a
      000F7D 02r0DrBF         [24] 4524 	ljmp	00153$
      000F80                       4525 00126$:
                           000F80  4526 	C$lab6.c$530$4$190 ==.
                                   4527 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:530: else if (value == 3)
      000F80 90r00r5E         [24] 4528 	mov	dptr,#_Thrust_cal_value_1_181
      000F83 E0               [24] 4529 	movx	a,@dptr
      000F84 FD               [12] 4530 	mov	r5,a
      000F85 A3               [24] 4531 	inc	dptr
      000F86 E0               [24] 4532 	movx	a,@dptr
      000F87 FE               [12] 4533 	mov	r6,a
      000F88 BD 03 05         [24] 4534 	cjne	r5,#0x03,00248$
      000F8B BE 00 02         [24] 4535 	cjne	r6,#0x00,00248$
      000F8E 80 03            [24] 4536 	sjmp	00249$
      000F90                       4537 00248$:
      000F90 02r0DrBF         [24] 4538 	ljmp	00153$
      000F93                       4539 00249$:
                           000F93  4540 	C$lab6.c$532$5$195 ==.
                                   4541 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:532: times++;
      000F93 90r00r60         [24] 4542 	mov	dptr,#_Thrust_cal_times_1_181
      000F96 E0               [24] 4543 	movx	a,@dptr
      000F97 24 01            [12] 4544 	add	a,#0x01
      000F99 F0               [24] 4545 	movx	@dptr,a
      000F9A A3               [24] 4546 	inc	dptr
      000F9B E0               [24] 4547 	movx	a,@dptr
      000F9C 34 00            [12] 4548 	addc	a,#0x00
      000F9E F0               [24] 4549 	movx	@dptr,a
                           000F9F  4550 	C$lab6.c$533$5$195 ==.
                                   4551 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:533: value =0;
      000F9F 90r00r5E         [24] 4552 	mov	dptr,#_Thrust_cal_value_1_181
      000FA2 E4               [12] 4553 	clr	a
      000FA3 F0               [24] 4554 	movx	@dptr,a
      000FA4 A3               [24] 4555 	inc	dptr
      000FA5 F0               [24] 4556 	movx	@dptr,a
                           000FA6  4557 	C$lab6.c$534$5$195 ==.
                                   4558 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:534: st=0;
      000FA6 7F 00            [12] 4559 	mov	r7,#0x00
                           000FA8  4560 	C$lab6.c$535$5$195 ==.
                                   4561 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:535: PW_NUET_THRUST = RTHRUST_PW;
      000FA8 85*2C*14         [24] 4562 	mov	_PW_NUET_THRUST,_RTHRUST_PW
      000FAB 85*2D*15         [24] 4563 	mov	(_PW_NUET_THRUST + 1),(_RTHRUST_PW + 1)
      000FAE 02r0DrBF         [24] 4564 	ljmp	00153$
      000FB1                       4565 00147$:
                           000FB1  4566 	C$lab6.c$538$3$183 ==.
                                   4567 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:538: else if(times == 2)
      000FB1 90r00r60         [24] 4568 	mov	dptr,#_Thrust_cal_times_1_181
      000FB4 E0               [24] 4569 	movx	a,@dptr
      000FB5 FD               [12] 4570 	mov	r5,a
      000FB6 A3               [24] 4571 	inc	dptr
      000FB7 E0               [24] 4572 	movx	a,@dptr
      000FB8 FE               [12] 4573 	mov	r6,a
      000FB9 BD 02 05         [24] 4574 	cjne	r5,#0x02,00250$
      000FBC BE 00 02         [24] 4575 	cjne	r6,#0x00,00250$
      000FBF 80 03            [24] 4576 	sjmp	00251$
      000FC1                       4577 00250$:
      000FC1 02r10r69         [24] 4578 	ljmp	00144$
      000FC4                       4579 00251$:
                           000FC4  4580 	C$lab6.c$540$4$196 ==.
                                   4581 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:540: if (value==0)
      000FC4 90r00r5E         [24] 4582 	mov	dptr,#_Thrust_cal_value_1_181
      000FC7 E0               [24] 4583 	movx	a,@dptr
      000FC8 FD               [12] 4584 	mov	r5,a
      000FC9 A3               [24] 4585 	inc	dptr
      000FCA E0               [24] 4586 	movx	a,@dptr
      000FCB FE               [12] 4587 	mov	r6,a
      000FCC 4D               [12] 4588 	orl	a,r5
      000FCD 70 2B            [24] 4589 	jnz	00134$
                           000FCF  4590 	C$lab6.c$542$5$197 ==.
                                   4591 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:542: lcd_clear();
      000FCF C0 07            [24] 4592 	push	ar7
      000FD1 12r00rE1         [24] 4593 	lcall	_lcd_clear
                           000FD4  4594 	C$lab6.c$543$5$197 ==.
                                   4595 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:543: lcd_print("Now calibrating Max_PW");
      000FD4 74r5E            [12] 4596 	mov	a,#___str_14
      000FD6 C0 E0            [24] 4597 	push	acc
      000FD8 74s01            [12] 4598 	mov	a,#(___str_14 >> 8)
      000FDA C0 E0            [24] 4599 	push	acc
      000FDC 74 80            [12] 4600 	mov	a,#0x80
      000FDE C0 E0            [24] 4601 	push	acc
      000FE0 12r00r5C         [24] 4602 	lcall	_lcd_print
      000FE3 15 81            [12] 4603 	dec	sp
      000FE5 15 81            [12] 4604 	dec	sp
      000FE7 15 81            [12] 4605 	dec	sp
      000FE9 D0 07            [24] 4606 	pop	ar7
                           000FEB  4607 	C$lab6.c$544$5$197 ==.
                                   4608 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:544: if (st == 0)
      000FEB EF               [12] 4609 	mov	a,r7
      000FEC 70 0C            [24] 4610 	jnz	00134$
                           000FEE  4611 	C$lab6.c$546$6$198 ==.
                                   4612 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:546: RTHRUST_PW = PW_MAX_THRUST;
      000FEE 85*16*2C         [24] 4613 	mov	_RTHRUST_PW,_PW_MAX_THRUST
      000FF1 85*17*2D         [24] 4614 	mov	(_RTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
                           000FF4  4615 	C$lab6.c$547$6$198 ==.
                                   4616 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:547: LTHRUST_PW = PW_MAX_THRUST;
      000FF4 85*16*2E         [24] 4617 	mov	_LTHRUST_PW,_PW_MAX_THRUST
      000FF7 85*17*2F         [24] 4618 	mov	(_LTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
      000FFA                       4619 00134$:
                           000FFA  4620 	C$lab6.c$551$4$196 ==.
                                   4621 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:551: value = kpd_input(1);
      000FFA 75 82 01         [24] 4622 	mov	dpl,#0x01
      000FFD C0 07            [24] 4623 	push	ar7
      000FFF 12r01r99         [24] 4624 	lcall	_kpd_input
      001002 AD 82            [24] 4625 	mov	r5,dpl
      001004 AE 83            [24] 4626 	mov	r6,dph
      001006 D0 07            [24] 4627 	pop	ar7
      001008 90r00r5E         [24] 4628 	mov	dptr,#_Thrust_cal_value_1_181
      00100B ED               [12] 4629 	mov	a,r5
      00100C F0               [24] 4630 	movx	@dptr,a
      00100D EE               [12] 4631 	mov	a,r6
      00100E A3               [24] 4632 	inc	dptr
      00100F F0               [24] 4633 	movx	@dptr,a
                           001010  4634 	C$lab6.c$552$4$196 ==.
                                   4635 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:552: if (value == 1)
      001010 BD 01 12         [24] 4636 	cjne	r5,#0x01,00141$
      001013 BE 00 0F         [24] 4637 	cjne	r6,#0x00,00141$
                           001016  4638 	C$lab6.c$554$5$199 ==.
                                   4639 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:554: RTHRUST_PW -= 30;
      001016 E5*2C            [12] 4640 	mov	a,_RTHRUST_PW
      001018 24 E2            [12] 4641 	add	a,#0xE2
      00101A F5*2C            [12] 4642 	mov	_RTHRUST_PW,a
      00101C E5*2D            [12] 4643 	mov	a,(_RTHRUST_PW + 1)
      00101E 34 FF            [12] 4644 	addc	a,#0xFF
      001020 F5*2D            [12] 4645 	mov	(_RTHRUST_PW + 1),a
      001022 02r0DrBF         [24] 4646 	ljmp	00153$
      001025                       4647 00141$:
                           001025  4648 	C$lab6.c$556$4$196 ==.
                                   4649 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:556: else if (value==2)
      001025 90r00r5E         [24] 4650 	mov	dptr,#_Thrust_cal_value_1_181
      001028 E0               [24] 4651 	movx	a,@dptr
      001029 FD               [12] 4652 	mov	r5,a
      00102A A3               [24] 4653 	inc	dptr
      00102B E0               [24] 4654 	movx	a,@dptr
      00102C FE               [12] 4655 	mov	r6,a
      00102D BD 02 11         [24] 4656 	cjne	r5,#0x02,00138$
      001030 BE 00 0E         [24] 4657 	cjne	r6,#0x00,00138$
                           001033  4658 	C$lab6.c$558$5$200 ==.
                                   4659 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:558: RTHRUST_PW += 30;
      001033 74 1E            [12] 4660 	mov	a,#0x1E
      001035 25*2C            [12] 4661 	add	a,_RTHRUST_PW
      001037 F5*2C            [12] 4662 	mov	_RTHRUST_PW,a
      001039 E4               [12] 4663 	clr	a
      00103A 35*2D            [12] 4664 	addc	a,(_RTHRUST_PW + 1)
      00103C F5*2D            [12] 4665 	mov	(_RTHRUST_PW + 1),a
      00103E 02r0DrBF         [24] 4666 	ljmp	00153$
      001041                       4667 00138$:
                           001041  4668 	C$lab6.c$560$4$196 ==.
                                   4669 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:560: else if (value == 3)
      001041 90r00r5E         [24] 4670 	mov	dptr,#_Thrust_cal_value_1_181
      001044 E0               [24] 4671 	movx	a,@dptr
      001045 FD               [12] 4672 	mov	r5,a
      001046 A3               [24] 4673 	inc	dptr
      001047 E0               [24] 4674 	movx	a,@dptr
      001048 FE               [12] 4675 	mov	r6,a
      001049 BD 03 05         [24] 4676 	cjne	r5,#0x03,00258$
      00104C BE 00 02         [24] 4677 	cjne	r6,#0x00,00258$
      00104F 80 03            [24] 4678 	sjmp	00259$
      001051                       4679 00258$:
      001051 02r0DrBF         [24] 4680 	ljmp	00153$
      001054                       4681 00259$:
                           001054  4682 	C$lab6.c$562$5$201 ==.
                                   4683 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:562: PW_MAX_THRUST = RTHRUST_PW;
      001054 85*2C*16         [24] 4684 	mov	_PW_MAX_THRUST,_RTHRUST_PW
      001057 85*2D*17         [24] 4685 	mov	(_PW_MAX_THRUST + 1),(_RTHRUST_PW + 1)
                           00105A  4686 	C$lab6.c$563$5$201 ==.
                                   4687 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:563: LTHRUST_PW =PW_NUET_THRUST;
      00105A 85*14*2E         [24] 4688 	mov	_LTHRUST_PW,_PW_NUET_THRUST
      00105D 85*15*2F         [24] 4689 	mov	(_LTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
                           001060  4690 	C$lab6.c$564$5$201 ==.
                                   4691 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:564: RTHRUST_PW =PW_NUET_THRUST;
      001060 85*14*2C         [24] 4692 	mov	_RTHRUST_PW,_PW_NUET_THRUST
      001063 85*15*2D         [24] 4693 	mov	(_RTHRUST_PW + 1),(_PW_NUET_THRUST + 1)
      001066 02r0DrBF         [24] 4694 	ljmp	00153$
      001069                       4695 00144$:
                           001069  4696 	C$lab6.c$567$3$183 ==.
                                   4697 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:567: else return;
                           001069  4698 	C$lab6.c$570$1$181 ==.
                           001069  4699 	XG$Thrust_cal$0$0 ==.
      001069 22               [24] 4700 	ret
                                   4701 ;------------------------------------------------------------
                                   4702 ;Allocation info for local variables in function 'Steering_Servo'
                                   4703 ;------------------------------------------------------------
                                   4704 ;direction                 Allocated to registers r6 r7 
                                   4705 ;------------------------------------------------------------
                           00106A  4706 	G$Steering_Servo$0$0 ==.
                           00106A  4707 	C$lab6.c$573$1$181 ==.
                                   4708 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:573: void Steering_Servo(unsigned int direction)
                                   4709 ;	-----------------------------------------
                                   4710 ;	 function Steering_Servo
                                   4711 ;	-----------------------------------------
      00106A                       4712 _Steering_Servo:
      00106A AE 82            [24] 4713 	mov	r6,dpl
      00106C AF 83            [24] 4714 	mov	r7,dph
                           00106E  4715 	C$lab6.c$579$1$203 ==.
                                   4716 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:579: if (direction > 3500 || direction < 100)
      00106E C3               [12] 4717 	clr	c
      00106F 74 AC            [12] 4718 	mov	a,#0xAC
      001071 9E               [12] 4719 	subb	a,r6
      001072 74 0D            [12] 4720 	mov	a,#0x0D
      001074 9F               [12] 4721 	subb	a,r7
      001075 40 08            [24] 4722 	jc	00104$
      001077 EE               [12] 4723 	mov	a,r6
      001078 94 64            [12] 4724 	subb	a,#0x64
      00107A EF               [12] 4725 	mov	a,r7
      00107B 94 00            [12] 4726 	subb	a,#0x00
      00107D 50 09            [24] 4727 	jnc	00105$
      00107F                       4728 00104$:
                           00107F  4729 	C$lab6.c$581$2$204 ==.
                                   4730 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:581: error =0;
      00107F 90r00r00         [24] 4731 	mov	dptr,#_error
      001082 E4               [12] 4732 	clr	a
      001083 F0               [24] 4733 	movx	@dptr,a
      001084 A3               [24] 4734 	inc	dptr
      001085 F0               [24] 4735 	movx	@dptr,a
      001086 80 33            [24] 4736 	sjmp	00106$
      001088                       4737 00105$:
                           001088  4738 	C$lab6.c$583$1$203 ==.
                                   4739 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:583: else if (direction > 1800)
      001088 C3               [12] 4740 	clr	c
      001089 74 08            [12] 4741 	mov	a,#0x08
      00108B 9E               [12] 4742 	subb	a,r6
      00108C 74 07            [12] 4743 	mov	a,#0x07
      00108E 9F               [12] 4744 	subb	a,r7
      00108F 50 13            [24] 4745 	jnc	00102$
                           001091  4746 	C$lab6.c$585$2$205 ==.
                                   4747 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:585: error = (3600 - (int) direction);
      001091 8E 04            [24] 4748 	mov	ar4,r6
      001093 8F 05            [24] 4749 	mov	ar5,r7
      001095 90r00r00         [24] 4750 	mov	dptr,#_error
      001098 74 10            [12] 4751 	mov	a,#0x10
      00109A C3               [12] 4752 	clr	c
      00109B 9C               [12] 4753 	subb	a,r4
      00109C F0               [24] 4754 	movx	@dptr,a
      00109D 74 0E            [12] 4755 	mov	a,#0x0E
      00109F 9D               [12] 4756 	subb	a,r5
      0010A0 A3               [24] 4757 	inc	dptr
      0010A1 F0               [24] 4758 	movx	@dptr,a
      0010A2 80 17            [24] 4759 	sjmp	00106$
      0010A4                       4760 00102$:
                           0010A4  4761 	C$lab6.c$589$1$203 ==.
                                   4762 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:589: error = -1* direction;
      0010A4 8E*00            [24] 4763 	mov	__mulint_PARM_2,r6
      0010A6 8F*01            [24] 4764 	mov	(__mulint_PARM_2 + 1),r7
      0010A8 90 FF FF         [24] 4765 	mov	dptr,#0xFFFF
      0010AB 12r00r00         [24] 4766 	lcall	__mulint
      0010AE E5 82            [12] 4767 	mov	a,dpl
      0010B0 85 83 F0         [24] 4768 	mov	b,dph
      0010B3 90r00r00         [24] 4769 	mov	dptr,#_error
      0010B6 F0               [24] 4770 	movx	@dptr,a
      0010B7 E5 F0            [12] 4771 	mov	a,b
      0010B9 A3               [24] 4772 	inc	dptr
      0010BA F0               [24] 4773 	movx	@dptr,a
      0010BB                       4774 00106$:
                           0010BB  4775 	C$lab6.c$592$1$203 ==.
                                   4776 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:592: RUDDER_PW  = PW_CENTER_RUDDER + (int) (((int) kp* (int) error) - (int) kd * ((int)old_error -(int) error));
      0010BB 90r00r00         [24] 4777 	mov	dptr,#_error
      0010BE E0               [24] 4778 	movx	a,@dptr
      0010BF FE               [12] 4779 	mov	r6,a
      0010C0 A3               [24] 4780 	inc	dptr
      0010C1 E0               [24] 4781 	movx	a,@dptr
      0010C2 FF               [12] 4782 	mov	r7,a
      0010C3 8E*00            [24] 4783 	mov	__mulint_PARM_2,r6
      0010C5 8F*01            [24] 4784 	mov	(__mulint_PARM_2 + 1),r7
      0010C7 85*38 82         [24] 4785 	mov	dpl,_kp
      0010CA 85*39 83         [24] 4786 	mov	dph,(_kp + 1)
      0010CD C0 07            [24] 4787 	push	ar7
      0010CF C0 06            [24] 4788 	push	ar6
      0010D1 12r00r00         [24] 4789 	lcall	__mulint
      0010D4 AC 82            [24] 4790 	mov	r4,dpl
      0010D6 AD 83            [24] 4791 	mov	r5,dph
      0010D8 D0 06            [24] 4792 	pop	ar6
      0010DA D0 07            [24] 4793 	pop	ar7
      0010DC 90r00r02         [24] 4794 	mov	dptr,#_old_error
      0010DF E0               [24] 4795 	movx	a,@dptr
      0010E0 FA               [12] 4796 	mov	r2,a
      0010E1 A3               [24] 4797 	inc	dptr
      0010E2 E0               [24] 4798 	movx	a,@dptr
      0010E3 FB               [12] 4799 	mov	r3,a
      0010E4 EA               [12] 4800 	mov	a,r2
      0010E5 C3               [12] 4801 	clr	c
      0010E6 9E               [12] 4802 	subb	a,r6
      0010E7 F5*00            [12] 4803 	mov	__mulint_PARM_2,a
      0010E9 EB               [12] 4804 	mov	a,r3
      0010EA 9F               [12] 4805 	subb	a,r7
      0010EB F5*01            [12] 4806 	mov	(__mulint_PARM_2 + 1),a
      0010ED 85*3A 82         [24] 4807 	mov	dpl,_kd
      0010F0 85*3B 83         [24] 4808 	mov	dph,(_kd + 1)
      0010F3 C0 07            [24] 4809 	push	ar7
      0010F5 C0 06            [24] 4810 	push	ar6
      0010F7 C0 05            [24] 4811 	push	ar5
      0010F9 C0 04            [24] 4812 	push	ar4
      0010FB 12r00r00         [24] 4813 	lcall	__mulint
      0010FE AA 82            [24] 4814 	mov	r2,dpl
      001100 AB 83            [24] 4815 	mov	r3,dph
      001102 D0 04            [24] 4816 	pop	ar4
      001104 D0 05            [24] 4817 	pop	ar5
      001106 D0 06            [24] 4818 	pop	ar6
      001108 D0 07            [24] 4819 	pop	ar7
      00110A EC               [12] 4820 	mov	a,r4
      00110B C3               [12] 4821 	clr	c
      00110C 9A               [12] 4822 	subb	a,r2
      00110D FC               [12] 4823 	mov	r4,a
      00110E ED               [12] 4824 	mov	a,r5
      00110F 9B               [12] 4825 	subb	a,r3
      001110 FD               [12] 4826 	mov	r5,a
      001111 EC               [12] 4827 	mov	a,r4
      001112 25*1A            [12] 4828 	add	a,_PW_CENTER_RUDDER
      001114 F5*24            [12] 4829 	mov	_RUDDER_PW,a
      001116 ED               [12] 4830 	mov	a,r5
      001117 35*1B            [12] 4831 	addc	a,(_PW_CENTER_RUDDER + 1)
      001119 F5*25            [12] 4832 	mov	(_RUDDER_PW + 1),a
                           00111B  4833 	C$lab6.c$594$1$203 ==.
                                   4834 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:594: RTHRUST_PW = PW_NUET_THRUST   - (int) (((int) kp* (int) error) - (int) kd * ((int)old_error -(int) error));
      00111B E5*14            [12] 4835 	mov	a,_PW_NUET_THRUST
      00111D C3               [12] 4836 	clr	c
      00111E 9C               [12] 4837 	subb	a,r4
      00111F F5*2C            [12] 4838 	mov	_RTHRUST_PW,a
      001121 E5*15            [12] 4839 	mov	a,(_PW_NUET_THRUST + 1)
      001123 9D               [12] 4840 	subb	a,r5
      001124 F5*2D            [12] 4841 	mov	(_RTHRUST_PW + 1),a
                           001126  4842 	C$lab6.c$596$1$203 ==.
                                   4843 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:596: LTHRUST_PW = PW_NUET_THRUST   + (int) (((int) kp* (int) error) - (int) kd * ((int)old_error -(int) error));
      001126 EC               [12] 4844 	mov	a,r4
      001127 25*14            [12] 4845 	add	a,_PW_NUET_THRUST
      001129 F5*2E            [12] 4846 	mov	_LTHRUST_PW,a
      00112B ED               [12] 4847 	mov	a,r5
      00112C 35*15            [12] 4848 	addc	a,(_PW_NUET_THRUST + 1)
      00112E F5*2F            [12] 4849 	mov	(_LTHRUST_PW + 1),a
                           001130  4850 	C$lab6.c$598$1$203 ==.
                                   4851 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:598: old_error=error;
      001130 90r00r02         [24] 4852 	mov	dptr,#_old_error
      001133 EE               [12] 4853 	mov	a,r6
      001134 F0               [24] 4854 	movx	@dptr,a
      001135 EF               [12] 4855 	mov	a,r7
      001136 A3               [24] 4856 	inc	dptr
      001137 F0               [24] 4857 	movx	@dptr,a
                           001138  4858 	C$lab6.c$599$1$203 ==.
                                   4859 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:599: if (count % 25 == 0) printf("\r\n%d\t%u\t%u\t%u\t%d", error,RUDDER_PW,RTHRUST_PW,LTHRUST_PW,(int) (((int) kp* (int) error) - (int) kd * ((int)old_error -(int) error)));
      001138 75*00 19         [24] 4860 	mov	__modsint_PARM_2,#0x19
      00113B 75*01 00         [24] 4861 	mov	(__modsint_PARM_2 + 1),#0x00
      00113E 85*10 82         [24] 4862 	mov	dpl,_count
      001141 85*11 83         [24] 4863 	mov	dph,(_count + 1)
      001144 12r00r00         [24] 4864 	lcall	__modsint
      001147 E5 82            [12] 4865 	mov	a,dpl
      001149 85 83 F0         [24] 4866 	mov	b,dph
      00114C 45 F0            [12] 4867 	orl	a,b
      00114E 60 03            [24] 4868 	jz	00157$
      001150 02r11rD2         [24] 4869 	ljmp	00109$
      001153                       4870 00157$:
      001153 90r00r00         [24] 4871 	mov	dptr,#_error
      001156 E0               [24] 4872 	movx	a,@dptr
      001157 FE               [12] 4873 	mov	r6,a
      001158 A3               [24] 4874 	inc	dptr
      001159 E0               [24] 4875 	movx	a,@dptr
      00115A FF               [12] 4876 	mov	r7,a
      00115B 8E*00            [24] 4877 	mov	__mulint_PARM_2,r6
      00115D 8F*01            [24] 4878 	mov	(__mulint_PARM_2 + 1),r7
      00115F 85*38 82         [24] 4879 	mov	dpl,_kp
      001162 85*39 83         [24] 4880 	mov	dph,(_kp + 1)
      001165 C0 07            [24] 4881 	push	ar7
      001167 C0 06            [24] 4882 	push	ar6
      001169 12r00r00         [24] 4883 	lcall	__mulint
      00116C AC 82            [24] 4884 	mov	r4,dpl
      00116E AD 83            [24] 4885 	mov	r5,dph
      001170 D0 06            [24] 4886 	pop	ar6
      001172 D0 07            [24] 4887 	pop	ar7
      001174 90r00r02         [24] 4888 	mov	dptr,#_old_error
      001177 E0               [24] 4889 	movx	a,@dptr
      001178 FA               [12] 4890 	mov	r2,a
      001179 A3               [24] 4891 	inc	dptr
      00117A E0               [24] 4892 	movx	a,@dptr
      00117B FB               [12] 4893 	mov	r3,a
      00117C EA               [12] 4894 	mov	a,r2
      00117D C3               [12] 4895 	clr	c
      00117E 9E               [12] 4896 	subb	a,r6
      00117F F5*00            [12] 4897 	mov	__mulint_PARM_2,a
      001181 EB               [12] 4898 	mov	a,r3
      001182 9F               [12] 4899 	subb	a,r7
      001183 F5*01            [12] 4900 	mov	(__mulint_PARM_2 + 1),a
      001185 85*3A 82         [24] 4901 	mov	dpl,_kd
      001188 85*3B 83         [24] 4902 	mov	dph,(_kd + 1)
      00118B C0 07            [24] 4903 	push	ar7
      00118D C0 06            [24] 4904 	push	ar6
      00118F C0 05            [24] 4905 	push	ar5
      001191 C0 04            [24] 4906 	push	ar4
      001193 12r00r00         [24] 4907 	lcall	__mulint
      001196 AA 82            [24] 4908 	mov	r2,dpl
      001198 AB 83            [24] 4909 	mov	r3,dph
      00119A D0 04            [24] 4910 	pop	ar4
      00119C D0 05            [24] 4911 	pop	ar5
      00119E D0 06            [24] 4912 	pop	ar6
      0011A0 D0 07            [24] 4913 	pop	ar7
      0011A2 EC               [12] 4914 	mov	a,r4
      0011A3 C3               [12] 4915 	clr	c
      0011A4 9A               [12] 4916 	subb	a,r2
      0011A5 FC               [12] 4917 	mov	r4,a
      0011A6 ED               [12] 4918 	mov	a,r5
      0011A7 9B               [12] 4919 	subb	a,r3
      0011A8 FD               [12] 4920 	mov	r5,a
      0011A9 C0 04            [24] 4921 	push	ar4
      0011AB C0 05            [24] 4922 	push	ar5
      0011AD C0*2E            [24] 4923 	push	_LTHRUST_PW
      0011AF C0*2F            [24] 4924 	push	(_LTHRUST_PW + 1)
      0011B1 C0*2C            [24] 4925 	push	_RTHRUST_PW
      0011B3 C0*2D            [24] 4926 	push	(_RTHRUST_PW + 1)
      0011B5 C0*24            [24] 4927 	push	_RUDDER_PW
      0011B7 C0*25            [24] 4928 	push	(_RUDDER_PW + 1)
      0011B9 C0 06            [24] 4929 	push	ar6
      0011BB C0 07            [24] 4930 	push	ar7
      0011BD 74rF3            [12] 4931 	mov	a,#___str_20
      0011BF C0 E0            [24] 4932 	push	acc
      0011C1 74s01            [12] 4933 	mov	a,#(___str_20 >> 8)
      0011C3 C0 E0            [24] 4934 	push	acc
      0011C5 74 80            [12] 4935 	mov	a,#0x80
      0011C7 C0 E0            [24] 4936 	push	acc
      0011C9 12r00r00         [24] 4937 	lcall	_printf
      0011CC E5 81            [12] 4938 	mov	a,sp
      0011CE 24 F3            [12] 4939 	add	a,#0xf3
      0011D0 F5 81            [12] 4940 	mov	sp,a
      0011D2                       4941 00109$:
                           0011D2  4942 	C$lab6.c$601$1$203 ==.
                                   4943 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:601: if (RUDDER_PW >= PW_RIGHT_RUDDER)
      0011D2 C3               [12] 4944 	clr	c
      0011D3 E5*24            [12] 4945 	mov	a,_RUDDER_PW
      0011D5 95*1C            [12] 4946 	subb	a,_PW_RIGHT_RUDDER
      0011D7 E5*25            [12] 4947 	mov	a,(_RUDDER_PW + 1)
      0011D9 95*1D            [12] 4948 	subb	a,(_PW_RIGHT_RUDDER + 1)
      0011DB 40 08            [24] 4949 	jc	00113$
                           0011DD  4950 	C$lab6.c$603$2$207 ==.
                                   4951 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:603: RUDDER_PW = PW_RIGHT_RUDDER;
      0011DD 85*1C*24         [24] 4952 	mov	_RUDDER_PW,_PW_RIGHT_RUDDER
      0011E0 85*1D*25         [24] 4953 	mov	(_RUDDER_PW + 1),(_PW_RIGHT_RUDDER + 1)
      0011E3 80 11            [24] 4954 	sjmp	00114$
      0011E5                       4955 00113$:
                           0011E5  4956 	C$lab6.c$605$1$203 ==.
                                   4957 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:605: else if(RUDDER_PW <= PW_LEFT_RUDDER)
      0011E5 C3               [12] 4958 	clr	c
      0011E6 E5*18            [12] 4959 	mov	a,_PW_LEFT_RUDDER
      0011E8 95*24            [12] 4960 	subb	a,_RUDDER_PW
      0011EA E5*19            [12] 4961 	mov	a,(_PW_LEFT_RUDDER + 1)
      0011EC 95*25            [12] 4962 	subb	a,(_RUDDER_PW + 1)
      0011EE 40 06            [24] 4963 	jc	00114$
                           0011F0  4964 	C$lab6.c$607$2$208 ==.
                                   4965 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:607: RUDDER_PW = PW_LEFT_RUDDER;
      0011F0 85*18*24         [24] 4966 	mov	_RUDDER_PW,_PW_LEFT_RUDDER
      0011F3 85*19*25         [24] 4967 	mov	(_RUDDER_PW + 1),(_PW_LEFT_RUDDER + 1)
      0011F6                       4968 00114$:
                           0011F6  4969 	C$lab6.c$610$1$203 ==.
                                   4970 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:610: if (RTHRUST_PW >= PW_MAX_THRUST)
      0011F6 C3               [12] 4971 	clr	c
      0011F7 E5*2C            [12] 4972 	mov	a,_RTHRUST_PW
      0011F9 95*16            [12] 4973 	subb	a,_PW_MAX_THRUST
      0011FB E5*2D            [12] 4974 	mov	a,(_RTHRUST_PW + 1)
      0011FD 95*17            [12] 4975 	subb	a,(_PW_MAX_THRUST + 1)
      0011FF 40 08            [24] 4976 	jc	00118$
                           001201  4977 	C$lab6.c$612$2$209 ==.
                                   4978 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:612: RTHRUST_PW = PW_MAX_THRUST;
      001201 85*16*2C         [24] 4979 	mov	_RTHRUST_PW,_PW_MAX_THRUST
      001204 85*17*2D         [24] 4980 	mov	(_RTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
      001207 80 11            [24] 4981 	sjmp	00119$
      001209                       4982 00118$:
                           001209  4983 	C$lab6.c$614$1$203 ==.
                                   4984 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:614: else if (RTHRUST_PW <=  PW_MIN_THRUST)
      001209 C3               [12] 4985 	clr	c
      00120A E5*12            [12] 4986 	mov	a,_PW_MIN_THRUST
      00120C 95*2C            [12] 4987 	subb	a,_RTHRUST_PW
      00120E E5*13            [12] 4988 	mov	a,(_PW_MIN_THRUST + 1)
      001210 95*2D            [12] 4989 	subb	a,(_RTHRUST_PW + 1)
      001212 40 06            [24] 4990 	jc	00119$
                           001214  4991 	C$lab6.c$616$2$210 ==.
                                   4992 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:616: RTHRUST_PW = PW_MIN_THRUST;
      001214 85*12*2C         [24] 4993 	mov	_RTHRUST_PW,_PW_MIN_THRUST
      001217 85*13*2D         [24] 4994 	mov	(_RTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
      00121A                       4995 00119$:
                           00121A  4996 	C$lab6.c$618$1$203 ==.
                                   4997 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:618: if (LTHRUST_PW >= PW_MAX_THRUST)
      00121A C3               [12] 4998 	clr	c
      00121B E5*2E            [12] 4999 	mov	a,_LTHRUST_PW
      00121D 95*16            [12] 5000 	subb	a,_PW_MAX_THRUST
      00121F E5*2F            [12] 5001 	mov	a,(_LTHRUST_PW + 1)
      001221 95*17            [12] 5002 	subb	a,(_PW_MAX_THRUST + 1)
      001223 40 08            [24] 5003 	jc	00123$
                           001225  5004 	C$lab6.c$620$2$211 ==.
                                   5005 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:620: LTHRUST_PW = PW_MAX_THRUST;
      001225 85*16*2E         [24] 5006 	mov	_LTHRUST_PW,_PW_MAX_THRUST
      001228 85*17*2F         [24] 5007 	mov	(_LTHRUST_PW + 1),(_PW_MAX_THRUST + 1)
      00122B 80 11            [24] 5008 	sjmp	00124$
      00122D                       5009 00123$:
                           00122D  5010 	C$lab6.c$622$1$203 ==.
                                   5011 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:622: else if(LTHRUST_PW <= PW_MIN_THRUST)
      00122D C3               [12] 5012 	clr	c
      00122E E5*12            [12] 5013 	mov	a,_PW_MIN_THRUST
      001230 95*2E            [12] 5014 	subb	a,_LTHRUST_PW
      001232 E5*13            [12] 5015 	mov	a,(_PW_MIN_THRUST + 1)
      001234 95*2F            [12] 5016 	subb	a,(_LTHRUST_PW + 1)
      001236 40 06            [24] 5017 	jc	00124$
                           001238  5018 	C$lab6.c$624$2$212 ==.
                                   5019 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:624: LTHRUST_PW = PW_MIN_THRUST;
      001238 85*12*2E         [24] 5020 	mov	_LTHRUST_PW,_PW_MIN_THRUST
      00123B 85*13*2F         [24] 5021 	mov	(_LTHRUST_PW + 1),(_PW_MIN_THRUST + 1)
      00123E                       5022 00124$:
                           00123E  5023 	C$lab6.c$627$1$203 ==.
                                   5024 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:627: RDR_lo_to_hi = 0xFFFF - RUDDER_PW ;
      00123E 74 FF            [12] 5025 	mov	a,#0xFF
      001240 C3               [12] 5026 	clr	c
      001241 95*24            [12] 5027 	subb	a,_RUDDER_PW
      001243 F5*26            [12] 5028 	mov	_RDR_lo_to_hi,a
      001245 74 FF            [12] 5029 	mov	a,#0xFF
      001247 95*25            [12] 5030 	subb	a,(_RUDDER_PW + 1)
      001249 F5*27            [12] 5031 	mov	(_RDR_lo_to_hi + 1),a
                           00124B  5032 	C$lab6.c$628$1$203 ==.
                                   5033 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:628: RTRST_lo_to_hi = 0xFFFF - RTHRUST_PW;
      00124B 74 FF            [12] 5034 	mov	a,#0xFF
      00124D C3               [12] 5035 	clr	c
      00124E 95*2C            [12] 5036 	subb	a,_RTHRUST_PW
      001250 F5*30            [12] 5037 	mov	_RTRST_lo_to_hi,a
      001252 74 FF            [12] 5038 	mov	a,#0xFF
      001254 95*2D            [12] 5039 	subb	a,(_RTHRUST_PW + 1)
      001256 F5*31            [12] 5040 	mov	(_RTRST_lo_to_hi + 1),a
                           001258  5041 	C$lab6.c$629$1$203 ==.
                                   5042 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:629: LTRST_lo_to_hi = 0xFFFF - LTHRUST_PW;
      001258 74 FF            [12] 5043 	mov	a,#0xFF
      00125A C3               [12] 5044 	clr	c
      00125B 95*2E            [12] 5045 	subb	a,_LTHRUST_PW
      00125D F5*32            [12] 5046 	mov	_LTRST_lo_to_hi,a
      00125F 74 FF            [12] 5047 	mov	a,#0xFF
      001261 95*2F            [12] 5048 	subb	a,(_LTHRUST_PW + 1)
      001263 F5*33            [12] 5049 	mov	(_LTRST_lo_to_hi + 1),a
                           001265  5050 	C$lab6.c$631$1$203 ==.
                                   5051 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:631: PCA0CP0 = RDR_lo_to_hi;
      001265 85*26 EA         [24] 5052 	mov	((_PCA0CP0 >> 0) & 0xFF),_RDR_lo_to_hi
      001268 85*27 FA         [24] 5053 	mov	((_PCA0CP0 >> 8) & 0xFF),(_RDR_lo_to_hi + 1)
                           00126B  5054 	C$lab6.c$632$1$203 ==.
                                   5055 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:632: PCA0CP2 = RTRST_lo_to_hi;
      00126B 85*30 EC         [24] 5056 	mov	((_PCA0CP2 >> 0) & 0xFF),_RTRST_lo_to_hi
      00126E 85*31 FC         [24] 5057 	mov	((_PCA0CP2 >> 8) & 0xFF),(_RTRST_lo_to_hi + 1)
                           001271  5058 	C$lab6.c$633$1$203 ==.
                                   5059 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:633: PCA0CP3 = LTRST_lo_to_hi;
      001271 85*32 ED         [24] 5060 	mov	((_PCA0CP3 >> 0) & 0xFF),_LTRST_lo_to_hi
      001274 85*33 FD         [24] 5061 	mov	((_PCA0CP3 >> 8) & 0xFF),(_LTRST_lo_to_hi + 1)
                           001277  5062 	C$lab6.c$634$1$203 ==.
                           001277  5063 	XG$Steering_Servo$0$0 ==.
      001277 22               [24] 5064 	ret
                                   5065 ;------------------------------------------------------------
                                   5066 ;Allocation info for local variables in function 'start'
                                   5067 ;------------------------------------------------------------
                           001278  5068 	G$start$0$0 ==.
                           001278  5069 	C$lab6.c$636$1$203 ==.
                                   5070 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:636: void start(void)            ///WAITS UNTIL '*' IS ENTERED
                                   5071 ;	-----------------------------------------
                                   5072 ;	 function start
                                   5073 ;	-----------------------------------------
      001278                       5074 _start:
                           001278  5075 	C$lab6.c$638$1$214 ==.
                                   5076 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:638: while (read_keypad() != '*') wait();
      001278                       5077 00101$:
      001278 12r01r1A         [24] 5078 	lcall	_read_keypad
      00127B AF 82            [24] 5079 	mov	r7,dpl
      00127D BF 2A 02         [24] 5080 	cjne	r7,#0x2A,00112$
      001280 80 05            [24] 5081 	sjmp	00104$
      001282                       5082 00112$:
      001282 12r12r88         [24] 5083 	lcall	_wait
      001285 80 F1            [24] 5084 	sjmp	00101$
      001287                       5085 00104$:
                           001287  5086 	C$lab6.c$639$1$214 ==.
                           001287  5087 	XG$start$0$0 ==.
      001287 22               [24] 5088 	ret
                                   5089 ;------------------------------------------------------------
                                   5090 ;Allocation info for local variables in function 'wait'
                                   5091 ;------------------------------------------------------------
                                   5092 ;old_count                 Allocated with name '_wait_old_count_1_216'
                                   5093 ;------------------------------------------------------------
                           001288  5094 	G$wait$0$0 ==.
                           001288  5095 	C$lab6.c$643$1$214 ==.
                                   5096 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:643: void wait(void)
                                   5097 ;	-----------------------------------------
                                   5098 ;	 function wait
                                   5099 ;	-----------------------------------------
      001288                       5100 _wait:
                           001288  5101 	C$lab6.c$645$1$216 ==.
                                   5102 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:645: __xdata int old_count = count+1;
      001288 90r00r62         [24] 5103 	mov	dptr,#_wait_old_count_1_216
      00128B 74 01            [12] 5104 	mov	a,#0x01
      00128D 25*10            [12] 5105 	add	a,_count
      00128F F0               [24] 5106 	movx	@dptr,a
      001290 E4               [12] 5107 	clr	a
      001291 35*11            [12] 5108 	addc	a,(_count + 1)
      001293 A3               [24] 5109 	inc	dptr
      001294 F0               [24] 5110 	movx	@dptr,a
                           001295  5111 	C$lab6.c$646$1$216 ==.
                                   5112 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:646: while (old_count> count);
      001295 90r00r62         [24] 5113 	mov	dptr,#_wait_old_count_1_216
      001298 E0               [24] 5114 	movx	a,@dptr
      001299 FE               [12] 5115 	mov	r6,a
      00129A A3               [24] 5116 	inc	dptr
      00129B E0               [24] 5117 	movx	a,@dptr
      00129C FF               [12] 5118 	mov	r7,a
      00129D                       5119 00101$:
      00129D C3               [12] 5120 	clr	c
      00129E E5*10            [12] 5121 	mov	a,_count
      0012A0 9E               [12] 5122 	subb	a,r6
      0012A1 E5*11            [12] 5123 	mov	a,(_count + 1)
      0012A3 64 80            [12] 5124 	xrl	a,#0x80
      0012A5 8F F0            [24] 5125 	mov	b,r7
      0012A7 63 F0 80         [24] 5126 	xrl	b,#0x80
      0012AA 95 F0            [12] 5127 	subb	a,b
      0012AC 40 EF            [24] 5128 	jc	00101$
                           0012AE  5129 	C$lab6.c$647$1$216 ==.
                           0012AE  5130 	XG$wait$0$0 ==.
      0012AE 22               [24] 5131 	ret
                                   5132 ;------------------------------------------------------------
                                   5133 ;Allocation info for local variables in function 'Port_Init'
                                   5134 ;------------------------------------------------------------
                           0012AF  5135 	G$Port_Init$0$0 ==.
                           0012AF  5136 	C$lab6.c$649$1$216 ==.
                                   5137 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:649: void Port_Init(void)
                                   5138 ;	-----------------------------------------
                                   5139 ;	 function Port_Init
                                   5140 ;	-----------------------------------------
      0012AF                       5141 _Port_Init:
                           0012AF  5142 	C$lab6.c$651$1$218 ==.
                                   5143 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:651: P0MDOUT &= ~0x32;
      0012AF AF A4            [24] 5144 	mov	r7,_P0MDOUT
      0012B1 74 CD            [12] 5145 	mov	a,#0xCD
      0012B3 5F               [12] 5146 	anl	a,r7
      0012B4 F5 A4            [12] 5147 	mov	_P0MDOUT,a
                           0012B6  5148 	C$lab6.c$653$1$218 ==.
                                   5149 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:653: P1MDIN  &= ~0x20;
      0012B6 AF BD            [24] 5150 	mov	r7,_P1MDIN
      0012B8 74 DF            [12] 5151 	mov	a,#0xDF
      0012BA 5F               [12] 5152 	anl	a,r7
      0012BB F5 BD            [12] 5153 	mov	_P1MDIN,a
                           0012BD  5154 	C$lab6.c$655$1$218 ==.
                                   5155 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:655: P1MDOUT |= 0x0F;
      0012BD 43 A5 0F         [24] 5156 	orl	_P1MDOUT,#0x0F
                           0012C0  5157 	C$lab6.c$656$1$218 ==.
                                   5158 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:656: P1MDOUT &= 0x20;
      0012C0 53 A5 20         [24] 5159 	anl	_P1MDOUT,#0x20
                           0012C3  5160 	C$lab6.c$658$1$218 ==.
                                   5161 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:658: P1 		 = 0x20;
      0012C3 75 90 20         [24] 5162 	mov	_P1,#0x20
                           0012C6  5163 	C$lab6.c$661$1$218 ==.
                           0012C6  5164 	XG$Port_Init$0$0 ==.
      0012C6 22               [24] 5165 	ret
                                   5166 ;------------------------------------------------------------
                                   5167 ;Allocation info for local variables in function 'PCA_Init'
                                   5168 ;------------------------------------------------------------
                           0012C7  5169 	G$PCA_Init$0$0 ==.
                           0012C7  5170 	C$lab6.c$663$1$218 ==.
                                   5171 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:663: void PCA_Init(void)
                                   5172 ;	-----------------------------------------
                                   5173 ;	 function PCA_Init
                                   5174 ;	-----------------------------------------
      0012C7                       5175 _PCA_Init:
                           0012C7  5176 	C$lab6.c$665$1$220 ==.
                                   5177 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:665: PCA0MD   = 0x81;
      0012C7 75 D9 81         [24] 5178 	mov	_PCA0MD,#0x81
                           0012CA  5179 	C$lab6.c$666$1$220 ==.
                                   5180 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:666: PCA0CPM0 = 0xC2;    //CCM0 in 16-bit compare mode FOR STEERING
      0012CA 75 DA C2         [24] 5181 	mov	_PCA0CPM0,#0xC2
                           0012CD  5182 	C$lab6.c$667$1$220 ==.
                                   5183 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:667: PCA0CPM1 = 0xC2;
      0012CD 75 DB C2         [24] 5184 	mov	_PCA0CPM1,#0xC2
                           0012D0  5185 	C$lab6.c$668$1$220 ==.
                                   5186 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:668: PCA0CPM2 = 0xC2;    //CCM2 in 16-bit compare mode FOR MOTOR
      0012D0 75 DC C2         [24] 5187 	mov	_PCA0CPM2,#0xC2
                           0012D3  5188 	C$lab6.c$669$1$220 ==.
                                   5189 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:669: PCA0CPM3 = 0XC2;
      0012D3 75 DD C2         [24] 5190 	mov	_PCA0CPM3,#0xC2
                           0012D6  5191 	C$lab6.c$670$1$220 ==.
                                   5192 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:670: PCA0CN 	 = 0x40;    //Enable PCA counter
      0012D6 75 D8 40         [24] 5193 	mov	_PCA0CN,#0x40
                           0012D9  5194 	C$lab6.c$671$1$220 ==.
                                   5195 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:671: EIE1    |= 0x08;    //Enable PCA interrupt
      0012D9 43 E6 08         [24] 5196 	orl	_EIE1,#0x08
                           0012DC  5197 	C$lab6.c$672$1$220 ==.
                                   5198 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:672: EA       = 1   ;    //Enable global interrupts
      0012DC D2 AF            [12] 5199 	setb	_EA
                           0012DE  5200 	C$lab6.c$673$1$220 ==.
                           0012DE  5201 	XG$PCA_Init$0$0 ==.
      0012DE 22               [24] 5202 	ret
                                   5203 ;------------------------------------------------------------
                                   5204 ;Allocation info for local variables in function 'XBR0_Init'
                                   5205 ;------------------------------------------------------------
                           0012DF  5206 	G$XBR0_Init$0$0 ==.
                           0012DF  5207 	C$lab6.c$676$1$220 ==.
                                   5208 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:676: void XBR0_Init(void)
                                   5209 ;	-----------------------------------------
                                   5210 ;	 function XBR0_Init
                                   5211 ;	-----------------------------------------
      0012DF                       5212 _XBR0_Init:
                           0012DF  5213 	C$lab6.c$678$1$222 ==.
                                   5214 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:678: XBR0 = 0x27;
      0012DF 75 E1 27         [24] 5215 	mov	_XBR0,#0x27
                           0012E2  5216 	C$lab6.c$679$1$222 ==.
                           0012E2  5217 	XG$XBR0_Init$0$0 ==.
      0012E2 22               [24] 5218 	ret
                                   5219 ;------------------------------------------------------------
                                   5220 ;Allocation info for local variables in function 'SMB_Init'
                                   5221 ;------------------------------------------------------------
                           0012E3  5222 	G$SMB_Init$0$0 ==.
                           0012E3  5223 	C$lab6.c$681$1$222 ==.
                                   5224 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:681: void SMB_Init(void)
                                   5225 ;	-----------------------------------------
                                   5226 ;	 function SMB_Init
                                   5227 ;	-----------------------------------------
      0012E3                       5228 _SMB_Init:
                           0012E3  5229 	C$lab6.c$683$1$224 ==.
                                   5230 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:683: SMB0CR =0x93;
      0012E3 75 CF 93         [24] 5231 	mov	_SMB0CR,#0x93
                           0012E6  5232 	C$lab6.c$684$1$224 ==.
                                   5233 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:684: ENSMB =1;
      0012E6 D2 C6            [12] 5234 	setb	_ENSMB
                           0012E8  5235 	C$lab6.c$685$1$224 ==.
                           0012E8  5236 	XG$SMB_Init$0$0 ==.
      0012E8 22               [24] 5237 	ret
                                   5238 ;------------------------------------------------------------
                                   5239 ;Allocation info for local variables in function 'ADC_Init'
                                   5240 ;------------------------------------------------------------
                           0012E9  5241 	G$ADC_Init$0$0 ==.
                           0012E9  5242 	C$lab6.c$687$1$224 ==.
                                   5243 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:687: void ADC_Init(void)								/////SETS ADC 
                                   5244 ;	-----------------------------------------
                                   5245 ;	 function ADC_Init
                                   5246 ;	-----------------------------------------
      0012E9                       5247 _ADC_Init:
                           0012E9  5248 	C$lab6.c$689$1$226 ==.
                                   5249 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:689: REF0CN = 0x03;
      0012E9 75 D1 03         [24] 5250 	mov	_REF0CN,#0x03
                           0012EC  5251 	C$lab6.c$690$1$226 ==.
                                   5252 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:690: ADC1CN = 0x80;
      0012EC 75 AA 80         [24] 5253 	mov	_ADC1CN,#0x80
                           0012EF  5254 	C$lab6.c$691$1$226 ==.
                                   5255 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:691: ADC1CF |= 0x01;
      0012EF 43 AB 01         [24] 5256 	orl	_ADC1CF,#0x01
                           0012F2  5257 	C$lab6.c$692$1$226 ==.
                           0012F2  5258 	XG$ADC_Init$0$0 ==.
      0012F2 22               [24] 5259 	ret
                                   5260 ;------------------------------------------------------------
                                   5261 ;Allocation info for local variables in function 'PCA_ISR'
                                   5262 ;------------------------------------------------------------
                           0012F3  5263 	G$PCA_ISR$0$0 ==.
                           0012F3  5264 	C$lab6.c$694$1$226 ==.
                                   5265 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:694: void PCA_ISR ( void ) __interrupt 9
                                   5266 ;	-----------------------------------------
                                   5267 ;	 function PCA_ISR
                                   5268 ;	-----------------------------------------
      0012F3                       5269 _PCA_ISR:
      0012F3 C0 E0            [24] 5270 	push	acc
      0012F5 C0 D0            [24] 5271 	push	psw
                           0012F7  5272 	C$lab6.c$697$1$228 ==.
                                   5273 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:697: if (CF)
                           0012F7  5274 	C$lab6.c$699$2$229 ==.
                                   5275 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:699: CF =0;
      0012F7 10 DF 02         [24] 5276 	jbc	_CF,00108$
      0012FA 80 0E            [24] 5277 	sjmp	00102$
      0012FC                       5278 00108$:
                           0012FC  5279 	C$lab6.c$700$2$229 ==.
                                   5280 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:700: PCA0 = PCA_START;
      0012FC 75 E9 00         [24] 5281 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0012FF 75 F9 70         [24] 5282 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           001302  5283 	C$lab6.c$701$2$229 ==.
                                   5284 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:701: count++;
      001302 05*10            [12] 5285 	inc	_count
      001304 E4               [12] 5286 	clr	a
      001305 B5*10 02         [24] 5287 	cjne	a,_count,00109$
      001308 05*11            [12] 5288 	inc	(_count + 1)
      00130A                       5289 00109$:
      00130A                       5290 00102$:
                           00130A  5291 	C$lab6.c$706$1$228 ==.
                                   5292 ;	C:\Users\Michael\Documents\GitHub\LITEC\lab6\lab6.c:706: PCA0CN &= 0xC0;
      00130A 53 D8 C0         [24] 5293 	anl	_PCA0CN,#0xC0
      00130D D0 D0            [24] 5294 	pop	psw
      00130F D0 E0            [24] 5295 	pop	acc
                           001311  5296 	C$lab6.c$707$1$228 ==.
                           001311  5297 	XG$PCA_ISR$0$0 ==.
      001311 32               [24] 5298 	reti
                                   5299 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   5300 ;	eliminated unneeded push/pop dpl
                                   5301 ;	eliminated unneeded push/pop dph
                                   5302 ;	eliminated unneeded push/pop b
                                   5303 	.area CSEG    (CODE)
                                   5304 	.area CONST   (CODE)
                           000000  5305 Flab6$__str_0$0$0 == .
      000000                       5306 ___str_0:
      000000 0A                    5307 	.db 0x0A
      000001 54 79 70 65 20 64 69  5308 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    5309 	.db 0x00
                           000016  5310 Flab6$__str_1$0$0 == .
      000016                       5311 ___str_1:
      000016 20 20 20 20 20 25 63  5312 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    5313 	.db 0x00
                           000026  5314 Flab6$__str_2$0$0 == .
      000026                       5315 ___str_2:
      000026 25 63                 5316 	.ascii "%c"
      000028 00                    5317 	.db 0x00
                           000029  5318 Flab6$__str_3$0$0 == .
      000029                       5319 ___str_3:
      000029 50 6C 65 61 73 65 20  5320 	.ascii "Please enter a kp value:"
             65 6E 74 65 72 20 61
             20 6B 70 20 76 61 6C
             75 65 3A
      000041 0A                    5321 	.db 0x0A
      000042 20                    5322 	.ascii " "
      000043 00                    5323 	.db 0x00
                           000044  5324 Flab6$__str_4$0$0 == .
      000044                       5325 ___str_4:
      000044 50 6C 65 61 73 65 20  5326 	.ascii "Please enter a kd value:"
             65 6E 74 65 72 20 61
             20 6B 64 20 76 61 6C
             75 65 3A
      00005C 0A                    5327 	.db 0x0A
      00005D 20                    5328 	.ascii " "
      00005E 00                    5329 	.db 0x00
                           00005F  5330 Flab6$__str_5$0$0 == .
      00005F                       5331 ___str_5:
      00005F 25 64                 5332 	.ascii "%d"
      000061 00                    5333 	.db 0x00
                           000062  5334 Flab6$__str_6$0$0 == .
      000062                       5335 ___str_6:
      000062 43 61 6C 69 62 72 61  5336 	.ascii "Calibration:"
             74 69 6F 6E 3A
      00006E 0A                    5337 	.db 0x0A
      00006F 48 65 6C 6C 6F 20 77  5338 	.ascii "Hello world!"
             6F 72 6C 64 21
      00007B 0A                    5339 	.db 0x0A
      00007C 30 31 32 5F 33 34 35  5340 	.ascii "012_345_678:"
             5F 36 37 38 3A
      000088 0A                    5341 	.db 0x0A
      000089 61 62 63 20 64 65 66  5342 	.ascii "abc def ghij"
             20 67 68 69 6A
      000095 00                    5343 	.db 0x00
                           000096  5344 Flab6$__str_7$0$0 == .
      000096                       5345 ___str_7:
      000096 0D                    5346 	.db 0x0D
      000097 0A                    5347 	.db 0x0A
      000098 54 68 65 20 64 65 73  5348 	.ascii "The desired direction is: %d"
             69 72 65 64 20 64 69
             72 65 63 74 69 6F 6E
             20 69 73 3A 20 25 64
      0000B4 00                    5349 	.db 0x00
                           0000B5  5350 Flab6$__str_8$0$0 == .
      0000B5                       5351 ___str_8:
      0000B5 52 75 64 64 65 72 20  5352 	.ascii "Rudder Calibration"
             43 61 6C 69 62 72 61
             74 69 6F 6E
      0000C7 00                    5353 	.db 0x00
                           0000C8  5354 Flab6$__str_9$0$0 == .
      0000C8                       5355 ___str_9:
      0000C8 67 6F 20 6C 65 66 74  5356 	.ascii "go left: press 1"
             3A 20 70 72 65 73 73
             20 31
      0000D8 0A                    5357 	.db 0x0A
      0000D9 20 67 6F 20 72 69 67  5358 	.ascii " go right: press 2"
             68 74 3A 20 70 72 65
             73 73 20 32
      0000EB 0A                    5359 	.db 0x0A
      0000EC 50 72 65 73 73 20 2A  5360 	.ascii "Press * for next screen"
             20 66 6F 72 20 6E 65
             78 74 20 73 63 72 65
             65 6E
      000103 00                    5361 	.db 0x00
                           000104  5362 Flab6$__str_10$0$0 == .
      000104                       5363 ___str_10:
      000104 0A                    5364 	.db 0x0A
      000105 20 63 6F 6E 66 69 72  5365 	.ascii " confirm: press 3"
             6D 3A 20 70 72 65 73
             73 20 33
      000116 0A                    5366 	.db 0x0A
      000117 20 70 72 65 73 73 20  5367 	.ascii " press * to begin"
             2A 20 74 6F 20 62 65
             67 69 6E
      000128 00                    5368 	.db 0x00
                           000129  5369 Flab6$__str_11$0$0 == .
      000129                       5370 ___str_11:
      000129 0D                    5371 	.db 0x0D
      00012A 0A                    5372 	.db 0x0A
      00012B 20 25 75              5373 	.ascii " %u"
      00012E 00                    5374 	.db 0x00
                           00012F  5375 Flab6$__str_12$0$0 == .
      00012F                       5376 ___str_12:
      00012F 4E 6F 77 20 63 61 6C  5377 	.ascii "Now calibrating Min_PW"
             69 62 72 61 74 69 6E
             67 20 4D 69 6E 5F 50
             57
      000145 0A                    5378 	.db 0x0A
      000146 00                    5379 	.db 0x00
                           000147  5380 Flab6$__str_13$0$0 == .
      000147                       5381 ___str_13:
      000147 4E 6F 77 20 63 61 6C  5382 	.ascii "Now calibrating Cen_PW"
             69 62 72 61 74 69 6E
             67 20 43 65 6E 5F 50
             57
      00015D 00                    5383 	.db 0x00
                           00015E  5384 Flab6$__str_14$0$0 == .
      00015E                       5385 ___str_14:
      00015E 4E 6F 77 20 63 61 6C  5386 	.ascii "Now calibrating Max_PW"
             69 62 72 61 74 69 6E
             67 20 4D 61 78 5F 50
             57
      000174 00                    5387 	.db 0x00
                           000175  5388 Flab6$__str_15$0$0 == .
      000175                       5389 ___str_15:
      000175 41 6E 67 6C 65 20 43  5390 	.ascii "Angle Calibration"
             61 6C 69 62 72 61 74
             69 6F 6E
      000186 00                    5391 	.db 0x00
                           000187  5392 Flab6$__str_16$0$0 == .
      000187                       5393 ___str_16:
      000187 4E 6F 77 20 63 61 6C  5394 	.ascii "Now calibrating Min_PW UP ANGLE"
             69 62 72 61 74 69 6E
             67 20 4D 69 6E 5F 50
             57 20 55 50 20 41 4E
             47 4C 45
      0001A6 00                    5395 	.db 0x00
                           0001A7  5396 Flab6$__str_17$0$0 == .
      0001A7                       5397 ___str_17:
      0001A7 4E 6F 77 20 63 61 6C  5398 	.ascii "Now calibrating Max_PW DOWN ANGLE"
             69 62 72 61 74 69 6E
             67 20 4D 61 78 5F 50
             57 20 44 4F 57 4E 20
             41 4E 47 4C 45
      0001C8 00                    5399 	.db 0x00
                           0001C9  5400 Flab6$__str_18$0$0 == .
      0001C9                       5401 ___str_18:
      0001C9 54 68 72 75 73 74 20  5402 	.ascii "Thrust Calibration"
             43 61 6C 69 62 72 61
             74 69 6F 6E
      0001DB 00                    5403 	.db 0x00
                           0001DC  5404 Flab6$__str_19$0$0 == .
      0001DC                       5405 ___str_19:
      0001DC 4E 6F 77 20 63 61 6C  5406 	.ascii "Now calibrating Min_PW"
             69 62 72 61 74 69 6E
             67 20 4D 69 6E 5F 50
             57
      0001F2 00                    5407 	.db 0x00
                           0001F3  5408 Flab6$__str_20$0$0 == .
      0001F3                       5409 ___str_20:
      0001F3 0D                    5410 	.db 0x0D
      0001F4 0A                    5411 	.db 0x0A
      0001F5 25 64                 5412 	.ascii "%d"
      0001F7 09                    5413 	.db 0x09
      0001F8 25 75                 5414 	.ascii "%u"
      0001FA 09                    5415 	.db 0x09
      0001FB 25 75                 5416 	.ascii "%u"
      0001FD 09                    5417 	.db 0x09
      0001FE 25 75                 5418 	.ascii "%u"
      000200 09                    5419 	.db 0x09
      000201 25 64                 5420 	.ascii "%d"
      000203 00                    5421 	.db 0x00
                                   5422 	.area XINIT   (CODE)
                           000000  5423 Flab6$__xinit_error$0$0 == .
      000000                       5424 __xinit__error:
      000000 00 00                 5425 	.byte #0x00,#0x00	;  0
                           000002  5426 Flab6$__xinit_old_error$0$0 == .
      000002                       5427 __xinit__old_error:
      000002 00 00                 5428 	.byte #0x00,#0x00	;  0
                                   5429 	.area CABS    (ABS,CODE)
